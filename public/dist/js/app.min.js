!function(e){function r(e,r,o){return 4===arguments.length?t.apply(this,arguments):void n(e,{declarative:!0,deps:r,declare:o})}function t(e,r,t,o){n(e,{declarative:!1,deps:r,executingRequire:t,execute:o})}function n(e,r){r.name=e,e in v||(v[e]=r),r.normalizedDeps=r.deps}function o(e,r){if(r[e.groupIndex]=r[e.groupIndex]||[],-1==g.call(r[e.groupIndex],e)){r[e.groupIndex].push(e);for(var t=0,n=e.normalizedDeps.length;n>t;t++){var a=e.normalizedDeps[t],u=v[a];if(u&&!u.evaluated){var d=e.groupIndex+(u.declarative!=e.declarative);if(void 0===u.groupIndex||u.groupIndex<d){if(void 0!==u.groupIndex&&(r[u.groupIndex].splice(g.call(r[u.groupIndex],u),1),0==r[u.groupIndex].length))throw new TypeError("Mixed dependency cycle detected");u.groupIndex=d}o(u,r)}}}}function a(e){var r=v[e];r.groupIndex=0;var t=[];o(r,t);for(var n=!!r.declarative==t.length%2,a=t.length-1;a>=0;a--){for(var u=t[a],i=0;i<u.length;i++){var s=u[i];n?d(s):l(s)}n=!n}}function u(e){return y[e]||(y[e]={name:e,dependencies:[],exports:{},importers:[]})}function d(r){if(!r.module){var t=r.module=u(r.name),n=r.module.exports,o=r.declare.call(e,function(e,r){if(t.locked=!0,"object"==typeof e)for(var o in e)n[o]=e[o];else n[e]=r;for(var a=0,u=t.importers.length;u>a;a++){var d=t.importers[a];if(!d.locked)for(var i=0;i<d.dependencies.length;++i)d.dependencies[i]===t&&d.setters[i](n)}return t.locked=!1,r},{id:r.name});t.setters=o.setters,t.execute=o.execute;for(var a=0,i=r.normalizedDeps.length;i>a;a++){var l,s=r.normalizedDeps[a],c=v[s],f=y[s];f?l=f.exports:c&&!c.declarative?l=c.esModule:c?(d(c),f=c.module,l=f.exports):l=p(s),f&&f.importers?(f.importers.push(t),t.dependencies.push(f)):t.dependencies.push(null),t.setters[a]&&t.setters[a](l)}}}function i(e){var r,t=v[e];if(t)t.declarative?f(e,[]):t.evaluated||l(t),r=t.module.exports;else if(r=p(e),!r)throw new Error("Unable to load dependency "+e+".");return(!t||t.declarative)&&r&&r.__useDefault?r["default"]:r}function l(r){if(!r.module){var t={},n=r.module={exports:t,id:r.name};if(!r.executingRequire)for(var o=0,a=r.normalizedDeps.length;a>o;o++){var u=r.normalizedDeps[o],d=v[u];d&&l(d)}r.evaluated=!0;var c=r.execute.call(e,function(e){for(var t=0,n=r.deps.length;n>t;t++)if(r.deps[t]==e)return i(r.normalizedDeps[t]);throw new TypeError("Module "+e+" not declared as a dependency.")},t,n);void 0!==typeof c&&(n.exports=c),t=n.exports,t&&t.__esModule?r.esModule=t:r.esModule=s(t)}}function s(r){var t={};if(("object"==typeof r||"function"==typeof r)&&r!==e)if(m)for(var n in r)"default"!==n&&c(t,r,n);else{var o=r&&r.hasOwnProperty;for(var n in r)"default"===n||o&&!r.hasOwnProperty(n)||(t[n]=r[n])}return t["default"]=r,x(t,"__useDefault",{value:!0}),t}function c(e,r,t){try{var n;(n=Object.getOwnPropertyDescriptor(r,t))&&x(e,t,n)}catch(o){return e[t]=r[t],!1}}function f(r,t){var n=v[r];if(n&&!n.evaluated&&n.declarative){t.push(r);for(var o=0,a=n.normalizedDeps.length;a>o;o++){var u=n.normalizedDeps[o];-1==g.call(t,u)&&(v[u]?f(u,t):p(u))}n.evaluated||(n.evaluated=!0,n.module.execute.call(e))}}function p(e){if(I[e])return I[e];if("@node/"==e.substr(0,6))return I[e]=s(D(e.substr(6)));var r=v[e];if(!r)throw"Module "+e+" not present.";return a(e),f(e,[]),v[e]=void 0,r.declarative&&x(r.module.exports,"__esModule",{value:!0}),I[e]=r.declarative?r.module.exports:r.esModule}var v={},g=Array.prototype.indexOf||function(e){for(var r=0,t=this.length;t>r;r++)if(this[r]===e)return r;return-1},m=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(h){m=!1}var x;!function(){try{Object.defineProperty({},"a",{})&&(x=Object.defineProperty)}catch(e){x=function(e,r,t){try{e[r]=t.value||t.get.call(e)}catch(n){}}}}();var y={},D="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,I={"@empty":{}};return function(e,n,o,a){return function(u){u(function(u){for(var d={_nodeRequire:D,register:r,registerDynamic:t,get:p,set:function(e,r){I[e]=r},newModule:function(e){return e}},i=0;i<n.length;i++)(function(e,r){r&&r.__esModule?I[e]=r:I[e]=s(r)})(n[i],arguments[i]);a(d);var l=p(e[0]);if(e.length>1)for(var i=1;i<e.length;i++)p(e[i]);return o?l["default"]:l})}}}("undefined"!=typeof self?self:global)

(["1"], [], true, function($__System) {
var require = this.require, exports = this.exports, module = this.module;
!function(e){function n(e,n){e=e.replace(l,"");var r=e.match(u),t=(r[1].split(",")[n]||"require").replace(s,""),i=p[t]||(p[t]=new RegExp(a+t+f,"g"));i.lastIndex=0;for(var o,c=[];o=i.exec(e);)c.push(o[2]||o[3]);return c}function r(e,n,t,o){if("object"==typeof e&&!(e instanceof Array))return r.apply(null,Array.prototype.splice.call(arguments,1,arguments.length-1));if("string"==typeof e&&"function"==typeof n&&(e=[e]),!(e instanceof Array)){if("string"==typeof e){var l=i.get(e);return l.__useDefault?l["default"]:l}throw new TypeError("Invalid require")}for(var a=[],f=0;f<e.length;f++)a.push(i["import"](e[f],o));Promise.all(a).then(function(e){n&&n.apply(null,e)},t)}function t(t,l,a){"string"!=typeof t&&(a=l,l=t,t=null),l instanceof Array||(a=l,l=["require","exports","module"].splice(0,a.length)),"function"!=typeof a&&(a=function(e){return function(){return e}}(a)),void 0===l[l.length-1]&&l.pop();var f,u,s;-1!=(f=o.call(l,"require"))&&(l.splice(f,1),t||(l=l.concat(n(a.toString(),f)))),-1!=(u=o.call(l,"exports"))&&l.splice(u,1),-1!=(s=o.call(l,"module"))&&l.splice(s,1);var p={name:t,deps:l,execute:function(n,t,o){for(var p=[],c=0;c<l.length;c++)p.push(n(l[c]));o.uri=o.id,o.config=function(){},-1!=s&&p.splice(s,0,o),-1!=u&&p.splice(u,0,t),-1!=f&&p.splice(f,0,function(e,t,l){return"string"==typeof e&&"function"!=typeof t?n(e):r.call(i,e,t,l,o.id)});var d=a.apply(-1==u?e:t,p);return"undefined"==typeof d&&o&&(d=o.exports),"undefined"!=typeof d?d:void 0}};if(t)c.anonDefine||c.isBundle?c.anonDefine&&c.anonDefine.name&&(c.anonDefine=null):c.anonDefine=p,c.isBundle=!0,i.registerDynamic(p.name,p.deps,!1,p.execute);else{if(c.anonDefine&&!c.anonDefine.name)throw new Error("Multiple anonymous defines in module "+t);c.anonDefine=p}}var i=$__System,o=Array.prototype.indexOf||function(e){for(var n=0,r=this.length;r>n;n++)if(this[n]===e)return n;return-1},l=/(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/gm,a="(?:^|[^$_a-zA-Z\\xA0-\\uFFFF.])",f="\\s*\\(\\s*(\"([^\"]+)\"|'([^']+)')\\s*\\)",u=/\(([^\)]*)\)/,s=/^\s+|\s+$/g,p={};t.amd={};var c={isBundle:!1,anonDefine:null};i.amdDefine=t,i.amdRequire=r}("undefined"!=typeof self?self:global);
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) : typeof define === 'function' && define.amd ? define("2", ["exports", "3"], factory) : (factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}), global.ng.core));
}(this, function(exports, _angular_core) {
  'use strict';
  var globalScope;
  if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
      globalScope = self;
    } else {
      globalScope = global;
    }
  } else {
    globalScope = window;
  }
  var global$1 = globalScope;
  global$1.assert = function assert(condition) {};
  function isPresent(obj) {
    return obj !== undefined && obj !== null;
  }
  function isBlank(obj) {
    return obj === undefined || obj === null;
  }
  function isString(obj) {
    return typeof obj === 'string';
  }
  function isStringMap(obj) {
    return typeof obj === 'object' && obj !== null;
  }
  var STRING_MAP_PROTO = Object.getPrototypeOf({});
  function isStrictStringMap(obj) {
    return isStringMap(obj) && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token === undefined || token === null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return token.overriddenName;
    }
    if (token.name) {
      return token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);
  }
  var StringWrapper = (function() {
    function StringWrapper() {}
    StringWrapper.fromCharCode = function(code) {
      return String.fromCharCode(code);
    };
    StringWrapper.charCodeAt = function(s, index) {
      return s.charCodeAt(index);
    };
    StringWrapper.split = function(s, regExp) {
      return s.split(regExp);
    };
    StringWrapper.equals = function(s, s2) {
      return s === s2;
    };
    StringWrapper.stripLeft = function(s, charVal) {
      if (s && s.length) {
        var pos = 0;
        for (var i = 0; i < s.length; i++) {
          if (s[i] != charVal)
            break;
          pos++;
        }
        s = s.substring(pos);
      }
      return s;
    };
    StringWrapper.stripRight = function(s, charVal) {
      if (s && s.length) {
        var pos = s.length;
        for (var i = s.length - 1; i >= 0; i--) {
          if (s[i] != charVal)
            break;
          pos--;
        }
        s = s.substring(0, pos);
      }
      return s;
    };
    StringWrapper.replace = function(s, from, replace) {
      return s.replace(from, replace);
    };
    StringWrapper.replaceAll = function(s, from, replace) {
      return s.replace(from, replace);
    };
    StringWrapper.slice = function(s, from, to) {
      if (from === void 0) {
        from = 0;
      }
      if (to === void 0) {
        to = null;
      }
      return s.slice(from, to === null ? undefined : to);
    };
    StringWrapper.replaceAllMapped = function(s, from, cb) {
      return s.replace(from, function() {
        var matches = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          matches[_i - 0] = arguments[_i];
        }
        matches.splice(-2, 2);
        return cb(matches);
      });
    };
    StringWrapper.contains = function(s, substr) {
      return s.indexOf(substr) != -1;
    };
    StringWrapper.compare = function(a, b) {
      if (a < b) {
        return -1;
      } else if (a > b) {
        return 1;
      } else {
        return 0;
      }
    };
    return StringWrapper;
  }());
  var StringJoiner = (function() {
    function StringJoiner(parts) {
      if (parts === void 0) {
        parts = [];
      }
      this.parts = parts;
    }
    StringJoiner.prototype.add = function(part) {
      this.parts.push(part);
    };
    StringJoiner.prototype.toString = function() {
      return this.parts.join('');
    };
    return StringJoiner;
  }());
  var NumberWrapper = (function() {
    function NumberWrapper() {}
    NumberWrapper.toFixed = function(n, fractionDigits) {
      return n.toFixed(fractionDigits);
    };
    NumberWrapper.equal = function(a, b) {
      return a === b;
    };
    NumberWrapper.parseIntAutoRadix = function(text) {
      var result = parseInt(text);
      if (isNaN(result)) {
        throw new Error('Invalid integer literal when parsing ' + text);
      }
      return result;
    };
    NumberWrapper.parseInt = function(text, radix) {
      if (radix == 10) {
        if (/^(\-|\+)?[0-9]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else if (radix == 16) {
        if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else {
        var result = parseInt(text, radix);
        if (!isNaN(result)) {
          return result;
        }
      }
      throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
    };
    NumberWrapper.parseFloat = function(text) {
      return parseFloat(text);
    };
    Object.defineProperty(NumberWrapper, "NaN", {
      get: function() {
        return NaN;
      },
      enumerable: true,
      configurable: true
    });
    NumberWrapper.isNumeric = function(value) {
      return !isNaN(value - parseFloat(value));
    };
    NumberWrapper.isNaN = function(value) {
      return isNaN(value);
    };
    NumberWrapper.isInteger = function(value) {
      return Number.isInteger(value);
    };
    return NumberWrapper;
  }());
  function normalizeBlank(obj) {
    return isBlank(obj) ? null : obj;
  }
  function normalizeBool(obj) {
    return isBlank(obj) ? false : obj;
  }
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
  }
  function evalExpression(sourceUrl, expr, declarations, vars) {
    var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
    var fnArgNames = [];
    var fnArgValues = [];
    for (var argName in vars) {
      fnArgNames.push(argName);
      fnArgValues.push(vars[argName]);
    }
    return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function escapeRegExp(s) {
    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }
  var TextAst = (function() {
    function TextAst(value, ngContentIndex, sourceSpan) {
      this.value = value;
      this.ngContentIndex = ngContentIndex;
      this.sourceSpan = sourceSpan;
    }
    TextAst.prototype.visit = function(visitor, context) {
      return visitor.visitText(this, context);
    };
    return TextAst;
  }());
  var BoundTextAst = (function() {
    function BoundTextAst(value, ngContentIndex, sourceSpan) {
      this.value = value;
      this.ngContentIndex = ngContentIndex;
      this.sourceSpan = sourceSpan;
    }
    BoundTextAst.prototype.visit = function(visitor, context) {
      return visitor.visitBoundText(this, context);
    };
    return BoundTextAst;
  }());
  var AttrAst = (function() {
    function AttrAst(name, value, sourceSpan) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    AttrAst.prototype.visit = function(visitor, context) {
      return visitor.visitAttr(this, context);
    };
    return AttrAst;
  }());
  var BoundElementPropertyAst = (function() {
    function BoundElementPropertyAst(name, type, securityContext, value, unit, sourceSpan) {
      this.name = name;
      this.type = type;
      this.securityContext = securityContext;
      this.value = value;
      this.unit = unit;
      this.sourceSpan = sourceSpan;
    }
    BoundElementPropertyAst.prototype.visit = function(visitor, context) {
      return visitor.visitElementProperty(this, context);
    };
    return BoundElementPropertyAst;
  }());
  var BoundEventAst = (function() {
    function BoundEventAst(name, target, handler, sourceSpan) {
      this.name = name;
      this.target = target;
      this.handler = handler;
      this.sourceSpan = sourceSpan;
    }
    BoundEventAst.prototype.visit = function(visitor, context) {
      return visitor.visitEvent(this, context);
    };
    Object.defineProperty(BoundEventAst.prototype, "fullName", {
      get: function() {
        if (isPresent(this.target)) {
          return this.target + ":" + this.name;
        } else {
          return this.name;
        }
      },
      enumerable: true,
      configurable: true
    });
    return BoundEventAst;
  }());
  var ReferenceAst = (function() {
    function ReferenceAst(name, value, sourceSpan) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    ReferenceAst.prototype.visit = function(visitor, context) {
      return visitor.visitReference(this, context);
    };
    return ReferenceAst;
  }());
  var VariableAst = (function() {
    function VariableAst(name, value, sourceSpan) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    VariableAst.prototype.visit = function(visitor, context) {
      return visitor.visitVariable(this, context);
    };
    return VariableAst;
  }());
  var ElementAst = (function() {
    function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
      this.name = name;
      this.attrs = attrs;
      this.inputs = inputs;
      this.outputs = outputs;
      this.references = references;
      this.directives = directives;
      this.providers = providers;
      this.hasViewContainer = hasViewContainer;
      this.children = children;
      this.ngContentIndex = ngContentIndex;
      this.sourceSpan = sourceSpan;
    }
    ElementAst.prototype.visit = function(visitor, context) {
      return visitor.visitElement(this, context);
    };
    return ElementAst;
  }());
  var EmbeddedTemplateAst = (function() {
    function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
      this.attrs = attrs;
      this.outputs = outputs;
      this.references = references;
      this.variables = variables;
      this.directives = directives;
      this.providers = providers;
      this.hasViewContainer = hasViewContainer;
      this.children = children;
      this.ngContentIndex = ngContentIndex;
      this.sourceSpan = sourceSpan;
    }
    EmbeddedTemplateAst.prototype.visit = function(visitor, context) {
      return visitor.visitEmbeddedTemplate(this, context);
    };
    return EmbeddedTemplateAst;
  }());
  var BoundDirectivePropertyAst = (function() {
    function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
      this.directiveName = directiveName;
      this.templateName = templateName;
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    BoundDirectivePropertyAst.prototype.visit = function(visitor, context) {
      return visitor.visitDirectiveProperty(this, context);
    };
    return BoundDirectivePropertyAst;
  }());
  var DirectiveAst = (function() {
    function DirectiveAst(directive, inputs, hostProperties, hostEvents, sourceSpan) {
      this.directive = directive;
      this.inputs = inputs;
      this.hostProperties = hostProperties;
      this.hostEvents = hostEvents;
      this.sourceSpan = sourceSpan;
    }
    DirectiveAst.prototype.visit = function(visitor, context) {
      return visitor.visitDirective(this, context);
    };
    return DirectiveAst;
  }());
  var ProviderAst = (function() {
    function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
      this.token = token;
      this.multiProvider = multiProvider;
      this.eager = eager;
      this.providers = providers;
      this.providerType = providerType;
      this.lifecycleHooks = lifecycleHooks;
      this.sourceSpan = sourceSpan;
    }
    ProviderAst.prototype.visit = function(visitor, context) {
      return null;
    };
    return ProviderAst;
  }());
  exports.ProviderAstType;
  (function(ProviderAstType) {
    ProviderAstType[ProviderAstType["PublicService"] = 0] = "PublicService";
    ProviderAstType[ProviderAstType["PrivateService"] = 1] = "PrivateService";
    ProviderAstType[ProviderAstType["Component"] = 2] = "Component";
    ProviderAstType[ProviderAstType["Directive"] = 3] = "Directive";
    ProviderAstType[ProviderAstType["Builtin"] = 4] = "Builtin";
  })(exports.ProviderAstType || (exports.ProviderAstType = {}));
  var NgContentAst = (function() {
    function NgContentAst(index, ngContentIndex, sourceSpan) {
      this.index = index;
      this.ngContentIndex = ngContentIndex;
      this.sourceSpan = sourceSpan;
    }
    NgContentAst.prototype.visit = function(visitor, context) {
      return visitor.visitNgContent(this, context);
    };
    return NgContentAst;
  }());
  exports.PropertyBindingType;
  (function(PropertyBindingType) {
    PropertyBindingType[PropertyBindingType["Property"] = 0] = "Property";
    PropertyBindingType[PropertyBindingType["Attribute"] = 1] = "Attribute";
    PropertyBindingType[PropertyBindingType["Class"] = 2] = "Class";
    PropertyBindingType[PropertyBindingType["Style"] = 3] = "Style";
    PropertyBindingType[PropertyBindingType["Animation"] = 4] = "Animation";
  })(exports.PropertyBindingType || (exports.PropertyBindingType = {}));
  function templateVisitAll(visitor, asts, context) {
    if (context === void 0) {
      context = null;
    }
    var result = [];
    asts.forEach(function(ast) {
      var astResult = ast.visit(visitor, context);
      if (isPresent(astResult)) {
        result.push(astResult);
      }
    });
    return result;
  }
  var Map$1 = global$1.Map;
  var Set$1 = global$1.Set;
  var createMapFromPairs = (function() {
    try {
      if (new Map$1([[1, 2]]).size === 1) {
        return function createMapFromPairs(pairs) {
          return new Map$1(pairs);
        };
      }
    } catch (e) {}
    return function createMapAndPopulateFromPairs(pairs) {
      var map = new Map$1();
      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i];
        map.set(pair[0], pair[1]);
      }
      return map;
    };
  })();
  var createMapFromMap = (function() {
    try {
      if (new Map$1(new Map$1())) {
        return function createMapFromMap(m) {
          return new Map$1(m);
        };
      }
    } catch (e) {}
    return function createMapAndPopulateFromMap(m) {
      var map = new Map$1();
      m.forEach(function(v, k) {
        map.set(k, v);
      });
      return map;
    };
  })();
  var _clearValues = (function() {
    if ((new Map$1()).keys().next) {
      return function _clearValues(m) {
        var keyIterator = m.keys();
        var k;
        while (!((k = keyIterator.next()).done)) {
          m.set(k.value, null);
        }
      };
    } else {
      return function _clearValuesWithForeEach(m) {
        m.forEach(function(v, k) {
          m.set(k, null);
        });
      };
    }
  })();
  var _arrayFromMap = (function() {
    try {
      if ((new Map$1()).values().next) {
        return function createArrayFromMap(m, getValues) {
          return getValues ? Array.from(m.values()) : Array.from(m.keys());
        };
      }
    } catch (e) {}
    return function createArrayFromMapWithForeach(m, getValues) {
      var res = ListWrapper.createFixedSize(m.size),
          i = 0;
      m.forEach(function(v, k) {
        res[i] = getValues ? v : k;
        i++;
      });
      return res;
    };
  })();
  var MapWrapper = (function() {
    function MapWrapper() {}
    MapWrapper.clone = function(m) {
      return createMapFromMap(m);
    };
    MapWrapper.createFromStringMap = function(stringMap) {
      var result = new Map$1();
      for (var prop in stringMap) {
        result.set(prop, stringMap[prop]);
      }
      return result;
    };
    MapWrapper.toStringMap = function(m) {
      var r = {};
      m.forEach(function(v, k) {
        return r[k] = v;
      });
      return r;
    };
    MapWrapper.createFromPairs = function(pairs) {
      return createMapFromPairs(pairs);
    };
    MapWrapper.clearValues = function(m) {
      _clearValues(m);
    };
    MapWrapper.iterable = function(m) {
      return m;
    };
    MapWrapper.keys = function(m) {
      return _arrayFromMap(m, false);
    };
    MapWrapper.values = function(m) {
      return _arrayFromMap(m, true);
    };
    return MapWrapper;
  }());
  var StringMapWrapper = (function() {
    function StringMapWrapper() {}
    StringMapWrapper.create = function() {
      return {};
    };
    StringMapWrapper.contains = function(map, key) {
      return map.hasOwnProperty(key);
    };
    StringMapWrapper.get = function(map, key) {
      return map.hasOwnProperty(key) ? map[key] : undefined;
    };
    StringMapWrapper.set = function(map, key, value) {
      map[key] = value;
    };
    StringMapWrapper.keys = function(map) {
      return Object.keys(map);
    };
    StringMapWrapper.values = function(map) {
      return Object.keys(map).map(function(k) {
        return map[k];
      });
    };
    StringMapWrapper.isEmpty = function(map) {
      for (var prop in map) {
        return false;
      }
      return true;
    };
    StringMapWrapper.delete = function(map, key) {
      delete map[key];
    };
    StringMapWrapper.forEach = function(map, callback) {
      for (var _i = 0,
          _a = Object.keys(map); _i < _a.length; _i++) {
        var k = _a[_i];
        callback(map[k], k);
      }
    };
    StringMapWrapper.merge = function(m1, m2) {
      var m = {};
      for (var _i = 0,
          _a = Object.keys(m1); _i < _a.length; _i++) {
        var k = _a[_i];
        m[k] = m1[k];
      }
      for (var _b = 0,
          _c = Object.keys(m2); _b < _c.length; _b++) {
        var k = _c[_b];
        m[k] = m2[k];
      }
      return m;
    };
    StringMapWrapper.equals = function(m1, m2) {
      var k1 = Object.keys(m1);
      var k2 = Object.keys(m2);
      if (k1.length != k2.length) {
        return false;
      }
      var key;
      for (var i = 0; i < k1.length; i++) {
        key = k1[i];
        if (m1[key] !== m2[key]) {
          return false;
        }
      }
      return true;
    };
    return StringMapWrapper;
  }());
  var ListWrapper = (function() {
    function ListWrapper() {}
    ListWrapper.createFixedSize = function(size) {
      return new Array(size);
    };
    ListWrapper.createGrowableSize = function(size) {
      return new Array(size);
    };
    ListWrapper.clone = function(array) {
      return array.slice(0);
    };
    ListWrapper.forEachWithIndex = function(array, fn) {
      for (var i = 0; i < array.length; i++) {
        fn(array[i], i);
      }
    };
    ListWrapper.first = function(array) {
      if (!array)
        return null;
      return array[0];
    };
    ListWrapper.last = function(array) {
      if (!array || array.length == 0)
        return null;
      return array[array.length - 1];
    };
    ListWrapper.indexOf = function(array, value, startIndex) {
      if (startIndex === void 0) {
        startIndex = 0;
      }
      return array.indexOf(value, startIndex);
    };
    ListWrapper.contains = function(list, el) {
      return list.indexOf(el) !== -1;
    };
    ListWrapper.reversed = function(array) {
      var a = ListWrapper.clone(array);
      return a.reverse();
    };
    ListWrapper.concat = function(a, b) {
      return a.concat(b);
    };
    ListWrapper.insert = function(list, index, value) {
      list.splice(index, 0, value);
    };
    ListWrapper.removeAt = function(list, index) {
      var res = list[index];
      list.splice(index, 1);
      return res;
    };
    ListWrapper.removeAll = function(list, items) {
      for (var i = 0; i < items.length; ++i) {
        var index = list.indexOf(items[i]);
        list.splice(index, 1);
      }
    };
    ListWrapper.remove = function(list, el) {
      var index = list.indexOf(el);
      if (index > -1) {
        list.splice(index, 1);
        return true;
      }
      return false;
    };
    ListWrapper.clear = function(list) {
      list.length = 0;
    };
    ListWrapper.isEmpty = function(list) {
      return list.length == 0;
    };
    ListWrapper.fill = function(list, value, start, end) {
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = null;
      }
      list.fill(value, start, end === null ? list.length : end);
    };
    ListWrapper.equals = function(a, b) {
      if (a.length != b.length)
        return false;
      for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
          return false;
      }
      return true;
    };
    ListWrapper.slice = function(l, from, to) {
      if (from === void 0) {
        from = 0;
      }
      if (to === void 0) {
        to = null;
      }
      return l.slice(from, to === null ? undefined : to);
    };
    ListWrapper.splice = function(l, from, length) {
      return l.splice(from, length);
    };
    ListWrapper.sort = function(l, compareFn) {
      if (isPresent(compareFn)) {
        l.sort(compareFn);
      } else {
        l.sort();
      }
    };
    ListWrapper.toString = function(l) {
      return l.toString();
    };
    ListWrapper.toJSON = function(l) {
      return JSON.stringify(l);
    };
    ListWrapper.maximum = function(list, predicate) {
      if (list.length == 0) {
        return null;
      }
      var solution = null;
      var maxValue = -Infinity;
      for (var index = 0; index < list.length; index++) {
        var candidate = list[index];
        if (isBlank(candidate)) {
          continue;
        }
        var candidateValue = predicate(candidate);
        if (candidateValue > maxValue) {
          solution = candidate;
          maxValue = candidateValue;
        }
      }
      return solution;
    };
    ListWrapper.flatten = function(list) {
      var target = [];
      _flattenArray(list, target);
      return target;
    };
    ListWrapper.addAll = function(list, source) {
      for (var i = 0; i < source.length; i++) {
        list.push(source[i]);
      }
    };
    return ListWrapper;
  }());
  function _flattenArray(source, target) {
    if (isPresent(source)) {
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        if (isArray(item)) {
          _flattenArray(item, target);
        } else {
          target.push(item);
        }
      }
    }
    return target;
  }
  var createSetFromList = (function() {
    var test = new Set$1([1, 2, 3]);
    if (test.size === 3) {
      return function createSetFromList(lst) {
        return new Set$1(lst);
      };
    } else {
      return function createSetAndPopulateFromList(lst) {
        var res = new Set$1(lst);
        if (res.size !== lst.length) {
          for (var i = 0; i < lst.length; i++) {
            res.add(lst[i]);
          }
        }
        return res;
      };
    }
  })();
  var SetWrapper = (function() {
    function SetWrapper() {}
    SetWrapper.createFromList = function(lst) {
      return createSetFromList(lst);
    };
    SetWrapper.has = function(s, key) {
      return s.has(key);
    };
    SetWrapper.delete = function(m, k) {
      m.delete(k);
    };
    return SetWrapper;
  }());
  var _EMPTY_ATTR_VALUE = '';
  var _SELECTOR_REGEXP = new RegExp('(\\:not\\()|' + '([-\\w]+)|' + '(?:\\.([-\\w]+))|' + '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' + '(\\))|' + '(\\s*,\\s*)', 'g');
  var CssSelector = (function() {
    function CssSelector() {
      this.element = null;
      this.classNames = [];
      this.attrs = [];
      this.notSelectors = [];
    }
    CssSelector.parse = function(selector) {
      var results = [];
      var _addResult = function(res, cssSel) {
        if (cssSel.notSelectors.length > 0 && isBlank(cssSel.element) && ListWrapper.isEmpty(cssSel.classNames) && ListWrapper.isEmpty(cssSel.attrs)) {
          cssSel.element = '*';
        }
        res.push(cssSel);
      };
      var cssSelector = new CssSelector();
      var match;
      var current = cssSelector;
      var inNot = false;
      _SELECTOR_REGEXP.lastIndex = 0;
      while (isPresent(match = _SELECTOR_REGEXP.exec(selector))) {
        if (isPresent(match[1])) {
          if (inNot) {
            throw new Error('Nesting :not is not allowed in a selector');
          }
          inNot = true;
          current = new CssSelector();
          cssSelector.notSelectors.push(current);
        }
        if (isPresent(match[2])) {
          current.setElement(match[2]);
        }
        if (isPresent(match[3])) {
          current.addClassName(match[3]);
        }
        if (isPresent(match[4])) {
          current.addAttribute(match[4], match[5]);
        }
        if (isPresent(match[6])) {
          inNot = false;
          current = cssSelector;
        }
        if (isPresent(match[7])) {
          if (inNot) {
            throw new Error('Multiple selectors in :not are not supported');
          }
          _addResult(results, cssSelector);
          cssSelector = current = new CssSelector();
        }
      }
      _addResult(results, cssSelector);
      return results;
    };
    CssSelector.prototype.isElementSelector = function() {
      return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 && this.notSelectors.length === 0;
    };
    CssSelector.prototype.hasElementSelector = function() {
      return !!this.element;
    };
    CssSelector.prototype.setElement = function(element) {
      if (element === void 0) {
        element = null;
      }
      this.element = element;
    };
    CssSelector.prototype.getMatchingElementTemplate = function() {
      var tagName = isPresent(this.element) ? this.element : 'div';
      var classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
      var attrs = '';
      for (var i = 0; i < this.attrs.length; i += 2) {
        var attrName = this.attrs[i];
        var attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
        attrs += " " + attrName + attrValue;
      }
      return "<" + tagName + classAttr + attrs + "></" + tagName + ">";
    };
    CssSelector.prototype.addAttribute = function(name, value) {
      if (value === void 0) {
        value = _EMPTY_ATTR_VALUE;
      }
      this.attrs.push(name);
      if (isPresent(value)) {
        value = value.toLowerCase();
      } else {
        value = _EMPTY_ATTR_VALUE;
      }
      this.attrs.push(value);
    };
    CssSelector.prototype.addClassName = function(name) {
      this.classNames.push(name.toLowerCase());
    };
    CssSelector.prototype.toString = function() {
      var res = '';
      if (isPresent(this.element)) {
        res += this.element;
      }
      if (isPresent(this.classNames)) {
        for (var i = 0; i < this.classNames.length; i++) {
          res += '.' + this.classNames[i];
        }
      }
      if (isPresent(this.attrs)) {
        for (var i = 0; i < this.attrs.length; ) {
          var attrName = this.attrs[i++];
          var attrValue = this.attrs[i++];
          res += '[' + attrName;
          if (attrValue.length > 0) {
            res += '=' + attrValue;
          }
          res += ']';
        }
      }
      this.notSelectors.forEach(function(notSelector) {
        return res += ":not(" + notSelector + ")";
      });
      return res;
    };
    return CssSelector;
  }());
  var SelectorMatcher = (function() {
    function SelectorMatcher() {
      this._elementMap = new Map();
      this._elementPartialMap = new Map();
      this._classMap = new Map();
      this._classPartialMap = new Map();
      this._attrValueMap = new Map();
      this._attrValuePartialMap = new Map();
      this._listContexts = [];
    }
    SelectorMatcher.createNotMatcher = function(notSelectors) {
      var notMatcher = new SelectorMatcher();
      notMatcher.addSelectables(notSelectors, null);
      return notMatcher;
    };
    SelectorMatcher.prototype.addSelectables = function(cssSelectors, callbackCtxt) {
      var listContext = null;
      if (cssSelectors.length > 1) {
        listContext = new SelectorListContext(cssSelectors);
        this._listContexts.push(listContext);
      }
      for (var i = 0; i < cssSelectors.length; i++) {
        this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
      }
    };
    SelectorMatcher.prototype._addSelectable = function(cssSelector, callbackCtxt, listContext) {
      var matcher = this;
      var element = cssSelector.element;
      var classNames = cssSelector.classNames;
      var attrs = cssSelector.attrs;
      var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
      if (isPresent(element)) {
        var isTerminal = attrs.length === 0 && classNames.length === 0;
        if (isTerminal) {
          this._addTerminal(matcher._elementMap, element, selectable);
        } else {
          matcher = this._addPartial(matcher._elementPartialMap, element);
        }
      }
      if (isPresent(classNames)) {
        for (var index = 0; index < classNames.length; index++) {
          var isTerminal = attrs.length === 0 && index === classNames.length - 1;
          var className = classNames[index];
          if (isTerminal) {
            this._addTerminal(matcher._classMap, className, selectable);
          } else {
            matcher = this._addPartial(matcher._classPartialMap, className);
          }
        }
      }
      if (isPresent(attrs)) {
        for (var index = 0; index < attrs.length; ) {
          var isTerminal = index === attrs.length - 2;
          var attrName = attrs[index++];
          var attrValue = attrs[index++];
          if (isTerminal) {
            var terminalMap = matcher._attrValueMap;
            var terminalValuesMap = terminalMap.get(attrName);
            if (isBlank(terminalValuesMap)) {
              terminalValuesMap = new Map();
              terminalMap.set(attrName, terminalValuesMap);
            }
            this._addTerminal(terminalValuesMap, attrValue, selectable);
          } else {
            var parttialMap = matcher._attrValuePartialMap;
            var partialValuesMap = parttialMap.get(attrName);
            if (isBlank(partialValuesMap)) {
              partialValuesMap = new Map();
              parttialMap.set(attrName, partialValuesMap);
            }
            matcher = this._addPartial(partialValuesMap, attrValue);
          }
        }
      }
    };
    SelectorMatcher.prototype._addTerminal = function(map, name, selectable) {
      var terminalList = map.get(name);
      if (isBlank(terminalList)) {
        terminalList = [];
        map.set(name, terminalList);
      }
      terminalList.push(selectable);
    };
    SelectorMatcher.prototype._addPartial = function(map, name) {
      var matcher = map.get(name);
      if (isBlank(matcher)) {
        matcher = new SelectorMatcher();
        map.set(name, matcher);
      }
      return matcher;
    };
    SelectorMatcher.prototype.match = function(cssSelector, matchedCallback) {
      var result = false;
      var element = cssSelector.element;
      var classNames = cssSelector.classNames;
      var attrs = cssSelector.attrs;
      for (var i = 0; i < this._listContexts.length; i++) {
        this._listContexts[i].alreadyMatched = false;
      }
      result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
      result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;
      if (isPresent(classNames)) {
        for (var index = 0; index < classNames.length; index++) {
          var className = classNames[index];
          result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
          result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
        }
      }
      if (isPresent(attrs)) {
        for (var index = 0; index < attrs.length; ) {
          var attrName = attrs[index++];
          var attrValue = attrs[index++];
          var terminalValuesMap = this._attrValueMap.get(attrName);
          if (!StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
            result = this._matchTerminal(terminalValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result;
          }
          result = this._matchTerminal(terminalValuesMap, attrValue, cssSelector, matchedCallback) || result;
          var partialValuesMap = this._attrValuePartialMap.get(attrName);
          if (!StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
            result = this._matchPartial(partialValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result;
          }
          result = this._matchPartial(partialValuesMap, attrValue, cssSelector, matchedCallback) || result;
        }
      }
      return result;
    };
    SelectorMatcher.prototype._matchTerminal = function(map, name, cssSelector, matchedCallback) {
      if (isBlank(map) || isBlank(name)) {
        return false;
      }
      var selectables = map.get(name);
      var starSelectables = map.get('*');
      if (isPresent(starSelectables)) {
        selectables = selectables.concat(starSelectables);
      }
      if (isBlank(selectables)) {
        return false;
      }
      var selectable;
      var result = false;
      for (var index = 0; index < selectables.length; index++) {
        selectable = selectables[index];
        result = selectable.finalize(cssSelector, matchedCallback) || result;
      }
      return result;
    };
    SelectorMatcher.prototype._matchPartial = function(map, name, cssSelector, matchedCallback) {
      if (isBlank(map) || isBlank(name)) {
        return false;
      }
      var nestedSelector = map.get(name);
      if (isBlank(nestedSelector)) {
        return false;
      }
      return nestedSelector.match(cssSelector, matchedCallback);
    };
    return SelectorMatcher;
  }());
  var SelectorListContext = (function() {
    function SelectorListContext(selectors) {
      this.selectors = selectors;
      this.alreadyMatched = false;
    }
    return SelectorListContext;
  }());
  var SelectorContext = (function() {
    function SelectorContext(selector, cbContext, listContext) {
      this.selector = selector;
      this.cbContext = cbContext;
      this.listContext = listContext;
      this.notSelectors = selector.notSelectors;
    }
    SelectorContext.prototype.finalize = function(cssSelector, callback) {
      var result = true;
      if (this.notSelectors.length > 0 && (isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
        var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
        result = !notMatcher.match(cssSelector, null);
      }
      if (result && isPresent(callback) && (isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
        if (isPresent(this.listContext)) {
          this.listContext.alreadyMatched = true;
        }
        callback(this.selector, this.cbContext);
      }
      return result;
    };
    return SelectorContext;
  }());
  var __extends$2 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var TypeModifier;
  (function(TypeModifier) {
    TypeModifier[TypeModifier["Const"] = 0] = "Const";
  })(TypeModifier || (TypeModifier = {}));
  var Type$1 = (function() {
    function Type(modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      this.modifiers = modifiers;
      if (isBlank(modifiers)) {
        this.modifiers = [];
      }
    }
    Type.prototype.hasModifier = function(modifier) {
      return this.modifiers.indexOf(modifier) !== -1;
    };
    return Type;
  }());
  var BuiltinTypeName;
  (function(BuiltinTypeName) {
    BuiltinTypeName[BuiltinTypeName["Dynamic"] = 0] = "Dynamic";
    BuiltinTypeName[BuiltinTypeName["Bool"] = 1] = "Bool";
    BuiltinTypeName[BuiltinTypeName["String"] = 2] = "String";
    BuiltinTypeName[BuiltinTypeName["Int"] = 3] = "Int";
    BuiltinTypeName[BuiltinTypeName["Number"] = 4] = "Number";
    BuiltinTypeName[BuiltinTypeName["Function"] = 5] = "Function";
  })(BuiltinTypeName || (BuiltinTypeName = {}));
  var BuiltinType = (function(_super) {
    __extends$2(BuiltinType, _super);
    function BuiltinType(name, modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.name = name;
    }
    BuiltinType.prototype.visitType = function(visitor, context) {
      return visitor.visitBuiltintType(this, context);
    };
    return BuiltinType;
  }(Type$1));
  var ExternalType = (function(_super) {
    __extends$2(ExternalType, _super);
    function ExternalType(value, typeParams, modifiers) {
      if (typeParams === void 0) {
        typeParams = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.value = value;
      this.typeParams = typeParams;
    }
    ExternalType.prototype.visitType = function(visitor, context) {
      return visitor.visitExternalType(this, context);
    };
    return ExternalType;
  }(Type$1));
  var ArrayType = (function(_super) {
    __extends$2(ArrayType, _super);
    function ArrayType(of, modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.of = of;
    }
    ArrayType.prototype.visitType = function(visitor, context) {
      return visitor.visitArrayType(this, context);
    };
    return ArrayType;
  }(Type$1));
  var MapType = (function(_super) {
    __extends$2(MapType, _super);
    function MapType(valueType, modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.valueType = valueType;
    }
    MapType.prototype.visitType = function(visitor, context) {
      return visitor.visitMapType(this, context);
    };
    return MapType;
  }(Type$1));
  var DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
  var BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
  var INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
  var NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
  var STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
  var FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
  var BinaryOperator;
  (function(BinaryOperator) {
    BinaryOperator[BinaryOperator["Equals"] = 0] = "Equals";
    BinaryOperator[BinaryOperator["NotEquals"] = 1] = "NotEquals";
    BinaryOperator[BinaryOperator["Identical"] = 2] = "Identical";
    BinaryOperator[BinaryOperator["NotIdentical"] = 3] = "NotIdentical";
    BinaryOperator[BinaryOperator["Minus"] = 4] = "Minus";
    BinaryOperator[BinaryOperator["Plus"] = 5] = "Plus";
    BinaryOperator[BinaryOperator["Divide"] = 6] = "Divide";
    BinaryOperator[BinaryOperator["Multiply"] = 7] = "Multiply";
    BinaryOperator[BinaryOperator["Modulo"] = 8] = "Modulo";
    BinaryOperator[BinaryOperator["And"] = 9] = "And";
    BinaryOperator[BinaryOperator["Or"] = 10] = "Or";
    BinaryOperator[BinaryOperator["Lower"] = 11] = "Lower";
    BinaryOperator[BinaryOperator["LowerEquals"] = 12] = "LowerEquals";
    BinaryOperator[BinaryOperator["Bigger"] = 13] = "Bigger";
    BinaryOperator[BinaryOperator["BiggerEquals"] = 14] = "BiggerEquals";
  })(BinaryOperator || (BinaryOperator = {}));
  var Expression = (function() {
    function Expression(type) {
      this.type = type;
    }
    Expression.prototype.prop = function(name) {
      return new ReadPropExpr(this, name);
    };
    Expression.prototype.key = function(index, type) {
      if (type === void 0) {
        type = null;
      }
      return new ReadKeyExpr(this, index, type);
    };
    Expression.prototype.callMethod = function(name, params) {
      return new InvokeMethodExpr(this, name, params);
    };
    Expression.prototype.callFn = function(params) {
      return new InvokeFunctionExpr(this, params);
    };
    Expression.prototype.instantiate = function(params, type) {
      if (type === void 0) {
        type = null;
      }
      return new InstantiateExpr(this, params, type);
    };
    Expression.prototype.conditional = function(trueCase, falseCase) {
      if (falseCase === void 0) {
        falseCase = null;
      }
      return new ConditionalExpr(this, trueCase, falseCase);
    };
    Expression.prototype.equals = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);
    };
    Expression.prototype.notEquals = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);
    };
    Expression.prototype.identical = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);
    };
    Expression.prototype.notIdentical = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);
    };
    Expression.prototype.minus = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);
    };
    Expression.prototype.plus = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);
    };
    Expression.prototype.divide = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);
    };
    Expression.prototype.multiply = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);
    };
    Expression.prototype.modulo = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);
    };
    Expression.prototype.and = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);
    };
    Expression.prototype.or = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);
    };
    Expression.prototype.lower = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);
    };
    Expression.prototype.lowerEquals = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);
    };
    Expression.prototype.bigger = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);
    };
    Expression.prototype.biggerEquals = function(rhs) {
      return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);
    };
    Expression.prototype.isBlank = function() {
      return this.equals(NULL_EXPR);
    };
    Expression.prototype.cast = function(type) {
      return new CastExpr(this, type);
    };
    Expression.prototype.toStmt = function() {
      return new ExpressionStatement(this);
    };
    return Expression;
  }());
  var BuiltinVar;
  (function(BuiltinVar) {
    BuiltinVar[BuiltinVar["This"] = 0] = "This";
    BuiltinVar[BuiltinVar["Super"] = 1] = "Super";
    BuiltinVar[BuiltinVar["CatchError"] = 2] = "CatchError";
    BuiltinVar[BuiltinVar["CatchStack"] = 3] = "CatchStack";
  })(BuiltinVar || (BuiltinVar = {}));
  var ReadVarExpr = (function(_super) {
    __extends$2(ReadVarExpr, _super);
    function ReadVarExpr(name, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      if (isString(name)) {
        this.name = name;
        this.builtin = null;
      } else {
        this.name = null;
        this.builtin = name;
      }
    }
    ReadVarExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitReadVarExpr(this, context);
    };
    ReadVarExpr.prototype.set = function(value) {
      return new WriteVarExpr(this.name, value);
    };
    return ReadVarExpr;
  }(Expression));
  var WriteVarExpr = (function(_super) {
    __extends$2(WriteVarExpr, _super);
    function WriteVarExpr(name, value, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, isPresent(type) ? type : value.type);
      this.name = name;
      this.value = value;
    }
    WriteVarExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitWriteVarExpr(this, context);
    };
    WriteVarExpr.prototype.toDeclStmt = function(type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      return new DeclareVarStmt(this.name, this.value, type, modifiers);
    };
    return WriteVarExpr;
  }(Expression));
  var WriteKeyExpr = (function(_super) {
    __extends$2(WriteKeyExpr, _super);
    function WriteKeyExpr(receiver, index, value, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, isPresent(type) ? type : value.type);
      this.receiver = receiver;
      this.index = index;
      this.value = value;
    }
    WriteKeyExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitWriteKeyExpr(this, context);
    };
    return WriteKeyExpr;
  }(Expression));
  var WritePropExpr = (function(_super) {
    __extends$2(WritePropExpr, _super);
    function WritePropExpr(receiver, name, value, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, isPresent(type) ? type : value.type);
      this.receiver = receiver;
      this.name = name;
      this.value = value;
    }
    WritePropExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitWritePropExpr(this, context);
    };
    return WritePropExpr;
  }(Expression));
  var BuiltinMethod;
  (function(BuiltinMethod) {
    BuiltinMethod[BuiltinMethod["ConcatArray"] = 0] = "ConcatArray";
    BuiltinMethod[BuiltinMethod["SubscribeObservable"] = 1] = "SubscribeObservable";
    BuiltinMethod[BuiltinMethod["Bind"] = 2] = "Bind";
  })(BuiltinMethod || (BuiltinMethod = {}));
  var InvokeMethodExpr = (function(_super) {
    __extends$2(InvokeMethodExpr, _super);
    function InvokeMethodExpr(receiver, method, args, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.receiver = receiver;
      this.args = args;
      if (isString(method)) {
        this.name = method;
        this.builtin = null;
      } else {
        this.name = null;
        this.builtin = method;
      }
    }
    InvokeMethodExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitInvokeMethodExpr(this, context);
    };
    return InvokeMethodExpr;
  }(Expression));
  var InvokeFunctionExpr = (function(_super) {
    __extends$2(InvokeFunctionExpr, _super);
    function InvokeFunctionExpr(fn, args, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.fn = fn;
      this.args = args;
    }
    InvokeFunctionExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitInvokeFunctionExpr(this, context);
    };
    return InvokeFunctionExpr;
  }(Expression));
  var InstantiateExpr = (function(_super) {
    __extends$2(InstantiateExpr, _super);
    function InstantiateExpr(classExpr, args, type) {
      _super.call(this, type);
      this.classExpr = classExpr;
      this.args = args;
    }
    InstantiateExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitInstantiateExpr(this, context);
    };
    return InstantiateExpr;
  }(Expression));
  var LiteralExpr = (function(_super) {
    __extends$2(LiteralExpr, _super);
    function LiteralExpr(value, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.value = value;
    }
    LiteralExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitLiteralExpr(this, context);
    };
    return LiteralExpr;
  }(Expression));
  var ExternalExpr = (function(_super) {
    __extends$2(ExternalExpr, _super);
    function ExternalExpr(value, type, typeParams) {
      if (type === void 0) {
        type = null;
      }
      if (typeParams === void 0) {
        typeParams = null;
      }
      _super.call(this, type);
      this.value = value;
      this.typeParams = typeParams;
    }
    ExternalExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitExternalExpr(this, context);
    };
    return ExternalExpr;
  }(Expression));
  var ConditionalExpr = (function(_super) {
    __extends$2(ConditionalExpr, _super);
    function ConditionalExpr(condition, trueCase, falseCase, type) {
      if (falseCase === void 0) {
        falseCase = null;
      }
      if (type === void 0) {
        type = null;
      }
      _super.call(this, isPresent(type) ? type : trueCase.type);
      this.condition = condition;
      this.falseCase = falseCase;
      this.trueCase = trueCase;
    }
    ConditionalExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitConditionalExpr(this, context);
    };
    return ConditionalExpr;
  }(Expression));
  var NotExpr = (function(_super) {
    __extends$2(NotExpr, _super);
    function NotExpr(condition) {
      _super.call(this, BOOL_TYPE);
      this.condition = condition;
    }
    NotExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitNotExpr(this, context);
    };
    return NotExpr;
  }(Expression));
  var CastExpr = (function(_super) {
    __extends$2(CastExpr, _super);
    function CastExpr(value, type) {
      _super.call(this, type);
      this.value = value;
    }
    CastExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitCastExpr(this, context);
    };
    return CastExpr;
  }(Expression));
  var FnParam = (function() {
    function FnParam(name, type) {
      if (type === void 0) {
        type = null;
      }
      this.name = name;
      this.type = type;
    }
    return FnParam;
  }());
  var FunctionExpr = (function(_super) {
    __extends$2(FunctionExpr, _super);
    function FunctionExpr(params, statements, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.params = params;
      this.statements = statements;
    }
    FunctionExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitFunctionExpr(this, context);
    };
    FunctionExpr.prototype.toDeclStmt = function(name, modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);
    };
    return FunctionExpr;
  }(Expression));
  var BinaryOperatorExpr = (function(_super) {
    __extends$2(BinaryOperatorExpr, _super);
    function BinaryOperatorExpr(operator, lhs, rhs, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, isPresent(type) ? type : lhs.type);
      this.operator = operator;
      this.rhs = rhs;
      this.lhs = lhs;
    }
    BinaryOperatorExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitBinaryOperatorExpr(this, context);
    };
    return BinaryOperatorExpr;
  }(Expression));
  var ReadPropExpr = (function(_super) {
    __extends$2(ReadPropExpr, _super);
    function ReadPropExpr(receiver, name, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.receiver = receiver;
      this.name = name;
    }
    ReadPropExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitReadPropExpr(this, context);
    };
    ReadPropExpr.prototype.set = function(value) {
      return new WritePropExpr(this.receiver, this.name, value);
    };
    return ReadPropExpr;
  }(Expression));
  var ReadKeyExpr = (function(_super) {
    __extends$2(ReadKeyExpr, _super);
    function ReadKeyExpr(receiver, index, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.receiver = receiver;
      this.index = index;
    }
    ReadKeyExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitReadKeyExpr(this, context);
    };
    ReadKeyExpr.prototype.set = function(value) {
      return new WriteKeyExpr(this.receiver, this.index, value);
    };
    return ReadKeyExpr;
  }(Expression));
  var LiteralArrayExpr = (function(_super) {
    __extends$2(LiteralArrayExpr, _super);
    function LiteralArrayExpr(entries, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.entries = entries;
    }
    LiteralArrayExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitLiteralArrayExpr(this, context);
    };
    return LiteralArrayExpr;
  }(Expression));
  var LiteralMapExpr = (function(_super) {
    __extends$2(LiteralMapExpr, _super);
    function LiteralMapExpr(entries, type) {
      if (type === void 0) {
        type = null;
      }
      _super.call(this, type);
      this.entries = entries;
      this.valueType = null;
      if (isPresent(type)) {
        this.valueType = type.valueType;
      }
    }
    LiteralMapExpr.prototype.visitExpression = function(visitor, context) {
      return visitor.visitLiteralMapExpr(this, context);
    };
    return LiteralMapExpr;
  }(Expression));
  var THIS_EXPR = new ReadVarExpr(BuiltinVar.This);
  var SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);
  var CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);
  var CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);
  var NULL_EXPR = new LiteralExpr(null, null);
  var StmtModifier;
  (function(StmtModifier) {
    StmtModifier[StmtModifier["Final"] = 0] = "Final";
    StmtModifier[StmtModifier["Private"] = 1] = "Private";
  })(StmtModifier || (StmtModifier = {}));
  var Statement = (function() {
    function Statement(modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      this.modifiers = modifiers;
      if (isBlank(modifiers)) {
        this.modifiers = [];
      }
    }
    Statement.prototype.hasModifier = function(modifier) {
      return this.modifiers.indexOf(modifier) !== -1;
    };
    return Statement;
  }());
  var DeclareVarStmt = (function(_super) {
    __extends$2(DeclareVarStmt, _super);
    function DeclareVarStmt(name, value, type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.name = name;
      this.value = value;
      this.type = isPresent(type) ? type : value.type;
    }
    DeclareVarStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitDeclareVarStmt(this, context);
    };
    return DeclareVarStmt;
  }(Statement));
  var DeclareFunctionStmt = (function(_super) {
    __extends$2(DeclareFunctionStmt, _super);
    function DeclareFunctionStmt(name, params, statements, type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.name = name;
      this.params = params;
      this.statements = statements;
      this.type = type;
    }
    DeclareFunctionStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitDeclareFunctionStmt(this, context);
    };
    return DeclareFunctionStmt;
  }(Statement));
  var ExpressionStatement = (function(_super) {
    __extends$2(ExpressionStatement, _super);
    function ExpressionStatement(expr) {
      _super.call(this);
      this.expr = expr;
    }
    ExpressionStatement.prototype.visitStatement = function(visitor, context) {
      return visitor.visitExpressionStmt(this, context);
    };
    return ExpressionStatement;
  }(Statement));
  var ReturnStatement = (function(_super) {
    __extends$2(ReturnStatement, _super);
    function ReturnStatement(value) {
      _super.call(this);
      this.value = value;
    }
    ReturnStatement.prototype.visitStatement = function(visitor, context) {
      return visitor.visitReturnStmt(this, context);
    };
    return ReturnStatement;
  }(Statement));
  var AbstractClassPart = (function() {
    function AbstractClassPart(type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      this.type = type;
      this.modifiers = modifiers;
      if (isBlank(modifiers)) {
        this.modifiers = [];
      }
    }
    AbstractClassPart.prototype.hasModifier = function(modifier) {
      return this.modifiers.indexOf(modifier) !== -1;
    };
    return AbstractClassPart;
  }());
  var ClassField = (function(_super) {
    __extends$2(ClassField, _super);
    function ClassField(name, type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, type, modifiers);
      this.name = name;
    }
    return ClassField;
  }(AbstractClassPart));
  var ClassMethod = (function(_super) {
    __extends$2(ClassMethod, _super);
    function ClassMethod(name, params, body, type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, type, modifiers);
      this.name = name;
      this.params = params;
      this.body = body;
    }
    return ClassMethod;
  }(AbstractClassPart));
  var ClassGetter = (function(_super) {
    __extends$2(ClassGetter, _super);
    function ClassGetter(name, body, type, modifiers) {
      if (type === void 0) {
        type = null;
      }
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, type, modifiers);
      this.name = name;
      this.body = body;
    }
    return ClassGetter;
  }(AbstractClassPart));
  var ClassStmt = (function(_super) {
    __extends$2(ClassStmt, _super);
    function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers) {
      if (modifiers === void 0) {
        modifiers = null;
      }
      _super.call(this, modifiers);
      this.name = name;
      this.parent = parent;
      this.fields = fields;
      this.getters = getters;
      this.constructorMethod = constructorMethod;
      this.methods = methods;
    }
    ClassStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitDeclareClassStmt(this, context);
    };
    return ClassStmt;
  }(Statement));
  var IfStmt = (function(_super) {
    __extends$2(IfStmt, _super);
    function IfStmt(condition, trueCase, falseCase) {
      if (falseCase === void 0) {
        falseCase = [];
      }
      _super.call(this);
      this.condition = condition;
      this.trueCase = trueCase;
      this.falseCase = falseCase;
    }
    IfStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitIfStmt(this, context);
    };
    return IfStmt;
  }(Statement));
  var CommentStmt = (function(_super) {
    __extends$2(CommentStmt, _super);
    function CommentStmt(comment) {
      _super.call(this);
      this.comment = comment;
    }
    CommentStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitCommentStmt(this, context);
    };
    return CommentStmt;
  }(Statement));
  var TryCatchStmt = (function(_super) {
    __extends$2(TryCatchStmt, _super);
    function TryCatchStmt(bodyStmts, catchStmts) {
      _super.call(this);
      this.bodyStmts = bodyStmts;
      this.catchStmts = catchStmts;
    }
    TryCatchStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitTryCatchStmt(this, context);
    };
    return TryCatchStmt;
  }(Statement));
  var ThrowStmt = (function(_super) {
    __extends$2(ThrowStmt, _super);
    function ThrowStmt(error) {
      _super.call(this);
      this.error = error;
    }
    ThrowStmt.prototype.visitStatement = function(visitor, context) {
      return visitor.visitThrowStmt(this, context);
    };
    return ThrowStmt;
  }(Statement));
  var ExpressionTransformer = (function() {
    function ExpressionTransformer() {}
    ExpressionTransformer.prototype.visitReadVarExpr = function(ast, context) {
      return ast;
    };
    ExpressionTransformer.prototype.visitWriteVarExpr = function(expr, context) {
      return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitWriteKeyExpr = function(expr, context) {
      return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitWritePropExpr = function(expr, context) {
      return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitInvokeMethodExpr = function(ast, context) {
      var method = isPresent(ast.builtin) ? ast.builtin : ast.name;
      return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type);
    };
    ExpressionTransformer.prototype.visitInvokeFunctionExpr = function(ast, context) {
      return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
    };
    ExpressionTransformer.prototype.visitInstantiateExpr = function(ast, context) {
      return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
    };
    ExpressionTransformer.prototype.visitLiteralExpr = function(ast, context) {
      return ast;
    };
    ExpressionTransformer.prototype.visitExternalExpr = function(ast, context) {
      return ast;
    };
    ExpressionTransformer.prototype.visitConditionalExpr = function(ast, context) {
      return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitNotExpr = function(ast, context) {
      return new NotExpr(ast.condition.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitCastExpr = function(ast, context) {
      return new CastExpr(ast.value.visitExpression(this, context), context);
    };
    ExpressionTransformer.prototype.visitFunctionExpr = function(ast, context) {
      return ast;
    };
    ExpressionTransformer.prototype.visitBinaryOperatorExpr = function(ast, context) {
      return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type);
    };
    ExpressionTransformer.prototype.visitReadPropExpr = function(ast, context) {
      return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);
    };
    ExpressionTransformer.prototype.visitReadKeyExpr = function(ast, context) {
      return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type);
    };
    ExpressionTransformer.prototype.visitLiteralArrayExpr = function(ast, context) {
      return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));
    };
    ExpressionTransformer.prototype.visitLiteralMapExpr = function(ast, context) {
      var _this = this;
      return new LiteralMapExpr(ast.entries.map(function(entry) {
        return [entry[0], entry[1].visitExpression(_this, context)];
      }));
    };
    ExpressionTransformer.prototype.visitAllExpressions = function(exprs, context) {
      var _this = this;
      return exprs.map(function(expr) {
        return expr.visitExpression(_this, context);
      });
    };
    ExpressionTransformer.prototype.visitDeclareVarStmt = function(stmt, context) {
      return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers);
    };
    ExpressionTransformer.prototype.visitDeclareFunctionStmt = function(stmt, context) {
      return stmt;
    };
    ExpressionTransformer.prototype.visitExpressionStmt = function(stmt, context) {
      return new ExpressionStatement(stmt.expr.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitReturnStmt = function(stmt, context) {
      return new ReturnStatement(stmt.value.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitDeclareClassStmt = function(stmt, context) {
      return stmt;
    };
    ExpressionTransformer.prototype.visitIfStmt = function(stmt, context) {
      return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context));
    };
    ExpressionTransformer.prototype.visitTryCatchStmt = function(stmt, context) {
      return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context));
    };
    ExpressionTransformer.prototype.visitThrowStmt = function(stmt, context) {
      return new ThrowStmt(stmt.error.visitExpression(this, context));
    };
    ExpressionTransformer.prototype.visitCommentStmt = function(stmt, context) {
      return stmt;
    };
    ExpressionTransformer.prototype.visitAllStatements = function(stmts, context) {
      var _this = this;
      return stmts.map(function(stmt) {
        return stmt.visitStatement(_this, context);
      });
    };
    return ExpressionTransformer;
  }());
  var RecursiveExpressionVisitor = (function() {
    function RecursiveExpressionVisitor() {}
    RecursiveExpressionVisitor.prototype.visitReadVarExpr = function(ast, context) {
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function(expr, context) {
      expr.value.visitExpression(this, context);
      return expr;
    };
    RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function(expr, context) {
      expr.receiver.visitExpression(this, context);
      expr.index.visitExpression(this, context);
      expr.value.visitExpression(this, context);
      return expr;
    };
    RecursiveExpressionVisitor.prototype.visitWritePropExpr = function(expr, context) {
      expr.receiver.visitExpression(this, context);
      expr.value.visitExpression(this, context);
      return expr;
    };
    RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function(ast, context) {
      ast.receiver.visitExpression(this, context);
      this.visitAllExpressions(ast.args, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function(ast, context) {
      ast.fn.visitExpression(this, context);
      this.visitAllExpressions(ast.args, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function(ast, context) {
      ast.classExpr.visitExpression(this, context);
      this.visitAllExpressions(ast.args, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitLiteralExpr = function(ast, context) {
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitExternalExpr = function(ast, context) {
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitConditionalExpr = function(ast, context) {
      ast.condition.visitExpression(this, context);
      ast.trueCase.visitExpression(this, context);
      ast.falseCase.visitExpression(this, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitNotExpr = function(ast, context) {
      ast.condition.visitExpression(this, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitCastExpr = function(ast, context) {
      ast.value.visitExpression(this, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitFunctionExpr = function(ast, context) {
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function(ast, context) {
      ast.lhs.visitExpression(this, context);
      ast.rhs.visitExpression(this, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitReadPropExpr = function(ast, context) {
      ast.receiver.visitExpression(this, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function(ast, context) {
      ast.receiver.visitExpression(this, context);
      ast.index.visitExpression(this, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function(ast, context) {
      this.visitAllExpressions(ast.entries, context);
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function(ast, context) {
      var _this = this;
      ast.entries.forEach(function(entry) {
        return entry[1].visitExpression(_this, context);
      });
      return ast;
    };
    RecursiveExpressionVisitor.prototype.visitAllExpressions = function(exprs, context) {
      var _this = this;
      exprs.forEach(function(expr) {
        return expr.visitExpression(_this, context);
      });
    };
    RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function(stmt, context) {
      stmt.value.visitExpression(this, context);
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function(stmt, context) {
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitExpressionStmt = function(stmt, context) {
      stmt.expr.visitExpression(this, context);
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitReturnStmt = function(stmt, context) {
      stmt.value.visitExpression(this, context);
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function(stmt, context) {
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitIfStmt = function(stmt, context) {
      stmt.condition.visitExpression(this, context);
      this.visitAllStatements(stmt.trueCase, context);
      this.visitAllStatements(stmt.falseCase, context);
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function(stmt, context) {
      this.visitAllStatements(stmt.bodyStmts, context);
      this.visitAllStatements(stmt.catchStmts, context);
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitThrowStmt = function(stmt, context) {
      stmt.error.visitExpression(this, context);
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitCommentStmt = function(stmt, context) {
      return stmt;
    };
    RecursiveExpressionVisitor.prototype.visitAllStatements = function(stmts, context) {
      var _this = this;
      stmts.forEach(function(stmt) {
        return stmt.visitStatement(_this, context);
      });
    };
    return RecursiveExpressionVisitor;
  }());
  function replaceVarInExpression(varName, newValue, expression) {
    var transformer = new _ReplaceVariableTransformer(varName, newValue);
    return expression.visitExpression(transformer, null);
  }
  var _ReplaceVariableTransformer = (function(_super) {
    __extends$2(_ReplaceVariableTransformer, _super);
    function _ReplaceVariableTransformer(_varName, _newValue) {
      _super.call(this);
      this._varName = _varName;
      this._newValue = _newValue;
    }
    _ReplaceVariableTransformer.prototype.visitReadVarExpr = function(ast, context) {
      return ast.name == this._varName ? this._newValue : ast;
    };
    return _ReplaceVariableTransformer;
  }(ExpressionTransformer));
  function findReadVarNames(stmts) {
    var finder = new _VariableFinder();
    finder.visitAllStatements(stmts, null);
    return finder.varNames;
  }
  var _VariableFinder = (function(_super) {
    __extends$2(_VariableFinder, _super);
    function _VariableFinder() {
      _super.apply(this, arguments);
      this.varNames = new Set();
    }
    _VariableFinder.prototype.visitReadVarExpr = function(ast, context) {
      this.varNames.add(ast.name);
      return null;
    };
    return _VariableFinder;
  }(RecursiveExpressionVisitor));
  function variable(name, type) {
    if (type === void 0) {
      type = null;
    }
    return new ReadVarExpr(name, type);
  }
  function importExpr(id, typeParams) {
    if (typeParams === void 0) {
      typeParams = null;
    }
    return new ExternalExpr(id, null, typeParams);
  }
  function importType(id, typeParams, typeModifiers) {
    if (typeParams === void 0) {
      typeParams = null;
    }
    if (typeModifiers === void 0) {
      typeModifiers = null;
    }
    return isPresent(id) ? new ExternalType(id, typeParams, typeModifiers) : null;
  }
  function literalArr(values, type) {
    if (type === void 0) {
      type = null;
    }
    return new LiteralArrayExpr(values, type);
  }
  function literalMap(values, type) {
    if (type === void 0) {
      type = null;
    }
    return new LiteralMapExpr(values, type);
  }
  function not(expr) {
    return new NotExpr(expr);
  }
  function fn(params, body, type) {
    if (type === void 0) {
      type = null;
    }
    return new FunctionExpr(params, body, type);
  }
  function literal(value, type) {
    if (type === void 0) {
      type = null;
    }
    return new LiteralExpr(value, type);
  }
  var MODULE_SUFFIX = '';
  var CAMEL_CASE_REGEXP = /([A-Z])/g;
  function camelCaseToDashCase(input) {
    return StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function(m) {
      return '-' + m[1].toLowerCase();
    });
  }
  function splitAtColon(input, defaultValues) {
    var colonIndex = input.indexOf(':');
    if (colonIndex == -1)
      return defaultValues;
    return [input.slice(0, colonIndex).trim(), input.slice(colonIndex + 1).trim()];
  }
  function sanitizeIdentifier(name) {
    return StringWrapper.replaceAll(name, /\W/g, '_');
  }
  function visitValue(value, visitor, context) {
    if (isArray(value)) {
      return visitor.visitArray(value, context);
    } else if (isStrictStringMap(value)) {
      return visitor.visitStringMap(value, context);
    } else if (isBlank(value) || isPrimitive(value)) {
      return visitor.visitPrimitive(value, context);
    } else {
      return visitor.visitOther(value, context);
    }
  }
  var ValueTransformer = (function() {
    function ValueTransformer() {}
    ValueTransformer.prototype.visitArray = function(arr, context) {
      var _this = this;
      return arr.map(function(value) {
        return visitValue(value, _this, context);
      });
    };
    ValueTransformer.prototype.visitStringMap = function(map, context) {
      var _this = this;
      var result = {};
      StringMapWrapper.forEach(map, function(value, key) {
        result[key] = visitValue(value, _this, context);
      });
      return result;
    };
    ValueTransformer.prototype.visitPrimitive = function(value, context) {
      return value;
    };
    ValueTransformer.prototype.visitOther = function(value, context) {
      return value;
    };
    return ValueTransformer;
  }());
  function assetUrl(pkg, path, type) {
    if (path === void 0) {
      path = null;
    }
    if (type === void 0) {
      type = 'src';
    }
    if (path == null) {
      return "asset:@angular/lib/" + pkg + "/index";
    } else {
      return "asset:@angular/lib/" + pkg + "/src/" + path;
    }
  }
  function createDiTokenExpression(token) {
    if (isPresent(token.value)) {
      return literal(token.value);
    } else if (token.identifierIsInstance) {
      return importExpr(token.identifier).instantiate([], importType(token.identifier, [], [TypeModifier.Const]));
    } else {
      return importExpr(token.identifier);
    }
  }
  var SyncAsyncResult = (function() {
    function SyncAsyncResult(syncResult, asyncResult) {
      if (asyncResult === void 0) {
        asyncResult = null;
      }
      this.syncResult = syncResult;
      this.asyncResult = asyncResult;
      if (!asyncResult) {
        this.asyncResult = Promise.resolve(syncResult);
      }
    }
    return SyncAsyncResult;
  }());
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function unimplemented() {
    throw new Error('unimplemented');
  }
  var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
  var CompileMetadataWithIdentifier = (function() {
    function CompileMetadataWithIdentifier() {}
    Object.defineProperty(CompileMetadataWithIdentifier.prototype, "identifier", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    return CompileMetadataWithIdentifier;
  }());
  var CompileAnimationEntryMetadata = (function() {
    function CompileAnimationEntryMetadata(name, definitions) {
      if (name === void 0) {
        name = null;
      }
      if (definitions === void 0) {
        definitions = null;
      }
      this.name = name;
      this.definitions = definitions;
    }
    return CompileAnimationEntryMetadata;
  }());
  var CompileAnimationStateMetadata = (function() {
    function CompileAnimationStateMetadata() {}
    return CompileAnimationStateMetadata;
  }());
  var CompileAnimationStateDeclarationMetadata = (function(_super) {
    __extends$1(CompileAnimationStateDeclarationMetadata, _super);
    function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
      _super.call(this);
      this.stateNameExpr = stateNameExpr;
      this.styles = styles;
    }
    return CompileAnimationStateDeclarationMetadata;
  }(CompileAnimationStateMetadata));
  var CompileAnimationStateTransitionMetadata = (function(_super) {
    __extends$1(CompileAnimationStateTransitionMetadata, _super);
    function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
      _super.call(this);
      this.stateChangeExpr = stateChangeExpr;
      this.steps = steps;
    }
    return CompileAnimationStateTransitionMetadata;
  }(CompileAnimationStateMetadata));
  var CompileAnimationMetadata = (function() {
    function CompileAnimationMetadata() {}
    return CompileAnimationMetadata;
  }());
  var CompileAnimationKeyframesSequenceMetadata = (function(_super) {
    __extends$1(CompileAnimationKeyframesSequenceMetadata, _super);
    function CompileAnimationKeyframesSequenceMetadata(steps) {
      if (steps === void 0) {
        steps = [];
      }
      _super.call(this);
      this.steps = steps;
    }
    return CompileAnimationKeyframesSequenceMetadata;
  }(CompileAnimationMetadata));
  var CompileAnimationStyleMetadata = (function(_super) {
    __extends$1(CompileAnimationStyleMetadata, _super);
    function CompileAnimationStyleMetadata(offset, styles) {
      if (styles === void 0) {
        styles = null;
      }
      _super.call(this);
      this.offset = offset;
      this.styles = styles;
    }
    return CompileAnimationStyleMetadata;
  }(CompileAnimationMetadata));
  var CompileAnimationAnimateMetadata = (function(_super) {
    __extends$1(CompileAnimationAnimateMetadata, _super);
    function CompileAnimationAnimateMetadata(timings, styles) {
      if (timings === void 0) {
        timings = 0;
      }
      if (styles === void 0) {
        styles = null;
      }
      _super.call(this);
      this.timings = timings;
      this.styles = styles;
    }
    return CompileAnimationAnimateMetadata;
  }(CompileAnimationMetadata));
  var CompileAnimationWithStepsMetadata = (function(_super) {
    __extends$1(CompileAnimationWithStepsMetadata, _super);
    function CompileAnimationWithStepsMetadata(steps) {
      if (steps === void 0) {
        steps = null;
      }
      _super.call(this);
      this.steps = steps;
    }
    return CompileAnimationWithStepsMetadata;
  }(CompileAnimationMetadata));
  var CompileAnimationSequenceMetadata = (function(_super) {
    __extends$1(CompileAnimationSequenceMetadata, _super);
    function CompileAnimationSequenceMetadata(steps) {
      if (steps === void 0) {
        steps = null;
      }
      _super.call(this, steps);
    }
    return CompileAnimationSequenceMetadata;
  }(CompileAnimationWithStepsMetadata));
  var CompileAnimationGroupMetadata = (function(_super) {
    __extends$1(CompileAnimationGroupMetadata, _super);
    function CompileAnimationGroupMetadata(steps) {
      if (steps === void 0) {
        steps = null;
      }
      _super.call(this, steps);
    }
    return CompileAnimationGroupMetadata;
  }(CompileAnimationWithStepsMetadata));
  var CompileIdentifierMetadata = (function() {
    function CompileIdentifierMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          reference = _b.reference,
          name = _b.name,
          moduleUrl = _b.moduleUrl,
          prefix = _b.prefix,
          value = _b.value;
      this.reference = reference;
      this.name = name;
      this.prefix = prefix;
      this.moduleUrl = moduleUrl;
      this.value = value;
    }
    Object.defineProperty(CompileIdentifierMetadata.prototype, "identifier", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    return CompileIdentifierMetadata;
  }());
  var CompileDiDependencyMetadata = (function() {
    function CompileDiDependencyMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          isAttribute = _b.isAttribute,
          isSelf = _b.isSelf,
          isHost = _b.isHost,
          isSkipSelf = _b.isSkipSelf,
          isOptional = _b.isOptional,
          isValue = _b.isValue,
          query = _b.query,
          viewQuery = _b.viewQuery,
          token = _b.token,
          value = _b.value;
      this.isAttribute = normalizeBool(isAttribute);
      this.isSelf = normalizeBool(isSelf);
      this.isHost = normalizeBool(isHost);
      this.isSkipSelf = normalizeBool(isSkipSelf);
      this.isOptional = normalizeBool(isOptional);
      this.isValue = normalizeBool(isValue);
      this.query = query;
      this.viewQuery = viewQuery;
      this.token = token;
      this.value = value;
    }
    return CompileDiDependencyMetadata;
  }());
  var CompileProviderMetadata = (function() {
    function CompileProviderMetadata(_a) {
      var token = _a.token,
          useClass = _a.useClass,
          useValue = _a.useValue,
          useExisting = _a.useExisting,
          useFactory = _a.useFactory,
          deps = _a.deps,
          multi = _a.multi;
      this.token = token;
      this.useClass = useClass;
      this.useValue = useValue;
      this.useExisting = useExisting;
      this.useFactory = useFactory;
      this.deps = normalizeBlank(deps);
      this.multi = normalizeBool(multi);
    }
    return CompileProviderMetadata;
  }());
  var CompileFactoryMetadata = (function(_super) {
    __extends$1(CompileFactoryMetadata, _super);
    function CompileFactoryMetadata(_a) {
      var reference = _a.reference,
          name = _a.name,
          moduleUrl = _a.moduleUrl,
          prefix = _a.prefix,
          diDeps = _a.diDeps,
          value = _a.value;
      _super.call(this, {
        reference: reference,
        name: name,
        prefix: prefix,
        moduleUrl: moduleUrl,
        value: value
      });
      this.diDeps = _normalizeArray(diDeps);
    }
    return CompileFactoryMetadata;
  }(CompileIdentifierMetadata));
  var CompileTokenMetadata = (function() {
    function CompileTokenMetadata(_a) {
      var value = _a.value,
          identifier = _a.identifier,
          identifierIsInstance = _a.identifierIsInstance;
      this.value = value;
      this.identifier = identifier;
      this.identifierIsInstance = normalizeBool(identifierIsInstance);
    }
    Object.defineProperty(CompileTokenMetadata.prototype, "reference", {
      get: function() {
        if (isPresent(this.identifier)) {
          return this.identifier.reference;
        } else {
          return this.value;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CompileTokenMetadata.prototype, "name", {
      get: function() {
        return isPresent(this.value) ? sanitizeIdentifier(this.value) : this.identifier.name;
      },
      enumerable: true,
      configurable: true
    });
    return CompileTokenMetadata;
  }());
  var CompileTypeMetadata = (function(_super) {
    __extends$1(CompileTypeMetadata, _super);
    function CompileTypeMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          reference = _b.reference,
          name = _b.name,
          moduleUrl = _b.moduleUrl,
          prefix = _b.prefix,
          isHost = _b.isHost,
          value = _b.value,
          diDeps = _b.diDeps,
          lifecycleHooks = _b.lifecycleHooks;
      _super.call(this, {
        reference: reference,
        name: name,
        moduleUrl: moduleUrl,
        prefix: prefix,
        value: value
      });
      this.isHost = normalizeBool(isHost);
      this.diDeps = _normalizeArray(diDeps);
      this.lifecycleHooks = _normalizeArray(lifecycleHooks);
    }
    return CompileTypeMetadata;
  }(CompileIdentifierMetadata));
  var CompileQueryMetadata = (function() {
    function CompileQueryMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          selectors = _b.selectors,
          descendants = _b.descendants,
          first = _b.first,
          propertyName = _b.propertyName,
          read = _b.read;
      this.selectors = selectors;
      this.descendants = normalizeBool(descendants);
      this.first = normalizeBool(first);
      this.propertyName = propertyName;
      this.read = read;
    }
    return CompileQueryMetadata;
  }());
  var CompileStylesheetMetadata = (function() {
    function CompileStylesheetMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          moduleUrl = _b.moduleUrl,
          styles = _b.styles,
          styleUrls = _b.styleUrls;
      this.moduleUrl = moduleUrl;
      this.styles = _normalizeArray(styles);
      this.styleUrls = _normalizeArray(styleUrls);
    }
    return CompileStylesheetMetadata;
  }());
  var CompileTemplateMetadata = (function() {
    function CompileTemplateMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          encapsulation = _b.encapsulation,
          template = _b.template,
          templateUrl = _b.templateUrl,
          styles = _b.styles,
          styleUrls = _b.styleUrls,
          externalStylesheets = _b.externalStylesheets,
          animations = _b.animations,
          ngContentSelectors = _b.ngContentSelectors,
          interpolation = _b.interpolation;
      this.encapsulation = encapsulation;
      this.template = template;
      this.templateUrl = templateUrl;
      this.styles = _normalizeArray(styles);
      this.styleUrls = _normalizeArray(styleUrls);
      this.externalStylesheets = _normalizeArray(externalStylesheets);
      this.animations = isPresent(animations) ? ListWrapper.flatten(animations) : [];
      this.ngContentSelectors = isPresent(ngContentSelectors) ? ngContentSelectors : [];
      if (isPresent(interpolation) && interpolation.length != 2) {
        throw new Error("'interpolation' should have a start and an end symbol.");
      }
      this.interpolation = interpolation;
    }
    return CompileTemplateMetadata;
  }());
  var CompileDirectiveMetadata = (function() {
    function CompileDirectiveMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          type = _b.type,
          isComponent = _b.isComponent,
          selector = _b.selector,
          exportAs = _b.exportAs,
          changeDetection = _b.changeDetection,
          inputs = _b.inputs,
          outputs = _b.outputs,
          hostListeners = _b.hostListeners,
          hostProperties = _b.hostProperties,
          hostAttributes = _b.hostAttributes,
          providers = _b.providers,
          viewProviders = _b.viewProviders,
          queries = _b.queries,
          viewQueries = _b.viewQueries,
          entryComponents = _b.entryComponents,
          template = _b.template;
      this.type = type;
      this.isComponent = isComponent;
      this.selector = selector;
      this.exportAs = exportAs;
      this.changeDetection = changeDetection;
      this.inputs = inputs;
      this.outputs = outputs;
      this.hostListeners = hostListeners;
      this.hostProperties = hostProperties;
      this.hostAttributes = hostAttributes;
      this.providers = _normalizeArray(providers);
      this.viewProviders = _normalizeArray(viewProviders);
      this.queries = _normalizeArray(queries);
      this.viewQueries = _normalizeArray(viewQueries);
      this.entryComponents = _normalizeArray(entryComponents);
      this.template = template;
    }
    CompileDirectiveMetadata.create = function(_a) {
      var _b = _a === void 0 ? {} : _a,
          type = _b.type,
          isComponent = _b.isComponent,
          selector = _b.selector,
          exportAs = _b.exportAs,
          changeDetection = _b.changeDetection,
          inputs = _b.inputs,
          outputs = _b.outputs,
          host = _b.host,
          providers = _b.providers,
          viewProviders = _b.viewProviders,
          queries = _b.queries,
          viewQueries = _b.viewQueries,
          entryComponents = _b.entryComponents,
          template = _b.template;
      var hostListeners = {};
      var hostProperties = {};
      var hostAttributes = {};
      if (isPresent(host)) {
        StringMapWrapper.forEach(host, function(value, key) {
          var matches = key.match(HOST_REG_EXP);
          if (matches === null) {
            hostAttributes[key] = value;
          } else if (isPresent(matches[1])) {
            hostProperties[matches[1]] = value;
          } else if (isPresent(matches[2])) {
            hostListeners[matches[2]] = value;
          }
        });
      }
      var inputsMap = {};
      if (isPresent(inputs)) {
        inputs.forEach(function(bindConfig) {
          var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
          inputsMap[parts[0]] = parts[1];
        });
      }
      var outputsMap = {};
      if (isPresent(outputs)) {
        outputs.forEach(function(bindConfig) {
          var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
          outputsMap[parts[0]] = parts[1];
        });
      }
      return new CompileDirectiveMetadata({
        type: type,
        isComponent: normalizeBool(isComponent),
        selector: selector,
        exportAs: exportAs,
        changeDetection: changeDetection,
        inputs: inputsMap,
        outputs: outputsMap,
        hostListeners: hostListeners,
        hostProperties: hostProperties,
        hostAttributes: hostAttributes,
        providers: providers,
        viewProviders: viewProviders,
        queries: queries,
        viewQueries: viewQueries,
        entryComponents: entryComponents,
        template: template
      });
    };
    Object.defineProperty(CompileDirectiveMetadata.prototype, "identifier", {
      get: function() {
        return this.type;
      },
      enumerable: true,
      configurable: true
    });
    return CompileDirectiveMetadata;
  }());
  function createHostComponentMeta(compMeta) {
    var template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
    return CompileDirectiveMetadata.create({
      type: new CompileTypeMetadata({
        reference: Object,
        name: compMeta.type.name + "_Host",
        moduleUrl: compMeta.type.moduleUrl,
        isHost: true
      }),
      template: new CompileTemplateMetadata({
        encapsulation: _angular_core.ViewEncapsulation.None,
        template: template,
        templateUrl: '',
        styles: [],
        styleUrls: [],
        ngContentSelectors: [],
        animations: []
      }),
      changeDetection: _angular_core.ChangeDetectionStrategy.Default,
      inputs: [],
      outputs: [],
      host: {},
      isComponent: true,
      selector: '*',
      providers: [],
      viewProviders: [],
      queries: [],
      viewQueries: []
    });
  }
  var CompilePipeMetadata = (function() {
    function CompilePipeMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          type = _b.type,
          name = _b.name,
          pure = _b.pure;
      this.type = type;
      this.name = name;
      this.pure = normalizeBool(pure);
    }
    Object.defineProperty(CompilePipeMetadata.prototype, "identifier", {
      get: function() {
        return this.type;
      },
      enumerable: true,
      configurable: true
    });
    return CompilePipeMetadata;
  }());
  var CompileNgModuleMetadata = (function() {
    function CompileNgModuleMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          type = _b.type,
          providers = _b.providers,
          declaredDirectives = _b.declaredDirectives,
          exportedDirectives = _b.exportedDirectives,
          declaredPipes = _b.declaredPipes,
          exportedPipes = _b.exportedPipes,
          entryComponents = _b.entryComponents,
          bootstrapComponents = _b.bootstrapComponents,
          importedModules = _b.importedModules,
          exportedModules = _b.exportedModules,
          schemas = _b.schemas,
          transitiveModule = _b.transitiveModule;
      this.type = type;
      this.declaredDirectives = _normalizeArray(declaredDirectives);
      this.exportedDirectives = _normalizeArray(exportedDirectives);
      this.declaredPipes = _normalizeArray(declaredPipes);
      this.exportedPipes = _normalizeArray(exportedPipes);
      this.providers = _normalizeArray(providers);
      this.entryComponents = _normalizeArray(entryComponents);
      this.bootstrapComponents = _normalizeArray(bootstrapComponents);
      this.importedModules = _normalizeArray(importedModules);
      this.exportedModules = _normalizeArray(exportedModules);
      this.schemas = _normalizeArray(schemas);
      this.transitiveModule = transitiveModule;
    }
    Object.defineProperty(CompileNgModuleMetadata.prototype, "identifier", {
      get: function() {
        return this.type;
      },
      enumerable: true,
      configurable: true
    });
    return CompileNgModuleMetadata;
  }());
  var TransitiveCompileNgModuleMetadata = (function() {
    function TransitiveCompileNgModuleMetadata(modules, providers, entryComponents, directives, pipes) {
      var _this = this;
      this.modules = modules;
      this.providers = providers;
      this.entryComponents = entryComponents;
      this.directives = directives;
      this.pipes = pipes;
      this.directivesSet = new Set();
      this.pipesSet = new Set();
      directives.forEach(function(dir) {
        return _this.directivesSet.add(dir.type.reference);
      });
      pipes.forEach(function(pipe) {
        return _this.pipesSet.add(pipe.type.reference);
      });
    }
    return TransitiveCompileNgModuleMetadata;
  }());
  function removeIdentifierDuplicates(items) {
    var map = new Map();
    items.forEach(function(item) {
      if (!map.get(item.identifier.reference)) {
        map.set(item.identifier.reference, item);
      }
    });
    return MapWrapper.values(map);
  }
  function _normalizeArray(obj) {
    return isPresent(obj) ? obj : [];
  }
  function isStaticSymbol(value) {
    return isStringMap(value) && isPresent(value['name']) && isPresent(value['filePath']);
  }
  var ProviderMeta = (function() {
    function ProviderMeta(token, _a) {
      var useClass = _a.useClass,
          useValue = _a.useValue,
          useExisting = _a.useExisting,
          useFactory = _a.useFactory,
          deps = _a.deps,
          multi = _a.multi;
      this.token = token;
      this.useClass = useClass;
      this.useValue = useValue;
      this.useExisting = useExisting;
      this.useFactory = useFactory;
      this.dependencies = deps;
      this.multi = !!multi;
    }
    return ProviderMeta;
  }());
  var __extends$3 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ParserError = (function() {
    function ParserError(message, input, errLocation, ctxLocation) {
      this.input = input;
      this.errLocation = errLocation;
      this.ctxLocation = ctxLocation;
      this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
    }
    return ParserError;
  }());
  var ParseSpan = (function() {
    function ParseSpan(start, end) {
      this.start = start;
      this.end = end;
    }
    return ParseSpan;
  }());
  var AST = (function() {
    function AST(span) {
      this.span = span;
    }
    AST.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return null;
    };
    AST.prototype.toString = function() {
      return 'AST';
    };
    return AST;
  }());
  var Quote = (function(_super) {
    __extends$3(Quote, _super);
    function Quote(span, prefix, uninterpretedExpression, location) {
      _super.call(this, span);
      this.prefix = prefix;
      this.uninterpretedExpression = uninterpretedExpression;
      this.location = location;
    }
    Quote.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitQuote(this, context);
    };
    Quote.prototype.toString = function() {
      return 'Quote';
    };
    return Quote;
  }(AST));
  var EmptyExpr = (function(_super) {
    __extends$3(EmptyExpr, _super);
    function EmptyExpr() {
      _super.apply(this, arguments);
    }
    EmptyExpr.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
    };
    return EmptyExpr;
  }(AST));
  var ImplicitReceiver = (function(_super) {
    __extends$3(ImplicitReceiver, _super);
    function ImplicitReceiver() {
      _super.apply(this, arguments);
    }
    ImplicitReceiver.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitImplicitReceiver(this, context);
    };
    return ImplicitReceiver;
  }(AST));
  var Chain = (function(_super) {
    __extends$3(Chain, _super);
    function Chain(span, expressions) {
      _super.call(this, span);
      this.expressions = expressions;
    }
    Chain.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitChain(this, context);
    };
    return Chain;
  }(AST));
  var Conditional = (function(_super) {
    __extends$3(Conditional, _super);
    function Conditional(span, condition, trueExp, falseExp) {
      _super.call(this, span);
      this.condition = condition;
      this.trueExp = trueExp;
      this.falseExp = falseExp;
    }
    Conditional.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitConditional(this, context);
    };
    return Conditional;
  }(AST));
  var PropertyRead = (function(_super) {
    __extends$3(PropertyRead, _super);
    function PropertyRead(span, receiver, name) {
      _super.call(this, span);
      this.receiver = receiver;
      this.name = name;
    }
    PropertyRead.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitPropertyRead(this, context);
    };
    return PropertyRead;
  }(AST));
  var PropertyWrite = (function(_super) {
    __extends$3(PropertyWrite, _super);
    function PropertyWrite(span, receiver, name, value) {
      _super.call(this, span);
      this.receiver = receiver;
      this.name = name;
      this.value = value;
    }
    PropertyWrite.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitPropertyWrite(this, context);
    };
    return PropertyWrite;
  }(AST));
  var SafePropertyRead = (function(_super) {
    __extends$3(SafePropertyRead, _super);
    function SafePropertyRead(span, receiver, name) {
      _super.call(this, span);
      this.receiver = receiver;
      this.name = name;
    }
    SafePropertyRead.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitSafePropertyRead(this, context);
    };
    return SafePropertyRead;
  }(AST));
  var KeyedRead = (function(_super) {
    __extends$3(KeyedRead, _super);
    function KeyedRead(span, obj, key) {
      _super.call(this, span);
      this.obj = obj;
      this.key = key;
    }
    KeyedRead.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitKeyedRead(this, context);
    };
    return KeyedRead;
  }(AST));
  var KeyedWrite = (function(_super) {
    __extends$3(KeyedWrite, _super);
    function KeyedWrite(span, obj, key, value) {
      _super.call(this, span);
      this.obj = obj;
      this.key = key;
      this.value = value;
    }
    KeyedWrite.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitKeyedWrite(this, context);
    };
    return KeyedWrite;
  }(AST));
  var BindingPipe = (function(_super) {
    __extends$3(BindingPipe, _super);
    function BindingPipe(span, exp, name, args) {
      _super.call(this, span);
      this.exp = exp;
      this.name = name;
      this.args = args;
    }
    BindingPipe.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitPipe(this, context);
    };
    return BindingPipe;
  }(AST));
  var LiteralPrimitive = (function(_super) {
    __extends$3(LiteralPrimitive, _super);
    function LiteralPrimitive(span, value) {
      _super.call(this, span);
      this.value = value;
    }
    LiteralPrimitive.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitLiteralPrimitive(this, context);
    };
    return LiteralPrimitive;
  }(AST));
  var LiteralArray = (function(_super) {
    __extends$3(LiteralArray, _super);
    function LiteralArray(span, expressions) {
      _super.call(this, span);
      this.expressions = expressions;
    }
    LiteralArray.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitLiteralArray(this, context);
    };
    return LiteralArray;
  }(AST));
  var LiteralMap = (function(_super) {
    __extends$3(LiteralMap, _super);
    function LiteralMap(span, keys, values) {
      _super.call(this, span);
      this.keys = keys;
      this.values = values;
    }
    LiteralMap.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitLiteralMap(this, context);
    };
    return LiteralMap;
  }(AST));
  var Interpolation = (function(_super) {
    __extends$3(Interpolation, _super);
    function Interpolation(span, strings, expressions) {
      _super.call(this, span);
      this.strings = strings;
      this.expressions = expressions;
    }
    Interpolation.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitInterpolation(this, context);
    };
    return Interpolation;
  }(AST));
  var Binary = (function(_super) {
    __extends$3(Binary, _super);
    function Binary(span, operation, left, right) {
      _super.call(this, span);
      this.operation = operation;
      this.left = left;
      this.right = right;
    }
    Binary.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitBinary(this, context);
    };
    return Binary;
  }(AST));
  var PrefixNot = (function(_super) {
    __extends$3(PrefixNot, _super);
    function PrefixNot(span, expression) {
      _super.call(this, span);
      this.expression = expression;
    }
    PrefixNot.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitPrefixNot(this, context);
    };
    return PrefixNot;
  }(AST));
  var MethodCall = (function(_super) {
    __extends$3(MethodCall, _super);
    function MethodCall(span, receiver, name, args) {
      _super.call(this, span);
      this.receiver = receiver;
      this.name = name;
      this.args = args;
    }
    MethodCall.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitMethodCall(this, context);
    };
    return MethodCall;
  }(AST));
  var SafeMethodCall = (function(_super) {
    __extends$3(SafeMethodCall, _super);
    function SafeMethodCall(span, receiver, name, args) {
      _super.call(this, span);
      this.receiver = receiver;
      this.name = name;
      this.args = args;
    }
    SafeMethodCall.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitSafeMethodCall(this, context);
    };
    return SafeMethodCall;
  }(AST));
  var FunctionCall = (function(_super) {
    __extends$3(FunctionCall, _super);
    function FunctionCall(span, target, args) {
      _super.call(this, span);
      this.target = target;
      this.args = args;
    }
    FunctionCall.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return visitor.visitFunctionCall(this, context);
    };
    return FunctionCall;
  }(AST));
  var ASTWithSource = (function(_super) {
    __extends$3(ASTWithSource, _super);
    function ASTWithSource(ast, source, location, errors) {
      _super.call(this, new ParseSpan(0, isBlank(source) ? 0 : source.length));
      this.ast = ast;
      this.source = source;
      this.location = location;
      this.errors = errors;
    }
    ASTWithSource.prototype.visit = function(visitor, context) {
      if (context === void 0) {
        context = null;
      }
      return this.ast.visit(visitor, context);
    };
    ASTWithSource.prototype.toString = function() {
      return this.source + " in " + this.location;
    };
    return ASTWithSource;
  }(AST));
  var TemplateBinding = (function() {
    function TemplateBinding(key, keyIsVar, name, expression) {
      this.key = key;
      this.keyIsVar = keyIsVar;
      this.name = name;
      this.expression = expression;
    }
    return TemplateBinding;
  }());
  var RecursiveAstVisitor = (function() {
    function RecursiveAstVisitor() {}
    RecursiveAstVisitor.prototype.visitBinary = function(ast, context) {
      ast.left.visit(this);
      ast.right.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitChain = function(ast, context) {
      return this.visitAll(ast.expressions, context);
    };
    RecursiveAstVisitor.prototype.visitConditional = function(ast, context) {
      ast.condition.visit(this);
      ast.trueExp.visit(this);
      ast.falseExp.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitPipe = function(ast, context) {
      ast.exp.visit(this);
      this.visitAll(ast.args, context);
      return null;
    };
    RecursiveAstVisitor.prototype.visitFunctionCall = function(ast, context) {
      ast.target.visit(this);
      this.visitAll(ast.args, context);
      return null;
    };
    RecursiveAstVisitor.prototype.visitImplicitReceiver = function(ast, context) {
      return null;
    };
    RecursiveAstVisitor.prototype.visitInterpolation = function(ast, context) {
      return this.visitAll(ast.expressions, context);
    };
    RecursiveAstVisitor.prototype.visitKeyedRead = function(ast, context) {
      ast.obj.visit(this);
      ast.key.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitKeyedWrite = function(ast, context) {
      ast.obj.visit(this);
      ast.key.visit(this);
      ast.value.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitLiteralArray = function(ast, context) {
      return this.visitAll(ast.expressions, context);
    };
    RecursiveAstVisitor.prototype.visitLiteralMap = function(ast, context) {
      return this.visitAll(ast.values, context);
    };
    RecursiveAstVisitor.prototype.visitLiteralPrimitive = function(ast, context) {
      return null;
    };
    RecursiveAstVisitor.prototype.visitMethodCall = function(ast, context) {
      ast.receiver.visit(this);
      return this.visitAll(ast.args, context);
    };
    RecursiveAstVisitor.prototype.visitPrefixNot = function(ast, context) {
      ast.expression.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitPropertyRead = function(ast, context) {
      ast.receiver.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitPropertyWrite = function(ast, context) {
      ast.receiver.visit(this);
      ast.value.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitSafePropertyRead = function(ast, context) {
      ast.receiver.visit(this);
      return null;
    };
    RecursiveAstVisitor.prototype.visitSafeMethodCall = function(ast, context) {
      ast.receiver.visit(this);
      return this.visitAll(ast.args, context);
    };
    RecursiveAstVisitor.prototype.visitAll = function(asts, context) {
      var _this = this;
      asts.forEach(function(ast) {
        return ast.visit(_this, context);
      });
      return null;
    };
    RecursiveAstVisitor.prototype.visitQuote = function(ast, context) {
      return null;
    };
    return RecursiveAstVisitor;
  }());
  var $EOF = 0;
  var $TAB = 9;
  var $LF = 10;
  var $VTAB = 11;
  var $FF = 12;
  var $CR = 13;
  var $SPACE = 32;
  var $BANG = 33;
  var $DQ = 34;
  var $HASH = 35;
  var $$ = 36;
  var $PERCENT = 37;
  var $AMPERSAND = 38;
  var $SQ = 39;
  var $LPAREN = 40;
  var $RPAREN = 41;
  var $STAR = 42;
  var $PLUS = 43;
  var $COMMA = 44;
  var $MINUS = 45;
  var $PERIOD = 46;
  var $SLASH = 47;
  var $COLON = 58;
  var $SEMICOLON = 59;
  var $LT = 60;
  var $EQ = 61;
  var $GT = 62;
  var $QUESTION = 63;
  var $0 = 48;
  var $9 = 57;
  var $A = 65;
  var $E = 69;
  var $F = 70;
  var $X = 88;
  var $Z = 90;
  var $LBRACKET = 91;
  var $BACKSLASH = 92;
  var $RBRACKET = 93;
  var $CARET = 94;
  var $_ = 95;
  var $a = 97;
  var $e = 101;
  var $f = 102;
  var $n = 110;
  var $r = 114;
  var $t = 116;
  var $u = 117;
  var $v = 118;
  var $x = 120;
  var $z = 122;
  var $LBRACE = 123;
  var $BAR = 124;
  var $RBRACE = 125;
  var $NBSP = 160;
  var $BT = 96;
  function isWhitespace(code) {
    return (code >= $TAB && code <= $SPACE) || (code == $NBSP);
  }
  function isDigit(code) {
    return $0 <= code && code <= $9;
  }
  function isAsciiLetter(code) {
    return code >= $a && code <= $z || code >= $A && code <= $Z;
  }
  function isAsciiHexDigit(code) {
    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
  }
  function assertArrayOfStrings(identifier, value) {
    if (!_angular_core.isDevMode() || isBlank(value)) {
      return;
    }
    if (!isArray(value)) {
      throw new Error("Expected '" + identifier + "' to be an array of strings.");
    }
    for (var i = 0; i < value.length; i += 1) {
      if (!isString(value[i])) {
        throw new Error("Expected '" + identifier + "' to be an array of strings.");
      }
    }
  }
  var INTERPOLATION_BLACKLIST_REGEXPS = [/^\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\/\//];
  function assertInterpolationSymbols(identifier, value) {
    if (isPresent(value) && !(isArray(value) && value.length == 2)) {
      throw new Error("Expected '" + identifier + "' to be an array, [start, end].");
    } else if (_angular_core.isDevMode() && !isBlank(value)) {
      var start_1 = value[0];
      var end_1 = value[1];
      INTERPOLATION_BLACKLIST_REGEXPS.forEach(function(regexp) {
        if (regexp.test(start_1) || regexp.test(end_1)) {
          throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
        }
      });
    }
  }
  var InterpolationConfig = (function() {
    function InterpolationConfig(start, end) {
      this.start = start;
      this.end = end;
    }
    InterpolationConfig.fromArray = function(markers) {
      if (!markers) {
        return DEFAULT_INTERPOLATION_CONFIG;
      }
      assertInterpolationSymbols('interpolation', markers);
      return new InterpolationConfig(markers[0], markers[1]);
    };
    ;
    return InterpolationConfig;
  }());
  var DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');
  var TokenType;
  (function(TokenType) {
    TokenType[TokenType["Character"] = 0] = "Character";
    TokenType[TokenType["Identifier"] = 1] = "Identifier";
    TokenType[TokenType["Keyword"] = 2] = "Keyword";
    TokenType[TokenType["String"] = 3] = "String";
    TokenType[TokenType["Operator"] = 4] = "Operator";
    TokenType[TokenType["Number"] = 5] = "Number";
    TokenType[TokenType["Error"] = 6] = "Error";
  })(TokenType || (TokenType = {}));
  var KEYWORDS = ['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];
  var Lexer = (function() {
    function Lexer() {}
    Lexer.prototype.tokenize = function(text) {
      var scanner = new _Scanner(text);
      var tokens = [];
      var token = scanner.scanToken();
      while (token != null) {
        tokens.push(token);
        token = scanner.scanToken();
      }
      return tokens;
    };
    Lexer.decorators = [{type: _angular_core.Injectable}];
    Lexer.ctorParameters = [];
    return Lexer;
  }());
  var Token = (function() {
    function Token(index, type, numValue, strValue) {
      this.index = index;
      this.type = type;
      this.numValue = numValue;
      this.strValue = strValue;
    }
    Token.prototype.isCharacter = function(code) {
      return this.type == TokenType.Character && this.numValue == code;
    };
    Token.prototype.isNumber = function() {
      return this.type == TokenType.Number;
    };
    Token.prototype.isString = function() {
      return this.type == TokenType.String;
    };
    Token.prototype.isOperator = function(operater) {
      return this.type == TokenType.Operator && this.strValue == operater;
    };
    Token.prototype.isIdentifier = function() {
      return this.type == TokenType.Identifier;
    };
    Token.prototype.isKeyword = function() {
      return this.type == TokenType.Keyword;
    };
    Token.prototype.isKeywordLet = function() {
      return this.type == TokenType.Keyword && this.strValue == 'let';
    };
    Token.prototype.isKeywordNull = function() {
      return this.type == TokenType.Keyword && this.strValue == 'null';
    };
    Token.prototype.isKeywordUndefined = function() {
      return this.type == TokenType.Keyword && this.strValue == 'undefined';
    };
    Token.prototype.isKeywordTrue = function() {
      return this.type == TokenType.Keyword && this.strValue == 'true';
    };
    Token.prototype.isKeywordFalse = function() {
      return this.type == TokenType.Keyword && this.strValue == 'false';
    };
    Token.prototype.isKeywordThis = function() {
      return this.type == TokenType.Keyword && this.strValue == 'this';
    };
    Token.prototype.isError = function() {
      return this.type == TokenType.Error;
    };
    Token.prototype.toNumber = function() {
      return this.type == TokenType.Number ? this.numValue : -1;
    };
    Token.prototype.toString = function() {
      switch (this.type) {
        case TokenType.Character:
        case TokenType.Identifier:
        case TokenType.Keyword:
        case TokenType.Operator:
        case TokenType.String:
        case TokenType.Error:
          return this.strValue;
        case TokenType.Number:
          return this.numValue.toString();
        default:
          return null;
      }
    };
    return Token;
  }());
  function newCharacterToken(index, code) {
    return new Token(index, TokenType.Character, code, StringWrapper.fromCharCode(code));
  }
  function newIdentifierToken(index, text) {
    return new Token(index, TokenType.Identifier, 0, text);
  }
  function newKeywordToken(index, text) {
    return new Token(index, TokenType.Keyword, 0, text);
  }
  function newOperatorToken(index, text) {
    return new Token(index, TokenType.Operator, 0, text);
  }
  function newStringToken(index, text) {
    return new Token(index, TokenType.String, 0, text);
  }
  function newNumberToken(index, n) {
    return new Token(index, TokenType.Number, n, '');
  }
  function newErrorToken(index, message) {
    return new Token(index, TokenType.Error, 0, message);
  }
  var EOF = new Token(-1, TokenType.Character, 0, '');
  var _Scanner = (function() {
    function _Scanner(input) {
      this.input = input;
      this.peek = 0;
      this.index = -1;
      this.length = input.length;
      this.advance();
    }
    _Scanner.prototype.advance = function() {
      this.peek = ++this.index >= this.length ? $EOF : StringWrapper.charCodeAt(this.input, this.index);
    };
    _Scanner.prototype.scanToken = function() {
      var input = this.input,
          length = this.length,
          peek = this.peek,
          index = this.index;
      while (peek <= $SPACE) {
        if (++index >= length) {
          peek = $EOF;
          break;
        } else {
          peek = StringWrapper.charCodeAt(input, index);
        }
      }
      this.peek = peek;
      this.index = index;
      if (index >= length) {
        return null;
      }
      if (isIdentifierStart(peek))
        return this.scanIdentifier();
      if (isDigit(peek))
        return this.scanNumber(index);
      var start = index;
      switch (peek) {
        case $PERIOD:
          this.advance();
          return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD);
        case $LPAREN:
        case $RPAREN:
        case $LBRACE:
        case $RBRACE:
        case $LBRACKET:
        case $RBRACKET:
        case $COMMA:
        case $COLON:
        case $SEMICOLON:
          return this.scanCharacter(start, peek);
        case $SQ:
        case $DQ:
          return this.scanString();
        case $HASH:
        case $PLUS:
        case $MINUS:
        case $STAR:
        case $SLASH:
        case $PERCENT:
        case $CARET:
          return this.scanOperator(start, StringWrapper.fromCharCode(peek));
        case $QUESTION:
          return this.scanComplexOperator(start, '?', $PERIOD, '.');
        case $LT:
        case $GT:
          return this.scanComplexOperator(start, StringWrapper.fromCharCode(peek), $EQ, '=');
        case $BANG:
        case $EQ:
          return this.scanComplexOperator(start, StringWrapper.fromCharCode(peek), $EQ, '=', $EQ, '=');
        case $AMPERSAND:
          return this.scanComplexOperator(start, '&', $AMPERSAND, '&');
        case $BAR:
          return this.scanComplexOperator(start, '|', $BAR, '|');
        case $NBSP:
          while (isWhitespace(this.peek))
            this.advance();
          return this.scanToken();
      }
      this.advance();
      return this.error("Unexpected character [" + StringWrapper.fromCharCode(peek) + "]", 0);
    };
    _Scanner.prototype.scanCharacter = function(start, code) {
      this.advance();
      return newCharacterToken(start, code);
    };
    _Scanner.prototype.scanOperator = function(start, str) {
      this.advance();
      return newOperatorToken(start, str);
    };
    _Scanner.prototype.scanComplexOperator = function(start, one, twoCode, two, threeCode, three) {
      this.advance();
      var str = one;
      if (this.peek == twoCode) {
        this.advance();
        str += two;
      }
      if (isPresent(threeCode) && this.peek == threeCode) {
        this.advance();
        str += three;
      }
      return newOperatorToken(start, str);
    };
    _Scanner.prototype.scanIdentifier = function() {
      var start = this.index;
      this.advance();
      while (isIdentifierPart(this.peek))
        this.advance();
      var str = this.input.substring(start, this.index);
      return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) : newIdentifierToken(start, str);
    };
    _Scanner.prototype.scanNumber = function(start) {
      var simple = (this.index === start);
      this.advance();
      while (true) {
        if (isDigit(this.peek)) {} else if (this.peek == $PERIOD) {
          simple = false;
        } else if (isExponentStart(this.peek)) {
          this.advance();
          if (isExponentSign(this.peek))
            this.advance();
          if (!isDigit(this.peek))
            return this.error('Invalid exponent', -1);
          simple = false;
        } else {
          break;
        }
        this.advance();
      }
      var str = this.input.substring(start, this.index);
      var value = simple ? NumberWrapper.parseIntAutoRadix(str) : NumberWrapper.parseFloat(str);
      return newNumberToken(start, value);
    };
    _Scanner.prototype.scanString = function() {
      var start = this.index;
      var quote = this.peek;
      this.advance();
      var buffer;
      var marker = this.index;
      var input = this.input;
      while (this.peek != quote) {
        if (this.peek == $BACKSLASH) {
          if (buffer == null)
            buffer = new StringJoiner();
          buffer.add(input.substring(marker, this.index));
          this.advance();
          var unescapedCode;
          if (this.peek == $u) {
            var hex = input.substring(this.index + 1, this.index + 5);
            try {
              unescapedCode = NumberWrapper.parseInt(hex, 16);
            } catch (e) {
              return this.error("Invalid unicode escape [\\u" + hex + "]", 0);
            }
            for (var i = 0; i < 5; i++) {
              this.advance();
            }
          } else {
            unescapedCode = unescape(this.peek);
            this.advance();
          }
          buffer.add(StringWrapper.fromCharCode(unescapedCode));
          marker = this.index;
        } else if (this.peek == $EOF) {
          return this.error('Unterminated quote', 0);
        } else {
          this.advance();
        }
      }
      var last = input.substring(marker, this.index);
      this.advance();
      var unescaped = last;
      if (buffer != null) {
        buffer.add(last);
        unescaped = buffer.toString();
      }
      return newStringToken(start, unescaped);
    };
    _Scanner.prototype.error = function(message, offset) {
      var position = this.index + offset;
      return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
    };
    return _Scanner;
  }());
  function isIdentifierStart(code) {
    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || (code == $_) || (code == $$);
  }
  function isIdentifier(input) {
    if (input.length == 0)
      return false;
    var scanner = new _Scanner(input);
    if (!isIdentifierStart(scanner.peek))
      return false;
    scanner.advance();
    while (scanner.peek !== $EOF) {
      if (!isIdentifierPart(scanner.peek))
        return false;
      scanner.advance();
    }
    return true;
  }
  function isIdentifierPart(code) {
    return isAsciiLetter(code) || isDigit(code) || (code == $_) || (code == $$);
  }
  function isExponentStart(code) {
    return code == $e || code == $E;
  }
  function isExponentSign(code) {
    return code == $MINUS || code == $PLUS;
  }
  function isQuote(code) {
    return code === $SQ || code === $DQ || code === $BT;
  }
  function unescape(code) {
    switch (code) {
      case $n:
        return $LF;
      case $f:
        return $FF;
      case $r:
        return $CR;
      case $t:
        return $TAB;
      case $v:
        return $VTAB;
      default:
        return code;
    }
  }
  var SplitInterpolation = (function() {
    function SplitInterpolation(strings, expressions) {
      this.strings = strings;
      this.expressions = expressions;
    }
    return SplitInterpolation;
  }());
  var TemplateBindingParseResult = (function() {
    function TemplateBindingParseResult(templateBindings, warnings, errors) {
      this.templateBindings = templateBindings;
      this.warnings = warnings;
      this.errors = errors;
    }
    return TemplateBindingParseResult;
  }());
  function _createInterpolateRegExp(config) {
    var pattern = escapeRegExp(config.start) + '([\\s\\S]*?)' + escapeRegExp(config.end);
    return new RegExp(pattern, 'g');
  }
  var Parser = (function() {
    function Parser(_lexer) {
      this._lexer = _lexer;
      this.errors = [];
    }
    Parser.prototype.parseAction = function(input, location, interpolationConfig) {
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      this._checkNoInterpolation(input, location, interpolationConfig);
      var tokens = this._lexer.tokenize(this._stripComments(input));
      var ast = new _ParseAST(input, location, tokens, true, this.errors).parseChain();
      return new ASTWithSource(ast, input, location, this.errors);
    };
    Parser.prototype.parseBinding = function(input, location, interpolationConfig) {
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      var ast = this._parseBindingAst(input, location, interpolationConfig);
      return new ASTWithSource(ast, input, location, this.errors);
    };
    Parser.prototype.parseSimpleBinding = function(input, location, interpolationConfig) {
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      var ast = this._parseBindingAst(input, location, interpolationConfig);
      if (!SimpleExpressionChecker.check(ast)) {
        this._reportError('Host binding expression can only contain field access and constants', input, location);
      }
      return new ASTWithSource(ast, input, location, this.errors);
    };
    Parser.prototype._reportError = function(message, input, errLocation, ctxLocation) {
      this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
    };
    Parser.prototype._parseBindingAst = function(input, location, interpolationConfig) {
      var quote = this._parseQuote(input, location);
      if (isPresent(quote)) {
        return quote;
      }
      this._checkNoInterpolation(input, location, interpolationConfig);
      var tokens = this._lexer.tokenize(this._stripComments(input));
      return new _ParseAST(input, location, tokens, false, this.errors).parseChain();
    };
    Parser.prototype._parseQuote = function(input, location) {
      if (isBlank(input))
        return null;
      var prefixSeparatorIndex = input.indexOf(':');
      if (prefixSeparatorIndex == -1)
        return null;
      var prefix = input.substring(0, prefixSeparatorIndex).trim();
      if (!isIdentifier(prefix))
        return null;
      var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
      return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
    };
    Parser.prototype.parseTemplateBindings = function(input, location) {
      var tokens = this._lexer.tokenize(input);
      return new _ParseAST(input, location, tokens, false, this.errors).parseTemplateBindings();
    };
    Parser.prototype.parseInterpolation = function(input, location, interpolationConfig) {
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      var split = this.splitInterpolation(input, location, interpolationConfig);
      if (split == null)
        return null;
      var expressions = [];
      for (var i = 0; i < split.expressions.length; ++i) {
        var tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
        var ast = new _ParseAST(input, location, tokens, false, this.errors).parseChain();
        expressions.push(ast);
      }
      return new ASTWithSource(new Interpolation(new ParseSpan(0, isBlank(input) ? 0 : input.length), split.strings, expressions), input, location, this.errors);
    };
    Parser.prototype.splitInterpolation = function(input, location, interpolationConfig) {
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      var regexp = _createInterpolateRegExp(interpolationConfig);
      var parts = StringWrapper.split(input, regexp);
      if (parts.length <= 1) {
        return null;
      }
      var strings = [];
      var expressions = [];
      for (var i = 0; i < parts.length; i++) {
        var part = parts[i];
        if (i % 2 === 0) {
          strings.push(part);
        } else if (part.trim().length > 0) {
          expressions.push(part);
        } else {
          this._reportError('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
        }
      }
      return new SplitInterpolation(strings, expressions);
    };
    Parser.prototype.wrapLiteralPrimitive = function(input, location) {
      return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, isBlank(input) ? 0 : input.length), input), input, location, this.errors);
    };
    Parser.prototype._stripComments = function(input) {
      var i = this._commentStart(input);
      return isPresent(i) ? input.substring(0, i).trim() : input;
    };
    Parser.prototype._commentStart = function(input) {
      var outerQuote = null;
      for (var i = 0; i < input.length - 1; i++) {
        var char = StringWrapper.charCodeAt(input, i);
        var nextChar = StringWrapper.charCodeAt(input, i + 1);
        if (char === $SLASH && nextChar == $SLASH && isBlank(outerQuote))
          return i;
        if (outerQuote === char) {
          outerQuote = null;
        } else if (isBlank(outerQuote) && isQuote(char)) {
          outerQuote = char;
        }
      }
      return null;
    };
    Parser.prototype._checkNoInterpolation = function(input, location, interpolationConfig) {
      var regexp = _createInterpolateRegExp(interpolationConfig);
      var parts = StringWrapper.split(input, regexp);
      if (parts.length > 1) {
        this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
      }
    };
    Parser.prototype._findInterpolationErrorColumn = function(parts, partInErrIdx, interpolationConfig) {
      var errLocation = '';
      for (var j = 0; j < partInErrIdx; j++) {
        errLocation += j % 2 === 0 ? parts[j] : "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
      }
      return errLocation.length;
    };
    Parser.decorators = [{type: _angular_core.Injectable}];
    Parser.ctorParameters = [{type: Lexer}];
    return Parser;
  }());
  var _ParseAST = (function() {
    function _ParseAST(input, location, tokens, parseAction, errors) {
      this.input = input;
      this.location = location;
      this.tokens = tokens;
      this.parseAction = parseAction;
      this.errors = errors;
      this.rparensExpected = 0;
      this.rbracketsExpected = 0;
      this.rbracesExpected = 0;
      this.index = 0;
    }
    _ParseAST.prototype.peek = function(offset) {
      var i = this.index + offset;
      return i < this.tokens.length ? this.tokens[i] : EOF;
    };
    Object.defineProperty(_ParseAST.prototype, "next", {
      get: function() {
        return this.peek(0);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(_ParseAST.prototype, "inputIndex", {
      get: function() {
        return (this.index < this.tokens.length) ? this.next.index : this.input.length;
      },
      enumerable: true,
      configurable: true
    });
    _ParseAST.prototype.span = function(start) {
      return new ParseSpan(start, this.inputIndex);
    };
    _ParseAST.prototype.advance = function() {
      this.index++;
    };
    _ParseAST.prototype.optionalCharacter = function(code) {
      if (this.next.isCharacter(code)) {
        this.advance();
        return true;
      } else {
        return false;
      }
    };
    _ParseAST.prototype.peekKeywordLet = function() {
      return this.next.isKeywordLet();
    };
    _ParseAST.prototype.expectCharacter = function(code) {
      if (this.optionalCharacter(code))
        return;
      this.error("Missing expected " + StringWrapper.fromCharCode(code));
    };
    _ParseAST.prototype.optionalOperator = function(op) {
      if (this.next.isOperator(op)) {
        this.advance();
        return true;
      } else {
        return false;
      }
    };
    _ParseAST.prototype.expectOperator = function(operator) {
      if (this.optionalOperator(operator))
        return;
      this.error("Missing expected operator " + operator);
    };
    _ParseAST.prototype.expectIdentifierOrKeyword = function() {
      var n = this.next;
      if (!n.isIdentifier() && !n.isKeyword()) {
        this.error("Unexpected token " + n + ", expected identifier or keyword");
        return '';
      }
      this.advance();
      return n.toString();
    };
    _ParseAST.prototype.expectIdentifierOrKeywordOrString = function() {
      var n = this.next;
      if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
        this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
        return '';
      }
      this.advance();
      return n.toString();
    };
    _ParseAST.prototype.parseChain = function() {
      var exprs = [];
      var start = this.inputIndex;
      while (this.index < this.tokens.length) {
        var expr = this.parsePipe();
        exprs.push(expr);
        if (this.optionalCharacter($SEMICOLON)) {
          if (!this.parseAction) {
            this.error('Binding expression cannot contain chained expression');
          }
          while (this.optionalCharacter($SEMICOLON)) {}
        } else if (this.index < this.tokens.length) {
          this.error("Unexpected token '" + this.next + "'");
        }
      }
      if (exprs.length == 0)
        return new EmptyExpr(this.span(start));
      if (exprs.length == 1)
        return exprs[0];
      return new Chain(this.span(start), exprs);
    };
    _ParseAST.prototype.parsePipe = function() {
      var result = this.parseExpression();
      if (this.optionalOperator('|')) {
        if (this.parseAction) {
          this.error('Cannot have a pipe in an action expression');
        }
        do {
          var name = this.expectIdentifierOrKeyword();
          var args = [];
          while (this.optionalCharacter($COLON)) {
            args.push(this.parseExpression());
          }
          result = new BindingPipe(this.span(result.span.start), result, name, args);
        } while (this.optionalOperator('|'));
      }
      return result;
    };
    _ParseAST.prototype.parseExpression = function() {
      return this.parseConditional();
    };
    _ParseAST.prototype.parseConditional = function() {
      var start = this.inputIndex;
      var result = this.parseLogicalOr();
      if (this.optionalOperator('?')) {
        var yes = this.parsePipe();
        var no = void 0;
        if (!this.optionalCharacter($COLON)) {
          var end = this.inputIndex;
          var expression = this.input.substring(start, end);
          this.error("Conditional expression " + expression + " requires all 3 expressions");
          no = new EmptyExpr(this.span(start));
        } else {
          no = this.parsePipe();
        }
        return new Conditional(this.span(start), result, yes, no);
      } else {
        return result;
      }
    };
    _ParseAST.prototype.parseLogicalOr = function() {
      var result = this.parseLogicalAnd();
      while (this.optionalOperator('||')) {
        var right = this.parseLogicalAnd();
        result = new Binary(this.span(result.span.start), '||', result, right);
      }
      return result;
    };
    _ParseAST.prototype.parseLogicalAnd = function() {
      var result = this.parseEquality();
      while (this.optionalOperator('&&')) {
        var right = this.parseEquality();
        result = new Binary(this.span(result.span.start), '&&', result, right);
      }
      return result;
    };
    _ParseAST.prototype.parseEquality = function() {
      var result = this.parseRelational();
      while (this.next.type == TokenType.Operator) {
        var operator = this.next.strValue;
        switch (operator) {
          case '==':
          case '===':
          case '!=':
          case '!==':
            this.advance();
            var right = this.parseRelational();
            result = new Binary(this.span(result.span.start), operator, result, right);
            continue;
        }
        break;
      }
      return result;
    };
    _ParseAST.prototype.parseRelational = function() {
      var result = this.parseAdditive();
      while (this.next.type == TokenType.Operator) {
        var operator = this.next.strValue;
        switch (operator) {
          case '<':
          case '>':
          case '<=':
          case '>=':
            this.advance();
            var right = this.parseAdditive();
            result = new Binary(this.span(result.span.start), operator, result, right);
            continue;
        }
        break;
      }
      return result;
    };
    _ParseAST.prototype.parseAdditive = function() {
      var result = this.parseMultiplicative();
      while (this.next.type == TokenType.Operator) {
        var operator = this.next.strValue;
        switch (operator) {
          case '+':
          case '-':
            this.advance();
            var right = this.parseMultiplicative();
            result = new Binary(this.span(result.span.start), operator, result, right);
            continue;
        }
        break;
      }
      return result;
    };
    _ParseAST.prototype.parseMultiplicative = function() {
      var result = this.parsePrefix();
      while (this.next.type == TokenType.Operator) {
        var operator = this.next.strValue;
        switch (operator) {
          case '*':
          case '%':
          case '/':
            this.advance();
            var right = this.parsePrefix();
            result = new Binary(this.span(result.span.start), operator, result, right);
            continue;
        }
        break;
      }
      return result;
    };
    _ParseAST.prototype.parsePrefix = function() {
      if (this.next.type == TokenType.Operator) {
        var start = this.inputIndex;
        var operator = this.next.strValue;
        var result = void 0;
        switch (operator) {
          case '+':
            this.advance();
            return this.parsePrefix();
          case '-':
            this.advance();
            result = this.parsePrefix();
            return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);
          case '!':
            this.advance();
            result = this.parsePrefix();
            return new PrefixNot(this.span(start), result);
        }
      }
      return this.parseCallChain();
    };
    _ParseAST.prototype.parseCallChain = function() {
      var result = this.parsePrimary();
      while (true) {
        if (this.optionalCharacter($PERIOD)) {
          result = this.parseAccessMemberOrMethodCall(result, false);
        } else if (this.optionalOperator('?.')) {
          result = this.parseAccessMemberOrMethodCall(result, true);
        } else if (this.optionalCharacter($LBRACKET)) {
          this.rbracketsExpected++;
          var key = this.parsePipe();
          this.rbracketsExpected--;
          this.expectCharacter($RBRACKET);
          if (this.optionalOperator('=')) {
            var value = this.parseConditional();
            result = new KeyedWrite(this.span(result.span.start), result, key, value);
          } else {
            result = new KeyedRead(this.span(result.span.start), result, key);
          }
        } else if (this.optionalCharacter($LPAREN)) {
          this.rparensExpected++;
          var args = this.parseCallArguments();
          this.rparensExpected--;
          this.expectCharacter($RPAREN);
          result = new FunctionCall(this.span(result.span.start), result, args);
        } else {
          return result;
        }
      }
    };
    _ParseAST.prototype.parsePrimary = function() {
      var start = this.inputIndex;
      if (this.optionalCharacter($LPAREN)) {
        this.rparensExpected++;
        var result = this.parsePipe();
        this.rparensExpected--;
        this.expectCharacter($RPAREN);
        return result;
      } else if (this.next.isKeywordNull()) {
        this.advance();
        return new LiteralPrimitive(this.span(start), null);
      } else if (this.next.isKeywordUndefined()) {
        this.advance();
        return new LiteralPrimitive(this.span(start), void 0);
      } else if (this.next.isKeywordTrue()) {
        this.advance();
        return new LiteralPrimitive(this.span(start), true);
      } else if (this.next.isKeywordFalse()) {
        this.advance();
        return new LiteralPrimitive(this.span(start), false);
      } else if (this.next.isKeywordThis()) {
        this.advance();
        return new ImplicitReceiver(this.span(start));
      } else if (this.optionalCharacter($LBRACKET)) {
        this.rbracketsExpected++;
        var elements = this.parseExpressionList($RBRACKET);
        this.rbracketsExpected--;
        this.expectCharacter($RBRACKET);
        return new LiteralArray(this.span(start), elements);
      } else if (this.next.isCharacter($LBRACE)) {
        return this.parseLiteralMap();
      } else if (this.next.isIdentifier()) {
        return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);
      } else if (this.next.isNumber()) {
        var value = this.next.toNumber();
        this.advance();
        return new LiteralPrimitive(this.span(start), value);
      } else if (this.next.isString()) {
        var literalValue = this.next.toString();
        this.advance();
        return new LiteralPrimitive(this.span(start), literalValue);
      } else if (this.index >= this.tokens.length) {
        this.error("Unexpected end of expression: " + this.input);
        return new EmptyExpr(this.span(start));
      } else {
        this.error("Unexpected token " + this.next);
        return new EmptyExpr(this.span(start));
      }
    };
    _ParseAST.prototype.parseExpressionList = function(terminator) {
      var result = [];
      if (!this.next.isCharacter(terminator)) {
        do {
          result.push(this.parsePipe());
        } while (this.optionalCharacter($COMMA));
      }
      return result;
    };
    _ParseAST.prototype.parseLiteralMap = function() {
      var keys = [];
      var values = [];
      var start = this.inputIndex;
      this.expectCharacter($LBRACE);
      if (!this.optionalCharacter($RBRACE)) {
        this.rbracesExpected++;
        do {
          var key = this.expectIdentifierOrKeywordOrString();
          keys.push(key);
          this.expectCharacter($COLON);
          values.push(this.parsePipe());
        } while (this.optionalCharacter($COMMA));
        this.rbracesExpected--;
        this.expectCharacter($RBRACE);
      }
      return new LiteralMap(this.span(start), keys, values);
    };
    _ParseAST.prototype.parseAccessMemberOrMethodCall = function(receiver, isSafe) {
      if (isSafe === void 0) {
        isSafe = false;
      }
      var start = receiver.span.start;
      var id = this.expectIdentifierOrKeyword();
      if (this.optionalCharacter($LPAREN)) {
        this.rparensExpected++;
        var args = this.parseCallArguments();
        this.expectCharacter($RPAREN);
        this.rparensExpected--;
        var span = this.span(start);
        return isSafe ? new SafeMethodCall(span, receiver, id, args) : new MethodCall(span, receiver, id, args);
      } else {
        if (isSafe) {
          if (this.optionalOperator('=')) {
            this.error('The \'?.\' operator cannot be used in the assignment');
            return new EmptyExpr(this.span(start));
          } else {
            return new SafePropertyRead(this.span(start), receiver, id);
          }
        } else {
          if (this.optionalOperator('=')) {
            if (!this.parseAction) {
              this.error('Bindings cannot contain assignments');
              return new EmptyExpr(this.span(start));
            }
            var value = this.parseConditional();
            return new PropertyWrite(this.span(start), receiver, id, value);
          } else {
            return new PropertyRead(this.span(start), receiver, id);
          }
        }
      }
    };
    _ParseAST.prototype.parseCallArguments = function() {
      if (this.next.isCharacter($RPAREN))
        return [];
      var positionals = [];
      do {
        positionals.push(this.parsePipe());
      } while (this.optionalCharacter($COMMA));
      return positionals;
    };
    _ParseAST.prototype.expectTemplateBindingKey = function() {
      var result = '';
      var operatorFound = false;
      do {
        result += this.expectIdentifierOrKeywordOrString();
        operatorFound = this.optionalOperator('-');
        if (operatorFound) {
          result += '-';
        }
      } while (operatorFound);
      return result.toString();
    };
    _ParseAST.prototype.parseTemplateBindings = function() {
      var bindings = [];
      var prefix = null;
      var warnings = [];
      while (this.index < this.tokens.length) {
        var keyIsVar = this.peekKeywordLet();
        if (keyIsVar) {
          this.advance();
        }
        var key = this.expectTemplateBindingKey();
        if (!keyIsVar) {
          if (prefix == null) {
            prefix = key;
          } else {
            key = prefix + key[0].toUpperCase() + key.substring(1);
          }
        }
        this.optionalCharacter($COLON);
        var name = null;
        var expression = null;
        if (keyIsVar) {
          if (this.optionalOperator('=')) {
            name = this.expectTemplateBindingKey();
          } else {
            name = '\$implicit';
          }
        } else if (this.next !== EOF && !this.peekKeywordLet()) {
          var start = this.inputIndex;
          var ast = this.parsePipe();
          var source = this.input.substring(start, this.inputIndex);
          expression = new ASTWithSource(ast, source, this.location, this.errors);
        }
        bindings.push(new TemplateBinding(key, keyIsVar, name, expression));
        if (!this.optionalCharacter($SEMICOLON)) {
          this.optionalCharacter($COMMA);
        }
      }
      return new TemplateBindingParseResult(bindings, warnings, this.errors);
    };
    _ParseAST.prototype.error = function(message, index) {
      if (index === void 0) {
        index = null;
      }
      this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
      this.skip();
    };
    _ParseAST.prototype.locationText = function(index) {
      if (index === void 0) {
        index = null;
      }
      if (isBlank(index))
        index = this.index;
      return (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression";
    };
    _ParseAST.prototype.skip = function() {
      var n = this.next;
      while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) && (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) && (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) && (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {
        if (this.next.isError()) {
          this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
        }
        this.advance();
        n = this.next;
      }
    };
    return _ParseAST;
  }());
  var SimpleExpressionChecker = (function() {
    function SimpleExpressionChecker() {
      this.simple = true;
    }
    SimpleExpressionChecker.check = function(ast) {
      var s = new SimpleExpressionChecker();
      ast.visit(s);
      return s.simple;
    };
    SimpleExpressionChecker.prototype.visitImplicitReceiver = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitInterpolation = function(ast, context) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitLiteralPrimitive = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitPropertyRead = function(ast, context) {};
    SimpleExpressionChecker.prototype.visitPropertyWrite = function(ast, context) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitSafePropertyRead = function(ast, context) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitMethodCall = function(ast, context) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitSafeMethodCall = function(ast, context) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitFunctionCall = function(ast, context) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitLiteralArray = function(ast, context) {
      this.visitAll(ast.expressions);
    };
    SimpleExpressionChecker.prototype.visitLiteralMap = function(ast, context) {
      this.visitAll(ast.values);
    };
    SimpleExpressionChecker.prototype.visitBinary = function(ast, context) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitPrefixNot = function(ast, context) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitConditional = function(ast, context) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitPipe = function(ast, context) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitKeyedRead = function(ast, context) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitKeyedWrite = function(ast, context) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitAll = function(asts) {
      var _this = this;
      return asts.map(function(node) {
        return node.visit(_this);
      });
    };
    SimpleExpressionChecker.prototype.visitChain = function(ast, context) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitQuote = function(ast, context) {
      this.simple = false;
    };
    return SimpleExpressionChecker;
  }());
  var ParseLocation = (function() {
    function ParseLocation(file, offset, line, col) {
      this.file = file;
      this.offset = offset;
      this.line = line;
      this.col = col;
    }
    ParseLocation.prototype.toString = function() {
      return isPresent(this.offset) ? this.file.url + "@" + this.line + ":" + this.col : this.file.url;
    };
    return ParseLocation;
  }());
  var ParseSourceFile = (function() {
    function ParseSourceFile(content, url) {
      this.content = content;
      this.url = url;
    }
    return ParseSourceFile;
  }());
  var ParseSourceSpan = (function() {
    function ParseSourceSpan(start, end, details) {
      if (details === void 0) {
        details = null;
      }
      this.start = start;
      this.end = end;
      this.details = details;
    }
    ParseSourceSpan.prototype.toString = function() {
      return this.start.file.content.substring(this.start.offset, this.end.offset);
    };
    return ParseSourceSpan;
  }());
  var ParseErrorLevel;
  (function(ParseErrorLevel) {
    ParseErrorLevel[ParseErrorLevel["WARNING"] = 0] = "WARNING";
    ParseErrorLevel[ParseErrorLevel["FATAL"] = 1] = "FATAL";
  })(ParseErrorLevel || (ParseErrorLevel = {}));
  var ParseError = (function() {
    function ParseError(span, msg, level) {
      if (level === void 0) {
        level = ParseErrorLevel.FATAL;
      }
      this.span = span;
      this.msg = msg;
      this.level = level;
    }
    ParseError.prototype.toString = function() {
      var source = this.span.start.file.content;
      var ctxStart = this.span.start.offset;
      var contextStr = '';
      var details = '';
      if (isPresent(ctxStart)) {
        if (ctxStart > source.length - 1) {
          ctxStart = source.length - 1;
        }
        var ctxEnd = ctxStart;
        var ctxLen = 0;
        var ctxLines = 0;
        while (ctxLen < 100 && ctxStart > 0) {
          ctxStart--;
          ctxLen++;
          if (source[ctxStart] == '\n') {
            if (++ctxLines == 3) {
              break;
            }
          }
        }
        ctxLen = 0;
        ctxLines = 0;
        while (ctxLen < 100 && ctxEnd < source.length - 1) {
          ctxEnd++;
          ctxLen++;
          if (source[ctxEnd] == '\n') {
            if (++ctxLines == 3) {
              break;
            }
          }
        }
        var context = source.substring(ctxStart, this.span.start.offset) + '[ERROR ->]' + source.substring(this.span.start.offset, ctxEnd + 1);
        contextStr = " (\"" + context + "\")";
      }
      if (this.span.details) {
        details = ", " + this.span.details;
      }
      return "" + this.msg + contextStr + ": " + this.span.start + details;
    };
    return ParseError;
  }());
  var Text = (function() {
    function Text(value, sourceSpan) {
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    Text.prototype.visit = function(visitor, context) {
      return visitor.visitText(this, context);
    };
    return Text;
  }());
  var Expansion = (function() {
    function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
      this.switchValue = switchValue;
      this.type = type;
      this.cases = cases;
      this.sourceSpan = sourceSpan;
      this.switchValueSourceSpan = switchValueSourceSpan;
    }
    Expansion.prototype.visit = function(visitor, context) {
      return visitor.visitExpansion(this, context);
    };
    return Expansion;
  }());
  var ExpansionCase = (function() {
    function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
      this.value = value;
      this.expression = expression;
      this.sourceSpan = sourceSpan;
      this.valueSourceSpan = valueSourceSpan;
      this.expSourceSpan = expSourceSpan;
    }
    ExpansionCase.prototype.visit = function(visitor, context) {
      return visitor.visitExpansionCase(this, context);
    };
    return ExpansionCase;
  }());
  var Attribute = (function() {
    function Attribute(name, value, sourceSpan) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    Attribute.prototype.visit = function(visitor, context) {
      return visitor.visitAttribute(this, context);
    };
    return Attribute;
  }());
  var Element = (function() {
    function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
      this.name = name;
      this.attrs = attrs;
      this.children = children;
      this.sourceSpan = sourceSpan;
      this.startSourceSpan = startSourceSpan;
      this.endSourceSpan = endSourceSpan;
    }
    Element.prototype.visit = function(visitor, context) {
      return visitor.visitElement(this, context);
    };
    return Element;
  }());
  var Comment = (function() {
    function Comment(value, sourceSpan) {
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    Comment.prototype.visit = function(visitor, context) {
      return visitor.visitComment(this, context);
    };
    return Comment;
  }());
  function visitAll(visitor, nodes, context) {
    if (context === void 0) {
      context = null;
    }
    var result = [];
    nodes.forEach(function(ast) {
      var astResult = ast.visit(visitor, context);
      if (astResult) {
        result.push(astResult);
      }
    });
    return result;
  }
  var TagContentType;
  (function(TagContentType) {
    TagContentType[TagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
    TagContentType[TagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
    TagContentType[TagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
  })(TagContentType || (TagContentType = {}));
  function splitNsName(elementName) {
    if (elementName[0] != ':') {
      return [null, elementName];
    }
    var colonIndex = elementName.indexOf(':', 1);
    if (colonIndex == -1) {
      throw new Error("Unsupported format \"" + elementName + "\" expecting \":namespace:name\"");
    }
    return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
  }
  function getNsPrefix(fullName) {
    return fullName === null ? null : splitNsName(fullName)[0];
  }
  function mergeNsAndName(prefix, localName) {
    return prefix ? ":" + prefix + ":" + localName : localName;
  }
  var NAMED_ENTITIES = {
    'Aacute': '\u00C1',
    'aacute': '\u00E1',
    'Acirc': '\u00C2',
    'acirc': '\u00E2',
    'acute': '\u00B4',
    'AElig': '\u00C6',
    'aelig': '\u00E6',
    'Agrave': '\u00C0',
    'agrave': '\u00E0',
    'alefsym': '\u2135',
    'Alpha': '\u0391',
    'alpha': '\u03B1',
    'amp': '&',
    'and': '\u2227',
    'ang': '\u2220',
    'apos': '\u0027',
    'Aring': '\u00C5',
    'aring': '\u00E5',
    'asymp': '\u2248',
    'Atilde': '\u00C3',
    'atilde': '\u00E3',
    'Auml': '\u00C4',
    'auml': '\u00E4',
    'bdquo': '\u201E',
    'Beta': '\u0392',
    'beta': '\u03B2',
    'brvbar': '\u00A6',
    'bull': '\u2022',
    'cap': '\u2229',
    'Ccedil': '\u00C7',
    'ccedil': '\u00E7',
    'cedil': '\u00B8',
    'cent': '\u00A2',
    'Chi': '\u03A7',
    'chi': '\u03C7',
    'circ': '\u02C6',
    'clubs': '\u2663',
    'cong': '\u2245',
    'copy': '\u00A9',
    'crarr': '\u21B5',
    'cup': '\u222A',
    'curren': '\u00A4',
    'dagger': '\u2020',
    'Dagger': '\u2021',
    'darr': '\u2193',
    'dArr': '\u21D3',
    'deg': '\u00B0',
    'Delta': '\u0394',
    'delta': '\u03B4',
    'diams': '\u2666',
    'divide': '\u00F7',
    'Eacute': '\u00C9',
    'eacute': '\u00E9',
    'Ecirc': '\u00CA',
    'ecirc': '\u00EA',
    'Egrave': '\u00C8',
    'egrave': '\u00E8',
    'empty': '\u2205',
    'emsp': '\u2003',
    'ensp': '\u2002',
    'Epsilon': '\u0395',
    'epsilon': '\u03B5',
    'equiv': '\u2261',
    'Eta': '\u0397',
    'eta': '\u03B7',
    'ETH': '\u00D0',
    'eth': '\u00F0',
    'Euml': '\u00CB',
    'euml': '\u00EB',
    'euro': '\u20AC',
    'exist': '\u2203',
    'fnof': '\u0192',
    'forall': '\u2200',
    'frac12': '\u00BD',
    'frac14': '\u00BC',
    'frac34': '\u00BE',
    'frasl': '\u2044',
    'Gamma': '\u0393',
    'gamma': '\u03B3',
    'ge': '\u2265',
    'gt': '>',
    'harr': '\u2194',
    'hArr': '\u21D4',
    'hearts': '\u2665',
    'hellip': '\u2026',
    'Iacute': '\u00CD',
    'iacute': '\u00ED',
    'Icirc': '\u00CE',
    'icirc': '\u00EE',
    'iexcl': '\u00A1',
    'Igrave': '\u00CC',
    'igrave': '\u00EC',
    'image': '\u2111',
    'infin': '\u221E',
    'int': '\u222B',
    'Iota': '\u0399',
    'iota': '\u03B9',
    'iquest': '\u00BF',
    'isin': '\u2208',
    'Iuml': '\u00CF',
    'iuml': '\u00EF',
    'Kappa': '\u039A',
    'kappa': '\u03BA',
    'Lambda': '\u039B',
    'lambda': '\u03BB',
    'lang': '\u27E8',
    'laquo': '\u00AB',
    'larr': '\u2190',
    'lArr': '\u21D0',
    'lceil': '\u2308',
    'ldquo': '\u201C',
    'le': '\u2264',
    'lfloor': '\u230A',
    'lowast': '\u2217',
    'loz': '\u25CA',
    'lrm': '\u200E',
    'lsaquo': '\u2039',
    'lsquo': '\u2018',
    'lt': '<',
    'macr': '\u00AF',
    'mdash': '\u2014',
    'micro': '\u00B5',
    'middot': '\u00B7',
    'minus': '\u2212',
    'Mu': '\u039C',
    'mu': '\u03BC',
    'nabla': '\u2207',
    'nbsp': '\u00A0',
    'ndash': '\u2013',
    'ne': '\u2260',
    'ni': '\u220B',
    'not': '\u00AC',
    'notin': '\u2209',
    'nsub': '\u2284',
    'Ntilde': '\u00D1',
    'ntilde': '\u00F1',
    'Nu': '\u039D',
    'nu': '\u03BD',
    'Oacute': '\u00D3',
    'oacute': '\u00F3',
    'Ocirc': '\u00D4',
    'ocirc': '\u00F4',
    'OElig': '\u0152',
    'oelig': '\u0153',
    'Ograve': '\u00D2',
    'ograve': '\u00F2',
    'oline': '\u203E',
    'Omega': '\u03A9',
    'omega': '\u03C9',
    'Omicron': '\u039F',
    'omicron': '\u03BF',
    'oplus': '\u2295',
    'or': '\u2228',
    'ordf': '\u00AA',
    'ordm': '\u00BA',
    'Oslash': '\u00D8',
    'oslash': '\u00F8',
    'Otilde': '\u00D5',
    'otilde': '\u00F5',
    'otimes': '\u2297',
    'Ouml': '\u00D6',
    'ouml': '\u00F6',
    'para': '\u00B6',
    'permil': '\u2030',
    'perp': '\u22A5',
    'Phi': '\u03A6',
    'phi': '\u03C6',
    'Pi': '\u03A0',
    'pi': '\u03C0',
    'piv': '\u03D6',
    'plusmn': '\u00B1',
    'pound': '\u00A3',
    'prime': '\u2032',
    'Prime': '\u2033',
    'prod': '\u220F',
    'prop': '\u221D',
    'Psi': '\u03A8',
    'psi': '\u03C8',
    'quot': '\u0022',
    'radic': '\u221A',
    'rang': '\u27E9',
    'raquo': '\u00BB',
    'rarr': '\u2192',
    'rArr': '\u21D2',
    'rceil': '\u2309',
    'rdquo': '\u201D',
    'real': '\u211C',
    'reg': '\u00AE',
    'rfloor': '\u230B',
    'Rho': '\u03A1',
    'rho': '\u03C1',
    'rlm': '\u200F',
    'rsaquo': '\u203A',
    'rsquo': '\u2019',
    'sbquo': '\u201A',
    'Scaron': '\u0160',
    'scaron': '\u0161',
    'sdot': '\u22C5',
    'sect': '\u00A7',
    'shy': '\u00AD',
    'Sigma': '\u03A3',
    'sigma': '\u03C3',
    'sigmaf': '\u03C2',
    'sim': '\u223C',
    'spades': '\u2660',
    'sub': '\u2282',
    'sube': '\u2286',
    'sum': '\u2211',
    'sup': '\u2283',
    'sup1': '\u00B9',
    'sup2': '\u00B2',
    'sup3': '\u00B3',
    'supe': '\u2287',
    'szlig': '\u00DF',
    'Tau': '\u03A4',
    'tau': '\u03C4',
    'there4': '\u2234',
    'Theta': '\u0398',
    'theta': '\u03B8',
    'thetasym': '\u03D1',
    'thinsp': '\u2009',
    'THORN': '\u00DE',
    'thorn': '\u00FE',
    'tilde': '\u02DC',
    'times': '\u00D7',
    'trade': '\u2122',
    'Uacute': '\u00DA',
    'uacute': '\u00FA',
    'uarr': '\u2191',
    'uArr': '\u21D1',
    'Ucirc': '\u00DB',
    'ucirc': '\u00FB',
    'Ugrave': '\u00D9',
    'ugrave': '\u00F9',
    'uml': '\u00A8',
    'upsih': '\u03D2',
    'Upsilon': '\u03A5',
    'upsilon': '\u03C5',
    'Uuml': '\u00DC',
    'uuml': '\u00FC',
    'weierp': '\u2118',
    'Xi': '\u039E',
    'xi': '\u03BE',
    'Yacute': '\u00DD',
    'yacute': '\u00FD',
    'yen': '\u00A5',
    'yuml': '\u00FF',
    'Yuml': '\u0178',
    'Zeta': '\u0396',
    'zeta': '\u03B6',
    'zwj': '\u200D',
    'zwnj': '\u200C'
  };
  var __extends$5 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var TokenType$1;
  (function(TokenType) {
    TokenType[TokenType["TAG_OPEN_START"] = 0] = "TAG_OPEN_START";
    TokenType[TokenType["TAG_OPEN_END"] = 1] = "TAG_OPEN_END";
    TokenType[TokenType["TAG_OPEN_END_VOID"] = 2] = "TAG_OPEN_END_VOID";
    TokenType[TokenType["TAG_CLOSE"] = 3] = "TAG_CLOSE";
    TokenType[TokenType["TEXT"] = 4] = "TEXT";
    TokenType[TokenType["ESCAPABLE_RAW_TEXT"] = 5] = "ESCAPABLE_RAW_TEXT";
    TokenType[TokenType["RAW_TEXT"] = 6] = "RAW_TEXT";
    TokenType[TokenType["COMMENT_START"] = 7] = "COMMENT_START";
    TokenType[TokenType["COMMENT_END"] = 8] = "COMMENT_END";
    TokenType[TokenType["CDATA_START"] = 9] = "CDATA_START";
    TokenType[TokenType["CDATA_END"] = 10] = "CDATA_END";
    TokenType[TokenType["ATTR_NAME"] = 11] = "ATTR_NAME";
    TokenType[TokenType["ATTR_VALUE"] = 12] = "ATTR_VALUE";
    TokenType[TokenType["DOC_TYPE"] = 13] = "DOC_TYPE";
    TokenType[TokenType["EXPANSION_FORM_START"] = 14] = "EXPANSION_FORM_START";
    TokenType[TokenType["EXPANSION_CASE_VALUE"] = 15] = "EXPANSION_CASE_VALUE";
    TokenType[TokenType["EXPANSION_CASE_EXP_START"] = 16] = "EXPANSION_CASE_EXP_START";
    TokenType[TokenType["EXPANSION_CASE_EXP_END"] = 17] = "EXPANSION_CASE_EXP_END";
    TokenType[TokenType["EXPANSION_FORM_END"] = 18] = "EXPANSION_FORM_END";
    TokenType[TokenType["EOF"] = 19] = "EOF";
  })(TokenType$1 || (TokenType$1 = {}));
  var Token$1 = (function() {
    function Token(type, parts, sourceSpan) {
      this.type = type;
      this.parts = parts;
      this.sourceSpan = sourceSpan;
    }
    return Token;
  }());
  var TokenError = (function(_super) {
    __extends$5(TokenError, _super);
    function TokenError(errorMsg, tokenType, span) {
      _super.call(this, span, errorMsg);
      this.tokenType = tokenType;
    }
    return TokenError;
  }(ParseError));
  var TokenizeResult = (function() {
    function TokenizeResult(tokens, errors) {
      this.tokens = tokens;
      this.errors = errors;
    }
    return TokenizeResult;
  }());
  function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {
    if (tokenizeExpansionForms === void 0) {
      tokenizeExpansionForms = false;
    }
    if (interpolationConfig === void 0) {
      interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
    }
    return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig).tokenize();
  }
  var _CR_OR_CRLF_REGEXP = /\r\n?/g;
  function _unexpectedCharacterErrorMsg(charCode) {
    var char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);
    return "Unexpected character \"" + char + "\"";
  }
  function _unknownEntityErrorMsg(entitySrc) {
    return "Unknown entity \"" + entitySrc + "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax";
  }
  var _ControlFlowError = (function() {
    function _ControlFlowError(error) {
      this.error = error;
    }
    return _ControlFlowError;
  }());
  var _Tokenizer = (function() {
    function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {
      if (_interpolationConfig === void 0) {
        _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      this._file = _file;
      this._getTagDefinition = _getTagDefinition;
      this._tokenizeIcu = _tokenizeIcu;
      this._interpolationConfig = _interpolationConfig;
      this._peek = -1;
      this._nextPeek = -1;
      this._index = -1;
      this._line = 0;
      this._column = -1;
      this._expansionCaseStack = [];
      this._inInterpolation = false;
      this.tokens = [];
      this.errors = [];
      this._input = _file.content;
      this._length = _file.content.length;
      this._advance();
    }
    _Tokenizer.prototype._processCarriageReturns = function(content) {
      return content.replace(_CR_OR_CRLF_REGEXP, '\n');
    };
    _Tokenizer.prototype.tokenize = function() {
      while (this._peek !== $EOF) {
        var start = this._getLocation();
        try {
          if (this._attemptCharCode($LT)) {
            if (this._attemptCharCode($BANG)) {
              if (this._attemptCharCode($LBRACKET)) {
                this._consumeCdata(start);
              } else if (this._attemptCharCode($MINUS)) {
                this._consumeComment(start);
              } else {
                this._consumeDocType(start);
              }
            } else if (this._attemptCharCode($SLASH)) {
              this._consumeTagClose(start);
            } else {
              this._consumeTagOpen(start);
            }
          } else if (!this._tokenizeIcu || !this._tokenizeExpansionForm()) {
            this._consumeText();
          }
        } catch (e) {
          if (e instanceof _ControlFlowError) {
            this.errors.push(e.error);
          } else {
            throw e;
          }
        }
      }
      this._beginToken(TokenType$1.EOF);
      this._endToken([]);
      return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
    };
    _Tokenizer.prototype._tokenizeExpansionForm = function() {
      if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
        this._consumeExpansionFormStart();
        return true;
      }
      if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {
        this._consumeExpansionCaseStart();
        return true;
      }
      if (this._peek === $RBRACE) {
        if (this._isInExpansionCase()) {
          this._consumeExpansionCaseEnd();
          return true;
        }
        if (this._isInExpansionForm()) {
          this._consumeExpansionFormEnd();
          return true;
        }
      }
      return false;
    };
    _Tokenizer.prototype._getLocation = function() {
      return new ParseLocation(this._file, this._index, this._line, this._column);
    };
    _Tokenizer.prototype._getSpan = function(start, end) {
      if (start === void 0) {
        start = this._getLocation();
      }
      if (end === void 0) {
        end = this._getLocation();
      }
      return new ParseSourceSpan(start, end);
    };
    _Tokenizer.prototype._beginToken = function(type, start) {
      if (start === void 0) {
        start = this._getLocation();
      }
      this._currentTokenStart = start;
      this._currentTokenType = type;
    };
    _Tokenizer.prototype._endToken = function(parts, end) {
      if (end === void 0) {
        end = this._getLocation();
      }
      var token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
      this.tokens.push(token);
      this._currentTokenStart = null;
      this._currentTokenType = null;
      return token;
    };
    _Tokenizer.prototype._createError = function(msg, span) {
      if (this._isInExpansionForm()) {
        msg += " (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)";
      }
      var error = new TokenError(msg, this._currentTokenType, span);
      this._currentTokenStart = null;
      this._currentTokenType = null;
      return new _ControlFlowError(error);
    };
    _Tokenizer.prototype._advance = function() {
      if (this._index >= this._length) {
        throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());
      }
      if (this._peek === $LF) {
        this._line++;
        this._column = 0;
      } else if (this._peek !== $LF && this._peek !== $CR) {
        this._column++;
      }
      this._index++;
      this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);
      this._nextPeek = this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);
    };
    _Tokenizer.prototype._attemptCharCode = function(charCode) {
      if (this._peek === charCode) {
        this._advance();
        return true;
      }
      return false;
    };
    _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function(charCode) {
      if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
        this._advance();
        return true;
      }
      return false;
    };
    _Tokenizer.prototype._requireCharCode = function(charCode) {
      var location = this._getLocation();
      if (!this._attemptCharCode(charCode)) {
        throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
      }
    };
    _Tokenizer.prototype._attemptStr = function(chars) {
      var len = chars.length;
      if (this._index + len > this._length) {
        return false;
      }
      var initialPosition = this._savePosition();
      for (var i = 0; i < len; i++) {
        if (!this._attemptCharCode(chars.charCodeAt(i))) {
          this._restorePosition(initialPosition);
          return false;
        }
      }
      return true;
    };
    _Tokenizer.prototype._attemptStrCaseInsensitive = function(chars) {
      for (var i = 0; i < chars.length; i++) {
        if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
          return false;
        }
      }
      return true;
    };
    _Tokenizer.prototype._requireStr = function(chars) {
      var location = this._getLocation();
      if (!this._attemptStr(chars)) {
        throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
      }
    };
    _Tokenizer.prototype._attemptCharCodeUntilFn = function(predicate) {
      while (!predicate(this._peek)) {
        this._advance();
      }
    };
    _Tokenizer.prototype._requireCharCodeUntilFn = function(predicate, len) {
      var start = this._getLocation();
      this._attemptCharCodeUntilFn(predicate);
      if (this._index - start.offset < len) {
        throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
      }
    };
    _Tokenizer.prototype._attemptUntilChar = function(char) {
      while (this._peek !== char) {
        this._advance();
      }
    };
    _Tokenizer.prototype._readChar = function(decodeEntities) {
      if (decodeEntities && this._peek === $AMPERSAND) {
        return this._decodeEntity();
      } else {
        var index = this._index;
        this._advance();
        return this._input[index];
      }
    };
    _Tokenizer.prototype._decodeEntity = function() {
      var start = this._getLocation();
      this._advance();
      if (this._attemptCharCode($HASH)) {
        var isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
        var numberStart = this._getLocation().offset;
        this._attemptCharCodeUntilFn(isDigitEntityEnd);
        if (this._peek != $SEMICOLON) {
          throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
        }
        this._advance();
        var strNum = this._input.substring(numberStart, this._index - 1);
        try {
          var charCode = parseInt(strNum, isHex ? 16 : 10);
          return String.fromCharCode(charCode);
        } catch (e) {
          var entity = this._input.substring(start.offset + 1, this._index - 1);
          throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
        }
      } else {
        var startPosition = this._savePosition();
        this._attemptCharCodeUntilFn(isNamedEntityEnd);
        if (this._peek != $SEMICOLON) {
          this._restorePosition(startPosition);
          return '&';
        }
        this._advance();
        var name_1 = this._input.substring(start.offset + 1, this._index - 1);
        var char = NAMED_ENTITIES[name_1];
        if (!char) {
          throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));
        }
        return char;
      }
    };
    _Tokenizer.prototype._consumeRawText = function(decodeEntities, firstCharOfEnd, attemptEndRest) {
      var tagCloseStart;
      var textStart = this._getLocation();
      this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);
      var parts = [];
      while (true) {
        tagCloseStart = this._getLocation();
        if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
          break;
        }
        if (this._index > tagCloseStart.offset) {
          parts.push(this._input.substring(tagCloseStart.offset, this._index));
        }
        while (this._peek !== firstCharOfEnd) {
          parts.push(this._readChar(decodeEntities));
        }
      }
      return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);
    };
    _Tokenizer.prototype._consumeComment = function(start) {
      var _this = this;
      this._beginToken(TokenType$1.COMMENT_START, start);
      this._requireCharCode($MINUS);
      this._endToken([]);
      var textToken = this._consumeRawText(false, $MINUS, function() {
        return _this._attemptStr('->');
      });
      this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end);
      this._endToken([]);
    };
    _Tokenizer.prototype._consumeCdata = function(start) {
      var _this = this;
      this._beginToken(TokenType$1.CDATA_START, start);
      this._requireStr('CDATA[');
      this._endToken([]);
      var textToken = this._consumeRawText(false, $RBRACKET, function() {
        return _this._attemptStr(']>');
      });
      this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end);
      this._endToken([]);
    };
    _Tokenizer.prototype._consumeDocType = function(start) {
      this._beginToken(TokenType$1.DOC_TYPE, start);
      this._attemptUntilChar($GT);
      this._advance();
      this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
    };
    _Tokenizer.prototype._consumePrefixAndName = function() {
      var nameOrPrefixStart = this._index;
      var prefix = null;
      while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {
        this._advance();
      }
      var nameStart;
      if (this._peek === $COLON) {
        this._advance();
        prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
        nameStart = this._index;
      } else {
        nameStart = nameOrPrefixStart;
      }
      this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
      var name = this._input.substring(nameStart, this._index);
      return [prefix, name];
    };
    _Tokenizer.prototype._consumeTagOpen = function(start) {
      var savedPos = this._savePosition();
      var tagName;
      var lowercaseTagName;
      try {
        if (!isAsciiLetter(this._peek)) {
          throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
        }
        var nameStart = this._index;
        this._consumeTagOpenStart(start);
        tagName = this._input.substring(nameStart, this._index);
        lowercaseTagName = tagName.toLowerCase();
        this._attemptCharCodeUntilFn(isNotWhitespace);
        while (this._peek !== $SLASH && this._peek !== $GT) {
          this._consumeAttributeName();
          this._attemptCharCodeUntilFn(isNotWhitespace);
          if (this._attemptCharCode($EQ)) {
            this._attemptCharCodeUntilFn(isNotWhitespace);
            this._consumeAttributeValue();
          }
          this._attemptCharCodeUntilFn(isNotWhitespace);
        }
        this._consumeTagOpenEnd();
      } catch (e) {
        if (e instanceof _ControlFlowError) {
          this._restorePosition(savedPos);
          this._beginToken(TokenType$1.TEXT, start);
          this._endToken(['<']);
          return;
        }
        throw e;
      }
      var contentTokenType = this._getTagDefinition(tagName).contentType;
      if (contentTokenType === TagContentType.RAW_TEXT) {
        this._consumeRawTextWithTagClose(lowercaseTagName, false);
      } else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
        this._consumeRawTextWithTagClose(lowercaseTagName, true);
      }
    };
    _Tokenizer.prototype._consumeRawTextWithTagClose = function(lowercaseTagName, decodeEntities) {
      var _this = this;
      var textToken = this._consumeRawText(decodeEntities, $LT, function() {
        if (!_this._attemptCharCode($SLASH))
          return false;
        _this._attemptCharCodeUntilFn(isNotWhitespace);
        if (!_this._attemptStrCaseInsensitive(lowercaseTagName))
          return false;
        _this._attemptCharCodeUntilFn(isNotWhitespace);
        return _this._attemptCharCode($GT);
      });
      this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end);
      this._endToken([null, lowercaseTagName]);
    };
    _Tokenizer.prototype._consumeTagOpenStart = function(start) {
      this._beginToken(TokenType$1.TAG_OPEN_START, start);
      var parts = this._consumePrefixAndName();
      this._endToken(parts);
    };
    _Tokenizer.prototype._consumeAttributeName = function() {
      this._beginToken(TokenType$1.ATTR_NAME);
      var prefixAndName = this._consumePrefixAndName();
      this._endToken(prefixAndName);
    };
    _Tokenizer.prototype._consumeAttributeValue = function() {
      this._beginToken(TokenType$1.ATTR_VALUE);
      var value;
      if (this._peek === $SQ || this._peek === $DQ) {
        var quoteChar = this._peek;
        this._advance();
        var parts = [];
        while (this._peek !== quoteChar) {
          parts.push(this._readChar(true));
        }
        value = parts.join('');
        this._advance();
      } else {
        var valueStart = this._index;
        this._requireCharCodeUntilFn(isNameEnd, 1);
        value = this._input.substring(valueStart, this._index);
      }
      this._endToken([this._processCarriageReturns(value)]);
    };
    _Tokenizer.prototype._consumeTagOpenEnd = function() {
      var tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;
      this._beginToken(tokenType);
      this._requireCharCode($GT);
      this._endToken([]);
    };
    _Tokenizer.prototype._consumeTagClose = function(start) {
      this._beginToken(TokenType$1.TAG_CLOSE, start);
      this._attemptCharCodeUntilFn(isNotWhitespace);
      var prefixAndName = this._consumePrefixAndName();
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._requireCharCode($GT);
      this._endToken(prefixAndName);
    };
    _Tokenizer.prototype._consumeExpansionFormStart = function() {
      this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation());
      this._requireCharCode($LBRACE);
      this._endToken([]);
      this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);
      this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
      var condition = this._readUntil($COMMA);
      this._endToken([condition], this._getLocation());
      this._requireCharCode($COMMA);
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
      var type = this._readUntil($COMMA);
      this._endToken([type], this._getLocation());
      this._requireCharCode($COMMA);
      this._attemptCharCodeUntilFn(isNotWhitespace);
    };
    _Tokenizer.prototype._consumeExpansionCaseStart = function() {
      this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());
      var value = this._readUntil($LBRACE).trim();
      this._endToken([value], this._getLocation());
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation());
      this._requireCharCode($LBRACE);
      this._endToken([], this._getLocation());
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);
    };
    _Tokenizer.prototype._consumeExpansionCaseEnd = function() {
      this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation());
      this._requireCharCode($RBRACE);
      this._endToken([], this._getLocation());
      this._attemptCharCodeUntilFn(isNotWhitespace);
      this._expansionCaseStack.pop();
    };
    _Tokenizer.prototype._consumeExpansionFormEnd = function() {
      this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation());
      this._requireCharCode($RBRACE);
      this._endToken([]);
      this._expansionCaseStack.pop();
    };
    _Tokenizer.prototype._consumeText = function() {
      var start = this._getLocation();
      this._beginToken(TokenType$1.TEXT, start);
      var parts = [];
      do {
        if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
          parts.push(this._interpolationConfig.start);
          this._inInterpolation = true;
        } else if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.end) && this._inInterpolation) {
          parts.push(this._interpolationConfig.end);
          this._inInterpolation = false;
        } else {
          parts.push(this._readChar(true));
        }
      } while (!this._isTextEnd());
      this._endToken([this._processCarriageReturns(parts.join(''))]);
    };
    _Tokenizer.prototype._isTextEnd = function() {
      if (this._peek === $LT || this._peek === $EOF) {
        return true;
      }
      if (this._tokenizeIcu && !this._inInterpolation) {
        if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
          return true;
        }
        if (this._peek === $RBRACE && this._isInExpansionCase()) {
          return true;
        }
      }
      return false;
    };
    _Tokenizer.prototype._savePosition = function() {
      return [this._peek, this._index, this._column, this._line, this.tokens.length];
    };
    _Tokenizer.prototype._readUntil = function(char) {
      var start = this._index;
      this._attemptUntilChar(char);
      return this._input.substring(start, this._index);
    };
    _Tokenizer.prototype._restorePosition = function(position) {
      this._peek = position[0];
      this._index = position[1];
      this._column = position[2];
      this._line = position[3];
      var nbTokens = position[4];
      if (nbTokens < this.tokens.length) {
        this.tokens = this.tokens.slice(0, nbTokens);
      }
    };
    _Tokenizer.prototype._isInExpansionCase = function() {
      return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_CASE_EXP_START;
    };
    _Tokenizer.prototype._isInExpansionForm = function() {
      return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType$1.EXPANSION_FORM_START;
    };
    return _Tokenizer;
  }());
  function isNotWhitespace(code) {
    return !isWhitespace(code) || code === $EOF;
  }
  function isNameEnd(code) {
    return isWhitespace(code) || code === $GT || code === $SLASH || code === $SQ || code === $DQ || code === $EQ;
  }
  function isPrefixEnd(code) {
    return (code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9);
  }
  function isDigitEntityEnd(code) {
    return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
  }
  function isNamedEntityEnd(code) {
    return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
  }
  function isExpansionFormStart(input, offset, interpolationConfig) {
    var isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;
    return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;
  }
  function isExpansionCaseStart(peek) {
    return peek === $EQ || isAsciiLetter(peek);
  }
  function compareCharCodeCaseInsensitive(code1, code2) {
    return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
  }
  function toUpperCaseCharCode(code) {
    return code >= $a && code <= $z ? code - $a + $A : code;
  }
  function mergeTextTokens(srcTokens) {
    var dstTokens = [];
    var lastDstToken;
    for (var i = 0; i < srcTokens.length; i++) {
      var token = srcTokens[i];
      if (lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT) {
        lastDstToken.parts[0] += token.parts[0];
        lastDstToken.sourceSpan.end = token.sourceSpan.end;
      } else {
        lastDstToken = token;
        dstTokens.push(lastDstToken);
      }
    }
    return dstTokens;
  }
  var __extends$4 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var TreeError = (function(_super) {
    __extends$4(TreeError, _super);
    function TreeError(elementName, span, msg) {
      _super.call(this, span, msg);
      this.elementName = elementName;
    }
    TreeError.create = function(elementName, span, msg) {
      return new TreeError(elementName, span, msg);
    };
    return TreeError;
  }(ParseError));
  var ParseTreeResult = (function() {
    function ParseTreeResult(rootNodes, errors) {
      this.rootNodes = rootNodes;
      this.errors = errors;
    }
    return ParseTreeResult;
  }());
  var Parser$1 = (function() {
    function Parser(getTagDefinition) {
      this.getTagDefinition = getTagDefinition;
    }
    Parser.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
      if (parseExpansionForms === void 0) {
        parseExpansionForms = false;
      }
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      var tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);
      var treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();
      return new ParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));
    };
    return Parser;
  }());
  var _TreeBuilder = (function() {
    function _TreeBuilder(tokens, getTagDefinition) {
      this.tokens = tokens;
      this.getTagDefinition = getTagDefinition;
      this._index = -1;
      this._rootNodes = [];
      this._errors = [];
      this._elementStack = [];
      this._advance();
    }
    _TreeBuilder.prototype.build = function() {
      while (this._peek.type !== TokenType$1.EOF) {
        if (this._peek.type === TokenType$1.TAG_OPEN_START) {
          this._consumeStartTag(this._advance());
        } else if (this._peek.type === TokenType$1.TAG_CLOSE) {
          this._consumeEndTag(this._advance());
        } else if (this._peek.type === TokenType$1.CDATA_START) {
          this._closeVoidElement();
          this._consumeCdata(this._advance());
        } else if (this._peek.type === TokenType$1.COMMENT_START) {
          this._closeVoidElement();
          this._consumeComment(this._advance());
        } else if (this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT || this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT) {
          this._closeVoidElement();
          this._consumeText(this._advance());
        } else if (this._peek.type === TokenType$1.EXPANSION_FORM_START) {
          this._consumeExpansion(this._advance());
        } else {
          this._advance();
        }
      }
      return new ParseTreeResult(this._rootNodes, this._errors);
    };
    _TreeBuilder.prototype._advance = function() {
      var prev = this._peek;
      if (this._index < this.tokens.length - 1) {
        this._index++;
      }
      this._peek = this.tokens[this._index];
      return prev;
    };
    _TreeBuilder.prototype._advanceIf = function(type) {
      if (this._peek.type === type) {
        return this._advance();
      }
      return null;
    };
    _TreeBuilder.prototype._consumeCdata = function(startToken) {
      this._consumeText(this._advance());
      this._advanceIf(TokenType$1.CDATA_END);
    };
    _TreeBuilder.prototype._consumeComment = function(token) {
      var text = this._advanceIf(TokenType$1.RAW_TEXT);
      this._advanceIf(TokenType$1.COMMENT_END);
      var value = isPresent(text) ? text.parts[0].trim() : null;
      this._addToParent(new Comment(value, token.sourceSpan));
    };
    _TreeBuilder.prototype._consumeExpansion = function(token) {
      var switchValue = this._advance();
      var type = this._advance();
      var cases = [];
      while (this._peek.type === TokenType$1.EXPANSION_CASE_VALUE) {
        var expCase = this._parseExpansionCase();
        if (isBlank(expCase))
          return;
        cases.push(expCase);
      }
      if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) {
        this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
        return;
      }
      var sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
      this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
      this._advance();
    };
    _TreeBuilder.prototype._parseExpansionCase = function() {
      var value = this._advance();
      if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) {
        this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'."));
        return null;
      }
      var start = this._advance();
      var exp = this._collectExpansionExpTokens(start);
      if (isBlank(exp))
        return null;
      var end = this._advance();
      exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));
      var parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
      if (parsedExp.errors.length > 0) {
        this._errors = this._errors.concat(parsedExp.errors);
        return null;
      }
      var sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
      var expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
      return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
    };
    _TreeBuilder.prototype._collectExpansionExpTokens = function(start) {
      var exp = [];
      var expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START];
      while (true) {
        if (this._peek.type === TokenType$1.EXPANSION_FORM_START || this._peek.type === TokenType$1.EXPANSION_CASE_EXP_START) {
          expansionFormStack.push(this._peek.type);
        }
        if (this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {
          if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) {
            expansionFormStack.pop();
            if (expansionFormStack.length == 0)
              return exp;
          } else {
            this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
            return null;
          }
        }
        if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {
          if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) {
            expansionFormStack.pop();
          } else {
            this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
            return null;
          }
        }
        if (this._peek.type === TokenType$1.EOF) {
          this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
          return null;
        }
        exp.push(this._advance());
      }
    };
    _TreeBuilder.prototype._consumeText = function(token) {
      var text = token.parts[0];
      if (text.length > 0 && text[0] == '\n') {
        var parent_1 = this._getParentElement();
        if (isPresent(parent_1) && parent_1.children.length == 0 && this.getTagDefinition(parent_1.name).ignoreFirstLf) {
          text = text.substring(1);
        }
      }
      if (text.length > 0) {
        this._addToParent(new Text(text, token.sourceSpan));
      }
    };
    _TreeBuilder.prototype._closeVoidElement = function() {
      if (this._elementStack.length > 0) {
        var el = ListWrapper.last(this._elementStack);
        if (this.getTagDefinition(el.name).isVoid) {
          this._elementStack.pop();
        }
      }
    };
    _TreeBuilder.prototype._consumeStartTag = function(startTagToken) {
      var prefix = startTagToken.parts[0];
      var name = startTagToken.parts[1];
      var attrs = [];
      while (this._peek.type === TokenType$1.ATTR_NAME) {
        attrs.push(this._consumeAttr(this._advance()));
      }
      var fullName = this._getElementFullName(prefix, name, this._getParentElement());
      var selfClosing = false;
      if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {
        this._advance();
        selfClosing = true;
        var tagDef = this.getTagDefinition(fullName);
        if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
          this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, "Only void and foreign elements can be self closed \"" + startTagToken.parts[1] + "\""));
        }
      } else if (this._peek.type === TokenType$1.TAG_OPEN_END) {
        this._advance();
        selfClosing = false;
      }
      var end = this._peek.sourceSpan.start;
      var span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);
      var el = new Element(fullName, attrs, [], span, span, null);
      this._pushElement(el);
      if (selfClosing) {
        this._popElement(fullName);
        el.endSourceSpan = span;
      }
    };
    _TreeBuilder.prototype._pushElement = function(el) {
      if (this._elementStack.length > 0) {
        var parentEl = ListWrapper.last(this._elementStack);
        if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
          this._elementStack.pop();
        }
      }
      var tagDef = this.getTagDefinition(el.name);
      var _a = this._getParentElementSkippingContainers(),
          parent = _a.parent,
          container = _a.container;
      if (isPresent(parent) && tagDef.requireExtraParent(parent.name)) {
        var newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
        this._insertBeforeContainer(parent, container, newParent);
      }
      this._addToParent(el);
      this._elementStack.push(el);
    };
    _TreeBuilder.prototype._consumeEndTag = function(endTagToken) {
      var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
      if (this._getParentElement()) {
        this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
      }
      if (this.getTagDefinition(fullName).isVoid) {
        this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Void elements do not have end tags \"" + endTagToken.parts[1] + "\""));
      } else if (!this._popElement(fullName)) {
        this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Unexpected closing tag \"" + endTagToken.parts[1] + "\""));
      }
    };
    _TreeBuilder.prototype._popElement = function(fullName) {
      for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
        var el = this._elementStack[stackIndex];
        if (el.name == fullName) {
          ListWrapper.splice(this._elementStack, stackIndex, this._elementStack.length - stackIndex);
          return true;
        }
        if (!this.getTagDefinition(el.name).closedByParent) {
          return false;
        }
      }
      return false;
    };
    _TreeBuilder.prototype._consumeAttr = function(attrName) {
      var fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
      var end = attrName.sourceSpan.end;
      var value = '';
      if (this._peek.type === TokenType$1.ATTR_VALUE) {
        var valueToken = this._advance();
        value = valueToken.parts[0];
        end = valueToken.sourceSpan.end;
      }
      return new Attribute(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end));
    };
    _TreeBuilder.prototype._getParentElement = function() {
      return this._elementStack.length > 0 ? ListWrapper.last(this._elementStack) : null;
    };
    _TreeBuilder.prototype._getParentElementSkippingContainers = function() {
      var container = null;
      for (var i = this._elementStack.length - 1; i >= 0; i--) {
        if (this._elementStack[i].name !== 'ng-container') {
          return {
            parent: this._elementStack[i],
            container: container
          };
        }
        container = this._elementStack[i];
      }
      return {
        parent: ListWrapper.last(this._elementStack),
        container: container
      };
    };
    _TreeBuilder.prototype._addToParent = function(node) {
      var parent = this._getParentElement();
      if (isPresent(parent)) {
        parent.children.push(node);
      } else {
        this._rootNodes.push(node);
      }
    };
    _TreeBuilder.prototype._insertBeforeContainer = function(parent, container, node) {
      if (!container) {
        this._addToParent(node);
        this._elementStack.push(node);
      } else {
        if (parent) {
          var index = parent.children.indexOf(container);
          parent.children[index] = node;
        } else {
          this._rootNodes.push(node);
        }
        node.children.push(container);
        this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
      }
    };
    _TreeBuilder.prototype._getElementFullName = function(prefix, localName, parentElement) {
      if (isBlank(prefix)) {
        prefix = this.getTagDefinition(localName).implicitNamespacePrefix;
        if (isBlank(prefix) && isPresent(parentElement)) {
          prefix = getNsPrefix(parentElement.name);
        }
      }
      return mergeNsAndName(prefix, localName);
    };
    return _TreeBuilder;
  }());
  function lastOnStack(stack, element) {
    return stack.length > 0 && stack[stack.length - 1] === element;
  }
  function digestMessage(message) {
    return sha1(serializeNodes(message.nodes).join('') + ("[" + message.meaning + "]"));
  }
  var _SerializerVisitor = (function() {
    function _SerializerVisitor() {}
    _SerializerVisitor.prototype.visitText = function(text, context) {
      return text.value;
    };
    _SerializerVisitor.prototype.visitContainer = function(container, context) {
      var _this = this;
      return "[" + container.children.map(function(child) {
        return child.visit(_this);
      }).join(', ') + "]";
    };
    _SerializerVisitor.prototype.visitIcu = function(icu, context) {
      var _this = this;
      var strCases = Object.keys(icu.cases).map(function(k) {
        return (k + " {" + icu.cases[k].visit(_this) + "}");
      });
      return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(', ') + "}";
    };
    _SerializerVisitor.prototype.visitTagPlaceholder = function(ph, context) {
      var _this = this;
      return ph.isVoid ? "<ph tag name=\"" + ph.startName + "\"/>" : "<ph tag name=\"" + ph.startName + "\">" + ph.children.map(function(child) {
        return child.visit(_this);
      }).join(', ') + "</ph name=\"" + ph.closeName + "\">";
    };
    _SerializerVisitor.prototype.visitPlaceholder = function(ph, context) {
      return "<ph name=\"" + ph.name + "\">" + ph.value + "</ph>";
    };
    _SerializerVisitor.prototype.visitIcuPlaceholder = function(ph, context) {
      return "<ph icu name=\"" + ph.name + "\">" + ph.value.visit(this) + "</ph>";
    };
    return _SerializerVisitor;
  }());
  var serializerVisitor = new _SerializerVisitor();
  function serializeNodes(nodes) {
    return nodes.map(function(a) {
      return a.visit(serializerVisitor, null);
    });
  }
  function sha1(str) {
    var utf8 = utf8Encode(str);
    var words32 = stringToWords32(utf8);
    var len = utf8.length * 8;
    var w = new Array(80);
    var _a = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0],
        a = _a[0],
        b = _a[1],
        c = _a[2],
        d = _a[3],
        e = _a[4];
    words32[len >> 5] |= 0x80 << (24 - len % 32);
    words32[((len + 64 >> 9) << 4) + 15] = len;
    for (var i = 0; i < words32.length; i += 16) {
      var _b = [a, b, c, d, e],
          h0 = _b[0],
          h1 = _b[1],
          h2 = _b[2],
          h3 = _b[3],
          h4 = _b[4];
      for (var j = 0; j < 80; j++) {
        if (j < 16) {
          w[j] = words32[i + j];
        } else {
          w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
        }
        var _c = fk(j, b, c, d),
            f = _c[0],
            k = _c[1];
        var temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
        _d = [d, c, rol32(b, 30), a, temp], e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];
      }
      _e = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];
    }
    var sha1 = words32ToString([a, b, c, d, e]);
    var hex = '';
    for (var i = 0; i < sha1.length; i++) {
      var b_1 = sha1.charCodeAt(i);
      hex += (b_1 >>> 4 & 0x0f).toString(16) + (b_1 & 0x0f).toString(16);
    }
    return hex.toLowerCase();
    var _d,
        _e;
  }
  function utf8Encode(str) {
    var encoded = '';
    for (var index = 0; index < str.length; index++) {
      var codePoint = decodeSurrogatePairs(str, index);
      if (codePoint <= 0x7f) {
        encoded += String.fromCharCode(codePoint);
      } else if (codePoint <= 0x7ff) {
        encoded += String.fromCharCode(0xc0 | codePoint >>> 6, 0x80 | codePoint & 0x3f);
      } else if (codePoint <= 0xffff) {
        encoded += String.fromCharCode(0xe0 | codePoint >>> 12, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
      } else if (codePoint <= 0x1fffff) {
        encoded += String.fromCharCode(0xf0 | codePoint >>> 18, 0x80 | codePoint >>> 12 & 0x3f, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
      }
    }
    return encoded;
  }
  function decodeSurrogatePairs(str, index) {
    if (index < 0 || index >= str.length) {
      throw new Error("index=" + index + " is out of range in \"" + str + "\"");
    }
    var high = str.charCodeAt(index);
    var low;
    if (high >= 0xd800 && high <= 0xdfff && str.length > index + 1) {
      low = str.charCodeAt(index + 1);
      if (low >= 0xdc00 && low <= 0xdfff) {
        return (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
      }
    }
    return high;
  }
  function stringToWords32(str) {
    var words32 = Array(str.length >>> 2);
    for (var i = 0; i < words32.length; i++) {
      words32[i] = 0;
    }
    for (var i = 0; i < str.length; i++) {
      words32[i >>> 2] |= (str.charCodeAt(i) & 0xff) << 8 * (3 - i & 0x3);
    }
    return words32;
  }
  function words32ToString(words32) {
    var str = '';
    for (var i = 0; i < words32.length * 4; i++) {
      str += String.fromCharCode((words32[i >>> 2] >>> 8 * (3 - i & 0x3)) & 0xff);
    }
    return str;
  }
  function fk(index, b, c, d) {
    if (index < 20) {
      return [(b & c) | (~b & d), 0x5a827999];
    }
    if (index < 40) {
      return [b ^ c ^ d, 0x6ed9eba1];
    }
    if (index < 60) {
      return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];
    }
    return [b ^ c ^ d, 0xca62c1d6];
  }
  function add32(a, b) {
    var low = (a & 0xffff) + (b & 0xffff);
    var high = (a >> 16) + (b >> 16) + (low >> 16);
    return (high << 16) | (low & 0xffff);
  }
  function rol32(a, count) {
    return (a << count) | (a >>> (32 - count));
  }
  var Message = (function() {
    function Message(nodes, placeholders, placeholderToMsgIds, meaning, description) {
      this.nodes = nodes;
      this.placeholders = placeholders;
      this.placeholderToMsgIds = placeholderToMsgIds;
      this.meaning = meaning;
      this.description = description;
    }
    return Message;
  }());
  var Text$1 = (function() {
    function Text(value, sourceSpan) {
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    Text.prototype.visit = function(visitor, context) {
      return visitor.visitText(this, context);
    };
    return Text;
  }());
  var Container = (function() {
    function Container(children, sourceSpan) {
      this.children = children;
      this.sourceSpan = sourceSpan;
    }
    Container.prototype.visit = function(visitor, context) {
      return visitor.visitContainer(this, context);
    };
    return Container;
  }());
  var Icu = (function() {
    function Icu(expression, type, cases, sourceSpan) {
      this.expression = expression;
      this.type = type;
      this.cases = cases;
      this.sourceSpan = sourceSpan;
    }
    Icu.prototype.visit = function(visitor, context) {
      return visitor.visitIcu(this, context);
    };
    return Icu;
  }());
  var TagPlaceholder = (function() {
    function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
      this.tag = tag;
      this.attrs = attrs;
      this.startName = startName;
      this.closeName = closeName;
      this.children = children;
      this.isVoid = isVoid;
      this.sourceSpan = sourceSpan;
    }
    TagPlaceholder.prototype.visit = function(visitor, context) {
      return visitor.visitTagPlaceholder(this, context);
    };
    return TagPlaceholder;
  }());
  var Placeholder = (function() {
    function Placeholder(value, name, sourceSpan) {
      if (name === void 0) {
        name = '';
      }
      this.value = value;
      this.name = name;
      this.sourceSpan = sourceSpan;
    }
    Placeholder.prototype.visit = function(visitor, context) {
      return visitor.visitPlaceholder(this, context);
    };
    return Placeholder;
  }());
  var IcuPlaceholder = (function() {
    function IcuPlaceholder(value, name, sourceSpan) {
      if (name === void 0) {
        name = '';
      }
      this.value = value;
      this.name = name;
      this.sourceSpan = sourceSpan;
    }
    IcuPlaceholder.prototype.visit = function(visitor, context) {
      return visitor.visitIcuPlaceholder(this, context);
    };
    return IcuPlaceholder;
  }());
  var HtmlTagDefinition = (function() {
    function HtmlTagDefinition(_a) {
      var _this = this;
      var _b = _a === void 0 ? {} : _a,
          closedByChildren = _b.closedByChildren,
          requiredParents = _b.requiredParents,
          implicitNamespacePrefix = _b.implicitNamespacePrefix,
          _c = _b.contentType,
          contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c,
          _d = _b.closedByParent,
          closedByParent = _d === void 0 ? false : _d,
          _e = _b.isVoid,
          isVoid = _e === void 0 ? false : _e,
          _f = _b.ignoreFirstLf,
          ignoreFirstLf = _f === void 0 ? false : _f;
      this.closedByChildren = {};
      this.closedByParent = false;
      this.canSelfClose = false;
      if (closedByChildren && closedByChildren.length > 0) {
        closedByChildren.forEach(function(tagName) {
          return _this.closedByChildren[tagName] = true;
        });
      }
      this.isVoid = isVoid;
      this.closedByParent = closedByParent || isVoid;
      if (requiredParents && requiredParents.length > 0) {
        this.requiredParents = {};
        this.parentToAdd = requiredParents[0];
        requiredParents.forEach(function(tagName) {
          return _this.requiredParents[tagName] = true;
        });
      }
      this.implicitNamespacePrefix = implicitNamespacePrefix;
      this.contentType = contentType;
      this.ignoreFirstLf = ignoreFirstLf;
    }
    HtmlTagDefinition.prototype.requireExtraParent = function(currentParent) {
      if (!this.requiredParents) {
        return false;
      }
      if (!currentParent) {
        return true;
      }
      var lcParent = currentParent.toLowerCase();
      return this.requiredParents[lcParent] != true && lcParent != 'template';
    };
    HtmlTagDefinition.prototype.isClosedByChild = function(name) {
      return this.isVoid || name.toLowerCase() in this.closedByChildren;
    };
    return HtmlTagDefinition;
  }());
  var TAG_DEFINITIONS = {
    'base': new HtmlTagDefinition({isVoid: true}),
    'meta': new HtmlTagDefinition({isVoid: true}),
    'area': new HtmlTagDefinition({isVoid: true}),
    'embed': new HtmlTagDefinition({isVoid: true}),
    'link': new HtmlTagDefinition({isVoid: true}),
    'img': new HtmlTagDefinition({isVoid: true}),
    'input': new HtmlTagDefinition({isVoid: true}),
    'param': new HtmlTagDefinition({isVoid: true}),
    'hr': new HtmlTagDefinition({isVoid: true}),
    'br': new HtmlTagDefinition({isVoid: true}),
    'source': new HtmlTagDefinition({isVoid: true}),
    'track': new HtmlTagDefinition({isVoid: true}),
    'wbr': new HtmlTagDefinition({isVoid: true}),
    'p': new HtmlTagDefinition({
      closedByChildren: ['address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'],
      closedByParent: true
    }),
    'thead': new HtmlTagDefinition({closedByChildren: ['tbody', 'tfoot']}),
    'tbody': new HtmlTagDefinition({
      closedByChildren: ['tbody', 'tfoot'],
      closedByParent: true
    }),
    'tfoot': new HtmlTagDefinition({
      closedByChildren: ['tbody'],
      closedByParent: true
    }),
    'tr': new HtmlTagDefinition({
      closedByChildren: ['tr'],
      requiredParents: ['tbody', 'tfoot', 'thead'],
      closedByParent: true
    }),
    'td': new HtmlTagDefinition({
      closedByChildren: ['td', 'th'],
      closedByParent: true
    }),
    'th': new HtmlTagDefinition({
      closedByChildren: ['td', 'th'],
      closedByParent: true
    }),
    'col': new HtmlTagDefinition({
      requiredParents: ['colgroup'],
      isVoid: true
    }),
    'svg': new HtmlTagDefinition({implicitNamespacePrefix: 'svg'}),
    'math': new HtmlTagDefinition({implicitNamespacePrefix: 'math'}),
    'li': new HtmlTagDefinition({
      closedByChildren: ['li'],
      closedByParent: true
    }),
    'dt': new HtmlTagDefinition({closedByChildren: ['dt', 'dd']}),
    'dd': new HtmlTagDefinition({
      closedByChildren: ['dt', 'dd'],
      closedByParent: true
    }),
    'rb': new HtmlTagDefinition({
      closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
      closedByParent: true
    }),
    'rt': new HtmlTagDefinition({
      closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
      closedByParent: true
    }),
    'rtc': new HtmlTagDefinition({
      closedByChildren: ['rb', 'rtc', 'rp'],
      closedByParent: true
    }),
    'rp': new HtmlTagDefinition({
      closedByChildren: ['rb', 'rt', 'rtc', 'rp'],
      closedByParent: true
    }),
    'optgroup': new HtmlTagDefinition({
      closedByChildren: ['optgroup'],
      closedByParent: true
    }),
    'option': new HtmlTagDefinition({
      closedByChildren: ['option', 'optgroup'],
      closedByParent: true
    }),
    'pre': new HtmlTagDefinition({ignoreFirstLf: true}),
    'listing': new HtmlTagDefinition({ignoreFirstLf: true}),
    'style': new HtmlTagDefinition({contentType: TagContentType.RAW_TEXT}),
    'script': new HtmlTagDefinition({contentType: TagContentType.RAW_TEXT}),
    'title': new HtmlTagDefinition({contentType: TagContentType.ESCAPABLE_RAW_TEXT}),
    'textarea': new HtmlTagDefinition({
      contentType: TagContentType.ESCAPABLE_RAW_TEXT,
      ignoreFirstLf: true
    })
  };
  var _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
  function getHtmlTagDefinition(tagName) {
    return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
  }
  var TAG_TO_PLACEHOLDER_NAMES = {
    'A': 'LINK',
    'B': 'BOLD_TEXT',
    'BR': 'LINE_BREAK',
    'EM': 'EMPHASISED_TEXT',
    'H1': 'HEADING_LEVEL1',
    'H2': 'HEADING_LEVEL2',
    'H3': 'HEADING_LEVEL3',
    'H4': 'HEADING_LEVEL4',
    'H5': 'HEADING_LEVEL5',
    'H6': 'HEADING_LEVEL6',
    'HR': 'HORIZONTAL_RULE',
    'I': 'ITALIC_TEXT',
    'LI': 'LIST_ITEM',
    'LINK': 'MEDIA_LINK',
    'OL': 'ORDERED_LIST',
    'P': 'PARAGRAPH',
    'Q': 'QUOTATION',
    'S': 'STRIKETHROUGH_TEXT',
    'SMALL': 'SMALL_TEXT',
    'SUB': 'SUBSTRIPT',
    'SUP': 'SUPERSCRIPT',
    'TBODY': 'TABLE_BODY',
    'TD': 'TABLE_CELL',
    'TFOOT': 'TABLE_FOOTER',
    'TH': 'TABLE_HEADER_CELL',
    'THEAD': 'TABLE_HEADER',
    'TR': 'TABLE_ROW',
    'TT': 'MONOSPACED_TEXT',
    'U': 'UNDERLINED_TEXT',
    'UL': 'UNORDERED_LIST'
  };
  var PlaceholderRegistry = (function() {
    function PlaceholderRegistry() {
      this._placeHolderNameCounts = {};
      this._signatureToName = {};
    }
    PlaceholderRegistry.prototype.getStartTagPlaceholderName = function(tag, attrs, isVoid) {
      var signature = this._hashTag(tag, attrs, isVoid);
      if (this._signatureToName[signature]) {
        return this._signatureToName[signature];
      }
      var upperTag = tag.toUpperCase();
      var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
      var name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);
      this._signatureToName[signature] = name;
      return name;
    };
    PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function(tag) {
      var signature = this._hashClosingTag(tag);
      if (this._signatureToName[signature]) {
        return this._signatureToName[signature];
      }
      var upperTag = tag.toUpperCase();
      var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
      var name = this._generateUniqueName("CLOSE_" + baseName);
      this._signatureToName[signature] = name;
      return name;
    };
    PlaceholderRegistry.prototype.getPlaceholderName = function(name, content) {
      var upperName = name.toUpperCase();
      var signature = "PH: " + upperName + "=" + content;
      if (this._signatureToName[signature]) {
        return this._signatureToName[signature];
      }
      var uniqueName = this._generateUniqueName(upperName);
      this._signatureToName[signature] = uniqueName;
      return uniqueName;
    };
    PlaceholderRegistry.prototype._hashTag = function(tag, attrs, isVoid) {
      var start = "<" + tag;
      var strAttrs = Object.keys(attrs).sort().map(function(name) {
        return (" " + name + "=" + attrs[name]);
      }).join('');
      var end = isVoid ? '/>' : "></" + tag + ">";
      return start + strAttrs + end;
    };
    PlaceholderRegistry.prototype._hashClosingTag = function(tag) {
      return this._hashTag("/" + tag, {}, false);
    };
    PlaceholderRegistry.prototype._generateUniqueName = function(base) {
      var name = base;
      var next = this._placeHolderNameCounts[name];
      if (!next) {
        next = 1;
      } else {
        name += "_" + next;
        next++;
      }
      this._placeHolderNameCounts[base] = next;
      return name;
    };
    return PlaceholderRegistry;
  }());
  var _expParser = new Parser(new Lexer());
  function createI18nMessageFactory(interpolationConfig) {
    var visitor = new _I18nVisitor(_expParser, interpolationConfig);
    return function(nodes, meaning, description) {
      return visitor.toI18nMessage(nodes, meaning, description);
    };
  }
  var _I18nVisitor = (function() {
    function _I18nVisitor(_expressionParser, _interpolationConfig) {
      this._expressionParser = _expressionParser;
      this._interpolationConfig = _interpolationConfig;
    }
    _I18nVisitor.prototype.toI18nMessage = function(nodes, meaning, description) {
      this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;
      this._icuDepth = 0;
      this._placeholderRegistry = new PlaceholderRegistry();
      this._placeholderToContent = {};
      this._placeholderToIds = {};
      var i18nodes = visitAll(this, nodes, {});
      return new Message(i18nodes, this._placeholderToContent, this._placeholderToIds, meaning, description);
    };
    _I18nVisitor.prototype.visitElement = function(el, context) {
      var children = visitAll(this, el.children);
      var attrs = {};
      el.attrs.forEach(function(attr) {
        attrs[attr.name] = attr.value;
      });
      var isVoid = getHtmlTagDefinition(el.name).isVoid;
      var startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
      this._placeholderToContent[startPhName] = el.sourceSpan.toString();
      var closePhName = '';
      if (!isVoid) {
        closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);
        this._placeholderToContent[closePhName] = "</" + el.name + ">";
      }
      return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
    };
    _I18nVisitor.prototype.visitAttribute = function(attribute, context) {
      return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
    };
    _I18nVisitor.prototype.visitText = function(text, context) {
      return this._visitTextWithInterpolation(text.value, text.sourceSpan);
    };
    _I18nVisitor.prototype.visitComment = function(comment, context) {
      return null;
    };
    _I18nVisitor.prototype.visitExpansion = function(icu, context) {
      var _this = this;
      this._icuDepth++;
      var i18nIcuCases = {};
      var i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
      icu.cases.forEach(function(caze) {
        i18nIcuCases[caze.value] = new Container(caze.expression.map(function(node) {
          return node.visit(_this, {});
        }), caze.expSourceSpan);
      });
      this._icuDepth--;
      if (this._isIcu || this._icuDepth > 0) {
        return i18nIcu;
      }
      var phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
      var visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);
      this._placeholderToIds[phName] = digestMessage(visitor.toI18nMessage([icu], '', ''));
      return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
    };
    _I18nVisitor.prototype.visitExpansionCase = function(icuCase, context) {
      throw new Error('Unreachable code');
    };
    _I18nVisitor.prototype._visitTextWithInterpolation = function(text, sourceSpan) {
      var splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
      if (!splitInterpolation) {
        return new Text$1(text, sourceSpan);
      }
      var nodes = [];
      var container = new Container(nodes, sourceSpan);
      var _a = this._interpolationConfig,
          sDelimiter = _a.start,
          eDelimiter = _a.end;
      for (var i = 0; i < splitInterpolation.strings.length - 1; i++) {
        var expression = splitInterpolation.expressions[i];
        var baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';
        var phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
        if (splitInterpolation.strings[i].length) {
          nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));
        }
        nodes.push(new Placeholder(expression, phName, sourceSpan));
        this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
      }
      var lastStringIdx = splitInterpolation.strings.length - 1;
      if (splitInterpolation.strings[lastStringIdx].length) {
        nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));
      }
      return container;
    };
    return _I18nVisitor;
  }());
  var _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g;
  function _extractPlaceholderName(input) {
    return input.split(_CUSTOM_PH_EXP)[1];
  }
  var __extends$6 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var I18nError = (function(_super) {
    __extends$6(I18nError, _super);
    function I18nError(span, msg) {
      _super.call(this, span, msg);
    }
    return I18nError;
  }(ParseError));
  var _I18N_ATTR = 'i18n';
  var _I18N_ATTR_PREFIX = 'i18n-';
  var _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
  function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
    var visitor = new _Visitor(implicitTags, implicitAttrs);
    return visitor.extract(nodes, interpolationConfig);
  }
  function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
    var visitor = new _Visitor(implicitTags, implicitAttrs);
    return visitor.merge(nodes, translations, interpolationConfig);
  }
  var ExtractionResult = (function() {
    function ExtractionResult(messages, errors) {
      this.messages = messages;
      this.errors = errors;
    }
    return ExtractionResult;
  }());
  var _VisitorMode;
  (function(_VisitorMode) {
    _VisitorMode[_VisitorMode["Extract"] = 0] = "Extract";
    _VisitorMode[_VisitorMode["Merge"] = 1] = "Merge";
  })(_VisitorMode || (_VisitorMode = {}));
  var _Visitor = (function() {
    function _Visitor(_implicitTags, _implicitAttrs) {
      this._implicitTags = _implicitTags;
      this._implicitAttrs = _implicitAttrs;
    }
    _Visitor.prototype.extract = function(nodes, interpolationConfig) {
      var _this = this;
      this._init(_VisitorMode.Extract, interpolationConfig);
      nodes.forEach(function(node) {
        return node.visit(_this, null);
      });
      if (this._inI18nBlock) {
        this._reportError(nodes[nodes.length - 1], 'Unclosed block');
      }
      return new ExtractionResult(this._messages, this._errors);
    };
    _Visitor.prototype.merge = function(nodes, translations, interpolationConfig) {
      this._init(_VisitorMode.Merge, interpolationConfig);
      this._translations = translations;
      var wrapper = new Element('wrapper', [], nodes, null, null, null);
      var translatedNode = wrapper.visit(this, null);
      if (this._inI18nBlock) {
        this._reportError(nodes[nodes.length - 1], 'Unclosed block');
      }
      return new ParseTreeResult(translatedNode.children, this._errors);
    };
    _Visitor.prototype.visitExpansionCase = function(icuCase, context) {
      var expression = visitAll(this, icuCase.expression, context);
      if (this._mode === _VisitorMode.Merge) {
        return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
      }
    };
    _Visitor.prototype.visitExpansion = function(icu, context) {
      this._mayBeAddBlockChildren(icu);
      var wasInIcu = this._inIcu;
      if (!this._inIcu) {
        if (this._isInTranslatableSection) {
          this._addMessage([icu]);
        }
        this._inIcu = true;
      }
      var cases = visitAll(this, icu.cases, context);
      if (this._mode === _VisitorMode.Merge) {
        icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
      }
      this._inIcu = wasInIcu;
      return icu;
    };
    _Visitor.prototype.visitComment = function(comment, context) {
      var isOpening = _isOpeningComment(comment);
      if (isOpening && this._isInTranslatableSection) {
        this._reportError(comment, 'Could not start a block inside a translatable section');
        return;
      }
      var isClosing = _isClosingComment(comment);
      if (isClosing && !this._inI18nBlock) {
        this._reportError(comment, 'Trying to close an unopened block');
        return;
      }
      if (!this._inI18nNode && !this._inIcu) {
        if (!this._inI18nBlock) {
          if (isOpening) {
            this._inI18nBlock = true;
            this._blockStartDepth = this._depth;
            this._blockChildren = [];
            this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();
            this._openTranslatableSection(comment);
          }
        } else {
          if (isClosing) {
            if (this._depth == this._blockStartDepth) {
              this._closeTranslatableSection(comment, this._blockChildren);
              this._inI18nBlock = false;
              var message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
              var nodes = this._translateMessage(comment, message);
              return visitAll(this, nodes);
            } else {
              this._reportError(comment, 'I18N blocks should not cross element boundaries');
              return;
            }
          }
        }
      }
    };
    _Visitor.prototype.visitText = function(text, context) {
      if (this._isInTranslatableSection) {
        this._mayBeAddBlockChildren(text);
      }
      return text;
    };
    _Visitor.prototype.visitElement = function(el, context) {
      var _this = this;
      this._mayBeAddBlockChildren(el);
      this._depth++;
      var wasInI18nNode = this._inI18nNode;
      var wasInImplicitNode = this._inImplicitNode;
      var childNodes;
      var i18nAttr = _getI18nAttr(el);
      var isImplicit = this._implicitTags.some(function(tag) {
        return el.name === tag;
      }) && !this._inIcu && !this._isInTranslatableSection;
      var isTopLevelImplicit = !wasInImplicitNode && isImplicit;
      this._inImplicitNode = this._inImplicitNode || isImplicit;
      if (!this._isInTranslatableSection && !this._inIcu) {
        if (i18nAttr) {
          this._inI18nNode = true;
          var message = this._addMessage(el.children, i18nAttr.value);
          childNodes = this._translateMessage(el, message);
        } else if (isTopLevelImplicit) {
          this._inI18nNode = true;
          var message = this._addMessage(el.children);
          childNodes = this._translateMessage(el, message);
        }
        if (this._mode == _VisitorMode.Extract) {
          var isTranslatable = i18nAttr || isTopLevelImplicit;
          if (isTranslatable) {
            this._openTranslatableSection(el);
          }
          visitAll(this, el.children);
          if (isTranslatable) {
            this._closeTranslatableSection(el, el.children);
          }
        }
        if (this._mode === _VisitorMode.Merge && !i18nAttr && !isTopLevelImplicit) {
          childNodes = [];
          el.children.forEach(function(child) {
            var visited = child.visit(_this, context);
            if (visited && !_this._isInTranslatableSection) {
              childNodes = childNodes.concat(visited);
            }
          });
        }
      } else {
        if (i18nAttr || isTopLevelImplicit) {
          this._reportError(el, 'Could not mark an element as translatable inside a translatable section');
        }
        if (this._mode == _VisitorMode.Extract) {
          visitAll(this, el.children);
        }
        if (this._mode == _VisitorMode.Merge) {
          childNodes = [];
          el.children.forEach(function(child) {
            var visited = child.visit(_this, context);
            if (visited && !_this._isInTranslatableSection) {
              childNodes = childNodes.concat(visited);
            }
          });
        }
      }
      this._visitAttributesOf(el);
      this._depth--;
      this._inI18nNode = wasInI18nNode;
      this._inImplicitNode = wasInImplicitNode;
      if (this._mode === _VisitorMode.Merge) {
        var translatedAttrs = this._translateAttributes(el);
        return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
      }
    };
    _Visitor.prototype.visitAttribute = function(attribute, context) {
      throw new Error('unreachable code');
    };
    _Visitor.prototype._init = function(mode, interpolationConfig) {
      this._mode = mode;
      this._inI18nBlock = false;
      this._inI18nNode = false;
      this._depth = 0;
      this._inIcu = false;
      this._msgCountAtSectionStart = void 0;
      this._errors = [];
      this._messages = [];
      this._inImplicitNode = false;
      this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
    };
    _Visitor.prototype._visitAttributesOf = function(el) {
      var _this = this;
      var explicitAttrNameToValue = {};
      var implicitAttrNames = this._implicitAttrs[el.name] || [];
      el.attrs.filter(function(attr) {
        return attr.name.startsWith(_I18N_ATTR_PREFIX);
      }).forEach(function(attr) {
        return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] = attr.value;
      });
      el.attrs.forEach(function(attr) {
        if (attr.name in explicitAttrNameToValue) {
          _this._addMessage([attr], explicitAttrNameToValue[attr.name]);
        } else if (implicitAttrNames.some(function(name) {
          return attr.name === name;
        })) {
          _this._addMessage([attr]);
        }
      });
    };
    _Visitor.prototype._addMessage = function(ast, meaningAndDesc) {
      if (ast.length == 0 || ast.length == 1 && ast[0] instanceof Attribute && !ast[0].value) {
        return;
      }
      var _a = _splitMeaningAndDesc(meaningAndDesc),
          meaning = _a[0],
          description = _a[1];
      var message = this._createI18nMessage(ast, meaning, description);
      this._messages.push(message);
      return message;
    };
    _Visitor.prototype._translateMessage = function(el, message) {
      if (message && this._mode === _VisitorMode.Merge) {
        var id = digestMessage(message);
        var nodes = this._translations.get(id);
        if (nodes) {
          return nodes;
        }
        this._reportError(el, "Translation unavailable for message id=\"" + id + "\"");
      }
      return [];
    };
    _Visitor.prototype._translateAttributes = function(el) {
      var _this = this;
      var attributes = el.attrs;
      var i18nAttributeMeanings = {};
      attributes.forEach(function(attr) {
        if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
          i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] = _splitMeaningAndDesc(attr.value)[0];
        }
      });
      var translatedAttributes = [];
      attributes.forEach(function(attr) {
        if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
          return;
        }
        if (attr.value && attr.value != '' && i18nAttributeMeanings.hasOwnProperty(attr.name)) {
          var meaning = i18nAttributeMeanings[attr.name];
          var message = _this._createI18nMessage([attr], meaning, '');
          var id = digestMessage(message);
          var nodes = _this._translations.get(id);
          if (nodes) {
            if (nodes[0] instanceof Text) {
              var value = nodes[0].value;
              translatedAttributes.push(new Attribute(attr.name, value, attr.sourceSpan));
            } else {
              _this._reportError(el, "Unexpected translation for attribute \"" + attr.name + "\" (id=\"" + id + "\")");
            }
          } else {
            _this._reportError(el, "Translation unavailable for attribute \"" + attr.name + "\" (id=\"" + id + "\")");
          }
        } else {
          translatedAttributes.push(attr);
        }
      });
      return translatedAttributes;
    };
    _Visitor.prototype._mayBeAddBlockChildren = function(node) {
      if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
        this._blockChildren.push(node);
      }
    };
    _Visitor.prototype._openTranslatableSection = function(node) {
      if (this._isInTranslatableSection) {
        this._reportError(node, 'Unexpected section start');
      } else {
        this._msgCountAtSectionStart = this._messages.length;
      }
    };
    Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", {
      get: function() {
        return this._msgCountAtSectionStart !== void 0;
      },
      enumerable: true,
      configurable: true
    });
    _Visitor.prototype._closeTranslatableSection = function(node, directChildren) {
      if (!this._isInTranslatableSection) {
        this._reportError(node, 'Unexpected section end');
        return;
      }
      var startIndex = this._msgCountAtSectionStart;
      var significantChildren = directChildren.reduce(function(count, node) {
        return count + (node instanceof Comment ? 0 : 1);
      }, 0);
      if (significantChildren == 1) {
        for (var i = this._messages.length - 1; i >= startIndex; i--) {
          var ast = this._messages[i].nodes;
          if (!(ast.length == 1 && ast[0] instanceof Text$1)) {
            this._messages.splice(i, 1);
            break;
          }
        }
      }
      this._msgCountAtSectionStart = void 0;
    };
    _Visitor.prototype._reportError = function(node, msg) {
      this._errors.push(new I18nError(node.sourceSpan, msg));
    };
    return _Visitor;
  }());
  function _isOpeningComment(n) {
    return n instanceof Comment && n.value && n.value.startsWith('i18n');
  }
  function _isClosingComment(n) {
    return n instanceof Comment && n.value && n.value === '/i18n';
  }
  function _getI18nAttr(p) {
    return p.attrs.find(function(attr) {
      return attr.name === _I18N_ATTR;
    }) || null;
  }
  function _splitMeaningAndDesc(i18n) {
    if (!i18n)
      return ['', ''];
    var pipeIndex = i18n.indexOf('|');
    return pipeIndex == -1 ? ['', i18n] : [i18n.slice(0, pipeIndex), i18n.slice(pipeIndex + 1)];
  }
  var MessageBundle = (function() {
    function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs) {
      this._htmlParser = _htmlParser;
      this._implicitTags = _implicitTags;
      this._implicitAttrs = _implicitAttrs;
      this._messageMap = {};
    }
    MessageBundle.prototype.updateFromTemplate = function(html, url, interpolationConfig) {
      var _this = this;
      var htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);
      if (htmlParserResult.errors.length) {
        return htmlParserResult.errors;
      }
      var i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
      if (i18nParserResult.errors.length) {
        return i18nParserResult.errors;
      }
      i18nParserResult.messages.forEach(function(message) {
        _this._messageMap[digestMessage(message)] = message;
      });
    };
    MessageBundle.prototype.getMessageMap = function() {
      return this._messageMap;
    };
    MessageBundle.prototype.write = function(serializer) {
      return serializer.write(this._messageMap);
    };
    return MessageBundle;
  }());
  var XmlTagDefinition = (function() {
    function XmlTagDefinition() {
      this.closedByParent = false;
      this.contentType = TagContentType.PARSABLE_DATA;
      this.isVoid = false;
      this.ignoreFirstLf = false;
      this.canSelfClose = true;
    }
    XmlTagDefinition.prototype.requireExtraParent = function(currentParent) {
      return false;
    };
    XmlTagDefinition.prototype.isClosedByChild = function(name) {
      return false;
    };
    return XmlTagDefinition;
  }());
  var _TAG_DEFINITION = new XmlTagDefinition();
  function getXmlTagDefinition(tagName) {
    return _TAG_DEFINITION;
  }
  var __extends$7 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var XmlParser = (function(_super) {
    __extends$7(XmlParser, _super);
    function XmlParser() {
      _super.call(this, getXmlTagDefinition);
    }
    XmlParser.prototype.parse = function(source, url, parseExpansionForms) {
      if (parseExpansionForms === void 0) {
        parseExpansionForms = false;
      }
      return _super.prototype.parse.call(this, source, url, parseExpansionForms, null);
    };
    return XmlParser;
  }(Parser$1));
  function extractPlaceholders(messageBundle) {
    var messageMap = messageBundle.getMessageMap();
    var placeholders = {};
    Object.keys(messageMap).forEach(function(msgId) {
      placeholders[msgId] = messageMap[msgId].placeholders;
    });
    return placeholders;
  }
  function extractPlaceholderToIds(messageBundle) {
    var messageMap = messageBundle.getMessageMap();
    var placeholderToIds = {};
    Object.keys(messageMap).forEach(function(msgId) {
      placeholderToIds[msgId] = messageMap[msgId].placeholderToMsgIds;
    });
    return placeholderToIds;
  }
  var _Visitor$1 = (function() {
    function _Visitor() {}
    _Visitor.prototype.visitTag = function(tag) {
      var _this = this;
      var strAttrs = this._serializeAttributes(tag.attrs);
      if (tag.children.length == 0) {
        return "<" + tag.name + strAttrs + "/>";
      }
      var strChildren = tag.children.map(function(node) {
        return node.visit(_this);
      });
      return "<" + tag.name + strAttrs + ">" + strChildren.join('') + "</" + tag.name + ">";
    };
    _Visitor.prototype.visitText = function(text) {
      return text.value;
    };
    _Visitor.prototype.visitDeclaration = function(decl) {
      return "<?xml" + this._serializeAttributes(decl.attrs) + " ?>";
    };
    _Visitor.prototype._serializeAttributes = function(attrs) {
      var strAttrs = Object.keys(attrs).map(function(name) {
        return (name + "=\"" + attrs[name] + "\"");
      }).join(' ');
      return strAttrs.length > 0 ? ' ' + strAttrs : '';
    };
    _Visitor.prototype.visitDoctype = function(doctype) {
      return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>";
    };
    return _Visitor;
  }());
  var _visitor = new _Visitor$1();
  function serialize(nodes) {
    return nodes.map(function(node) {
      return node.visit(_visitor);
    }).join('');
  }
  var Declaration = (function() {
    function Declaration(unescapedAttrs) {
      var _this = this;
      this.attrs = {};
      Object.keys(unescapedAttrs).forEach(function(k) {
        _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
      });
    }
    Declaration.prototype.visit = function(visitor) {
      return visitor.visitDeclaration(this);
    };
    return Declaration;
  }());
  var Doctype = (function() {
    function Doctype(rootTag, dtd) {
      this.rootTag = rootTag;
      this.dtd = dtd;
    }
    ;
    Doctype.prototype.visit = function(visitor) {
      return visitor.visitDoctype(this);
    };
    return Doctype;
  }());
  var Tag = (function() {
    function Tag(name, unescapedAttrs, children) {
      var _this = this;
      if (unescapedAttrs === void 0) {
        unescapedAttrs = {};
      }
      if (children === void 0) {
        children = [];
      }
      this.name = name;
      this.children = children;
      this.attrs = {};
      Object.keys(unescapedAttrs).forEach(function(k) {
        _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
      });
    }
    Tag.prototype.visit = function(visitor) {
      return visitor.visitTag(this);
    };
    return Tag;
  }());
  var Text$2 = (function() {
    function Text(unescapedValue) {
      this.value = _escapeXml(unescapedValue);
    }
    ;
    Text.prototype.visit = function(visitor) {
      return visitor.visitText(this);
    };
    return Text;
  }());
  var _ESCAPED_CHARS = [[/&/g, '&amp;'], [/"/g, '&quot;'], [/'/g, '&apos;'], [/</g, '&lt;'], [/>/g, '&gt;']];
  function _escapeXml(text) {
    return _ESCAPED_CHARS.reduce(function(text, entry) {
      return text.replace(entry[0], entry[1]);
    }, text);
  }
  var _VERSION = '1.2';
  var _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';
  var _SOURCE_LANG = 'en';
  var _PLACEHOLDER_TAG = 'x';
  var _SOURCE_TAG = 'source';
  var _TARGET_TAG = 'target';
  var _UNIT_TAG = 'trans-unit';
  var _CR = function(ws) {
    if (ws === void 0) {
      ws = 0;
    }
    return new Text$2("\n" + new Array(ws).join(' '));
  };
  var Xliff = (function() {
    function Xliff(_htmlParser, _interpolationConfig) {
      this._htmlParser = _htmlParser;
      this._interpolationConfig = _interpolationConfig;
    }
    Xliff.prototype.write = function(messageMap) {
      var visitor = new _WriteVisitor();
      var transUnits = [];
      Object.keys(messageMap).forEach(function(id) {
        var message = messageMap[id];
        var transUnit = new Tag(_UNIT_TAG, {
          id: id,
          datatype: 'html'
        });
        transUnit.children.push(_CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), _CR(8), new Tag(_TARGET_TAG));
        if (message.description) {
          transUnit.children.push(_CR(8), new Tag('note', {
            priority: '1',
            from: 'description'
          }, [new Text$2(message.description)]));
        }
        if (message.meaning) {
          transUnit.children.push(_CR(8), new Tag('note', {
            priority: '1',
            from: 'meaning'
          }, [new Text$2(message.meaning)]));
        }
        transUnit.children.push(_CR(6));
        transUnits.push(_CR(6), transUnit);
      });
      var body = new Tag('body', {}, transUnits.concat([_CR(4)]));
      var file = new Tag('file', {
        'source-language': _SOURCE_LANG,
        datatype: 'plaintext',
        original: 'ng2.template'
      }, [_CR(4), body, _CR(2)]);
      var xliff = new Tag('xliff', {
        version: _VERSION,
        xmlns: _XMLNS
      }, [_CR(2), file, _CR()]);
      return serialize([new Declaration({
        version: '1.0',
        encoding: 'UTF-8'
      }), _CR(), xliff]);
    };
    Xliff.prototype.load = function(content, url, messageBundle) {
      var _this = this;
      var result = new XmlParser().parse(content, url);
      if (result.errors.length) {
        throw new Error("xtb parse errors:\n" + result.errors.join('\n'));
      }
      var _a = new _LoadVisitor().parse(result.rootNodes, messageBundle),
          messages = _a.messages,
          errors = _a.errors;
      if (errors.length) {
        throw new Error("xtb parse errors:\n" + errors.join('\n'));
      }
      var messageMap = {};
      var parseErrors = [];
      Object.keys(messages).forEach(function(id) {
        var res = _this._htmlParser.parse(messages[id], url, true, _this._interpolationConfig);
        parseErrors.push.apply(parseErrors, res.errors);
        messageMap[id] = res.rootNodes;
      });
      if (parseErrors.length) {
        throw new Error("xtb parse errors:\n" + parseErrors.join('\n'));
      }
      return messageMap;
    };
    return Xliff;
  }());
  var _WriteVisitor = (function() {
    function _WriteVisitor() {}
    _WriteVisitor.prototype.visitText = function(text, context) {
      return [new Text$2(text.value)];
    };
    _WriteVisitor.prototype.visitContainer = function(container, context) {
      var _this = this;
      var nodes = [];
      container.children.forEach(function(node) {
        return nodes.push.apply(nodes, node.visit(_this));
      });
      return nodes;
    };
    _WriteVisitor.prototype.visitIcu = function(icu, context) {
      if (this._isInIcu) {
        throw new Error('xliff does not support nested ICU messages');
      }
      this._isInIcu = true;
      var nodes = [];
      this._isInIcu = false;
      return nodes;
    };
    _WriteVisitor.prototype.visitTagPlaceholder = function(ph, context) {
      var startTagPh = new Tag(_PLACEHOLDER_TAG, {
        id: ph.startName,
        ctype: ph.tag
      });
      if (ph.isVoid) {
        return [startTagPh];
      }
      var closeTagPh = new Tag(_PLACEHOLDER_TAG, {
        id: ph.closeName,
        ctype: ph.tag
      });
      return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
    };
    _WriteVisitor.prototype.visitPlaceholder = function(ph, context) {
      return [new Tag(_PLACEHOLDER_TAG, {id: ph.name})];
    };
    _WriteVisitor.prototype.visitIcuPlaceholder = function(ph, context) {
      return [new Tag(_PLACEHOLDER_TAG, {id: ph.name})];
    };
    _WriteVisitor.prototype.serialize = function(nodes) {
      var _this = this;
      this._isInIcu = false;
      return ListWrapper.flatten(nodes.map(function(node) {
        return node.visit(_this);
      }));
    };
    return _WriteVisitor;
  }());
  var _LoadVisitor = (function() {
    function _LoadVisitor() {}
    _LoadVisitor.prototype.parse = function(nodes, messageBundle) {
      var _this = this;
      this._messageNodes = [];
      this._translatedMessages = {};
      this._msgId = '';
      this._target = [];
      this._errors = [];
      visitAll(this, nodes, null);
      var messageMap = messageBundle.getMessageMap();
      var placeholders = extractPlaceholders(messageBundle);
      var placeholderToIds = extractPlaceholderToIds(messageBundle);
      this._messageNodes.filter(function(message) {
        return messageMap.hasOwnProperty(message[0]);
      }).sort(function(a, b) {
        if (Object.keys(messageMap[a[0]].placeholderToMsgIds).length == 0) {
          return -1;
        }
        if (Object.keys(messageMap[b[0]].placeholderToMsgIds).length == 0) {
          return 1;
        }
        return 0;
      }).forEach(function(message) {
        var id = message[0];
        _this._placeholders = placeholders[id] || {};
        _this._placeholderToIds = placeholderToIds[id] || {};
        _this._translatedMessages[id] = visitAll(_this, message[1]).join('');
      });
      return {
        messages: this._translatedMessages,
        errors: this._errors
      };
    };
    _LoadVisitor.prototype.visitElement = function(element, context) {
      switch (element.name) {
        case _UNIT_TAG:
          this._target = null;
          var msgId = element.attrs.find(function(attr) {
            return attr.name === 'id';
          });
          if (!msgId) {
            this._addError(element, "<" + _UNIT_TAG + "> misses the \"id\" attribute");
          } else {
            this._msgId = msgId.value;
          }
          visitAll(this, element.children, null);
          if (this._msgId !== null) {
            this._messageNodes.push([this._msgId, this._target]);
          }
          break;
        case _SOURCE_TAG:
          break;
        case _TARGET_TAG:
          this._target = element.children;
          break;
        case _PLACEHOLDER_TAG:
          var idAttr = element.attrs.find(function(attr) {
            return attr.name === 'id';
          });
          if (!idAttr) {
            this._addError(element, "<" + _PLACEHOLDER_TAG + "> misses the \"id\" attribute");
          } else {
            var id = idAttr.value;
            if (this._placeholders.hasOwnProperty(id)) {
              return this._placeholders[id];
            }
            if (this._placeholderToIds.hasOwnProperty(id) && this._translatedMessages.hasOwnProperty(this._placeholderToIds[id])) {
              return this._translatedMessages[this._placeholderToIds[id]];
            }
            this._addError(element, "The placeholder \"" + id + "\" does not exists in the source message");
          }
          break;
        default:
          visitAll(this, element.children, null);
      }
    };
    _LoadVisitor.prototype.visitAttribute = function(attribute, context) {
      throw new Error('unreachable code');
    };
    _LoadVisitor.prototype.visitText = function(text, context) {
      return text.value;
    };
    _LoadVisitor.prototype.visitComment = function(comment, context) {
      return '';
    };
    _LoadVisitor.prototype.visitExpansion = function(expansion, context) {
      throw new Error('unreachable code');
    };
    _LoadVisitor.prototype.visitExpansionCase = function(expansionCase, context) {
      throw new Error('unreachable code');
    };
    _LoadVisitor.prototype._addError = function(node, message) {
      this._errors.push(new I18nError(node.sourceSpan, message));
    };
    return _LoadVisitor;
  }());
  var _MESSAGES_TAG = 'messagebundle';
  var _MESSAGE_TAG = 'msg';
  var _PLACEHOLDER_TAG$1 = 'ph';
  var _EXEMPLE_TAG = 'ex';
  var _DOCTYPE = "<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>";
  var Xmb = (function() {
    function Xmb() {}
    Xmb.prototype.write = function(messageMap) {
      var visitor = new _Visitor$2();
      var rootNode = new Tag(_MESSAGES_TAG);
      rootNode.children.push(new Text$2('\n'));
      Object.keys(messageMap).forEach(function(id) {
        var message = messageMap[id];
        var attrs = {id: id};
        if (message.description) {
          attrs['desc'] = message.description;
        }
        if (message.meaning) {
          attrs['meaning'] = message.meaning;
        }
        rootNode.children.push(new Text$2('  '), new Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes)), new Text$2('\n'));
      });
      return serialize([new Declaration({
        version: '1.0',
        encoding: 'UTF-8'
      }), new Text$2('\n'), new Doctype(_MESSAGES_TAG, _DOCTYPE), new Text$2('\n'), rootNode]);
    };
    Xmb.prototype.load = function(content, url, messageBundle) {
      throw new Error('Unsupported');
    };
    return Xmb;
  }());
  var _Visitor$2 = (function() {
    function _Visitor() {}
    _Visitor.prototype.visitText = function(text, context) {
      return [new Text$2(text.value)];
    };
    _Visitor.prototype.visitContainer = function(container, context) {
      var _this = this;
      var nodes = [];
      container.children.forEach(function(node) {
        return nodes.push.apply(nodes, node.visit(_this));
      });
      return nodes;
    };
    _Visitor.prototype.visitIcu = function(icu, context) {
      var _this = this;
      var nodes = [new Text$2("{" + icu.expression + ", " + icu.type + ", ")];
      Object.keys(icu.cases).forEach(function(c) {
        nodes.push.apply(nodes, [new Text$2(c + " {")].concat(icu.cases[c].visit(_this), [new Text$2("} ")]));
      });
      nodes.push(new Text$2("}"));
      return nodes;
    };
    _Visitor.prototype.visitTagPlaceholder = function(ph, context) {
      var startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("<" + ph.tag + ">")]);
      var startTagPh = new Tag(_PLACEHOLDER_TAG$1, {name: ph.startName}, [startEx]);
      if (ph.isVoid) {
        return [startTagPh];
      }
      var closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("</" + ph.tag + ">")]);
      var closeTagPh = new Tag(_PLACEHOLDER_TAG$1, {name: ph.closeName}, [closeEx]);
      return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
    };
    _Visitor.prototype.visitPlaceholder = function(ph, context) {
      return [new Tag(_PLACEHOLDER_TAG$1, {name: ph.name})];
    };
    _Visitor.prototype.visitIcuPlaceholder = function(ph, context) {
      return [new Tag(_PLACEHOLDER_TAG$1, {name: ph.name})];
    };
    _Visitor.prototype.serialize = function(nodes) {
      var _this = this;
      return ListWrapper.flatten(nodes.map(function(node) {
        return node.visit(_this);
      }));
    };
    return _Visitor;
  }());
  var _TRANSLATIONS_TAG = 'translationbundle';
  var _TRANSLATION_TAG = 'translation';
  var _PLACEHOLDER_TAG$2 = 'ph';
  var Xtb = (function() {
    function Xtb(_htmlParser, _interpolationConfig) {
      this._htmlParser = _htmlParser;
      this._interpolationConfig = _interpolationConfig;
    }
    Xtb.prototype.write = function(messageMap) {
      throw new Error('Unsupported');
    };
    Xtb.prototype.load = function(content, url, messageBundle) {
      var _this = this;
      var result = new XmlParser().parse(content, url);
      if (result.errors.length) {
        throw new Error("xtb parse errors:\n" + result.errors.join('\n'));
      }
      var _a = new _Visitor$3().parse(result.rootNodes, messageBundle),
          messages = _a.messages,
          errors = _a.errors;
      if (errors.length) {
        throw new Error("xtb parse errors:\n" + errors.join('\n'));
      }
      var messageMap = {};
      var parseErrors = [];
      Object.keys(messages).forEach(function(id) {
        var res = _this._htmlParser.parse(messages[id], url, true, _this._interpolationConfig);
        parseErrors.push.apply(parseErrors, res.errors);
        messageMap[id] = res.rootNodes;
      });
      if (parseErrors.length) {
        throw new Error("xtb parse errors:\n" + parseErrors.join('\n'));
      }
      return messageMap;
    };
    return Xtb;
  }());
  var _Visitor$3 = (function() {
    function _Visitor() {}
    _Visitor.prototype.parse = function(nodes, messageBundle) {
      var _this = this;
      this._messageNodes = [];
      this._translatedMessages = {};
      this._bundleDepth = 0;
      this._translationDepth = 0;
      this._errors = [];
      visitAll(this, nodes, null);
      var messageMap = messageBundle.getMessageMap();
      var placeholders = extractPlaceholders(messageBundle);
      var placeholderToIds = extractPlaceholderToIds(messageBundle);
      this._messageNodes.filter(function(message) {
        return messageMap.hasOwnProperty(message[0]);
      }).sort(function(a, b) {
        if (Object.keys(messageMap[a[0]].placeholderToMsgIds).length == 0) {
          return -1;
        }
        if (Object.keys(messageMap[b[0]].placeholderToMsgIds).length == 0) {
          return 1;
        }
        return 0;
      }).forEach(function(message) {
        var id = message[0];
        _this._placeholders = placeholders[id] || {};
        _this._placeholderToIds = placeholderToIds[id] || {};
        _this._translatedMessages[id] = visitAll(_this, message[1]).join('');
      });
      return {
        messages: this._translatedMessages,
        errors: this._errors
      };
    };
    _Visitor.prototype.visitElement = function(element, context) {
      switch (element.name) {
        case _TRANSLATIONS_TAG:
          this._bundleDepth++;
          if (this._bundleDepth > 1) {
            this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested");
          }
          visitAll(this, element.children, null);
          this._bundleDepth--;
          break;
        case _TRANSLATION_TAG:
          this._translationDepth++;
          if (this._translationDepth > 1) {
            this._addError(element, "<" + _TRANSLATION_TAG + "> elements can not be nested");
          }
          var idAttr = element.attrs.find(function(attr) {
            return attr.name === 'id';
          });
          if (!idAttr) {
            this._addError(element, "<" + _TRANSLATION_TAG + "> misses the \"id\" attribute");
          } else {
            this._messageNodes.push([idAttr.value, element.children]);
          }
          this._translationDepth--;
          break;
        case _PLACEHOLDER_TAG$2:
          var nameAttr = element.attrs.find(function(attr) {
            return attr.name === 'name';
          });
          if (!nameAttr) {
            this._addError(element, "<" + _PLACEHOLDER_TAG$2 + "> misses the \"name\" attribute");
          } else {
            var name_1 = nameAttr.value;
            if (this._placeholders.hasOwnProperty(name_1)) {
              return this._placeholders[name_1];
            }
            if (this._placeholderToIds.hasOwnProperty(name_1) && this._translatedMessages.hasOwnProperty(this._placeholderToIds[name_1])) {
              return this._translatedMessages[this._placeholderToIds[name_1]];
            }
            this._addError(element, "The placeholder \"" + name_1 + "\" does not exists in the source message");
          }
          break;
        default:
          this._addError(element, 'Unexpected tag');
      }
    };
    _Visitor.prototype.visitAttribute = function(attribute, context) {
      throw new Error('unreachable code');
    };
    _Visitor.prototype.visitText = function(text, context) {
      return text.value;
    };
    _Visitor.prototype.visitComment = function(comment, context) {
      return '';
    };
    _Visitor.prototype.visitExpansion = function(expansion, context) {
      var _this = this;
      var strCases = expansion.cases.map(function(c) {
        return c.visit(_this, null);
      });
      return "{" + expansion.switchValue + ", " + expansion.type + ", strCases.join(' ')}";
    };
    _Visitor.prototype.visitExpansionCase = function(expansionCase, context) {
      return expansionCase.value + " {" + visitAll(this, expansionCase.expression, null) + "}";
    };
    _Visitor.prototype._addError = function(node, message) {
      this._errors.push(new I18nError(node.sourceSpan, message));
    };
    return _Visitor;
  }());
  var TranslationBundle = (function() {
    function TranslationBundle(_messageMap) {
      if (_messageMap === void 0) {
        _messageMap = {};
      }
      this._messageMap = _messageMap;
    }
    TranslationBundle.load = function(content, url, messageBundle, serializer) {
      return new TranslationBundle(serializer.load(content, url, messageBundle));
    };
    TranslationBundle.prototype.get = function(id) {
      return this._messageMap[id];
    };
    TranslationBundle.prototype.has = function(id) {
      return id in this._messageMap;
    };
    return TranslationBundle;
  }());
  var I18NHtmlParser = (function() {
    function I18NHtmlParser(_htmlParser, _translations, _translationsFormat) {
      this._htmlParser = _htmlParser;
      this._translations = _translations;
      this._translationsFormat = _translationsFormat;
    }
    I18NHtmlParser.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
      if (parseExpansionForms === void 0) {
        parseExpansionForms = false;
      }
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      var parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);
      if (!this._translations || this._translations === '') {
        return parseResult;
      }
      var messageBundle = new MessageBundle(this._htmlParser, [], {});
      var errors = messageBundle.updateFromTemplate(source, url, interpolationConfig);
      if (errors && errors.length) {
        return new ParseTreeResult(parseResult.rootNodes, parseResult.errors.concat(errors));
      }
      var serializer = this._createSerializer(interpolationConfig);
      var translationBundle = TranslationBundle.load(this._translations, url, messageBundle, serializer);
      return mergeTranslations(parseResult.rootNodes, translationBundle, interpolationConfig, [], {});
    };
    I18NHtmlParser.prototype._createSerializer = function(interpolationConfig) {
      var format = (this._translationsFormat || 'xlf').toLowerCase();
      switch (format) {
        case 'xmb':
          return new Xmb();
        case 'xtb':
          return new Xtb(this._htmlParser, interpolationConfig);
        case 'xliff':
        case 'xlf':
        default:
          return new Xliff(this._htmlParser, interpolationConfig);
      }
    };
    return I18NHtmlParser;
  }());
  var isDefaultChangeDetectionStrategy = _angular_core.__core_private__.isDefaultChangeDetectionStrategy;
  var ChangeDetectorStatus = _angular_core.__core_private__.ChangeDetectorStatus;
  var LifecycleHooks = _angular_core.__core_private__.LifecycleHooks;
  var LIFECYCLE_HOOKS_VALUES = _angular_core.__core_private__.LIFECYCLE_HOOKS_VALUES;
  var ReflectorReader = _angular_core.__core_private__.ReflectorReader;
  var AppElement = _angular_core.__core_private__.AppElement;
  var CodegenComponentFactoryResolver = _angular_core.__core_private__.CodegenComponentFactoryResolver;
  var AppView = _angular_core.__core_private__.AppView;
  var DebugAppView = _angular_core.__core_private__.DebugAppView;
  var NgModuleInjector = _angular_core.__core_private__.NgModuleInjector;
  var ViewType = _angular_core.__core_private__.ViewType;
  var MAX_INTERPOLATION_VALUES = _angular_core.__core_private__.MAX_INTERPOLATION_VALUES;
  var checkBinding = _angular_core.__core_private__.checkBinding;
  var flattenNestedViewRenderNodes = _angular_core.__core_private__.flattenNestedViewRenderNodes;
  var interpolate = _angular_core.__core_private__.interpolate;
  var ViewUtils = _angular_core.__core_private__.ViewUtils;
  var DebugContext = _angular_core.__core_private__.DebugContext;
  var StaticNodeDebugInfo = _angular_core.__core_private__.StaticNodeDebugInfo;
  var devModeEqual = _angular_core.__core_private__.devModeEqual;
  var UNINITIALIZED = _angular_core.__core_private__.UNINITIALIZED;
  var ValueUnwrapper = _angular_core.__core_private__.ValueUnwrapper;
  var TemplateRef_ = _angular_core.__core_private__.TemplateRef_;
  var EMPTY_ARRAY = _angular_core.__core_private__.EMPTY_ARRAY;
  var EMPTY_MAP = _angular_core.__core_private__.EMPTY_MAP;
  var pureProxy1 = _angular_core.__core_private__.pureProxy1;
  var pureProxy2 = _angular_core.__core_private__.pureProxy2;
  var pureProxy3 = _angular_core.__core_private__.pureProxy3;
  var pureProxy4 = _angular_core.__core_private__.pureProxy4;
  var pureProxy5 = _angular_core.__core_private__.pureProxy5;
  var pureProxy6 = _angular_core.__core_private__.pureProxy6;
  var pureProxy7 = _angular_core.__core_private__.pureProxy7;
  var pureProxy8 = _angular_core.__core_private__.pureProxy8;
  var pureProxy9 = _angular_core.__core_private__.pureProxy9;
  var pureProxy10 = _angular_core.__core_private__.pureProxy10;
  var castByValue = _angular_core.__core_private__.castByValue;
  var Console = _angular_core.__core_private__.Console;
  var reflector = _angular_core.__core_private__.reflector;
  var Reflector = _angular_core.__core_private__.Reflector;
  var ReflectionCapabilities = _angular_core.__core_private__.ReflectionCapabilities;
  var NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer;
  var AnimationSequencePlayer = _angular_core.__core_private__.AnimationSequencePlayer;
  var AnimationGroupPlayer = _angular_core.__core_private__.AnimationGroupPlayer;
  var AnimationKeyframe = _angular_core.__core_private__.AnimationKeyframe;
  var AnimationStyles = _angular_core.__core_private__.AnimationStyles;
  var AnimationOutput = _angular_core.__core_private__.AnimationOutput;
  var ANY_STATE = _angular_core.__core_private__.ANY_STATE;
  var DEFAULT_STATE = _angular_core.__core_private__.DEFAULT_STATE;
  var EMPTY_ANIMATION_STATE = _angular_core.__core_private__.EMPTY_STATE;
  var FILL_STYLE_FLAG = _angular_core.__core_private__.FILL_STYLE_FLAG;
  var prepareFinalAnimationStyles = _angular_core.__core_private__.prepareFinalAnimationStyles;
  var balanceAnimationKeyframes = _angular_core.__core_private__.balanceAnimationKeyframes;
  var clearStyles = _angular_core.__core_private__.clearStyles;
  var collectAndResolveStyles = _angular_core.__core_private__.collectAndResolveStyles;
  var renderStyles = _angular_core.__core_private__.renderStyles;
  var ComponentStillLoadingError = _angular_core.__core_private__.ComponentStillLoadingError;
  var APP_VIEW_MODULE_URL = assetUrl('core', 'linker/view');
  var VIEW_UTILS_MODULE_URL = assetUrl('core', 'linker/view_utils');
  var CD_MODULE_URL = assetUrl('core', 'change_detection/change_detection');
  var ANIMATION_STYLE_UTIL_ASSET_URL = assetUrl('core', 'animation/animation_style_util');
  var Identifiers = (function() {
    function Identifiers() {}
    Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {
      name: 'ANALYZE_FOR_ENTRY_COMPONENTS',
      moduleUrl: assetUrl('core', 'metadata/di'),
      runtime: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS
    };
    Identifiers.ViewUtils = {
      name: 'ViewUtils',
      moduleUrl: assetUrl('core', 'linker/view_utils'),
      runtime: ViewUtils
    };
    Identifiers.AppView = {
      name: 'AppView',
      moduleUrl: APP_VIEW_MODULE_URL,
      runtime: AppView
    };
    Identifiers.DebugAppView = {
      name: 'DebugAppView',
      moduleUrl: APP_VIEW_MODULE_URL,
      runtime: DebugAppView
    };
    Identifiers.AppElement = {
      name: 'AppElement',
      moduleUrl: assetUrl('core', 'linker/element'),
      runtime: AppElement
    };
    Identifiers.ElementRef = {
      name: 'ElementRef',
      moduleUrl: assetUrl('core', 'linker/element_ref'),
      runtime: _angular_core.ElementRef
    };
    Identifiers.ViewContainerRef = {
      name: 'ViewContainerRef',
      moduleUrl: assetUrl('core', 'linker/view_container_ref'),
      runtime: _angular_core.ViewContainerRef
    };
    Identifiers.ChangeDetectorRef = {
      name: 'ChangeDetectorRef',
      moduleUrl: assetUrl('core', 'change_detection/change_detector_ref'),
      runtime: _angular_core.ChangeDetectorRef
    };
    Identifiers.RenderComponentType = {
      name: 'RenderComponentType',
      moduleUrl: assetUrl('core', 'render/api'),
      runtime: _angular_core.RenderComponentType
    };
    Identifiers.QueryList = {
      name: 'QueryList',
      moduleUrl: assetUrl('core', 'linker/query_list'),
      runtime: _angular_core.QueryList
    };
    Identifiers.TemplateRef = {
      name: 'TemplateRef',
      moduleUrl: assetUrl('core', 'linker/template_ref'),
      runtime: _angular_core.TemplateRef
    };
    Identifiers.TemplateRef_ = {
      name: 'TemplateRef_',
      moduleUrl: assetUrl('core', 'linker/template_ref'),
      runtime: TemplateRef_
    };
    Identifiers.CodegenComponentFactoryResolver = {
      name: 'CodegenComponentFactoryResolver',
      moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
      runtime: CodegenComponentFactoryResolver
    };
    Identifiers.ComponentFactoryResolver = {
      name: 'ComponentFactoryResolver',
      moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
      runtime: _angular_core.ComponentFactoryResolver
    };
    Identifiers.ComponentFactory = {
      name: 'ComponentFactory',
      runtime: _angular_core.ComponentFactory,
      moduleUrl: assetUrl('core', 'linker/component_factory')
    };
    Identifiers.NgModuleFactory = {
      name: 'NgModuleFactory',
      runtime: _angular_core.NgModuleFactory,
      moduleUrl: assetUrl('core', 'linker/ng_module_factory')
    };
    Identifiers.NgModuleInjector = {
      name: 'NgModuleInjector',
      runtime: NgModuleInjector,
      moduleUrl: assetUrl('core', 'linker/ng_module_factory')
    };
    Identifiers.ValueUnwrapper = {
      name: 'ValueUnwrapper',
      moduleUrl: CD_MODULE_URL,
      runtime: ValueUnwrapper
    };
    Identifiers.Injector = {
      name: 'Injector',
      moduleUrl: assetUrl('core', 'di/injector'),
      runtime: _angular_core.Injector
    };
    Identifiers.ViewEncapsulation = {
      name: 'ViewEncapsulation',
      moduleUrl: assetUrl('core', 'metadata/view'),
      runtime: _angular_core.ViewEncapsulation
    };
    Identifiers.ViewType = {
      name: 'ViewType',
      moduleUrl: assetUrl('core', 'linker/view_type'),
      runtime: ViewType
    };
    Identifiers.ChangeDetectionStrategy = {
      name: 'ChangeDetectionStrategy',
      moduleUrl: CD_MODULE_URL,
      runtime: _angular_core.ChangeDetectionStrategy
    };
    Identifiers.StaticNodeDebugInfo = {
      name: 'StaticNodeDebugInfo',
      moduleUrl: assetUrl('core', 'linker/debug_context'),
      runtime: StaticNodeDebugInfo
    };
    Identifiers.DebugContext = {
      name: 'DebugContext',
      moduleUrl: assetUrl('core', 'linker/debug_context'),
      runtime: DebugContext
    };
    Identifiers.Renderer = {
      name: 'Renderer',
      moduleUrl: assetUrl('core', 'render/api'),
      runtime: _angular_core.Renderer
    };
    Identifiers.SimpleChange = {
      name: 'SimpleChange',
      moduleUrl: CD_MODULE_URL,
      runtime: _angular_core.SimpleChange
    };
    Identifiers.UNINITIALIZED = {
      name: 'UNINITIALIZED',
      moduleUrl: CD_MODULE_URL,
      runtime: UNINITIALIZED
    };
    Identifiers.ChangeDetectorStatus = {
      name: 'ChangeDetectorStatus',
      moduleUrl: CD_MODULE_URL,
      runtime: ChangeDetectorStatus
    };
    Identifiers.checkBinding = {
      name: 'checkBinding',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: checkBinding
    };
    Identifiers.flattenNestedViewRenderNodes = {
      name: 'flattenNestedViewRenderNodes',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: flattenNestedViewRenderNodes
    };
    Identifiers.devModeEqual = {
      name: 'devModeEqual',
      moduleUrl: CD_MODULE_URL,
      runtime: devModeEqual
    };
    Identifiers.interpolate = {
      name: 'interpolate',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: interpolate
    };
    Identifiers.castByValue = {
      name: 'castByValue',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: castByValue
    };
    Identifiers.EMPTY_ARRAY = {
      name: 'EMPTY_ARRAY',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: EMPTY_ARRAY
    };
    Identifiers.EMPTY_MAP = {
      name: 'EMPTY_MAP',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: EMPTY_MAP
    };
    Identifiers.pureProxies = [null, {
      name: 'pureProxy1',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: pureProxy1
    }, {
      name: 'pureProxy2',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: pureProxy2
    }, {
      name: 'pureProxy3',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: pureProxy3
    }, {
      name: 'pureProxy4',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: pureProxy4
    }, {
      name: 'pureProxy5',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: pureProxy5
    }, {
      name: 'pureProxy6',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: pureProxy6
    }, {
      name: 'pureProxy7',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: pureProxy7
    }, {
      name: 'pureProxy8',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: pureProxy8
    }, {
      name: 'pureProxy9',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: pureProxy9
    }, {
      name: 'pureProxy10',
      moduleUrl: VIEW_UTILS_MODULE_URL,
      runtime: pureProxy10
    }];
    Identifiers.SecurityContext = {
      name: 'SecurityContext',
      moduleUrl: assetUrl('core', 'security'),
      runtime: _angular_core.SecurityContext
    };
    Identifiers.AnimationKeyframe = {
      name: 'AnimationKeyframe',
      moduleUrl: assetUrl('core', 'animation/animation_keyframe'),
      runtime: AnimationKeyframe
    };
    Identifiers.AnimationStyles = {
      name: 'AnimationStyles',
      moduleUrl: assetUrl('core', 'animation/animation_styles'),
      runtime: AnimationStyles
    };
    Identifiers.NoOpAnimationPlayer = {
      name: 'NoOpAnimationPlayer',
      moduleUrl: assetUrl('core', 'animation/animation_player'),
      runtime: NoOpAnimationPlayer
    };
    Identifiers.AnimationGroupPlayer = {
      name: 'AnimationGroupPlayer',
      moduleUrl: assetUrl('core', 'animation/animation_group_player'),
      runtime: AnimationGroupPlayer
    };
    Identifiers.AnimationSequencePlayer = {
      name: 'AnimationSequencePlayer',
      moduleUrl: assetUrl('core', 'animation/animation_sequence_player'),
      runtime: AnimationSequencePlayer
    };
    Identifiers.prepareFinalAnimationStyles = {
      name: 'prepareFinalAnimationStyles',
      moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
      runtime: prepareFinalAnimationStyles
    };
    Identifiers.balanceAnimationKeyframes = {
      name: 'balanceAnimationKeyframes',
      moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
      runtime: balanceAnimationKeyframes
    };
    Identifiers.clearStyles = {
      name: 'clearStyles',
      moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
      runtime: clearStyles
    };
    Identifiers.renderStyles = {
      name: 'renderStyles',
      moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
      runtime: renderStyles
    };
    Identifiers.collectAndResolveStyles = {
      name: 'collectAndResolveStyles',
      moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
      runtime: collectAndResolveStyles
    };
    Identifiers.LOCALE_ID = {
      name: 'LOCALE_ID',
      moduleUrl: assetUrl('core', 'i18n/tokens'),
      runtime: _angular_core.LOCALE_ID
    };
    Identifiers.TRANSLATIONS_FORMAT = {
      name: 'TRANSLATIONS_FORMAT',
      moduleUrl: assetUrl('core', 'i18n/tokens'),
      runtime: _angular_core.TRANSLATIONS_FORMAT
    };
    Identifiers.AnimationOutput = {
      name: 'AnimationOutput',
      moduleUrl: assetUrl('core', 'animation/animation_output'),
      runtime: AnimationOutput
    };
    return Identifiers;
  }());
  function resolveIdentifier(identifier) {
    return new CompileIdentifierMetadata({
      name: identifier.name,
      moduleUrl: identifier.moduleUrl,
      reference: reflector.resolveIdentifier(identifier.name, identifier.moduleUrl, identifier.runtime)
    });
  }
  function identifierToken(identifier) {
    return new CompileTokenMetadata({identifier: identifier});
  }
  function resolveIdentifierToken(identifier) {
    return identifierToken(resolveIdentifier(identifier));
  }
  function resolveEnumIdentifier(enumType, name) {
    var resolvedEnum = reflector.resolveEnum(enumType.reference, name);
    return new CompileIdentifierMetadata({
      name: enumType.name + "." + name,
      moduleUrl: enumType.moduleUrl,
      reference: resolvedEnum
    });
  }
  var __extends$8 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HtmlParser = (function(_super) {
    __extends$8(HtmlParser, _super);
    function HtmlParser() {
      _super.call(this, getHtmlTagDefinition);
    }
    HtmlParser.prototype.parse = function(source, url, parseExpansionForms, interpolationConfig) {
      if (parseExpansionForms === void 0) {
        parseExpansionForms = false;
      }
      if (interpolationConfig === void 0) {
        interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
      }
      return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);
    };
    HtmlParser.decorators = [{type: _angular_core.Injectable}];
    HtmlParser.ctorParameters = [];
    return HtmlParser;
  }(Parser$1));
  var __extends$9 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];
  function expandNodes(nodes) {
    var expander = new _Expander();
    return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);
  }
  var ExpansionResult = (function() {
    function ExpansionResult(nodes, expanded, errors) {
      this.nodes = nodes;
      this.expanded = expanded;
      this.errors = errors;
    }
    return ExpansionResult;
  }());
  var ExpansionError = (function(_super) {
    __extends$9(ExpansionError, _super);
    function ExpansionError(span, errorMsg) {
      _super.call(this, span, errorMsg);
    }
    return ExpansionError;
  }(ParseError));
  var _Expander = (function() {
    function _Expander() {
      this.isExpanded = false;
      this.errors = [];
    }
    _Expander.prototype.visitElement = function(element, context) {
      return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
    };
    _Expander.prototype.visitAttribute = function(attribute, context) {
      return attribute;
    };
    _Expander.prototype.visitText = function(text, context) {
      return text;
    };
    _Expander.prototype.visitComment = function(comment, context) {
      return comment;
    };
    _Expander.prototype.visitExpansion = function(icu, context) {
      this.isExpanded = true;
      return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) : _expandDefaultForm(icu, this.errors);
    };
    _Expander.prototype.visitExpansionCase = function(icuCase, context) {
      throw new Error('Should not be reached');
    };
    return _Expander;
  }());
  function _expandPluralForm(ast, errors) {
    var children = ast.cases.map(function(c) {
      if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
        errors.push(new ExpansionError(c.valueSourceSpan, "Plural cases should be \"=<number>\" or one of " + PLURAL_CASES.join(", ")));
      }
      var expansionResult = expandNodes(c.expression);
      errors.push.apply(errors, expansionResult.errors);
      return new Element("template", [new Attribute('ngPluralCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
    });
    var switchAttr = new Attribute('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);
    return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
  }
  function _expandDefaultForm(ast, errors) {
    var children = ast.cases.map(function(c) {
      var expansionResult = expandNodes(c.expression);
      errors.push.apply(errors, expansionResult.errors);
      return new Element("template", [new Attribute('ngSwitchCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
    });
    var switchAttr = new Attribute('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);
    return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
  }
  var __extends$10 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ProviderError = (function(_super) {
    __extends$10(ProviderError, _super);
    function ProviderError(message, span) {
      _super.call(this, span, message);
    }
    return ProviderError;
  }(ParseError));
  var ProviderViewContext = (function() {
    function ProviderViewContext(component, sourceSpan) {
      var _this = this;
      this.component = component;
      this.sourceSpan = sourceSpan;
      this.errors = [];
      this.viewQueries = _getViewQueries(component);
      this.viewProviders = new Map();
      _normalizeProviders(component.viewProviders, sourceSpan, this.errors).forEach(function(provider) {
        if (isBlank(_this.viewProviders.get(provider.token.reference))) {
          _this.viewProviders.set(provider.token.reference, true);
        }
      });
    }
    return ProviderViewContext;
  }());
  var ProviderElementContext = (function() {
    function ProviderElementContext(_viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, _sourceSpan) {
      var _this = this;
      this._viewContext = _viewContext;
      this._parent = _parent;
      this._isViewRoot = _isViewRoot;
      this._directiveAsts = _directiveAsts;
      this._sourceSpan = _sourceSpan;
      this._transformedProviders = new Map();
      this._seenProviders = new Map();
      this._hasViewContainer = false;
      this._attrs = {};
      attrs.forEach(function(attrAst) {
        return _this._attrs[attrAst.name] = attrAst.value;
      });
      var directivesMeta = _directiveAsts.map(function(directiveAst) {
        return directiveAst.directive;
      });
      this._allProviders = _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, _viewContext.errors);
      this._contentQueries = _getContentQueries(directivesMeta);
      var queriedTokens = new Map();
      MapWrapper.values(this._allProviders).forEach(function(provider) {
        _this._addQueryReadsTo(provider.token, queriedTokens);
      });
      refs.forEach(function(refAst) {
        _this._addQueryReadsTo(new CompileTokenMetadata({value: refAst.name}), queriedTokens);
      });
      if (isPresent(queriedTokens.get(resolveIdentifierToken(Identifiers.ViewContainerRef).reference))) {
        this._hasViewContainer = true;
      }
      MapWrapper.values(this._allProviders).forEach(function(provider) {
        var eager = provider.eager || isPresent(queriedTokens.get(provider.token.reference));
        if (eager) {
          _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
        }
      });
    }
    ProviderElementContext.prototype.afterElement = function() {
      var _this = this;
      MapWrapper.values(this._allProviders).forEach(function(provider) {
        _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
      });
    };
    Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
      get: function() {
        return MapWrapper.values(this._transformedProviders);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
      get: function() {
        var sortedProviderTypes = this.transformProviders.map(function(provider) {
          return provider.token.identifier;
        });
        var sortedDirectives = ListWrapper.clone(this._directiveAsts);
        ListWrapper.sort(sortedDirectives, function(dir1, dir2) {
          return sortedProviderTypes.indexOf(dir1.directive.type) - sortedProviderTypes.indexOf(dir2.directive.type);
        });
        return sortedDirectives;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
      get: function() {
        return this._hasViewContainer;
      },
      enumerable: true,
      configurable: true
    });
    ProviderElementContext.prototype._addQueryReadsTo = function(token, queryReadTokens) {
      this._getQueriesFor(token).forEach(function(query) {
        var queryReadToken = isPresent(query.read) ? query.read : token;
        if (isBlank(queryReadTokens.get(queryReadToken.reference))) {
          queryReadTokens.set(queryReadToken.reference, true);
        }
      });
    };
    ProviderElementContext.prototype._getQueriesFor = function(token) {
      var result = [];
      var currentEl = this;
      var distance = 0;
      var queries;
      while (currentEl !== null) {
        queries = currentEl._contentQueries.get(token.reference);
        if (isPresent(queries)) {
          ListWrapper.addAll(result, queries.filter(function(query) {
            return query.descendants || distance <= 1;
          }));
        }
        if (currentEl._directiveAsts.length > 0) {
          distance++;
        }
        currentEl = currentEl._parent;
      }
      queries = this._viewContext.viewQueries.get(token.reference);
      if (isPresent(queries)) {
        ListWrapper.addAll(result, queries);
      }
      return result;
    };
    ProviderElementContext.prototype._getOrCreateLocalProvider = function(requestingProviderType, token, eager) {
      var _this = this;
      var resolvedProvider = this._allProviders.get(token.reference);
      if (isBlank(resolvedProvider) || ((requestingProviderType === exports.ProviderAstType.Directive || requestingProviderType === exports.ProviderAstType.PublicService) && resolvedProvider.providerType === exports.ProviderAstType.PrivateService) || ((requestingProviderType === exports.ProviderAstType.PrivateService || requestingProviderType === exports.ProviderAstType.PublicService) && resolvedProvider.providerType === exports.ProviderAstType.Builtin)) {
        return null;
      }
      var transformedProviderAst = this._transformedProviders.get(token.reference);
      if (isPresent(transformedProviderAst)) {
        return transformedProviderAst;
      }
      if (isPresent(this._seenProviders.get(token.reference))) {
        this._viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, this._sourceSpan));
        return null;
      }
      this._seenProviders.set(token.reference, true);
      var transformedProviders = resolvedProvider.providers.map(function(provider) {
        var transformedUseValue = provider.useValue;
        var transformedUseExisting = provider.useExisting;
        var transformedDeps;
        if (isPresent(provider.useExisting)) {
          var existingDiDep = _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({token: provider.useExisting}), eager);
          if (isPresent(existingDiDep.token)) {
            transformedUseExisting = existingDiDep.token;
          } else {
            transformedUseExisting = null;
            transformedUseValue = existingDiDep.value;
          }
        } else if (isPresent(provider.useFactory)) {
          var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
          transformedDeps = deps.map(function(dep) {
            return _this._getDependency(resolvedProvider.providerType, dep, eager);
          });
        } else if (isPresent(provider.useClass)) {
          var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
          transformedDeps = deps.map(function(dep) {
            return _this._getDependency(resolvedProvider.providerType, dep, eager);
          });
        }
        return _transformProvider(provider, {
          useExisting: transformedUseExisting,
          useValue: transformedUseValue,
          deps: transformedDeps
        });
      });
      transformedProviderAst = _transformProviderAst(resolvedProvider, {
        eager: eager,
        providers: transformedProviders
      });
      this._transformedProviders.set(token.reference, transformedProviderAst);
      return transformedProviderAst;
    };
    ProviderElementContext.prototype._getLocalDependency = function(requestingProviderType, dep, eager) {
      if (eager === void 0) {
        eager = null;
      }
      if (dep.isAttribute) {
        var attrValue = this._attrs[dep.token.value];
        return new CompileDiDependencyMetadata({
          isValue: true,
          value: normalizeBlank(attrValue)
        });
      }
      if (isPresent(dep.query) || isPresent(dep.viewQuery)) {
        return dep;
      }
      if (isPresent(dep.token)) {
        if ((requestingProviderType === exports.ProviderAstType.Directive || requestingProviderType === exports.ProviderAstType.Component)) {
          if (dep.token.reference === resolveIdentifierToken(Identifiers.Renderer).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ElementRef).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference || dep.token.reference === resolveIdentifierToken(Identifiers.TemplateRef).reference) {
            return dep;
          }
          if (dep.token.reference === resolveIdentifierToken(Identifiers.ViewContainerRef).reference) {
            this._hasViewContainer = true;
          }
        }
        if (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference) {
          return dep;
        }
        if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {
          return dep;
        }
      }
      return null;
    };
    ProviderElementContext.prototype._getDependency = function(requestingProviderType, dep, eager) {
      if (eager === void 0) {
        eager = null;
      }
      var currElement = this;
      var currEager = eager;
      var result = null;
      if (!dep.isSkipSelf) {
        result = this._getLocalDependency(requestingProviderType, dep, eager);
      }
      if (dep.isSelf) {
        if (isBlank(result) && dep.isOptional) {
          result = new CompileDiDependencyMetadata({
            isValue: true,
            value: null
          });
        }
      } else {
        while (isBlank(result) && isPresent(currElement._parent)) {
          var prevElement = currElement;
          currElement = currElement._parent;
          if (prevElement._isViewRoot) {
            currEager = false;
          }
          result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, dep, currEager);
        }
        if (isBlank(result)) {
          if (!dep.isHost || this._viewContext.component.type.isHost || this._viewContext.component.type.reference === dep.token.reference || isPresent(this._viewContext.viewProviders.get(dep.token.reference))) {
            result = dep;
          } else {
            result = dep.isOptional ? result = new CompileDiDependencyMetadata({
              isValue: true,
              value: null
            }) : null;
          }
        }
      }
      if (isBlank(result)) {
        this._viewContext.errors.push(new ProviderError("No provider for " + dep.token.name, this._sourceSpan));
      }
      return result;
    };
    return ProviderElementContext;
  }());
  var NgModuleProviderAnalyzer = (function() {
    function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {
      var _this = this;
      this._transformedProviders = new Map();
      this._seenProviders = new Map();
      this._errors = [];
      this._allProviders = new Map();
      var ngModuleTypes = ngModule.transitiveModule.modules.map(function(moduleMeta) {
        return moduleMeta.type;
      });
      ngModuleTypes.forEach(function(ngModuleType) {
        var ngModuleProvider = new CompileProviderMetadata({
          token: new CompileTokenMetadata({identifier: ngModuleType}),
          useClass: ngModuleType
        });
        _resolveProviders([ngModuleProvider], exports.ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders);
      });
      _resolveProviders(_normalizeProviders(ngModule.transitiveModule.providers.concat(extraProviders), sourceSpan, this._errors), exports.ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);
    }
    NgModuleProviderAnalyzer.prototype.parse = function() {
      var _this = this;
      MapWrapper.values(this._allProviders).forEach(function(provider) {
        _this._getOrCreateLocalProvider(provider.token, provider.eager);
      });
      if (this._errors.length > 0) {
        var errorString = this._errors.join('\n');
        throw new Error("Provider parse errors:\n" + errorString);
      }
      return MapWrapper.values(this._transformedProviders);
    };
    NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function(token, eager) {
      var _this = this;
      var resolvedProvider = this._allProviders.get(token.reference);
      if (isBlank(resolvedProvider)) {
        return null;
      }
      var transformedProviderAst = this._transformedProviders.get(token.reference);
      if (isPresent(transformedProviderAst)) {
        return transformedProviderAst;
      }
      if (isPresent(this._seenProviders.get(token.reference))) {
        this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, resolvedProvider.sourceSpan));
        return null;
      }
      this._seenProviders.set(token.reference, true);
      var transformedProviders = resolvedProvider.providers.map(function(provider) {
        var transformedUseValue = provider.useValue;
        var transformedUseExisting = provider.useExisting;
        var transformedDeps;
        if (isPresent(provider.useExisting)) {
          var existingDiDep = _this._getDependency(new CompileDiDependencyMetadata({token: provider.useExisting}), eager, resolvedProvider.sourceSpan);
          if (isPresent(existingDiDep.token)) {
            transformedUseExisting = existingDiDep.token;
          } else {
            transformedUseExisting = null;
            transformedUseValue = existingDiDep.value;
          }
        } else if (isPresent(provider.useFactory)) {
          var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
          transformedDeps = deps.map(function(dep) {
            return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
          });
        } else if (isPresent(provider.useClass)) {
          var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
          transformedDeps = deps.map(function(dep) {
            return _this._getDependency(dep, eager, resolvedProvider.sourceSpan);
          });
        }
        return _transformProvider(provider, {
          useExisting: transformedUseExisting,
          useValue: transformedUseValue,
          deps: transformedDeps
        });
      });
      transformedProviderAst = _transformProviderAst(resolvedProvider, {
        eager: eager,
        providers: transformedProviders
      });
      this._transformedProviders.set(token.reference, transformedProviderAst);
      return transformedProviderAst;
    };
    NgModuleProviderAnalyzer.prototype._getDependency = function(dep, eager, requestorSourceSpan) {
      if (eager === void 0) {
        eager = null;
      }
      var foundLocal = false;
      if (!dep.isSkipSelf && isPresent(dep.token)) {
        if (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ComponentFactoryResolver).reference) {
          foundLocal = true;
        } else if (isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {
          foundLocal = true;
        }
      }
      var result = dep;
      if (dep.isSelf && !foundLocal) {
        if (dep.isOptional) {
          result = new CompileDiDependencyMetadata({
            isValue: true,
            value: null
          });
        } else {
          this._errors.push(new ProviderError("No provider for " + dep.token.name, requestorSourceSpan));
        }
      }
      return result;
    };
    return NgModuleProviderAnalyzer;
  }());
  function _transformProvider(provider, _a) {
    var useExisting = _a.useExisting,
        useValue = _a.useValue,
        deps = _a.deps;
    return new CompileProviderMetadata({
      token: provider.token,
      useClass: provider.useClass,
      useExisting: useExisting,
      useFactory: provider.useFactory,
      useValue: useValue,
      deps: deps,
      multi: provider.multi
    });
  }
  function _transformProviderAst(provider, _a) {
    var eager = _a.eager,
        providers = _a.providers;
    return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
  }
  function _normalizeProviders(providers, sourceSpan, targetErrors, targetProviders) {
    if (targetProviders === void 0) {
      targetProviders = null;
    }
    if (isBlank(targetProviders)) {
      targetProviders = [];
    }
    if (isPresent(providers)) {
      providers.forEach(function(provider) {
        if (isArray(provider)) {
          _normalizeProviders(provider, sourceSpan, targetErrors, targetProviders);
        } else {
          var normalizeProvider = void 0;
          if (provider instanceof CompileProviderMetadata) {
            normalizeProvider = provider;
          } else if (provider instanceof CompileTypeMetadata) {
            normalizeProvider = new CompileProviderMetadata({
              token: new CompileTokenMetadata({identifier: provider}),
              useClass: provider
            });
          } else {
            targetErrors.push(new ProviderError("Unknown provider type " + provider, sourceSpan));
          }
          if (isPresent(normalizeProvider)) {
            targetProviders.push(normalizeProvider);
          }
        }
      });
    }
    return targetProviders;
  }
  function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
    var providersByToken = new Map();
    directives.forEach(function(directive) {
      var dirProvider = new CompileProviderMetadata({
        token: new CompileTokenMetadata({identifier: directive.type}),
        useClass: directive.type
      });
      _resolveProviders([dirProvider], directive.isComponent ? exports.ProviderAstType.Component : exports.ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
    });
    var directivesWithComponentFirst = directives.filter(function(dir) {
      return dir.isComponent;
    }).concat(directives.filter(function(dir) {
      return !dir.isComponent;
    }));
    directivesWithComponentFirst.forEach(function(directive) {
      _resolveProviders(_normalizeProviders(directive.providers, sourceSpan, targetErrors), exports.ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
      _resolveProviders(_normalizeProviders(directive.viewProviders, sourceSpan, targetErrors), exports.ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
    });
    return providersByToken;
  }
  function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
    providers.forEach(function(provider) {
      var resolvedProvider = targetProvidersByToken.get(provider.token.reference);
      if (isPresent(resolvedProvider) && resolvedProvider.multiProvider !== provider.multi) {
        targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + resolvedProvider.token.name, sourceSpan));
      }
      if (isBlank(resolvedProvider)) {
        var lifecycleHooks = provider.token.identifier && provider.token.identifier instanceof CompileTypeMetadata ? provider.token.identifier.lifecycleHooks : [];
        resolvedProvider = new ProviderAst(provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider], providerType, lifecycleHooks, sourceSpan);
        targetProvidersByToken.set(provider.token.reference, resolvedProvider);
      } else {
        if (!provider.multi) {
          ListWrapper.clear(resolvedProvider.providers);
        }
        resolvedProvider.providers.push(provider);
      }
    });
  }
  function _getViewQueries(component) {
    var viewQueries = new Map();
    if (isPresent(component.viewQueries)) {
      component.viewQueries.forEach(function(query) {
        return _addQueryToTokenMap(viewQueries, query);
      });
    }
    component.type.diDeps.forEach(function(dep) {
      if (isPresent(dep.viewQuery)) {
        _addQueryToTokenMap(viewQueries, dep.viewQuery);
      }
    });
    return viewQueries;
  }
  function _getContentQueries(directives) {
    var contentQueries = new Map();
    directives.forEach(function(directive) {
      if (isPresent(directive.queries)) {
        directive.queries.forEach(function(query) {
          return _addQueryToTokenMap(contentQueries, query);
        });
      }
      directive.type.diDeps.forEach(function(dep) {
        if (isPresent(dep.query)) {
          _addQueryToTokenMap(contentQueries, dep.query);
        }
      });
    });
    return contentQueries;
  }
  function _addQueryToTokenMap(map, query) {
    query.selectors.forEach(function(token) {
      var entry = map.get(token.reference);
      if (isBlank(entry)) {
        entry = [];
        map.set(token.reference, entry);
      }
      entry.push(query);
    });
  }
  var ElementSchemaRegistry = (function() {
    function ElementSchemaRegistry() {}
    return ElementSchemaRegistry;
  }());
  var StyleWithImports = (function() {
    function StyleWithImports(style, styleUrls) {
      this.style = style;
      this.styleUrls = styleUrls;
    }
    return StyleWithImports;
  }());
  function isStyleUrlResolvable(url) {
    if (isBlank(url) || url.length === 0 || url[0] == '/')
      return false;
    var schemeMatch = url.match(_urlWithSchemaRe);
    return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
  }
  function extractStyleUrls(resolver, baseUrl, cssText) {
    var foundUrls = [];
    var modifiedCssText = StringWrapper.replaceAllMapped(cssText, _cssImportRe, function(m) {
      var url = isPresent(m[1]) ? m[1] : m[2];
      if (!isStyleUrlResolvable(url)) {
        return m[0];
      }
      foundUrls.push(resolver.resolve(baseUrl, url));
      return '';
    });
    return new StyleWithImports(modifiedCssText, foundUrls);
  }
  var _cssImportRe = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
  var _urlWithSchemaRe = /^([^:/?#]+):/;
  var NG_CONTENT_SELECT_ATTR = 'select';
  var NG_CONTENT_ELEMENT = 'ng-content';
  var LINK_ELEMENT = 'link';
  var LINK_STYLE_REL_ATTR = 'rel';
  var LINK_STYLE_HREF_ATTR = 'href';
  var LINK_STYLE_REL_VALUE = 'stylesheet';
  var STYLE_ELEMENT = 'style';
  var SCRIPT_ELEMENT = 'script';
  var NG_NON_BINDABLE_ATTR = 'ngNonBindable';
  var NG_PROJECT_AS = 'ngProjectAs';
  function preparseElement(ast) {
    var selectAttr = null;
    var hrefAttr = null;
    var relAttr = null;
    var nonBindable = false;
    var projectAs = null;
    ast.attrs.forEach(function(attr) {
      var lcAttrName = attr.name.toLowerCase();
      if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
        selectAttr = attr.value;
      } else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
        hrefAttr = attr.value;
      } else if (lcAttrName == LINK_STYLE_REL_ATTR) {
        relAttr = attr.value;
      } else if (attr.name == NG_NON_BINDABLE_ATTR) {
        nonBindable = true;
      } else if (attr.name == NG_PROJECT_AS) {
        if (attr.value.length > 0) {
          projectAs = attr.value;
        }
      }
    });
    selectAttr = normalizeNgContentSelect(selectAttr);
    var nodeName = ast.name.toLowerCase();
    var type = PreparsedElementType.OTHER;
    if (splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
      type = PreparsedElementType.NG_CONTENT;
    } else if (nodeName == STYLE_ELEMENT) {
      type = PreparsedElementType.STYLE;
    } else if (nodeName == SCRIPT_ELEMENT) {
      type = PreparsedElementType.SCRIPT;
    } else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
      type = PreparsedElementType.STYLESHEET;
    }
    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
  }
  var PreparsedElementType;
  (function(PreparsedElementType) {
    PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
    PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
    PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
    PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
    PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
  })(PreparsedElementType || (PreparsedElementType = {}));
  var PreparsedElement = (function() {
    function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
      this.type = type;
      this.selectAttr = selectAttr;
      this.hrefAttr = hrefAttr;
      this.nonBindable = nonBindable;
      this.projectAs = projectAs;
    }
    return PreparsedElement;
  }());
  function normalizeNgContentSelect(selectAttr) {
    if (selectAttr === null || selectAttr.length === 0) {
      return '*';
    }
    return selectAttr;
  }
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
  var KW_BIND_IDX = 1;
  var KW_LET_IDX = 2;
  var KW_REF_IDX = 3;
  var KW_ON_IDX = 4;
  var KW_BINDON_IDX = 5;
  var KW_AT_IDX = 6;
  var IDENT_KW_IDX = 7;
  var IDENT_BANANA_BOX_IDX = 8;
  var IDENT_PROPERTY_IDX = 9;
  var IDENT_EVENT_IDX = 10;
  var ANIMATE_PROP_PREFIX = 'animate-';
  var TEMPLATE_ELEMENT = 'template';
  var TEMPLATE_ATTR = 'template';
  var TEMPLATE_ATTR_PREFIX = '*';
  var CLASS_ATTR = 'class';
  var PROPERTY_PARTS_SEPARATOR = '.';
  var ATTRIBUTE_PREFIX = 'attr';
  var CLASS_PREFIX = 'class';
  var STYLE_PREFIX = 'style';
  var TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];
  var TEMPLATE_TRANSFORMS = new _angular_core.OpaqueToken('TemplateTransforms');
  var TemplateParseError = (function(_super) {
    __extends(TemplateParseError, _super);
    function TemplateParseError(message, span, level) {
      _super.call(this, span, message, level);
    }
    return TemplateParseError;
  }(ParseError));
  var TemplateParseResult = (function() {
    function TemplateParseResult(templateAst, errors) {
      this.templateAst = templateAst;
      this.errors = errors;
    }
    return TemplateParseResult;
  }());
  var TemplateParser = (function() {
    function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
      this._exprParser = _exprParser;
      this._schemaRegistry = _schemaRegistry;
      this._htmlParser = _htmlParser;
      this._console = _console;
      this.transforms = transforms;
    }
    TemplateParser.prototype.parse = function(component, template, directives, pipes, schemas, templateUrl) {
      var result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);
      var warnings = result.errors.filter(function(error) {
        return error.level === ParseErrorLevel.WARNING;
      });
      var errors = result.errors.filter(function(error) {
        return error.level === ParseErrorLevel.FATAL;
      });
      if (warnings.length > 0) {
        this._console.warn("Template parse warnings:\n" + warnings.join('\n'));
      }
      if (errors.length > 0) {
        var errorString = errors.join('\n');
        throw new Error("Template parse errors:\n" + errorString);
      }
      return result.templateAst;
    };
    TemplateParser.prototype.tryParse = function(component, template, directives, pipes, schemas, templateUrl) {
      var interpolationConfig;
      if (component.template) {
        interpolationConfig = InterpolationConfig.fromArray(component.template.interpolation);
      }
      var htmlAstWithErrors = this._htmlParser.parse(template, templateUrl, true, interpolationConfig);
      var errors = htmlAstWithErrors.errors;
      var result;
      if (errors.length == 0) {
        var expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
        errors.push.apply(errors, expandedHtmlAst.errors);
        htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
      }
      if (htmlAstWithErrors.rootNodes.length > 0) {
        var uniqDirectives = removeIdentifierDuplicates(directives);
        var uniqPipes = removeIdentifierDuplicates(pipes);
        var providerViewContext = new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);
        var parseVisitor = new TemplateParseVisitor(providerViewContext, uniqDirectives, uniqPipes, schemas, this._exprParser, this._schemaRegistry);
        result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
        errors.push.apply(errors, parseVisitor.errors.concat(providerViewContext.errors));
      } else {
        result = [];
      }
      this._assertNoReferenceDuplicationOnTemplate(result, errors);
      if (errors.length > 0) {
        return new TemplateParseResult(result, errors);
      }
      if (isPresent(this.transforms)) {
        this.transforms.forEach(function(transform) {
          result = templateVisitAll(transform, result);
        });
      }
      return new TemplateParseResult(result, errors);
    };
    TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function(result, errors) {
      var existingReferences = [];
      result.filter(function(element) {
        return !!element.references;
      }).forEach(function(element) {
        return element.references.forEach(function(reference) {
          var name = reference.name;
          if (existingReferences.indexOf(name) < 0) {
            existingReferences.push(name);
          } else {
            var error = new TemplateParseError("Reference \"#" + name + "\" is defined several times", reference.sourceSpan, ParseErrorLevel.FATAL);
            errors.push(error);
          }
        });
      });
    };
    TemplateParser.decorators = [{type: _angular_core.Injectable}];
    TemplateParser.ctorParameters = [{type: Parser}, {type: ElementSchemaRegistry}, {type: I18NHtmlParser}, {type: Console}, {
      type: Array,
      decorators: [{type: _angular_core.Optional}, {
        type: _angular_core.Inject,
        args: [TEMPLATE_TRANSFORMS]
      }]
    }];
    return TemplateParser;
  }());
  var TemplateParseVisitor = (function() {
    function TemplateParseVisitor(providerViewContext, directives, pipes, _schemas, _exprParser, _schemaRegistry) {
      var _this = this;
      this.providerViewContext = providerViewContext;
      this._schemas = _schemas;
      this._exprParser = _exprParser;
      this._schemaRegistry = _schemaRegistry;
      this.selectorMatcher = new SelectorMatcher();
      this.errors = [];
      this.directivesIndex = new Map();
      this.ngContentCount = 0;
      this.pipesByName = new Map();
      var tempMeta = providerViewContext.component.template;
      if (tempMeta && tempMeta.interpolation) {
        this._interpolationConfig = {
          start: tempMeta.interpolation[0],
          end: tempMeta.interpolation[1]
        };
      }
      directives.forEach(function(directive, index) {
        var selector = CssSelector.parse(directive.selector);
        _this.selectorMatcher.addSelectables(selector, directive);
        _this.directivesIndex.set(directive, index);
      });
      pipes.forEach(function(pipe) {
        return _this.pipesByName.set(pipe.name, pipe);
      });
    }
    TemplateParseVisitor.prototype._reportError = function(message, sourceSpan, level) {
      if (level === void 0) {
        level = ParseErrorLevel.FATAL;
      }
      this.errors.push(new TemplateParseError(message, sourceSpan, level));
    };
    TemplateParseVisitor.prototype._reportParserErrors = function(errors, sourceSpan) {
      for (var _i = 0,
          errors_1 = errors; _i < errors_1.length; _i++) {
        var error = errors_1[_i];
        this._reportError(error.message, sourceSpan);
      }
    };
    TemplateParseVisitor.prototype._parseInterpolation = function(value, sourceSpan) {
      var sourceInfo = sourceSpan.start.toString();
      try {
        var ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
        if (ast)
          this._reportParserErrors(ast.errors, sourceSpan);
        this._checkPipes(ast, sourceSpan);
        if (isPresent(ast) && ast.ast.expressions.length > MAX_INTERPOLATION_VALUES) {
          throw new Error("Only support at most " + MAX_INTERPOLATION_VALUES + " interpolation values!");
        }
        return ast;
      } catch (e) {
        this._reportError("" + e, sourceSpan);
        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
      }
    };
    TemplateParseVisitor.prototype._parseAction = function(value, sourceSpan) {
      var sourceInfo = sourceSpan.start.toString();
      try {
        var ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
        if (ast) {
          this._reportParserErrors(ast.errors, sourceSpan);
        }
        if (!ast || ast.ast instanceof EmptyExpr) {
          this._reportError("Empty expressions are not allowed", sourceSpan);
          return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
        }
        this._checkPipes(ast, sourceSpan);
        return ast;
      } catch (e) {
        this._reportError("" + e, sourceSpan);
        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
      }
    };
    TemplateParseVisitor.prototype._parseBinding = function(value, sourceSpan) {
      var sourceInfo = sourceSpan.start.toString();
      try {
        var ast = this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
        if (ast)
          this._reportParserErrors(ast.errors, sourceSpan);
        this._checkPipes(ast, sourceSpan);
        return ast;
      } catch (e) {
        this._reportError("" + e, sourceSpan);
        return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
      }
    };
    TemplateParseVisitor.prototype._parseTemplateBindings = function(value, sourceSpan) {
      var _this = this;
      var sourceInfo = sourceSpan.start.toString();
      try {
        var bindingsResult = this._exprParser.parseTemplateBindings(value, sourceInfo);
        this._reportParserErrors(bindingsResult.errors, sourceSpan);
        bindingsResult.templateBindings.forEach(function(binding) {
          if (isPresent(binding.expression)) {
            _this._checkPipes(binding.expression, sourceSpan);
          }
        });
        bindingsResult.warnings.forEach(function(warning) {
          _this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);
        });
        return bindingsResult.templateBindings;
      } catch (e) {
        this._reportError("" + e, sourceSpan);
        return [];
      }
    };
    TemplateParseVisitor.prototype._checkPipes = function(ast, sourceSpan) {
      var _this = this;
      if (isPresent(ast)) {
        var collector = new PipeCollector();
        ast.visit(collector);
        collector.pipes.forEach(function(pipeName) {
          if (!_this.pipesByName.has(pipeName)) {
            _this._reportError("The pipe '" + pipeName + "' could not be found", sourceSpan);
          }
        });
      }
    };
    TemplateParseVisitor.prototype.visitExpansion = function(expansion, context) {
      return null;
    };
    TemplateParseVisitor.prototype.visitExpansionCase = function(expansionCase, context) {
      return null;
    };
    TemplateParseVisitor.prototype.visitText = function(text, parent) {
      var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
      var expr = this._parseInterpolation(text.value, text.sourceSpan);
      if (isPresent(expr)) {
        return new BoundTextAst(expr, ngContentIndex, text.sourceSpan);
      } else {
        return new TextAst(text.value, ngContentIndex, text.sourceSpan);
      }
    };
    TemplateParseVisitor.prototype.visitAttribute = function(attribute, context) {
      return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
    };
    TemplateParseVisitor.prototype.visitComment = function(comment, context) {
      return null;
    };
    TemplateParseVisitor.prototype.visitElement = function(element, parent) {
      var _this = this;
      var nodeName = element.name;
      var preparsedElement = preparseElement(element);
      if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE) {
        return null;
      }
      if (preparsedElement.type === PreparsedElementType.STYLESHEET && isStyleUrlResolvable(preparsedElement.hrefAttr)) {
        return null;
      }
      var matchableAttrs = [];
      var elementOrDirectiveProps = [];
      var elementOrDirectiveRefs = [];
      var elementVars = [];
      var animationProps = [];
      var events = [];
      var templateElementOrDirectiveProps = [];
      var templateMatchableAttrs = [];
      var templateElementVars = [];
      var hasInlineTemplates = false;
      var attrs = [];
      var lcElName = splitNsName(nodeName.toLowerCase())[1];
      var isTemplateElement = lcElName == TEMPLATE_ELEMENT;
      element.attrs.forEach(function(attr) {
        var hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, animationProps, events, elementOrDirectiveRefs, elementVars);
        var hasTemplateBinding = _this._parseInlineTemplateBinding(attr, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
        if (hasTemplateBinding && hasInlineTemplates) {
          _this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan);
        }
        if (!hasBinding && !hasTemplateBinding) {
          attrs.push(_this.visitAttribute(attr, null));
          matchableAttrs.push([attr.name, attr.value]);
        }
        if (hasTemplateBinding) {
          hasInlineTemplates = true;
        }
      });
      var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
      var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector),
          directiveMetas = _a.directives,
          matchElement = _a.matchElement;
      var references = [];
      var directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references);
      var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directiveAsts).concat(animationProps);
      var isViewRoot = parent.isTemplateElement || hasInlineTemplates;
      var providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, element.sourceSpan);
      var children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
      providerContext.afterElement();
      var projectionSelector = isPresent(preparsedElement.projectAs) ? CssSelector.parse(preparsedElement.projectAs)[0] : elementCssSelector;
      var ngContentIndex = parent.findNgContentIndex(projectionSelector);
      var parsedElement;
      if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
        if (isPresent(element.children) && element.children.length > 0) {
          this._reportError("<ng-content> element cannot have content. <ng-content> must be immediately followed by </ng-content>", element.sourceSpan);
        }
        parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
      } else if (isTemplateElement) {
        this._assertAllEventsPublishedByDirectives(directiveAsts, events);
        this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
        parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
      } else {
        this._assertElementExists(matchElement, element);
        this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
        var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
        parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan);
      }
      if (hasInlineTemplates) {
        var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
        var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateCssSelector).directives;
        var templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, []);
        var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectiveAsts);
        this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
        var templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], element.sourceSpan);
        templateProviderContext.afterElement();
        parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, [parsedElement], ngContentIndex, element.sourceSpan);
      }
      return parsedElement;
    };
    TemplateParseVisitor.prototype._parseInlineTemplateBinding = function(attr, targetMatchableAttrs, targetProps, targetVars) {
      var templateBindingsSource = null;
      if (this._normalizeAttributeName(attr.name) == TEMPLATE_ATTR) {
        templateBindingsSource = attr.value;
      } else if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {
        var key = attr.name.substring(TEMPLATE_ATTR_PREFIX.length);
        templateBindingsSource = (attr.value.length == 0) ? key : key + ' ' + attr.value;
      }
      if (isPresent(templateBindingsSource)) {
        var bindings = this._parseTemplateBindings(templateBindingsSource, attr.sourceSpan);
        for (var i = 0; i < bindings.length; i++) {
          var binding = bindings[i];
          if (binding.keyIsVar) {
            targetVars.push(new VariableAst(binding.key, binding.name, attr.sourceSpan));
          } else if (isPresent(binding.expression)) {
            this._parsePropertyAst(binding.key, binding.expression, attr.sourceSpan, targetMatchableAttrs, targetProps);
          } else {
            targetMatchableAttrs.push([binding.key, '']);
            this._parseLiteralAttr(binding.key, null, attr.sourceSpan, targetProps);
          }
        }
        return true;
      }
      return false;
    };
    TemplateParseVisitor.prototype._parseAttr = function(isTemplateElement, attr, targetMatchableAttrs, targetProps, targetAnimationProps, targetEvents, targetRefs, targetVars) {
      var name = this._normalizeAttributeName(attr.name);
      var value = attr.value;
      var srcSpan = attr.sourceSpan;
      var bindParts = name.match(BIND_NAME_REGEXP);
      var hasBinding = false;
      if (bindParts !== null) {
        hasBinding = true;
        if (isPresent(bindParts[KW_BIND_IDX])) {
          this._parsePropertyOrAnimation(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetProps, targetAnimationProps);
        } else if (bindParts[KW_LET_IDX]) {
          if (isTemplateElement) {
            var identifier = bindParts[IDENT_KW_IDX];
            this._parseVariable(identifier, value, srcSpan, targetVars);
          } else {
            this._reportError("\"let-\" is only supported on template elements.", srcSpan);
          }
        } else if (bindParts[KW_REF_IDX]) {
          var identifier = bindParts[IDENT_KW_IDX];
          this._parseReference(identifier, value, srcSpan, targetRefs);
        } else if (bindParts[KW_ON_IDX]) {
          this._parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
        } else if (bindParts[KW_BINDON_IDX]) {
          this._parsePropertyOrAnimation(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetProps, targetAnimationProps);
          this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
        } else if (bindParts[KW_AT_IDX]) {
          if (name[0] == '@' && isPresent(value) && value.length > 0) {
            this._reportError("Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid." + " Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.", srcSpan, ParseErrorLevel.FATAL);
          }
          this._parseAnimation(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetAnimationProps);
        } else if (bindParts[IDENT_BANANA_BOX_IDX]) {
          this._parsePropertyOrAnimation(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetProps, targetAnimationProps);
          this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
        } else if (bindParts[IDENT_PROPERTY_IDX]) {
          this._parsePropertyOrAnimation(bindParts[IDENT_PROPERTY_IDX], value, srcSpan, targetMatchableAttrs, targetProps, targetAnimationProps);
        } else if (bindParts[IDENT_EVENT_IDX]) {
          this._parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
        }
      } else {
        hasBinding = this._parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);
      }
      if (!hasBinding) {
        this._parseLiteralAttr(name, value, srcSpan, targetProps);
      }
      return hasBinding;
    };
    TemplateParseVisitor.prototype._normalizeAttributeName = function(attrName) {
      return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
    };
    TemplateParseVisitor.prototype._parseVariable = function(identifier, value, sourceSpan, targetVars) {
      if (identifier.indexOf('-') > -1) {
        this._reportError("\"-\" is not allowed in variable names", sourceSpan);
      }
      targetVars.push(new VariableAst(identifier, value, sourceSpan));
    };
    TemplateParseVisitor.prototype._parseReference = function(identifier, value, sourceSpan, targetRefs) {
      if (identifier.indexOf('-') > -1) {
        this._reportError("\"-\" is not allowed in reference names", sourceSpan);
      }
      targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
    };
    TemplateParseVisitor.prototype._parsePropertyOrAnimation = function(name, expression, sourceSpan, targetMatchableAttrs, targetProps, targetAnimationProps) {
      var animatePropLength = ANIMATE_PROP_PREFIX.length;
      var isAnimationProp = name[0] == '@';
      var animationPrefixLength = 1;
      if (name.substring(0, animatePropLength) == ANIMATE_PROP_PREFIX) {
        isAnimationProp = true;
        animationPrefixLength = animatePropLength;
      }
      if (isAnimationProp) {
        this._parseAnimation(name.substr(animationPrefixLength), expression, sourceSpan, targetMatchableAttrs, targetAnimationProps);
      } else {
        this._parsePropertyAst(name, this._parseBinding(expression, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
      }
    };
    TemplateParseVisitor.prototype._parseAnimation = function(name, expression, sourceSpan, targetMatchableAttrs, targetAnimationProps) {
      if (!isPresent(expression) || expression.length == 0) {
        expression = 'null';
      }
      var ast = this._parseBinding(expression, sourceSpan);
      targetMatchableAttrs.push([name, ast.source]);
      targetAnimationProps.push(new BoundElementPropertyAst(name, exports.PropertyBindingType.Animation, _angular_core.SecurityContext.NONE, ast, null, sourceSpan));
    };
    TemplateParseVisitor.prototype._parsePropertyInterpolation = function(name, value, sourceSpan, targetMatchableAttrs, targetProps) {
      var expr = this._parseInterpolation(value, sourceSpan);
      if (isPresent(expr)) {
        this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
        return true;
      }
      return false;
    };
    TemplateParseVisitor.prototype._parsePropertyAst = function(name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
      targetMatchableAttrs.push([name, ast.source]);
      targetProps.push(new BoundElementOrDirectiveProperty(name, ast, false, sourceSpan));
    };
    TemplateParseVisitor.prototype._parseAssignmentEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
      this._parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
    };
    TemplateParseVisitor.prototype._parseEvent = function(name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
      var parts = splitAtColon(name, [null, name]);
      var target = parts[0];
      var eventName = parts[1];
      var ast = this._parseAction(expression, sourceSpan);
      targetMatchableAttrs.push([name, ast.source]);
      targetEvents.push(new BoundEventAst(eventName, target, ast, sourceSpan));
    };
    TemplateParseVisitor.prototype._parseLiteralAttr = function(name, value, sourceSpan, targetProps) {
      targetProps.push(new BoundElementOrDirectiveProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), true, sourceSpan));
    };
    TemplateParseVisitor.prototype._parseDirectives = function(selectorMatcher, elementCssSelector) {
      var _this = this;
      var directives = new Array(this.directivesIndex.size);
      var matchElement = false;
      selectorMatcher.match(elementCssSelector, function(selector, directive) {
        directives[_this.directivesIndex.get(directive)] = directive;
        matchElement = matchElement || selector.hasElementSelector();
      });
      return {
        directives: directives.filter(function(dir) {
          return !!dir;
        }),
        matchElement: matchElement
      };
    };
    TemplateParseVisitor.prototype._createDirectiveAsts = function(isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences) {
      var _this = this;
      var matchedReferences = new Set();
      var component = null;
      var directiveAsts = directives.map(function(directive) {
        var sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + directive.type.name);
        if (directive.isComponent) {
          component = directive;
        }
        var hostProperties = [];
        var hostEvents = [];
        var directiveProperties = [];
        _this._createDirectiveHostPropertyAsts(elementName, directive.hostProperties, sourceSpan, hostProperties);
        _this._createDirectiveHostEventAsts(directive.hostListeners, sourceSpan, hostEvents);
        _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
        elementOrDirectiveRefs.forEach(function(elOrDirRef) {
          if ((elOrDirRef.value.length === 0 && directive.isComponent) || (directive.exportAs == elOrDirRef.value)) {
            targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));
            matchedReferences.add(elOrDirRef.name);
          }
        });
        return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, sourceSpan);
      });
      elementOrDirectiveRefs.forEach(function(elOrDirRef) {
        if (elOrDirRef.value.length > 0) {
          if (!matchedReferences.has(elOrDirRef.name)) {
            _this._reportError("There is no directive with \"exportAs\" set to \"" + elOrDirRef.value + "\"", elOrDirRef.sourceSpan);
          }
        } else if (!component) {
          var refToken = null;
          if (isTemplateElement) {
            refToken = resolveIdentifierToken(Identifiers.TemplateRef);
          }
          targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
        }
      });
      return directiveAsts;
    };
    TemplateParseVisitor.prototype._createDirectiveHostPropertyAsts = function(elementName, hostProps, sourceSpan, targetPropertyAsts) {
      var _this = this;
      if (hostProps) {
        StringMapWrapper.forEach(hostProps, function(expression, propName) {
          if (isString(expression)) {
            var exprAst = _this._parseBinding(expression, sourceSpan);
            targetPropertyAsts.push(_this._createElementPropertyAst(elementName, propName, exprAst, sourceSpan));
          } else {
            _this._reportError("Value of the host property binding \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
          }
        });
      }
    };
    TemplateParseVisitor.prototype._createDirectiveHostEventAsts = function(hostListeners, sourceSpan, targetEventAsts) {
      var _this = this;
      if (hostListeners) {
        StringMapWrapper.forEach(hostListeners, function(expression, propName) {
          if (isString(expression)) {
            _this._parseEvent(propName, expression, sourceSpan, [], targetEventAsts);
          } else {
            _this._reportError("Value of the host listener \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
          }
        });
      }
    };
    TemplateParseVisitor.prototype._createDirectivePropertyAsts = function(directiveProperties, boundProps, targetBoundDirectiveProps) {
      if (directiveProperties) {
        var boundPropsByName_1 = new Map();
        boundProps.forEach(function(boundProp) {
          var prevValue = boundPropsByName_1.get(boundProp.name);
          if (isBlank(prevValue) || prevValue.isLiteral) {
            boundPropsByName_1.set(boundProp.name, boundProp);
          }
        });
        StringMapWrapper.forEach(directiveProperties, function(elProp, dirProp) {
          var boundProp = boundPropsByName_1.get(elProp);
          if (boundProp) {
            targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
          }
        });
      }
    };
    TemplateParseVisitor.prototype._createElementPropertyAsts = function(elementName, props, directives) {
      var _this = this;
      var boundElementProps = [];
      var boundDirectivePropsIndex = new Map();
      directives.forEach(function(directive) {
        directive.inputs.forEach(function(prop) {
          boundDirectivePropsIndex.set(prop.templateName, prop);
        });
      });
      props.forEach(function(prop) {
        if (!prop.isLiteral && isBlank(boundDirectivePropsIndex.get(prop.name))) {
          boundElementProps.push(_this._createElementPropertyAst(elementName, prop.name, prop.expression, prop.sourceSpan));
        }
      });
      return boundElementProps;
    };
    TemplateParseVisitor.prototype._createElementPropertyAst = function(elementName, name, ast, sourceSpan) {
      var unit = null;
      var bindingType;
      var boundPropertyName;
      var parts = name.split(PROPERTY_PARTS_SEPARATOR);
      var securityContext;
      if (parts.length === 1) {
        var partValue = parts[0];
        if (partValue[0] == '@') {
          boundPropertyName = partValue.substr(1);
          bindingType = exports.PropertyBindingType.Animation;
          securityContext = _angular_core.SecurityContext.NONE;
        } else {
          boundPropertyName = this._schemaRegistry.getMappedPropName(partValue);
          securityContext = this._schemaRegistry.securityContext(elementName, boundPropertyName);
          bindingType = exports.PropertyBindingType.Property;
          this._assertNoEventBinding(boundPropertyName, sourceSpan);
          if (!this._schemaRegistry.hasProperty(elementName, boundPropertyName, this._schemas)) {
            var errorMsg = "Can't bind to '" + boundPropertyName + "' since it isn't a known property of '" + elementName + "'.";
            if (elementName.indexOf('-') > -1) {
              errorMsg += ("\n1. If '" + elementName + "' is an Angular component and it has '" + boundPropertyName + "' input, then verify that it is part of this module.") + ("\n2. If '" + elementName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schema' of this component to suppress this message.\n");
            }
            this._reportError(errorMsg, sourceSpan);
          }
        }
      } else {
        if (parts[0] == ATTRIBUTE_PREFIX) {
          boundPropertyName = parts[1];
          this._assertNoEventBinding(boundPropertyName, sourceSpan);
          var mapPropName = this._schemaRegistry.getMappedPropName(boundPropertyName);
          securityContext = this._schemaRegistry.securityContext(elementName, mapPropName);
          var nsSeparatorIdx = boundPropertyName.indexOf(':');
          if (nsSeparatorIdx > -1) {
            var ns = boundPropertyName.substring(0, nsSeparatorIdx);
            var name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);
            boundPropertyName = mergeNsAndName(ns, name_1);
          }
          bindingType = exports.PropertyBindingType.Attribute;
        } else if (parts[0] == CLASS_PREFIX) {
          boundPropertyName = parts[1];
          bindingType = exports.PropertyBindingType.Class;
          securityContext = _angular_core.SecurityContext.NONE;
        } else if (parts[0] == STYLE_PREFIX) {
          unit = parts.length > 2 ? parts[2] : null;
          boundPropertyName = parts[1];
          bindingType = exports.PropertyBindingType.Style;
          securityContext = _angular_core.SecurityContext.STYLE;
        } else {
          this._reportError("Invalid property name '" + name + "'", sourceSpan);
          bindingType = null;
          securityContext = null;
        }
      }
      return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContext, ast, unit, sourceSpan);
    };
    TemplateParseVisitor.prototype._assertNoEventBinding = function(propName, sourceSpan) {
      if (propName.toLowerCase().startsWith('on')) {
        this._reportError(("Binding to event attribute '" + propName + "' is disallowed ") + ("for security reasons, please use (" + propName.slice(2) + ")=..."), sourceSpan, ParseErrorLevel.FATAL);
      }
    };
    TemplateParseVisitor.prototype._findComponentDirectiveNames = function(directives) {
      var componentTypeNames = [];
      directives.forEach(function(directive) {
        var typeName = directive.directive.type.name;
        if (directive.directive.isComponent) {
          componentTypeNames.push(typeName);
        }
      });
      return componentTypeNames;
    };
    TemplateParseVisitor.prototype._assertOnlyOneComponent = function(directives, sourceSpan) {
      var componentTypeNames = this._findComponentDirectiveNames(directives);
      if (componentTypeNames.length > 1) {
        this._reportError("More than one component: " + componentTypeNames.join(','), sourceSpan);
      }
    };
    TemplateParseVisitor.prototype._assertElementExists = function(matchElement, element) {
      var elName = element.name.replace(/^:xhtml:/, '');
      if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
        var errorMsg = ("'" + elName + "' is not a known element:\n") + ("1. If '" + elName + "' is an Angular component, then verify that it is part of this module.\n") + ("2. If '" + elName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schema' of this component to suppress this message.");
        this._reportError(errorMsg, element.sourceSpan);
      }
    };
    TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function(directives, elementProps, sourceSpan) {
      var _this = this;
      var componentTypeNames = this._findComponentDirectiveNames(directives);
      if (componentTypeNames.length > 0) {
        this._reportError("Components on an embedded template: " + componentTypeNames.join(','), sourceSpan);
      }
      elementProps.forEach(function(prop) {
        _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"directives\" section.", sourceSpan);
      });
    };
    TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function(directives, events) {
      var _this = this;
      var allDirectiveEvents = new Set();
      directives.forEach(function(directive) {
        StringMapWrapper.forEach(directive.directive.outputs, function(eventName) {
          allDirectiveEvents.add(eventName);
        });
      });
      events.forEach(function(event) {
        if (isPresent(event.target) || !allDirectiveEvents.has(event.name)) {
          _this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"directives\" section.", event.sourceSpan);
        }
      });
    };
    return TemplateParseVisitor;
  }());
  var NonBindableVisitor = (function() {
    function NonBindableVisitor() {}
    NonBindableVisitor.prototype.visitElement = function(ast, parent) {
      var preparsedElement = preparseElement(ast);
      if (preparsedElement.type === PreparsedElementType.SCRIPT || preparsedElement.type === PreparsedElementType.STYLE || preparsedElement.type === PreparsedElementType.STYLESHEET) {
        return null;
      }
      var attrNameAndValues = ast.attrs.map(function(attrAst) {
        return [attrAst.name, attrAst.value];
      });
      var selector = createElementCssSelector(ast.name, attrNameAndValues);
      var ngContentIndex = parent.findNgContentIndex(selector);
      var children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
      return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], false, children, ngContentIndex, ast.sourceSpan);
    };
    NonBindableVisitor.prototype.visitComment = function(comment, context) {
      return null;
    };
    NonBindableVisitor.prototype.visitAttribute = function(attribute, context) {
      return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
    };
    NonBindableVisitor.prototype.visitText = function(text, parent) {
      var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
      return new TextAst(text.value, ngContentIndex, text.sourceSpan);
    };
    NonBindableVisitor.prototype.visitExpansion = function(expansion, context) {
      return expansion;
    };
    NonBindableVisitor.prototype.visitExpansionCase = function(expansionCase, context) {
      return expansionCase;
    };
    return NonBindableVisitor;
  }());
  var BoundElementOrDirectiveProperty = (function() {
    function BoundElementOrDirectiveProperty(name, expression, isLiteral, sourceSpan) {
      this.name = name;
      this.expression = expression;
      this.isLiteral = isLiteral;
      this.sourceSpan = sourceSpan;
    }
    return BoundElementOrDirectiveProperty;
  }());
  var ElementOrDirectiveRef = (function() {
    function ElementOrDirectiveRef(name, value, sourceSpan) {
      this.name = name;
      this.value = value;
      this.sourceSpan = sourceSpan;
    }
    return ElementOrDirectiveRef;
  }());
  function splitClasses(classAttrValue) {
    return classAttrValue.trim().split(/\s+/g);
  }
  var ElementContext = (function() {
    function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
      this.isTemplateElement = isTemplateElement;
      this._ngContentIndexMatcher = _ngContentIndexMatcher;
      this._wildcardNgContentIndex = _wildcardNgContentIndex;
      this.providerContext = providerContext;
    }
    ElementContext.create = function(isTemplateElement, directives, providerContext) {
      var matcher = new SelectorMatcher();
      var wildcardNgContentIndex = null;
      var component = directives.find(function(directive) {
        return directive.directive.isComponent;
      });
      if (component) {
        var ngContentSelectors = component.directive.template.ngContentSelectors;
        for (var i = 0; i < ngContentSelectors.length; i++) {
          var selector = ngContentSelectors[i];
          if (selector === '*') {
            wildcardNgContentIndex = i;
          } else {
            matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
          }
        }
      }
      return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
    };
    ElementContext.prototype.findNgContentIndex = function(selector) {
      var ngContentIndices = [];
      this._ngContentIndexMatcher.match(selector, function(selector, ngContentIndex) {
        ngContentIndices.push(ngContentIndex);
      });
      ngContentIndices.sort();
      if (isPresent(this._wildcardNgContentIndex)) {
        ngContentIndices.push(this._wildcardNgContentIndex);
      }
      return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
    };
    return ElementContext;
  }());
  function createElementCssSelector(elementName, matchableAttrs) {
    var cssSelector = new CssSelector();
    var elNameNoNs = splitNsName(elementName)[1];
    cssSelector.setElement(elNameNoNs);
    for (var i = 0; i < matchableAttrs.length; i++) {
      var attrName = matchableAttrs[i][0];
      var attrNameNoNs = splitNsName(attrName)[1];
      var attrValue = matchableAttrs[i][1];
      cssSelector.addAttribute(attrNameNoNs, attrValue);
      if (attrName.toLowerCase() == CLASS_ATTR) {
        var classes = splitClasses(attrValue);
        classes.forEach(function(className) {
          return cssSelector.addClassName(className);
        });
      }
    }
    return cssSelector;
  }
  var EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);
  var NON_BINDABLE_VISITOR = new NonBindableVisitor();
  var PipeCollector = (function(_super) {
    __extends(PipeCollector, _super);
    function PipeCollector() {
      _super.apply(this, arguments);
      this.pipes = new Set();
    }
    PipeCollector.prototype.visitPipe = function(ast, context) {
      this.pipes.add(ast.name);
      ast.exp.visit(this);
      this.visitAll(ast.args, context);
      return null;
    };
    return PipeCollector;
  }(RecursiveAstVisitor));
  function unimplemented$1() {
    throw new Error('unimplemented');
  }
  var CompilerConfig = (function() {
    function CompilerConfig(_a) {
      var _b = _a === void 0 ? {} : _a,
          _c = _b.renderTypes,
          renderTypes = _c === void 0 ? new DefaultRenderTypes() : _c,
          _d = _b.defaultEncapsulation,
          defaultEncapsulation = _d === void 0 ? _angular_core.ViewEncapsulation.Emulated : _d,
          genDebugInfo = _b.genDebugInfo,
          logBindingUpdate = _b.logBindingUpdate,
          _e = _b.useJit,
          useJit = _e === void 0 ? true : _e;
      this.renderTypes = renderTypes;
      this.defaultEncapsulation = defaultEncapsulation;
      this._genDebugInfo = genDebugInfo;
      this._logBindingUpdate = logBindingUpdate;
      this.useJit = useJit;
    }
    Object.defineProperty(CompilerConfig.prototype, "genDebugInfo", {
      get: function() {
        return this._genDebugInfo === void 0 ? _angular_core.isDevMode() : this._genDebugInfo;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CompilerConfig.prototype, "logBindingUpdate", {
      get: function() {
        return this._logBindingUpdate === void 0 ? _angular_core.isDevMode() : this._logBindingUpdate;
      },
      enumerable: true,
      configurable: true
    });
    return CompilerConfig;
  }());
  var RenderTypes = (function() {
    function RenderTypes() {}
    Object.defineProperty(RenderTypes.prototype, "renderer", {
      get: function() {
        return unimplemented$1();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderTypes.prototype, "renderText", {
      get: function() {
        return unimplemented$1();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderTypes.prototype, "renderElement", {
      get: function() {
        return unimplemented$1();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderTypes.prototype, "renderComment", {
      get: function() {
        return unimplemented$1();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderTypes.prototype, "renderNode", {
      get: function() {
        return unimplemented$1();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderTypes.prototype, "renderEvent", {
      get: function() {
        return unimplemented$1();
      },
      enumerable: true,
      configurable: true
    });
    return RenderTypes;
  }());
  var DefaultRenderTypes = (function() {
    function DefaultRenderTypes() {
      this.renderText = null;
      this.renderElement = null;
      this.renderComment = null;
      this.renderNode = null;
      this.renderEvent = null;
    }
    Object.defineProperty(DefaultRenderTypes.prototype, "renderer", {
      get: function() {
        return resolveIdentifier(Identifiers.Renderer);
      },
      enumerable: true,
      configurable: true
    });
    ;
    return DefaultRenderTypes;
  }());
  var __extends$11 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AnimationAst = (function() {
    function AnimationAst() {
      this.startTime = 0;
      this.playTime = 0;
    }
    return AnimationAst;
  }());
  var AnimationStateAst = (function(_super) {
    __extends$11(AnimationStateAst, _super);
    function AnimationStateAst() {
      _super.apply(this, arguments);
    }
    return AnimationStateAst;
  }(AnimationAst));
  var AnimationEntryAst = (function(_super) {
    __extends$11(AnimationEntryAst, _super);
    function AnimationEntryAst(name, stateDeclarations, stateTransitions) {
      _super.call(this);
      this.name = name;
      this.stateDeclarations = stateDeclarations;
      this.stateTransitions = stateTransitions;
    }
    AnimationEntryAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationEntry(this, context);
    };
    return AnimationEntryAst;
  }(AnimationAst));
  var AnimationStateDeclarationAst = (function(_super) {
    __extends$11(AnimationStateDeclarationAst, _super);
    function AnimationStateDeclarationAst(stateName, styles) {
      _super.call(this);
      this.stateName = stateName;
      this.styles = styles;
    }
    AnimationStateDeclarationAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationStateDeclaration(this, context);
    };
    return AnimationStateDeclarationAst;
  }(AnimationStateAst));
  var AnimationStateTransitionExpression = (function() {
    function AnimationStateTransitionExpression(fromState, toState) {
      this.fromState = fromState;
      this.toState = toState;
    }
    return AnimationStateTransitionExpression;
  }());
  var AnimationStateTransitionAst = (function(_super) {
    __extends$11(AnimationStateTransitionAst, _super);
    function AnimationStateTransitionAst(stateChanges, animation) {
      _super.call(this);
      this.stateChanges = stateChanges;
      this.animation = animation;
    }
    AnimationStateTransitionAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationStateTransition(this, context);
    };
    return AnimationStateTransitionAst;
  }(AnimationStateAst));
  var AnimationStepAst = (function(_super) {
    __extends$11(AnimationStepAst, _super);
    function AnimationStepAst(startingStyles, keyframes, duration, delay, easing) {
      _super.call(this);
      this.startingStyles = startingStyles;
      this.keyframes = keyframes;
      this.duration = duration;
      this.delay = delay;
      this.easing = easing;
    }
    AnimationStepAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationStep(this, context);
    };
    return AnimationStepAst;
  }(AnimationAst));
  var AnimationStylesAst = (function(_super) {
    __extends$11(AnimationStylesAst, _super);
    function AnimationStylesAst(styles) {
      _super.call(this);
      this.styles = styles;
    }
    AnimationStylesAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationStyles(this, context);
    };
    return AnimationStylesAst;
  }(AnimationAst));
  var AnimationKeyframeAst = (function(_super) {
    __extends$11(AnimationKeyframeAst, _super);
    function AnimationKeyframeAst(offset, styles) {
      _super.call(this);
      this.offset = offset;
      this.styles = styles;
    }
    AnimationKeyframeAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationKeyframe(this, context);
    };
    return AnimationKeyframeAst;
  }(AnimationAst));
  var AnimationWithStepsAst = (function(_super) {
    __extends$11(AnimationWithStepsAst, _super);
    function AnimationWithStepsAst(steps) {
      _super.call(this);
      this.steps = steps;
    }
    return AnimationWithStepsAst;
  }(AnimationAst));
  var AnimationGroupAst = (function(_super) {
    __extends$11(AnimationGroupAst, _super);
    function AnimationGroupAst(steps) {
      _super.call(this, steps);
    }
    AnimationGroupAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationGroup(this, context);
    };
    return AnimationGroupAst;
  }(AnimationWithStepsAst));
  var AnimationSequenceAst = (function(_super) {
    __extends$11(AnimationSequenceAst, _super);
    function AnimationSequenceAst(steps) {
      _super.call(this, steps);
    }
    AnimationSequenceAst.prototype.visit = function(visitor, context) {
      return visitor.visitAnimationSequence(this, context);
    };
    return AnimationSequenceAst;
  }(AnimationWithStepsAst));
  var Math$2 = global$1.Math;
  var StylesCollectionEntry = (function() {
    function StylesCollectionEntry(time, value) {
      this.time = time;
      this.value = value;
    }
    StylesCollectionEntry.prototype.matches = function(time, value) {
      return time == this.time && value == this.value;
    };
    return StylesCollectionEntry;
  }());
  var StylesCollection = (function() {
    function StylesCollection() {
      this.styles = {};
    }
    StylesCollection.prototype.insertAtTime = function(property, time, value) {
      var tuple = new StylesCollectionEntry(time, value);
      var entries = this.styles[property];
      if (!isPresent(entries)) {
        entries = this.styles[property] = [];
      }
      var insertionIndex = 0;
      for (var i = entries.length - 1; i >= 0; i--) {
        if (entries[i].time <= time) {
          insertionIndex = i + 1;
          break;
        }
      }
      ListWrapper.insert(entries, insertionIndex, tuple);
    };
    StylesCollection.prototype.getByIndex = function(property, index) {
      var items = this.styles[property];
      if (isPresent(items)) {
        return index >= items.length ? null : items[index];
      }
      return null;
    };
    StylesCollection.prototype.indexOfAtOrBeforeTime = function(property, time) {
      var entries = this.styles[property];
      if (isPresent(entries)) {
        for (var i = entries.length - 1; i >= 0; i--) {
          if (entries[i].time <= time)
            return i;
        }
      }
      return null;
    };
    return StylesCollection;
  }());
  var __extends$12 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var _INITIAL_KEYFRAME = 0;
  var _TERMINAL_KEYFRAME = 1;
  var _ONE_SECOND = 1000;
  var AnimationParseError = (function(_super) {
    __extends$12(AnimationParseError, _super);
    function AnimationParseError(message) {
      _super.call(this, null, message);
    }
    AnimationParseError.prototype.toString = function() {
      return "" + this.msg;
    };
    return AnimationParseError;
  }(ParseError));
  var ParsedAnimationResult = (function() {
    function ParsedAnimationResult(ast, errors) {
      this.ast = ast;
      this.errors = errors;
    }
    return ParsedAnimationResult;
  }());
  function parseAnimationEntry(entry) {
    var errors = [];
    var stateStyles = {};
    var transitions = [];
    var stateDeclarationAsts = [];
    entry.definitions.forEach(function(def) {
      if (def instanceof CompileAnimationStateDeclarationMetadata) {
        _parseAnimationDeclarationStates(def, errors).forEach(function(ast) {
          stateDeclarationAsts.push(ast);
          stateStyles[ast.stateName] = ast.styles;
        });
      } else {
        transitions.push(def);
      }
    });
    var stateTransitionAsts = transitions.map(function(transDef) {
      return _parseAnimationStateTransition(transDef, stateStyles, errors);
    });
    var ast = new AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts);
    return new ParsedAnimationResult(ast, errors);
  }
  function parseAnimationOutputName(outputName, errors) {
    var values = outputName.split('.');
    var name;
    var phase = '';
    if (values.length > 1) {
      name = values[0];
      var parsedPhase = values[1];
      switch (parsedPhase) {
        case 'start':
        case 'done':
          phase = parsedPhase;
          break;
        default:
          errors.push(new AnimationParseError("The provided animation output phase value \"" + parsedPhase + "\" for \"@" + name + "\" is not supported (use start or done)"));
      }
    } else {
      name = outputName;
      errors.push(new AnimationParseError("The animation trigger output event (@" + name + ") is missing its phase value name (start or done are currently supported)"));
    }
    return new AnimationOutput(name, phase, outputName);
  }
  function _parseAnimationDeclarationStates(stateMetadata, errors) {
    var styleValues = [];
    stateMetadata.styles.styles.forEach(function(stylesEntry) {
      if (isStringMap(stylesEntry)) {
        styleValues.push(stylesEntry);
      } else {
        errors.push(new AnimationParseError("State based animations cannot contain references to other states"));
      }
    });
    var defStyles = new AnimationStylesAst(styleValues);
    var states = stateMetadata.stateNameExpr.split(/\s*,\s*/);
    return states.map(function(state) {
      return new AnimationStateDeclarationAst(state, defStyles);
    });
  }
  function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, errors) {
    var styles = new StylesCollection();
    var transitionExprs = [];
    var transitionStates = transitionStateMetadata.stateChangeExpr.split(/\s*,\s*/);
    transitionStates.forEach(function(expr) {
      _parseAnimationTransitionExpr(expr, errors).forEach(function(transExpr) {
        transitionExprs.push(transExpr);
      });
    });
    var entry = _normalizeAnimationEntry(transitionStateMetadata.steps);
    var animation = _normalizeStyleSteps(entry, stateStyles, errors);
    var animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors);
    if (errors.length == 0) {
      _fillAnimationAstStartingKeyframes(animationAst, styles, errors);
    }
    var sequenceAst = (animationAst instanceof AnimationSequenceAst) ? animationAst : new AnimationSequenceAst([animationAst]);
    return new AnimationStateTransitionAst(transitionExprs, sequenceAst);
  }
  function _parseAnimationTransitionExpr(eventStr, errors) {
    var expressions = [];
    var match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
    if (!isPresent(match) || match.length < 4) {
      errors.push(new AnimationParseError("the provided " + eventStr + " is not of a supported format"));
      return expressions;
    }
    var fromState = match[1];
    var separator = match[2];
    var toState = match[3];
    expressions.push(new AnimationStateTransitionExpression(fromState, toState));
    var isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
    if (separator[0] == '<' && !isFullAnyStateExpr) {
      expressions.push(new AnimationStateTransitionExpression(toState, fromState));
    }
    return expressions;
  }
  function _normalizeAnimationEntry(entry) {
    return isArray(entry) ? new CompileAnimationSequenceMetadata(entry) : entry;
  }
  function _normalizeStyleMetadata(entry, stateStyles, errors) {
    var normalizedStyles = [];
    entry.styles.forEach(function(styleEntry) {
      if (isString(styleEntry)) {
        ListWrapper.addAll(normalizedStyles, _resolveStylesFromState(styleEntry, stateStyles, errors));
      } else {
        normalizedStyles.push(styleEntry);
      }
    });
    return normalizedStyles;
  }
  function _normalizeStyleSteps(entry, stateStyles, errors) {
    var steps = _normalizeStyleStepEntry(entry, stateStyles, errors);
    return new CompileAnimationSequenceMetadata(steps);
  }
  function _mergeAnimationStyles(stylesList, newItem) {
    if (isStringMap(newItem) && stylesList.length > 0) {
      var lastIndex = stylesList.length - 1;
      var lastItem = stylesList[lastIndex];
      if (isStringMap(lastItem)) {
        stylesList[lastIndex] = StringMapWrapper.merge(lastItem, newItem);
        return;
      }
    }
    stylesList.push(newItem);
  }
  function _normalizeStyleStepEntry(entry, stateStyles, errors) {
    var steps;
    if (entry instanceof CompileAnimationWithStepsMetadata) {
      steps = entry.steps;
    } else {
      return [entry];
    }
    var newSteps = [];
    var combinedStyles;
    steps.forEach(function(step) {
      if (step instanceof CompileAnimationStyleMetadata) {
        if (!isPresent(combinedStyles)) {
          combinedStyles = [];
        }
        _normalizeStyleMetadata(step, stateStyles, errors).forEach(function(entry) {
          _mergeAnimationStyles(combinedStyles, entry);
        });
      } else {
        if (isPresent(combinedStyles)) {
          newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
          combinedStyles = null;
        }
        if (step instanceof CompileAnimationAnimateMetadata) {
          var animateStyleValue = step.styles;
          if (animateStyleValue instanceof CompileAnimationStyleMetadata) {
            animateStyleValue.styles = _normalizeStyleMetadata(animateStyleValue, stateStyles, errors);
          } else if (animateStyleValue instanceof CompileAnimationKeyframesSequenceMetadata) {
            animateStyleValue.steps.forEach(function(step) {
              step.styles = _normalizeStyleMetadata(step, stateStyles, errors);
            });
          }
        } else if (step instanceof CompileAnimationWithStepsMetadata) {
          var innerSteps = _normalizeStyleStepEntry(step, stateStyles, errors);
          step = step instanceof CompileAnimationGroupMetadata ? new CompileAnimationGroupMetadata(innerSteps) : new CompileAnimationSequenceMetadata(innerSteps);
        }
        newSteps.push(step);
      }
    });
    if (isPresent(combinedStyles)) {
      newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
    }
    return newSteps;
  }
  function _resolveStylesFromState(stateName, stateStyles, errors) {
    var styles = [];
    if (stateName[0] != ':') {
      errors.push(new AnimationParseError("Animation states via styles must be prefixed with a \":\""));
    } else {
      var normalizedStateName = stateName.substring(1);
      var value = stateStyles[normalizedStateName];
      if (!isPresent(value)) {
        errors.push(new AnimationParseError("Unable to apply styles due to missing a state: \"" + normalizedStateName + "\""));
      } else {
        value.styles.forEach(function(stylesEntry) {
          if (isStringMap(stylesEntry)) {
            styles.push(stylesEntry);
          }
        });
      }
    }
    return styles;
  }
  var _AnimationTimings = (function() {
    function _AnimationTimings(duration, delay, easing) {
      this.duration = duration;
      this.delay = delay;
      this.easing = easing;
    }
    return _AnimationTimings;
  }());
  function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {
    var totalEntries = keyframeSequence.steps.length;
    var totalOffsets = 0;
    keyframeSequence.steps.forEach(function(step) {
      return totalOffsets += (isPresent(step.offset) ? 1 : 0);
    });
    if (totalOffsets > 0 && totalOffsets < totalEntries) {
      errors.push(new AnimationParseError("Not all style() entries contain an offset for the provided keyframe()"));
      totalOffsets = totalEntries;
    }
    var limit = totalEntries - 1;
    var margin = totalOffsets == 0 ? (1 / limit) : 0;
    var rawKeyframes = [];
    var index = 0;
    var doSortKeyframes = false;
    var lastOffset = 0;
    keyframeSequence.steps.forEach(function(styleMetadata) {
      var offset = styleMetadata.offset;
      var keyframeStyles = {};
      styleMetadata.styles.forEach(function(entry) {
        StringMapWrapper.forEach(entry, function(value, prop) {
          if (prop != 'offset') {
            keyframeStyles[prop] = value;
          }
        });
      });
      if (isPresent(offset)) {
        doSortKeyframes = doSortKeyframes || (offset < lastOffset);
      } else {
        offset = index == limit ? _TERMINAL_KEYFRAME : (margin * index);
      }
      rawKeyframes.push([offset, keyframeStyles]);
      lastOffset = offset;
      index++;
    });
    if (doSortKeyframes) {
      ListWrapper.sort(rawKeyframes, function(a, b) {
        return a[0] <= b[0] ? -1 : 1;
      });
    }
    var i;
    var firstKeyframe = rawKeyframes[0];
    if (firstKeyframe[0] != _INITIAL_KEYFRAME) {
      ListWrapper.insert(rawKeyframes, 0, firstKeyframe = [_INITIAL_KEYFRAME, {}]);
    }
    var firstKeyframeStyles = firstKeyframe[1];
    limit = rawKeyframes.length - 1;
    var lastKeyframe = rawKeyframes[limit];
    if (lastKeyframe[0] != _TERMINAL_KEYFRAME) {
      rawKeyframes.push(lastKeyframe = [_TERMINAL_KEYFRAME, {}]);
      limit++;
    }
    var lastKeyframeStyles = lastKeyframe[1];
    for (i = 1; i <= limit; i++) {
      var entry = rawKeyframes[i];
      var styles = entry[1];
      StringMapWrapper.forEach(styles, function(value, prop) {
        if (!isPresent(firstKeyframeStyles[prop])) {
          firstKeyframeStyles[prop] = FILL_STYLE_FLAG;
        }
      });
    }
    for (i = limit - 1; i >= 0; i--) {
      var entry = rawKeyframes[i];
      var styles = entry[1];
      StringMapWrapper.forEach(styles, function(value, prop) {
        if (!isPresent(lastKeyframeStyles[prop])) {
          lastKeyframeStyles[prop] = value;
        }
      });
    }
    return rawKeyframes.map(function(entry) {
      return new AnimationKeyframeAst(entry[0], new AnimationStylesAst([entry[1]]));
    });
  }
  function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) {
    var ast;
    var playTime = 0;
    var startingTime = currentTime;
    if (entry instanceof CompileAnimationWithStepsMetadata) {
      var maxDuration = 0;
      var steps = [];
      var isGroup = entry instanceof CompileAnimationGroupMetadata;
      var previousStyles;
      entry.steps.forEach(function(entry) {
        var time = isGroup ? startingTime : currentTime;
        if (entry instanceof CompileAnimationStyleMetadata) {
          entry.styles.forEach(function(stylesEntry) {
            var map = stylesEntry;
            StringMapWrapper.forEach(map, function(value, prop) {
              collectedStyles.insertAtTime(prop, time, value);
            });
          });
          previousStyles = entry.styles;
          return;
        }
        var innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors);
        if (isPresent(previousStyles)) {
          if (entry instanceof CompileAnimationWithStepsMetadata) {
            var startingStyles = new AnimationStylesAst(previousStyles);
            steps.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
          } else {
            var innerStep = innerAst;
            ListWrapper.addAll(innerStep.startingStyles.styles, previousStyles);
          }
          previousStyles = null;
        }
        var astDuration = innerAst.playTime;
        currentTime += astDuration;
        playTime += astDuration;
        maxDuration = Math$2.max(astDuration, maxDuration);
        steps.push(innerAst);
      });
      if (isPresent(previousStyles)) {
        var startingStyles = new AnimationStylesAst(previousStyles);
        steps.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
      }
      if (isGroup) {
        ast = new AnimationGroupAst(steps);
        playTime = maxDuration;
        currentTime = startingTime + playTime;
      } else {
        ast = new AnimationSequenceAst(steps);
      }
    } else if (entry instanceof CompileAnimationAnimateMetadata) {
      var timings = _parseTimeExpression(entry.timings, errors);
      var styles = entry.styles;
      var keyframes;
      if (styles instanceof CompileAnimationKeyframesSequenceMetadata) {
        keyframes = _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors);
      } else {
        var styleData = styles;
        var offset = _TERMINAL_KEYFRAME;
        var styleAst = new AnimationStylesAst(styleData.styles);
        var keyframe = new AnimationKeyframeAst(offset, styleAst);
        keyframes = [keyframe];
      }
      ast = new AnimationStepAst(new AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing);
      playTime = timings.duration + timings.delay;
      currentTime += playTime;
      keyframes.forEach(function(keyframe) {
        return keyframe.styles.styles.forEach(function(entry) {
          return StringMapWrapper.forEach(entry, function(value, prop) {
            return collectedStyles.insertAtTime(prop, currentTime, value);
          });
        });
      });
    } else {
      ast = new AnimationStepAst(null, [], 0, 0, '');
    }
    ast.playTime = playTime;
    ast.startTime = startingTime;
    return ast;
  }
  function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) {
    if ((ast instanceof AnimationStepAst) && ast.keyframes.length > 0) {
      var keyframes = ast.keyframes;
      if (keyframes.length == 1) {
        var endKeyframe = keyframes[0];
        var startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors);
        ast.keyframes = [startKeyframe, endKeyframe];
      }
    } else if (ast instanceof AnimationWithStepsAst) {
      ast.steps.forEach(function(entry) {
        return _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors);
      });
    }
  }
  function _parseTimeExpression(exp, errors) {
    var regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?/i;
    var duration;
    var delay = 0;
    var easing = null;
    if (isString(exp)) {
      var matches = exp.match(regex);
      if (matches === null) {
        errors.push(new AnimationParseError("The provided timing value \"" + exp + "\" is invalid."));
        return new _AnimationTimings(0, 0, null);
      }
      var durationMatch = NumberWrapper.parseFloat(matches[1]);
      var durationUnit = matches[2];
      if (durationUnit == 's') {
        durationMatch *= _ONE_SECOND;
      }
      duration = Math$2.floor(durationMatch);
      var delayMatch = matches[3];
      var delayUnit = matches[4];
      if (isPresent(delayMatch)) {
        var delayVal = NumberWrapper.parseFloat(delayMatch);
        if (isPresent(delayUnit) && delayUnit == 's') {
          delayVal *= _ONE_SECOND;
        }
        delay = Math$2.floor(delayVal);
      }
      var easingVal = matches[5];
      if (!isBlank(easingVal)) {
        easing = easingVal;
      }
    } else {
      duration = exp;
    }
    return new _AnimationTimings(duration, delay, easing);
  }
  function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) {
    var values = {};
    var endTime = startTime + duration;
    endKeyframe.styles.styles.forEach(function(styleData) {
      StringMapWrapper.forEach(styleData, function(val, prop) {
        if (prop == 'offset')
          return;
        var resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime);
        var resultEntry,
            nextEntry,
            value;
        if (isPresent(resultIndex)) {
          resultEntry = collectedStyles.getByIndex(prop, resultIndex);
          value = resultEntry.value;
          nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1);
        } else {
          value = FILL_STYLE_FLAG;
        }
        if (isPresent(nextEntry) && !nextEntry.matches(endTime, val)) {
          errors.push(new AnimationParseError("The animated CSS property \"" + prop + "\" unexpectedly changes between steps \"" + resultEntry.time + "ms\" and \"" + endTime + "ms\" at \"" + nextEntry.time + "ms\""));
        }
        values[prop] = value;
      });
    });
    return new AnimationKeyframeAst(_INITIAL_KEYFRAME, new AnimationStylesAst([values]));
  }
  var animationCompilationCache = new Map();
  var CompiledAnimationTriggerResult = (function() {
    function CompiledAnimationTriggerResult(name, statesMapStatement, statesVariableName, fnStatement, fnVariable) {
      this.name = name;
      this.statesMapStatement = statesMapStatement;
      this.statesVariableName = statesVariableName;
      this.fnStatement = fnStatement;
      this.fnVariable = fnVariable;
    }
    return CompiledAnimationTriggerResult;
  }());
  var CompiledComponentAnimationResult = (function() {
    function CompiledComponentAnimationResult(outputs, triggers) {
      this.outputs = outputs;
      this.triggers = triggers;
    }
    return CompiledComponentAnimationResult;
  }());
  var AnimationCompiler = (function() {
    function AnimationCompiler() {}
    AnimationCompiler.prototype.compileComponent = function(component, template) {
      var compiledAnimations = [];
      var groupedErrors = [];
      var triggerLookup = {};
      var componentName = component.type.name;
      component.template.animations.forEach(function(entry) {
        var result = parseAnimationEntry(entry);
        var triggerName = entry.name;
        if (result.errors.length > 0) {
          var errorMessage = "Unable to parse the animation sequence for \"" + triggerName + "\" due to the following errors:";
          result.errors.forEach(function(error) {
            errorMessage += '\n-- ' + error.msg;
          });
          groupedErrors.push(errorMessage);
        }
        if (triggerLookup[triggerName]) {
          groupedErrors.push("The animation trigger \"" + triggerName + "\" has already been registered on \"" + componentName + "\"");
        } else {
          var factoryName = componentName + "_" + entry.name;
          var visitor = new _AnimationBuilder(triggerName, factoryName);
          var compileResult = visitor.build(result.ast);
          compiledAnimations.push(compileResult);
          triggerLookup[entry.name] = compileResult;
        }
      });
      var validatedProperties = _validateAnimationProperties(compiledAnimations, template);
      validatedProperties.errors.forEach(function(error) {
        groupedErrors.push(error.msg);
      });
      if (groupedErrors.length > 0) {
        var errorMessageStr = "Animation parsing for " + component.type.name + " has failed due to the following errors:";
        groupedErrors.forEach(function(error) {
          return errorMessageStr += "\n- " + error;
        });
        throw new Error(errorMessageStr);
      }
      animationCompilationCache.set(component, compiledAnimations);
      return new CompiledComponentAnimationResult(validatedProperties.outputs, compiledAnimations);
    };
    return AnimationCompiler;
  }());
  var _ANIMATION_FACTORY_ELEMENT_VAR = variable('element');
  var _ANIMATION_DEFAULT_STATE_VAR = variable('defaultStateStyles');
  var _ANIMATION_FACTORY_VIEW_VAR = variable('view');
  var _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop('renderer');
  var _ANIMATION_CURRENT_STATE_VAR = variable('currentState');
  var _ANIMATION_NEXT_STATE_VAR = variable('nextState');
  var _ANIMATION_PLAYER_VAR = variable('player');
  var _ANIMATION_TIME_VAR = variable('totalTime');
  var _ANIMATION_START_STATE_STYLES_VAR = variable('startStateStyles');
  var _ANIMATION_END_STATE_STYLES_VAR = variable('endStateStyles');
  var _ANIMATION_COLLECTED_STYLES = variable('collectedStyles');
  var EMPTY_MAP$1 = literalMap([]);
  var _AnimationBuilder = (function() {
    function _AnimationBuilder(animationName, factoryName) {
      this.animationName = animationName;
      this._fnVarName = factoryName + '_factory';
      this._statesMapVarName = factoryName + '_states';
      this._statesMapVar = variable(this._statesMapVarName);
    }
    _AnimationBuilder.prototype.visitAnimationStyles = function(ast, context) {
      var stylesArr = [];
      if (context.isExpectingFirstStyleStep) {
        stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR);
        context.isExpectingFirstStyleStep = false;
      }
      ast.styles.forEach(function(entry) {
        stylesArr.push(literalMap(StringMapWrapper.keys(entry).map(function(key) {
          return [key, literal(entry[key])];
        })));
      });
      return importExpr(resolveIdentifier(Identifiers.AnimationStyles)).instantiate([importExpr(resolveIdentifier(Identifiers.collectAndResolveStyles)).callFn([_ANIMATION_COLLECTED_STYLES, literalArr(stylesArr)])]);
    };
    _AnimationBuilder.prototype.visitAnimationKeyframe = function(ast, context) {
      return importExpr(resolveIdentifier(Identifiers.AnimationKeyframe)).instantiate([literal(ast.offset), ast.styles.visit(this, context)]);
    };
    _AnimationBuilder.prototype.visitAnimationStep = function(ast, context) {
      var _this = this;
      if (context.endStateAnimateStep === ast) {
        return this._visitEndStateAnimation(ast, context);
      }
      var startingStylesExpr = ast.startingStyles.visit(this, context);
      var keyframeExpressions = ast.keyframes.map(function(keyframeEntry) {
        return keyframeEntry.visit(_this, context);
      });
      return this._callAnimateMethod(ast, startingStylesExpr, literalArr(keyframeExpressions), context);
    };
    _AnimationBuilder.prototype._visitEndStateAnimation = function(ast, context) {
      var _this = this;
      var startingStylesExpr = ast.startingStyles.visit(this, context);
      var keyframeExpressions = ast.keyframes.map(function(keyframe) {
        return keyframe.visit(_this, context);
      });
      var keyframesExpr = importExpr(resolveIdentifier(Identifiers.balanceAnimationKeyframes)).callFn([_ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR, literalArr(keyframeExpressions)]);
      return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr, context);
    };
    _AnimationBuilder.prototype._callAnimateMethod = function(ast, startingStylesExpr, keyframesExpr, context) {
      context.totalTransitionTime += ast.duration + ast.delay;
      return _ANIMATION_FACTORY_RENDERER_VAR.callMethod('animate', [_ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, literal(ast.duration), literal(ast.delay), literal(ast.easing)]);
    };
    _AnimationBuilder.prototype.visitAnimationSequence = function(ast, context) {
      var _this = this;
      var playerExprs = ast.steps.map(function(step) {
        return step.visit(_this, context);
      });
      return importExpr(resolveIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([literalArr(playerExprs)]);
    };
    _AnimationBuilder.prototype.visitAnimationGroup = function(ast, context) {
      var _this = this;
      var playerExprs = ast.steps.map(function(step) {
        return step.visit(_this, context);
      });
      return importExpr(resolveIdentifier(Identifiers.AnimationGroupPlayer)).instantiate([literalArr(playerExprs)]);
    };
    _AnimationBuilder.prototype.visitAnimationStateDeclaration = function(ast, context) {
      var flatStyles = {};
      _getStylesArray(ast).forEach(function(entry) {
        StringMapWrapper.forEach(entry, function(value, key) {
          flatStyles[key] = value;
        });
      });
      context.stateMap.registerState(ast.stateName, flatStyles);
    };
    _AnimationBuilder.prototype.visitAnimationStateTransition = function(ast, context) {
      var steps = ast.animation.steps;
      var lastStep = steps[steps.length - 1];
      if (_isEndStateAnimateStep(lastStep)) {
        context.endStateAnimateStep = lastStep;
      }
      context.totalTransitionTime = 0;
      context.isExpectingFirstStyleStep = true;
      var stateChangePreconditions = [];
      ast.stateChanges.forEach(function(stateChange) {
        stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState).and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState)));
        if (stateChange.fromState != ANY_STATE) {
          context.stateMap.registerState(stateChange.fromState);
        }
        if (stateChange.toState != ANY_STATE) {
          context.stateMap.registerState(stateChange.toState);
        }
      });
      var animationPlayerExpr = ast.animation.visit(this, context);
      var reducedStateChangesPrecondition = stateChangePreconditions.reduce(function(a, b) {
        return a.or(b);
      });
      var precondition = _ANIMATION_PLAYER_VAR.equals(NULL_EXPR).and(reducedStateChangesPrecondition);
      var animationStmt = _ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt();
      var totalTimeStmt = _ANIMATION_TIME_VAR.set(literal(context.totalTransitionTime)).toStmt();
      return new IfStmt(precondition, [animationStmt, totalTimeStmt]);
    };
    _AnimationBuilder.prototype.visitAnimationEntry = function(ast, context) {
      var _this = this;
      ast.stateDeclarations.forEach(function(def) {
        return def.visit(_this, context);
      });
      context.stateMap.registerState(DEFAULT_STATE, {});
      var statements = [];
      statements.push(_ANIMATION_FACTORY_VIEW_VAR.callMethod('cancelActiveAnimation', [_ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName), _ANIMATION_NEXT_STATE_VAR.equals(literal(EMPTY_ANIMATION_STATE))]).toStmt());
      statements.push(_ANIMATION_COLLECTED_STYLES.set(EMPTY_MAP$1).toDeclStmt());
      statements.push(_ANIMATION_PLAYER_VAR.set(NULL_EXPR).toDeclStmt());
      statements.push(_ANIMATION_TIME_VAR.set(literal(0)).toDeclStmt());
      statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(literal(DEFAULT_STATE))).toDeclStmt());
      statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR)).toDeclStmt());
      statements.push(new IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
      statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR)).toDeclStmt());
      statements.push(new IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
      var RENDER_STYLES_FN = importExpr(resolveIdentifier(Identifiers.renderStyles));
      statements.push(RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, importExpr(resolveIdentifier(Identifiers.clearStyles)).callFn([_ANIMATION_START_STATE_STYLES_VAR])]).toStmt());
      ast.stateTransitions.forEach(function(transAst) {
        return statements.push(transAst.visit(_this, context));
      });
      statements.push(new IfStmt(_ANIMATION_PLAYER_VAR.equals(NULL_EXPR), [_ANIMATION_PLAYER_VAR.set(importExpr(resolveIdentifier(Identifiers.NoOpAnimationPlayer)).instantiate([])).toStmt()]));
      statements.push(_ANIMATION_PLAYER_VAR.callMethod('onDone', [fn([], [RENDER_STYLES_FN.callFn([_ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR, importExpr(resolveIdentifier(Identifiers.prepareFinalAnimationStyles)).callFn([_ANIMATION_START_STATE_STYLES_VAR, _ANIMATION_END_STATE_STYLES_VAR])]).toStmt()])]).toStmt());
      statements.push(_ANIMATION_FACTORY_VIEW_VAR.callMethod('queueAnimation', [_ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName), _ANIMATION_PLAYER_VAR, _ANIMATION_TIME_VAR, _ANIMATION_CURRENT_STATE_VAR, _ANIMATION_NEXT_STATE_VAR]).toStmt());
      return fn([new FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])), new FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, DYNAMIC_TYPE), new FnParam(_ANIMATION_CURRENT_STATE_VAR.name, DYNAMIC_TYPE), new FnParam(_ANIMATION_NEXT_STATE_VAR.name, DYNAMIC_TYPE)], statements);
    };
    _AnimationBuilder.prototype.build = function(ast) {
      var context = new _AnimationBuilderContext();
      var fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName);
      var fnVariable = variable(this._fnVarName);
      var lookupMap = [];
      StringMapWrapper.forEach(context.stateMap.states, function(value, stateName) {
        var variableValue = EMPTY_MAP$1;
        if (isPresent(value)) {
          var styleMap_1 = [];
          StringMapWrapper.forEach(value, function(value, key) {
            styleMap_1.push([key, literal(value)]);
          });
          variableValue = literalMap(styleMap_1);
        }
        lookupMap.push([stateName, variableValue]);
      });
      var compiledStatesMapExpr = this._statesMapVar.set(literalMap(lookupMap)).toDeclStmt();
      return new CompiledAnimationTriggerResult(this.animationName, compiledStatesMapExpr, this._statesMapVarName, fnStatement, fnVariable);
    };
    return _AnimationBuilder;
  }());
  var _AnimationBuilderContext = (function() {
    function _AnimationBuilderContext() {
      this.stateMap = new _AnimationBuilderStateMap();
      this.endStateAnimateStep = null;
      this.isExpectingFirstStyleStep = false;
      this.totalTransitionTime = 0;
    }
    return _AnimationBuilderContext;
  }());
  var _AnimationBuilderStateMap = (function() {
    function _AnimationBuilderStateMap() {
      this._states = {};
    }
    Object.defineProperty(_AnimationBuilderStateMap.prototype, "states", {
      get: function() {
        return this._states;
      },
      enumerable: true,
      configurable: true
    });
    _AnimationBuilderStateMap.prototype.registerState = function(name, value) {
      if (value === void 0) {
        value = null;
      }
      var existingEntry = this._states[name];
      if (isBlank(existingEntry)) {
        this._states[name] = value;
      }
    };
    return _AnimationBuilderStateMap;
  }());
  function _compareToAnimationStateExpr(value, animationState) {
    var emptyStateLiteral = literal(EMPTY_ANIMATION_STATE);
    switch (animationState) {
      case EMPTY_ANIMATION_STATE:
        return value.equals(emptyStateLiteral);
      case ANY_STATE:
        return literal(true);
      default:
        return value.equals(literal(animationState));
    }
  }
  function _isEndStateAnimateStep(step) {
    if (step instanceof AnimationStepAst && step.duration > 0 && step.keyframes.length == 2) {
      var styles1 = _getStylesArray(step.keyframes[0])[0];
      var styles2 = _getStylesArray(step.keyframes[1])[0];
      return StringMapWrapper.isEmpty(styles1) && StringMapWrapper.isEmpty(styles2);
    }
    return false;
  }
  function _getStylesArray(obj) {
    return obj.styles.styles;
  }
  function _validateAnimationProperties(compiledAnimations, template) {
    var visitor = new _AnimationTemplatePropertyVisitor(compiledAnimations);
    templateVisitAll(visitor, template);
    return new AnimationPropertyValidationOutput(visitor.outputs, visitor.errors);
  }
  var AnimationPropertyValidationOutput = (function() {
    function AnimationPropertyValidationOutput(outputs, errors) {
      this.outputs = outputs;
      this.errors = errors;
    }
    return AnimationPropertyValidationOutput;
  }());
  var _AnimationTemplatePropertyVisitor = (function() {
    function _AnimationTemplatePropertyVisitor(animations) {
      this.errors = [];
      this.outputs = [];
      this._animationRegistry = this._buildCompileAnimationLookup(animations);
    }
    _AnimationTemplatePropertyVisitor.prototype._buildCompileAnimationLookup = function(animations) {
      var map = {};
      animations.forEach(function(entry) {
        map[entry.name] = true;
      });
      return map;
    };
    _AnimationTemplatePropertyVisitor.prototype._validateAnimationInputOutputPairs = function(inputAsts, outputAsts, animationRegistry, isHostLevel) {
      var _this = this;
      var detectedAnimationInputs = {};
      inputAsts.forEach(function(input) {
        if (input.type == exports.PropertyBindingType.Animation) {
          var triggerName = input.name;
          if (isPresent(animationRegistry[triggerName])) {
            detectedAnimationInputs[triggerName] = true;
          } else {
            _this.errors.push(new AnimationParseError("Couldn't find an animation entry for " + triggerName));
          }
        }
      });
      outputAsts.forEach(function(output) {
        if (output.name[0] == '@') {
          var normalizedOutputData = parseAnimationOutputName(output.name.substr(1), _this.errors);
          var triggerName = normalizedOutputData.name;
          var triggerEventPhase = normalizedOutputData.phase;
          if (!animationRegistry[triggerName]) {
            _this.errors.push(new AnimationParseError("Couldn't find the corresponding " + (isHostLevel ? 'host-level ' : '') + "animation trigger definition for (@" + triggerName + ")"));
          } else if (!detectedAnimationInputs[triggerName]) {
            _this.errors.push(new AnimationParseError("Unable to listen on (@" + triggerName + "." + triggerEventPhase + ") because the animation trigger [@" + triggerName + "] isn't being used on the same element"));
          } else {
            _this.outputs.push(normalizedOutputData);
          }
        }
      });
    };
    _AnimationTemplatePropertyVisitor.prototype.visitElement = function(ast, ctx) {
      this._validateAnimationInputOutputPairs(ast.inputs, ast.outputs, this._animationRegistry, false);
      var componentOnElement = ast.directives.find(function(directive) {
        return directive.directive.isComponent;
      });
      if (componentOnElement) {
        var cachedComponentAnimations = animationCompilationCache.get(componentOnElement.directive);
        if (cachedComponentAnimations) {
          this._validateAnimationInputOutputPairs(componentOnElement.hostProperties, componentOnElement.hostEvents, this._buildCompileAnimationLookup(cachedComponentAnimations), true);
        }
      }
      templateVisitAll(this, ast.children);
    };
    _AnimationTemplatePropertyVisitor.prototype.visitEmbeddedTemplate = function(ast, ctx) {
      templateVisitAll(this, ast.children);
    };
    _AnimationTemplatePropertyVisitor.prototype.visitEvent = function(ast, ctx) {};
    _AnimationTemplatePropertyVisitor.prototype.visitBoundText = function(ast, ctx) {};
    _AnimationTemplatePropertyVisitor.prototype.visitText = function(ast, ctx) {};
    _AnimationTemplatePropertyVisitor.prototype.visitNgContent = function(ast, ctx) {};
    _AnimationTemplatePropertyVisitor.prototype.visitAttr = function(ast, ctx) {};
    _AnimationTemplatePropertyVisitor.prototype.visitDirective = function(ast, ctx) {};
    _AnimationTemplatePropertyVisitor.prototype.visitReference = function(ast, ctx) {};
    _AnimationTemplatePropertyVisitor.prototype.visitVariable = function(ast, ctx) {};
    _AnimationTemplatePropertyVisitor.prototype.visitDirectiveProperty = function(ast, ctx) {};
    _AnimationTemplatePropertyVisitor.prototype.visitElementProperty = function(ast, ctx) {};
    return _AnimationTemplatePropertyVisitor;
  }());
  function convertValueToOutputAst(value, type) {
    if (type === void 0) {
      type = null;
    }
    return visitValue(value, new _ValueOutputAstTransformer(), type);
  }
  var _ValueOutputAstTransformer = (function() {
    function _ValueOutputAstTransformer() {}
    _ValueOutputAstTransformer.prototype.visitArray = function(arr, type) {
      var _this = this;
      return literalArr(arr.map(function(value) {
        return visitValue(value, _this, null);
      }), type);
    };
    _ValueOutputAstTransformer.prototype.visitStringMap = function(map, type) {
      var _this = this;
      var entries = [];
      StringMapWrapper.forEach(map, function(value, key) {
        entries.push([key, visitValue(value, _this, null)]);
      });
      return literalMap(entries, type);
    };
    _ValueOutputAstTransformer.prototype.visitPrimitive = function(value, type) {
      return literal(value, type);
    };
    _ValueOutputAstTransformer.prototype.visitOther = function(value, type) {
      if (value instanceof CompileIdentifierMetadata) {
        return importExpr(value);
      } else if (value instanceof Expression) {
        return value;
      } else {
        throw new Error("Illegal state: Don't now how to compile value " + value);
      }
    };
    return _ValueOutputAstTransformer;
  }());
  var _DebugState = (function() {
    function _DebugState(nodeIndex, sourceAst) {
      this.nodeIndex = nodeIndex;
      this.sourceAst = sourceAst;
    }
    return _DebugState;
  }());
  var NULL_DEBUG_STATE = new _DebugState(null, null);
  var CompileMethod = (function() {
    function CompileMethod(_view) {
      this._view = _view;
      this._newState = NULL_DEBUG_STATE;
      this._currState = NULL_DEBUG_STATE;
      this._bodyStatements = [];
      this._debugEnabled = this._view.genConfig.genDebugInfo;
    }
    CompileMethod.prototype._updateDebugContextIfNeeded = function() {
      if (this._newState.nodeIndex !== this._currState.nodeIndex || this._newState.sourceAst !== this._currState.sourceAst) {
        var expr = this._updateDebugContext(this._newState);
        if (isPresent(expr)) {
          this._bodyStatements.push(expr.toStmt());
        }
      }
    };
    CompileMethod.prototype._updateDebugContext = function(newState) {
      this._currState = this._newState = newState;
      if (this._debugEnabled) {
        var sourceLocation = isPresent(newState.sourceAst) ? newState.sourceAst.sourceSpan.start : null;
        return THIS_EXPR.callMethod('debug', [literal(newState.nodeIndex), isPresent(sourceLocation) ? literal(sourceLocation.line) : NULL_EXPR, isPresent(sourceLocation) ? literal(sourceLocation.col) : NULL_EXPR]);
      } else {
        return null;
      }
    };
    CompileMethod.prototype.resetDebugInfoExpr = function(nodeIndex, templateAst) {
      var res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));
      return isPresent(res) ? res : NULL_EXPR;
    };
    CompileMethod.prototype.resetDebugInfo = function(nodeIndex, templateAst) {
      this._newState = new _DebugState(nodeIndex, templateAst);
    };
    CompileMethod.prototype.addStmt = function(stmt) {
      this._updateDebugContextIfNeeded();
      this._bodyStatements.push(stmt);
    };
    CompileMethod.prototype.addStmts = function(stmts) {
      this._updateDebugContextIfNeeded();
      ListWrapper.addAll(this._bodyStatements, stmts);
    };
    CompileMethod.prototype.finish = function() {
      return this._bodyStatements;
    };
    CompileMethod.prototype.isEmpty = function() {
      return this._bodyStatements.length === 0;
    };
    return CompileMethod;
  }());
  function getPropertyInView(property, callingView, definedView) {
    if (callingView === definedView) {
      return property;
    } else {
      var viewProp = THIS_EXPR;
      var currView = callingView;
      while (currView !== definedView && isPresent(currView.declarationElement.view)) {
        currView = currView.declarationElement.view;
        viewProp = viewProp.prop('parent');
      }
      if (currView !== definedView) {
        throw new Error("Internal error: Could not calculate a property in a parent view: " + property);
      }
      if (property instanceof ReadPropExpr) {
        var readPropExpr_1 = property;
        if (definedView.fields.some(function(field) {
          return field.name == readPropExpr_1.name;
        }) || definedView.getters.some(function(field) {
          return field.name == readPropExpr_1.name;
        })) {
          viewProp = viewProp.cast(definedView.classType);
        }
      }
      return replaceVarInExpression(THIS_EXPR.name, viewProp, property);
    }
  }
  function injectFromViewParentInjector(token, optional) {
    var args = [createDiTokenExpression(token)];
    if (optional) {
      args.push(NULL_EXPR);
    }
    return THIS_EXPR.prop('parentInjector').callMethod('get', args);
  }
  function getViewFactoryName(component, embeddedTemplateIndex) {
    return "viewFactory_" + component.type.name + embeddedTemplateIndex;
  }
  function createFlatArray(expressions) {
    var lastNonArrayExpressions = [];
    var result = literalArr([]);
    for (var i = 0; i < expressions.length; i++) {
      var expr = expressions[i];
      if (expr.type instanceof ArrayType) {
        if (lastNonArrayExpressions.length > 0) {
          result = result.callMethod(BuiltinMethod.ConcatArray, [literalArr(lastNonArrayExpressions)]);
          lastNonArrayExpressions = [];
        }
        result = result.callMethod(BuiltinMethod.ConcatArray, [expr]);
      } else {
        lastNonArrayExpressions.push(expr);
      }
    }
    if (lastNonArrayExpressions.length > 0) {
      result = result.callMethod(BuiltinMethod.ConcatArray, [literalArr(lastNonArrayExpressions)]);
    }
    return result;
  }
  function createPureProxy(fn, argCount, pureProxyProp, view) {
    view.fields.push(new ClassField(pureProxyProp.name, null));
    var pureProxyId = argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null;
    if (isBlank(pureProxyId)) {
      throw new Error("Unsupported number of argument for pure functions: " + argCount);
    }
    view.createMethod.addStmt(THIS_EXPR.prop(pureProxyProp.name).set(importExpr(resolveIdentifier(pureProxyId)).callFn([fn])).toStmt());
  }
  var ViewQueryValues = (function() {
    function ViewQueryValues(view, values) {
      this.view = view;
      this.values = values;
    }
    return ViewQueryValues;
  }());
  var CompileQuery = (function() {
    function CompileQuery(meta, queryList, ownerDirectiveExpression, view) {
      this.meta = meta;
      this.queryList = queryList;
      this.ownerDirectiveExpression = ownerDirectiveExpression;
      this.view = view;
      this._values = new ViewQueryValues(view, []);
    }
    CompileQuery.prototype.addValue = function(value, view) {
      var currentView = view;
      var elPath = [];
      while (isPresent(currentView) && currentView !== this.view) {
        var parentEl = currentView.declarationElement;
        elPath.unshift(parentEl);
        currentView = parentEl.view;
      }
      var queryListForDirtyExpr = getPropertyInView(this.queryList, view, this.view);
      var viewValues = this._values;
      elPath.forEach(function(el) {
        var last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;
        if (last instanceof ViewQueryValues && last.view === el.embeddedView) {
          viewValues = last;
        } else {
          var newViewValues = new ViewQueryValues(el.embeddedView, []);
          viewValues.values.push(newViewValues);
          viewValues = newViewValues;
        }
      });
      viewValues.values.push(value);
      if (elPath.length > 0) {
        view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod('setDirty', []).toStmt());
      }
    };
    CompileQuery.prototype._isStatic = function() {
      return !this._values.values.some(function(value) {
        return value instanceof ViewQueryValues;
      });
    };
    CompileQuery.prototype.afterChildren = function(targetStaticMethod, targetDynamicMethod) {
      var values = createQueryValues(this._values);
      var updateStmts = [this.queryList.callMethod('reset', [literalArr(values)]).toStmt()];
      if (isPresent(this.ownerDirectiveExpression)) {
        var valueExpr = this.meta.first ? this.queryList.prop('first') : this.queryList;
        updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());
      }
      if (!this.meta.first) {
        updateStmts.push(this.queryList.callMethod('notifyOnChanges', []).toStmt());
      }
      if (this.meta.first && this._isStatic()) {
        targetStaticMethod.addStmts(updateStmts);
      } else {
        targetDynamicMethod.addStmt(new IfStmt(this.queryList.prop('dirty'), updateStmts));
      }
    };
    return CompileQuery;
  }());
  function createQueryValues(viewValues) {
    return ListWrapper.flatten(viewValues.values.map(function(entry) {
      if (entry instanceof ViewQueryValues) {
        return mapNestedViews(entry.view.declarationElement.appElement, entry.view, createQueryValues(entry));
      } else {
        return entry;
      }
    }));
  }
  function mapNestedViews(declarationAppElement, view, expressions) {
    var adjustedExpressions = expressions.map(function(expr) {
      return replaceVarInExpression(THIS_EXPR.name, variable('nestedView'), expr);
    });
    return declarationAppElement.callMethod('mapNestedViews', [variable(view.className), fn([new FnParam('nestedView', view.classType)], [new ReturnStatement(literalArr(adjustedExpressions))], DYNAMIC_TYPE)]);
  }
  function createQueryList(query, directiveInstance, propertyName, compileView) {
    compileView.fields.push(new ClassField(propertyName, importType(resolveIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE])));
    var expr = THIS_EXPR.prop(propertyName);
    compileView.createMethod.addStmt(THIS_EXPR.prop(propertyName).set(importExpr(resolveIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE]).instantiate([])).toStmt());
    return expr;
  }
  function addQueryToTokenMap(map, query) {
    query.meta.selectors.forEach(function(selector) {
      var entry = map.get(selector.reference);
      if (isBlank(entry)) {
        entry = [];
        map.set(selector.reference, entry);
      }
      entry.push(query);
    });
  }
  function _enumExpression(classIdentifier, name) {
    return importExpr(resolveEnumIdentifier(classIdentifier, name));
  }
  var ViewTypeEnum = (function() {
    function ViewTypeEnum() {}
    ViewTypeEnum.fromValue = function(value) {
      var viewType = resolveIdentifier(Identifiers.ViewType);
      switch (value) {
        case ViewType.HOST:
          return _enumExpression(viewType, 'HOST');
        case ViewType.COMPONENT:
          return _enumExpression(viewType, 'COMPONENT');
        case ViewType.EMBEDDED:
          return _enumExpression(viewType, 'EMBEDDED');
        default:
          throw Error("Inavlid ViewType value: " + value);
      }
    };
    return ViewTypeEnum;
  }());
  var ViewEncapsulationEnum = (function() {
    function ViewEncapsulationEnum() {}
    ViewEncapsulationEnum.fromValue = function(value) {
      var viewEncapsulation = resolveIdentifier(Identifiers.ViewEncapsulation);
      switch (value) {
        case _angular_core.ViewEncapsulation.Emulated:
          return _enumExpression(viewEncapsulation, 'Emulated');
        case _angular_core.ViewEncapsulation.Native:
          return _enumExpression(viewEncapsulation, 'Native');
        case _angular_core.ViewEncapsulation.None:
          return _enumExpression(viewEncapsulation, 'None');
        default:
          throw Error("Inavlid ViewEncapsulation value: " + value);
      }
    };
    return ViewEncapsulationEnum;
  }());
  var ChangeDetectorStatusEnum = (function() {
    function ChangeDetectorStatusEnum() {}
    ChangeDetectorStatusEnum.fromValue = function(value) {
      var changeDetectorStatus = resolveIdentifier(Identifiers.ChangeDetectorStatus);
      switch (value) {
        case ChangeDetectorStatus.CheckOnce:
          return _enumExpression(changeDetectorStatus, 'CheckOnce');
        case ChangeDetectorStatus.Checked:
          return _enumExpression(changeDetectorStatus, 'Checked');
        case ChangeDetectorStatus.CheckAlways:
          return _enumExpression(changeDetectorStatus, 'CheckAlways');
        case ChangeDetectorStatus.Detached:
          return _enumExpression(changeDetectorStatus, 'Detached');
        case ChangeDetectorStatus.Errored:
          return _enumExpression(changeDetectorStatus, 'Errored');
        case ChangeDetectorStatus.Destroyed:
          return _enumExpression(changeDetectorStatus, 'Destroyed');
        default:
          throw Error("Inavlid ChangeDetectorStatus value: " + value);
      }
    };
    return ChangeDetectorStatusEnum;
  }());
  var ViewConstructorVars = (function() {
    function ViewConstructorVars() {}
    ViewConstructorVars.viewUtils = variable('viewUtils');
    ViewConstructorVars.parentInjector = variable('parentInjector');
    ViewConstructorVars.declarationEl = variable('declarationEl');
    return ViewConstructorVars;
  }());
  var ViewProperties = (function() {
    function ViewProperties() {}
    ViewProperties.renderer = THIS_EXPR.prop('renderer');
    ViewProperties.projectableNodes = THIS_EXPR.prop('projectableNodes');
    ViewProperties.viewUtils = THIS_EXPR.prop('viewUtils');
    return ViewProperties;
  }());
  var EventHandlerVars = (function() {
    function EventHandlerVars() {}
    EventHandlerVars.event = variable('$event');
    return EventHandlerVars;
  }());
  var InjectMethodVars = (function() {
    function InjectMethodVars() {}
    InjectMethodVars.token = variable('token');
    InjectMethodVars.requestNodeIndex = variable('requestNodeIndex');
    InjectMethodVars.notFoundResult = variable('notFoundResult');
    return InjectMethodVars;
  }());
  var DetectChangesVars = (function() {
    function DetectChangesVars() {}
    DetectChangesVars.throwOnChange = variable("throwOnChange");
    DetectChangesVars.changes = variable("changes");
    DetectChangesVars.changed = variable("changed");
    DetectChangesVars.valUnwrapper = variable("valUnwrapper");
    return DetectChangesVars;
  }());
  var __extends$13 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var CompileNode = (function() {
    function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) {
      this.parent = parent;
      this.view = view;
      this.nodeIndex = nodeIndex;
      this.renderNode = renderNode;
      this.sourceAst = sourceAst;
    }
    CompileNode.prototype.isNull = function() {
      return isBlank(this.renderNode);
    };
    CompileNode.prototype.isRootElement = function() {
      return this.view != this.parent.view;
    };
    return CompileNode;
  }());
  var CompileElement = (function(_super) {
    __extends$13(CompileElement, _super);
    function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references) {
      var _this = this;
      _super.call(this, parent, view, nodeIndex, renderNode, sourceAst);
      this.component = component;
      this._directives = _directives;
      this._resolvedProvidersArray = _resolvedProvidersArray;
      this.hasViewContainer = hasViewContainer;
      this.hasEmbeddedView = hasEmbeddedView;
      this._compViewExpr = null;
      this.instances = new Map();
      this._queryCount = 0;
      this._queries = new Map();
      this._componentConstructorViewQueryLists = [];
      this.contentNodesByNgContentIndex = null;
      this.referenceTokens = {};
      references.forEach(function(ref) {
        return _this.referenceTokens[ref.name] = ref.value;
      });
      this.elementRef = importExpr(resolveIdentifier(Identifiers.ElementRef)).instantiate([this.renderNode]);
      this.instances.set(resolveIdentifierToken(Identifiers.ElementRef).reference, this.elementRef);
      this.injector = THIS_EXPR.callMethod('injector', [literal(this.nodeIndex)]);
      this.instances.set(resolveIdentifierToken(Identifiers.Injector).reference, this.injector);
      this.instances.set(resolveIdentifierToken(Identifiers.Renderer).reference, THIS_EXPR.prop('renderer'));
      if (this.hasViewContainer || this.hasEmbeddedView || isPresent(this.component)) {
        this._createAppElement();
      }
    }
    CompileElement.createNull = function() {
      return new CompileElement(null, null, null, null, null, null, [], [], false, false, []);
    };
    CompileElement.prototype._createAppElement = function() {
      var fieldName = "_appEl_" + this.nodeIndex;
      var parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;
      this.view.fields.push(new ClassField(fieldName, importType(resolveIdentifier(Identifiers.AppElement)), [StmtModifier.Private]));
      var statement = THIS_EXPR.prop(fieldName).set(importExpr(resolveIdentifier(Identifiers.AppElement)).instantiate([literal(this.nodeIndex), literal(parentNodeIndex), THIS_EXPR, this.renderNode])).toStmt();
      this.view.createMethod.addStmt(statement);
      this.appElement = THIS_EXPR.prop(fieldName);
      this.instances.set(resolveIdentifierToken(Identifiers.AppElement).reference, this.appElement);
    };
    CompileElement.prototype.createComponentFactoryResolver = function(entryComponents) {
      if (!entryComponents || entryComponents.length === 0) {
        return;
      }
      var createComponentFactoryResolverExpr = importExpr(resolveIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([literalArr(entryComponents.map(function(entryComponent) {
        return importExpr(entryComponent);
      })), injectFromViewParentInjector(resolveIdentifierToken(Identifiers.ComponentFactoryResolver), false)]);
      var provider = new CompileProviderMetadata({
        token: resolveIdentifierToken(Identifiers.ComponentFactoryResolver),
        useValue: createComponentFactoryResolverExpr
      });
      this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], exports.ProviderAstType.PrivateService, [], this.sourceAst.sourceSpan));
    };
    CompileElement.prototype.setComponentView = function(compViewExpr) {
      this._compViewExpr = compViewExpr;
      this.contentNodesByNgContentIndex = ListWrapper.createFixedSize(this.component.template.ngContentSelectors.length);
      for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) {
        this.contentNodesByNgContentIndex[i] = [];
      }
    };
    CompileElement.prototype.setEmbeddedView = function(embeddedView) {
      this.embeddedView = embeddedView;
      if (isPresent(embeddedView)) {
        var createTemplateRefExpr = importExpr(resolveIdentifier(Identifiers.TemplateRef_)).instantiate([this.appElement, this.embeddedView.viewFactory]);
        var provider = new CompileProviderMetadata({
          token: resolveIdentifierToken(Identifiers.TemplateRef),
          useValue: createTemplateRefExpr
        });
        this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], exports.ProviderAstType.Builtin, [], this.sourceAst.sourceSpan));
      }
    };
    CompileElement.prototype.beforeChildren = function() {
      var _this = this;
      if (this.hasViewContainer) {
        this.instances.set(resolveIdentifierToken(Identifiers.ViewContainerRef).reference, this.appElement.prop('vcRef'));
      }
      this._resolvedProviders = new Map();
      this._resolvedProvidersArray.forEach(function(provider) {
        return _this._resolvedProviders.set(provider.token.reference, provider);
      });
      MapWrapper.values(this._resolvedProviders).forEach(function(resolvedProvider) {
        var providerValueExpressions = resolvedProvider.providers.map(function(provider) {
          if (isPresent(provider.useExisting)) {
            return _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({token: provider.useExisting}));
          } else if (isPresent(provider.useFactory)) {
            var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
            var depsExpr = deps.map(function(dep) {
              return _this._getDependency(resolvedProvider.providerType, dep);
            });
            return importExpr(provider.useFactory).callFn(depsExpr);
          } else if (isPresent(provider.useClass)) {
            var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
            var depsExpr = deps.map(function(dep) {
              return _this._getDependency(resolvedProvider.providerType, dep);
            });
            return importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
          } else {
            return convertValueToOutputAst(provider.useValue);
          }
        });
        var propName = "_" + resolvedProvider.token.name + "_" + _this.nodeIndex + "_" + _this.instances.size;
        var instance = createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this);
        _this.instances.set(resolvedProvider.token.reference, instance);
      });
      for (var i = 0; i < this._directives.length; i++) {
        var directive = this._directives[i];
        var directiveInstance = this.instances.get(identifierToken(directive.type).reference);
        directive.queries.forEach(function(queryMeta) {
          _this._addQuery(queryMeta, directiveInstance);
        });
      }
      var queriesWithReads = [];
      MapWrapper.values(this._resolvedProviders).forEach(function(resolvedProvider) {
        var queriesForProvider = _this._getQueriesFor(resolvedProvider.token);
        ListWrapper.addAll(queriesWithReads, queriesForProvider.map(function(query) {
          return new _QueryWithRead(query, resolvedProvider.token);
        }));
      });
      StringMapWrapper.forEach(this.referenceTokens, function(_, varName) {
        var token = _this.referenceTokens[varName];
        var varValue;
        if (isPresent(token)) {
          varValue = _this.instances.get(token.reference);
        } else {
          varValue = _this.renderNode;
        }
        _this.view.locals.set(varName, varValue);
        var varToken = new CompileTokenMetadata({value: varName});
        ListWrapper.addAll(queriesWithReads, _this._getQueriesFor(varToken).map(function(query) {
          return new _QueryWithRead(query, varToken);
        }));
      });
      queriesWithReads.forEach(function(queryWithRead) {
        var value;
        if (isPresent(queryWithRead.read.identifier)) {
          value = _this.instances.get(queryWithRead.read.reference);
        } else {
          var token = _this.referenceTokens[queryWithRead.read.value];
          if (isPresent(token)) {
            value = _this.instances.get(token.reference);
          } else {
            value = _this.elementRef;
          }
        }
        if (isPresent(value)) {
          queryWithRead.query.addValue(value, _this.view);
        }
      });
      if (isPresent(this.component)) {
        var componentConstructorViewQueryList = isPresent(this.component) ? literalArr(this._componentConstructorViewQueryLists) : NULL_EXPR;
        var compExpr = isPresent(this.getComponent()) ? this.getComponent() : NULL_EXPR;
        this.view.createMethod.addStmt(this.appElement.callMethod('initComponent', [compExpr, componentConstructorViewQueryList, this._compViewExpr]).toStmt());
      }
    };
    CompileElement.prototype.afterChildren = function(childNodeCount) {
      var _this = this;
      MapWrapper.values(this._resolvedProviders).forEach(function(resolvedProvider) {
        var providerExpr = _this.instances.get(resolvedProvider.token.reference);
        var providerChildNodeCount = resolvedProvider.providerType === exports.ProviderAstType.PrivateService ? 0 : childNodeCount;
        _this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));
      });
      MapWrapper.values(this._queries).forEach(function(queries) {
        return queries.forEach(function(query) {
          return query.afterChildren(_this.view.createMethod, _this.view.updateContentQueriesMethod);
        });
      });
    };
    CompileElement.prototype.addContentNode = function(ngContentIndex, nodeExpr) {
      this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
    };
    CompileElement.prototype.getComponent = function() {
      return isPresent(this.component) ? this.instances.get(identifierToken(this.component.type).reference) : null;
    };
    CompileElement.prototype.getProviderTokens = function() {
      return MapWrapper.values(this._resolvedProviders).map(function(resolvedProvider) {
        return createDiTokenExpression(resolvedProvider.token);
      });
    };
    CompileElement.prototype._getQueriesFor = function(token) {
      var result = [];
      var currentEl = this;
      var distance = 0;
      var queries;
      while (!currentEl.isNull()) {
        queries = currentEl._queries.get(token.reference);
        if (isPresent(queries)) {
          ListWrapper.addAll(result, queries.filter(function(query) {
            return query.meta.descendants || distance <= 1;
          }));
        }
        if (currentEl._directives.length > 0) {
          distance++;
        }
        currentEl = currentEl.parent;
      }
      queries = this.view.componentView.viewQueries.get(token.reference);
      if (isPresent(queries)) {
        ListWrapper.addAll(result, queries);
      }
      return result;
    };
    CompileElement.prototype._addQuery = function(queryMeta, directiveInstance) {
      var propName = "_query_" + queryMeta.selectors[0].name + "_" + this.nodeIndex + "_" + this._queryCount++;
      var queryList = createQueryList(queryMeta, directiveInstance, propName, this.view);
      var query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);
      addQueryToTokenMap(this._queries, query);
      return query;
    };
    CompileElement.prototype._getLocalDependency = function(requestingProviderType, dep) {
      var result = null;
      if (isBlank(result) && isPresent(dep.query)) {
        result = this._addQuery(dep.query, null).queryList;
      }
      if (isBlank(result) && isPresent(dep.viewQuery)) {
        result = createQueryList(dep.viewQuery, null, "_viewQuery_" + dep.viewQuery.selectors[0].name + "_" + this.nodeIndex + "_" + this._componentConstructorViewQueryLists.length, this.view);
        this._componentConstructorViewQueryLists.push(result);
      }
      if (isPresent(dep.token)) {
        if (isBlank(result)) {
          if (dep.token.reference === resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {
            if (requestingProviderType === exports.ProviderAstType.Component) {
              return this._compViewExpr.prop('ref');
            } else {
              return getPropertyInView(THIS_EXPR.prop('ref'), this.view, this.view.componentView);
            }
          }
        }
        if (isBlank(result)) {
          var resolvedProvider = this._resolvedProviders.get(dep.token.reference);
          if (resolvedProvider && (requestingProviderType === exports.ProviderAstType.Directive || requestingProviderType === exports.ProviderAstType.PublicService) && resolvedProvider.providerType === exports.ProviderAstType.PrivateService) {
            return null;
          }
          result = this.instances.get(dep.token.reference);
        }
      }
      return result;
    };
    CompileElement.prototype._getDependency = function(requestingProviderType, dep) {
      var currElement = this;
      var result = null;
      if (dep.isValue) {
        result = literal(dep.value);
      }
      if (isBlank(result) && !dep.isSkipSelf) {
        result = this._getLocalDependency(requestingProviderType, dep);
      }
      while (isBlank(result) && !currElement.parent.isNull()) {
        currElement = currElement.parent;
        result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, new CompileDiDependencyMetadata({token: dep.token}));
      }
      if (isBlank(result)) {
        result = injectFromViewParentInjector(dep.token, dep.isOptional);
      }
      if (isBlank(result)) {
        result = NULL_EXPR;
      }
      return getPropertyInView(result, this.view, currElement.view);
    };
    return CompileElement;
  }(CompileNode));
  function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {
    var indexCondition;
    if (childNodeCount > 0) {
      indexCondition = literal(nodeIndex).lowerEquals(InjectMethodVars.requestNodeIndex).and(InjectMethodVars.requestNodeIndex.lowerEquals(literal(nodeIndex + childNodeCount)));
    } else {
      indexCondition = literal(nodeIndex).identical(InjectMethodVars.requestNodeIndex);
    }
    return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(provider.token)).and(indexCondition), [new ReturnStatement(providerExpr)]);
  }
  function createProviderProperty(propName, provider, providerValueExpressions, isMulti, isEager, compileElement) {
    var view = compileElement.view;
    var resolvedProviderValueExpr;
    var type;
    if (isMulti) {
      resolvedProviderValueExpr = literalArr(providerValueExpressions);
      type = new ArrayType(DYNAMIC_TYPE);
    } else {
      resolvedProviderValueExpr = providerValueExpressions[0];
      type = providerValueExpressions[0].type;
    }
    if (isBlank(type)) {
      type = DYNAMIC_TYPE;
    }
    if (isEager) {
      view.fields.push(new ClassField(propName, type));
      view.createMethod.addStmt(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
    } else {
      var internalField = "_" + propName;
      view.fields.push(new ClassField(internalField, type));
      var getter = new CompileMethod(view);
      getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
      getter.addStmt(new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));
      getter.addStmt(new ReturnStatement(THIS_EXPR.prop(internalField)));
      view.getters.push(new ClassGetter(propName, getter.finish(), type));
    }
    return THIS_EXPR.prop(propName);
  }
  var _QueryWithRead = (function() {
    function _QueryWithRead(query, match) {
      this.query = query;
      this.read = isPresent(query.meta.read) ? query.meta.read : match;
    }
    return _QueryWithRead;
  }());
  var CompilePipe = (function() {
    function CompilePipe(view, meta) {
      var _this = this;
      this.view = view;
      this.meta = meta;
      this._purePipeProxyCount = 0;
      this.instance = THIS_EXPR.prop("_pipe_" + meta.name + "_" + view.pipeCount++);
      var deps = this.meta.type.diDeps.map(function(diDep) {
        if (diDep.token.reference === resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {
          return getPropertyInView(THIS_EXPR.prop('ref'), _this.view, _this.view.componentView);
        }
        return injectFromViewParentInjector(diDep.token, false);
      });
      this.view.fields.push(new ClassField(this.instance.name, importType(this.meta.type)));
      this.view.createMethod.resetDebugInfo(null, null);
      this.view.createMethod.addStmt(THIS_EXPR.prop(this.instance.name).set(importExpr(this.meta.type).instantiate(deps)).toStmt());
    }
    CompilePipe.call = function(view, name, args) {
      var compView = view.componentView;
      var meta = _findPipeMeta(compView, name);
      var pipe;
      if (meta.pure) {
        pipe = compView.purePipes.get(name);
        if (isBlank(pipe)) {
          pipe = new CompilePipe(compView, meta);
          compView.purePipes.set(name, pipe);
          compView.pipes.push(pipe);
        }
      } else {
        pipe = new CompilePipe(view, meta);
        view.pipes.push(pipe);
      }
      return pipe._call(view, args);
    };
    Object.defineProperty(CompilePipe.prototype, "pure", {
      get: function() {
        return this.meta.pure;
      },
      enumerable: true,
      configurable: true
    });
    CompilePipe.prototype._call = function(callingView, args) {
      if (this.meta.pure) {
        var purePipeProxyInstance = THIS_EXPR.prop(this.instance.name + "_" + this._purePipeProxyCount++);
        var pipeInstanceSeenFromPureProxy = getPropertyInView(this.instance, callingView, this.view);
        createPureProxy(pipeInstanceSeenFromPureProxy.prop('transform').callMethod(BuiltinMethod.Bind, [pipeInstanceSeenFromPureProxy]), args.length, purePipeProxyInstance, callingView);
        return importExpr(resolveIdentifier(Identifiers.castByValue)).callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop('transform')]).callFn(args);
      } else {
        return getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);
      }
    };
    return CompilePipe;
  }());
  function _findPipeMeta(view, name) {
    var pipeMeta = null;
    for (var i = view.pipeMetas.length - 1; i >= 0; i--) {
      var localPipeMeta = view.pipeMetas[i];
      if (localPipeMeta.name == name) {
        pipeMeta = localPipeMeta;
        break;
      }
    }
    if (isBlank(pipeMeta)) {
      throw new Error("Illegal state: Could not find pipe " + name + " although the parser should have detected this error!");
    }
    return pipeMeta;
  }
  var CompileView = (function() {
    function CompileView(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings) {
      var _this = this;
      this.component = component;
      this.genConfig = genConfig;
      this.pipeMetas = pipeMetas;
      this.styles = styles;
      this.animations = animations;
      this.viewIndex = viewIndex;
      this.declarationElement = declarationElement;
      this.templateVariableBindings = templateVariableBindings;
      this.nodes = [];
      this.rootNodesOrAppElements = [];
      this.bindings = [];
      this.classStatements = [];
      this.eventHandlerMethods = [];
      this.fields = [];
      this.getters = [];
      this.disposables = [];
      this.subscriptions = [];
      this.purePipes = new Map();
      this.pipes = [];
      this.locals = new Map();
      this.literalArrayCount = 0;
      this.literalMapCount = 0;
      this.pipeCount = 0;
      this.createMethod = new CompileMethod(this);
      this.injectorGetMethod = new CompileMethod(this);
      this.updateContentQueriesMethod = new CompileMethod(this);
      this.dirtyParentQueriesMethod = new CompileMethod(this);
      this.updateViewQueriesMethod = new CompileMethod(this);
      this.detectChangesInInputsMethod = new CompileMethod(this);
      this.detectChangesRenderPropertiesMethod = new CompileMethod(this);
      this.afterContentLifecycleCallbacksMethod = new CompileMethod(this);
      this.afterViewLifecycleCallbacksMethod = new CompileMethod(this);
      this.destroyMethod = new CompileMethod(this);
      this.detachMethod = new CompileMethod(this);
      this.viewType = getViewType(component, viewIndex);
      this.className = "_View_" + component.type.name + viewIndex;
      this.classType = importType(new CompileIdentifierMetadata({name: this.className}));
      this.viewFactory = variable(getViewFactoryName(component, viewIndex));
      if (this.viewType === ViewType.COMPONENT || this.viewType === ViewType.HOST) {
        this.componentView = this;
      } else {
        this.componentView = this.declarationElement.view.componentView;
      }
      this.componentContext = getPropertyInView(THIS_EXPR.prop('context'), this, this.componentView);
      var viewQueries = new Map();
      if (this.viewType === ViewType.COMPONENT) {
        var directiveInstance = THIS_EXPR.prop('context');
        ListWrapper.forEachWithIndex(this.component.viewQueries, function(queryMeta, queryIndex) {
          var propName = "_viewQuery_" + queryMeta.selectors[0].name + "_" + queryIndex;
          var queryList = createQueryList(queryMeta, directiveInstance, propName, _this);
          var query = new CompileQuery(queryMeta, queryList, directiveInstance, _this);
          addQueryToTokenMap(viewQueries, query);
        });
        var constructorViewQueryCount = 0;
        this.component.type.diDeps.forEach(function(dep) {
          if (isPresent(dep.viewQuery)) {
            var queryList = THIS_EXPR.prop('declarationAppElement').prop('componentConstructorViewQueries').key(literal(constructorViewQueryCount++));
            var query = new CompileQuery(dep.viewQuery, queryList, null, _this);
            addQueryToTokenMap(viewQueries, query);
          }
        });
      }
      this.viewQueries = viewQueries;
      templateVariableBindings.forEach(function(entry) {
        _this.locals.set(entry[1], THIS_EXPR.prop('context').prop(entry[0]));
      });
      if (!this.declarationElement.isNull()) {
        this.declarationElement.setEmbeddedView(this);
      }
    }
    CompileView.prototype.callPipe = function(name, input, args) {
      return CompilePipe.call(this, name, [input].concat(args));
    };
    CompileView.prototype.getLocal = function(name) {
      if (name == EventHandlerVars.event.name) {
        return EventHandlerVars.event;
      }
      var currView = this;
      var result = currView.locals.get(name);
      while (isBlank(result) && isPresent(currView.declarationElement.view)) {
        currView = currView.declarationElement.view;
        result = currView.locals.get(name);
      }
      if (isPresent(result)) {
        return getPropertyInView(result, this, currView);
      } else {
        return null;
      }
    };
    CompileView.prototype.createLiteralArray = function(values) {
      if (values.length === 0) {
        return importExpr(resolveIdentifier(Identifiers.EMPTY_ARRAY));
      }
      var proxyExpr = THIS_EXPR.prop("_arr_" + this.literalArrayCount++);
      var proxyParams = [];
      var proxyReturnEntries = [];
      for (var i = 0; i < values.length; i++) {
        var paramName = "p" + i;
        proxyParams.push(new FnParam(paramName));
        proxyReturnEntries.push(variable(paramName));
      }
      createPureProxy(fn(proxyParams, [new ReturnStatement(literalArr(proxyReturnEntries))], new ArrayType(DYNAMIC_TYPE)), values.length, proxyExpr, this);
      return proxyExpr.callFn(values);
    };
    CompileView.prototype.createLiteralMap = function(entries) {
      if (entries.length === 0) {
        return importExpr(resolveIdentifier(Identifiers.EMPTY_MAP));
      }
      var proxyExpr = THIS_EXPR.prop("_map_" + this.literalMapCount++);
      var proxyParams = [];
      var proxyReturnEntries = [];
      var values = [];
      for (var i = 0; i < entries.length; i++) {
        var paramName = "p" + i;
        proxyParams.push(new FnParam(paramName));
        proxyReturnEntries.push([entries[i][0], variable(paramName)]);
        values.push(entries[i][1]);
      }
      createPureProxy(fn(proxyParams, [new ReturnStatement(literalMap(proxyReturnEntries))], new MapType(DYNAMIC_TYPE)), entries.length, proxyExpr, this);
      return proxyExpr.callFn(values);
    };
    CompileView.prototype.afterNodes = function() {
      var _this = this;
      MapWrapper.values(this.viewQueries).forEach(function(queries) {
        return queries.forEach(function(query) {
          return query.afterChildren(_this.createMethod, _this.updateViewQueriesMethod);
        });
      });
    };
    return CompileView;
  }());
  function getViewType(component, embeddedTemplateIndex) {
    if (embeddedTemplateIndex > 0) {
      return ViewType.EMBEDDED;
    } else if (component.type.isHost) {
      return ViewType.HOST;
    } else {
      return ViewType.COMPONENT;
    }
  }
  var CompileBinding = (function() {
    function CompileBinding(node, sourceAst) {
      this.node = node;
      this.sourceAst = sourceAst;
    }
    return CompileBinding;
  }());
  var ExpressionWithWrappedValueInfo = (function() {
    function ExpressionWithWrappedValueInfo(expression, needsValueUnwrapper, temporaryCount) {
      this.expression = expression;
      this.needsValueUnwrapper = needsValueUnwrapper;
      this.temporaryCount = temporaryCount;
    }
    return ExpressionWithWrappedValueInfo;
  }());
  function convertCdExpressionToIr(nameResolver, implicitReceiver, expression, valueUnwrapper, bindingIndex) {
    var visitor = new _AstToIrVisitor(nameResolver, implicitReceiver, valueUnwrapper, bindingIndex);
    var irAst = expression.visit(visitor, _Mode.Expression);
    return new ExpressionWithWrappedValueInfo(irAst, visitor.needsValueUnwrapper, visitor.temporaryCount);
  }
  function convertCdStatementToIr(nameResolver, implicitReceiver, stmt, bindingIndex) {
    var visitor = new _AstToIrVisitor(nameResolver, implicitReceiver, null, bindingIndex);
    var statements = [];
    flattenStatements(stmt.visit(visitor, _Mode.Statement), statements);
    prependTemporaryDecls(visitor.temporaryCount, bindingIndex, statements);
    return statements;
  }
  function temporaryName(bindingIndex, temporaryNumber) {
    return "tmp_" + bindingIndex + "_" + temporaryNumber;
  }
  function temporaryDeclaration(bindingIndex, temporaryNumber) {
    return new DeclareVarStmt(temporaryName(bindingIndex, temporaryNumber), NULL_EXPR);
  }
  function prependTemporaryDecls(temporaryCount, bindingIndex, statements) {
    for (var i = temporaryCount - 1; i >= 0; i--) {
      statements.unshift(temporaryDeclaration(bindingIndex, i));
    }
  }
  var _Mode;
  (function(_Mode) {
    _Mode[_Mode["Statement"] = 0] = "Statement";
    _Mode[_Mode["Expression"] = 1] = "Expression";
  })(_Mode || (_Mode = {}));
  function ensureStatementMode(mode, ast) {
    if (mode !== _Mode.Statement) {
      throw new Error("Expected a statement, but saw " + ast);
    }
  }
  function ensureExpressionMode(mode, ast) {
    if (mode !== _Mode.Expression) {
      throw new Error("Expected an expression, but saw " + ast);
    }
  }
  function convertToStatementIfNeeded(mode, expr) {
    if (mode === _Mode.Statement) {
      return expr.toStmt();
    } else {
      return expr;
    }
  }
  var _AstToIrVisitor = (function() {
    function _AstToIrVisitor(_nameResolver, _implicitReceiver, _valueUnwrapper, bindingIndex) {
      this._nameResolver = _nameResolver;
      this._implicitReceiver = _implicitReceiver;
      this._valueUnwrapper = _valueUnwrapper;
      this.bindingIndex = bindingIndex;
      this._nodeMap = new Map();
      this._resultMap = new Map();
      this._currentTemporary = 0;
      this.needsValueUnwrapper = false;
      this.temporaryCount = 0;
    }
    _AstToIrVisitor.prototype.visitBinary = function(ast, mode) {
      var op;
      switch (ast.operation) {
        case '+':
          op = BinaryOperator.Plus;
          break;
        case '-':
          op = BinaryOperator.Minus;
          break;
        case '*':
          op = BinaryOperator.Multiply;
          break;
        case '/':
          op = BinaryOperator.Divide;
          break;
        case '%':
          op = BinaryOperator.Modulo;
          break;
        case '&&':
          op = BinaryOperator.And;
          break;
        case '||':
          op = BinaryOperator.Or;
          break;
        case '==':
          op = BinaryOperator.Equals;
          break;
        case '!=':
          op = BinaryOperator.NotEquals;
          break;
        case '===':
          op = BinaryOperator.Identical;
          break;
        case '!==':
          op = BinaryOperator.NotIdentical;
          break;
        case '<':
          op = BinaryOperator.Lower;
          break;
        case '>':
          op = BinaryOperator.Bigger;
          break;
        case '<=':
          op = BinaryOperator.LowerEquals;
          break;
        case '>=':
          op = BinaryOperator.BiggerEquals;
          break;
        default:
          throw new Error("Unsupported operation " + ast.operation);
      }
      return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
    };
    _AstToIrVisitor.prototype.visitChain = function(ast, mode) {
      ensureStatementMode(mode, ast);
      return this.visitAll(ast.expressions, mode);
    };
    _AstToIrVisitor.prototype.visitConditional = function(ast, mode) {
      var value = this.visit(ast.condition, _Mode.Expression);
      return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
    };
    _AstToIrVisitor.prototype.visitPipe = function(ast, mode) {
      var input = this.visit(ast.exp, _Mode.Expression);
      var args = this.visitAll(ast.args, _Mode.Expression);
      var value = this._nameResolver.callPipe(ast.name, input, args);
      this.needsValueUnwrapper = true;
      return convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod('unwrap', [value]));
    };
    _AstToIrVisitor.prototype.visitFunctionCall = function(ast, mode) {
      return convertToStatementIfNeeded(mode, this.visit(ast.target, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression)));
    };
    _AstToIrVisitor.prototype.visitImplicitReceiver = function(ast, mode) {
      ensureExpressionMode(mode, ast);
      return this._implicitReceiver;
    };
    _AstToIrVisitor.prototype.visitInterpolation = function(ast, mode) {
      ensureExpressionMode(mode, ast);
      var args = [literal(ast.expressions.length)];
      for (var i = 0; i < ast.strings.length - 1; i++) {
        args.push(literal(ast.strings[i]));
        args.push(this.visit(ast.expressions[i], _Mode.Expression));
      }
      args.push(literal(ast.strings[ast.strings.length - 1]));
      return importExpr(resolveIdentifier(Identifiers.interpolate)).callFn(args);
    };
    _AstToIrVisitor.prototype.visitKeyedRead = function(ast, mode) {
      return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
    };
    _AstToIrVisitor.prototype.visitKeyedWrite = function(ast, mode) {
      var obj = this.visit(ast.obj, _Mode.Expression);
      var key = this.visit(ast.key, _Mode.Expression);
      var value = this.visit(ast.value, _Mode.Expression);
      return convertToStatementIfNeeded(mode, obj.key(key).set(value));
    };
    _AstToIrVisitor.prototype.visitLiteralArray = function(ast, mode) {
      return convertToStatementIfNeeded(mode, this._nameResolver.createLiteralArray(this.visitAll(ast.expressions, mode)));
    };
    _AstToIrVisitor.prototype.visitLiteralMap = function(ast, mode) {
      var parts = [];
      for (var i = 0; i < ast.keys.length; i++) {
        parts.push([ast.keys[i], this.visit(ast.values[i], _Mode.Expression)]);
      }
      return convertToStatementIfNeeded(mode, this._nameResolver.createLiteralMap(parts));
    };
    _AstToIrVisitor.prototype.visitLiteralPrimitive = function(ast, mode) {
      return convertToStatementIfNeeded(mode, literal(ast.value));
    };
    _AstToIrVisitor.prototype.visitMethodCall = function(ast, mode) {
      var leftMostSafe = this.leftMostSafeNode(ast);
      if (leftMostSafe) {
        return this.convertSafeAccess(ast, leftMostSafe, mode);
      } else {
        var args = this.visitAll(ast.args, _Mode.Expression);
        var result = null;
        var receiver = this.visit(ast.receiver, _Mode.Expression);
        if (receiver === this._implicitReceiver) {
          var varExpr = this._nameResolver.getLocal(ast.name);
          if (isPresent(varExpr)) {
            result = varExpr.callFn(args);
          }
        }
        if (isBlank(result)) {
          result = receiver.callMethod(ast.name, args);
        }
        return convertToStatementIfNeeded(mode, result);
      }
    };
    _AstToIrVisitor.prototype.visitPrefixNot = function(ast, mode) {
      return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));
    };
    _AstToIrVisitor.prototype.visitPropertyRead = function(ast, mode) {
      var leftMostSafe = this.leftMostSafeNode(ast);
      if (leftMostSafe) {
        return this.convertSafeAccess(ast, leftMostSafe, mode);
      } else {
        var result = null;
        var receiver = this.visit(ast.receiver, _Mode.Expression);
        if (receiver === this._implicitReceiver) {
          result = this._nameResolver.getLocal(ast.name);
        }
        if (isBlank(result)) {
          result = receiver.prop(ast.name);
        }
        return convertToStatementIfNeeded(mode, result);
      }
    };
    _AstToIrVisitor.prototype.visitPropertyWrite = function(ast, mode) {
      var receiver = this.visit(ast.receiver, _Mode.Expression);
      if (receiver === this._implicitReceiver) {
        var varExpr = this._nameResolver.getLocal(ast.name);
        if (isPresent(varExpr)) {
          throw new Error('Cannot assign to a reference or variable!');
        }
      }
      return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
    };
    _AstToIrVisitor.prototype.visitSafePropertyRead = function(ast, mode) {
      return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
    };
    _AstToIrVisitor.prototype.visitSafeMethodCall = function(ast, mode) {
      return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
    };
    _AstToIrVisitor.prototype.visitAll = function(asts, mode) {
      var _this = this;
      return asts.map(function(ast) {
        return _this.visit(ast, mode);
      });
    };
    _AstToIrVisitor.prototype.visitQuote = function(ast, mode) {
      throw new Error('Quotes are not supported for evaluation!');
    };
    _AstToIrVisitor.prototype.visit = function(ast, mode) {
      var result = this._resultMap.get(ast);
      if (result)
        return result;
      return (this._nodeMap.get(ast) || ast).visit(this, mode);
    };
    _AstToIrVisitor.prototype.convertSafeAccess = function(ast, leftMostSafe, mode) {
      var guardedExpression = this.visit(leftMostSafe.receiver, mode);
      var temporary;
      if (this.needsTemporary(leftMostSafe.receiver)) {
        temporary = this.allocateTemporary();
        guardedExpression = temporary.set(guardedExpression);
        this._resultMap.set(leftMostSafe.receiver, temporary);
      }
      var condition = guardedExpression.isBlank();
      if (leftMostSafe instanceof SafeMethodCall) {
        this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
      } else {
        this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));
      }
      var access = this.visit(ast, mode);
      this._nodeMap.delete(leftMostSafe);
      if (temporary) {
        this.releaseTemporary(temporary);
      }
      return condition.conditional(literal(null), access);
    };
    _AstToIrVisitor.prototype.leftMostSafeNode = function(ast) {
      var _this = this;
      var visit = function(visitor, ast) {
        return (_this._nodeMap.get(ast) || ast).visit(visitor);
      };
      return ast.visit({
        visitBinary: function(ast) {
          return null;
        },
        visitChain: function(ast) {
          return null;
        },
        visitConditional: function(ast) {
          return null;
        },
        visitFunctionCall: function(ast) {
          return null;
        },
        visitImplicitReceiver: function(ast) {
          return null;
        },
        visitInterpolation: function(ast) {
          return null;
        },
        visitKeyedRead: function(ast) {
          return visit(this, ast.obj);
        },
        visitKeyedWrite: function(ast) {
          return null;
        },
        visitLiteralArray: function(ast) {
          return null;
        },
        visitLiteralMap: function(ast) {
          return null;
        },
        visitLiteralPrimitive: function(ast) {
          return null;
        },
        visitMethodCall: function(ast) {
          return visit(this, ast.receiver);
        },
        visitPipe: function(ast) {
          return null;
        },
        visitPrefixNot: function(ast) {
          return null;
        },
        visitPropertyRead: function(ast) {
          return visit(this, ast.receiver);
        },
        visitPropertyWrite: function(ast) {
          return null;
        },
        visitQuote: function(ast) {
          return null;
        },
        visitSafeMethodCall: function(ast) {
          return visit(this, ast.receiver) || ast;
        },
        visitSafePropertyRead: function(ast) {
          return visit(this, ast.receiver) || ast;
        }
      });
    };
    _AstToIrVisitor.prototype.needsTemporary = function(ast) {
      var _this = this;
      var visit = function(visitor, ast) {
        return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);
      };
      var visitSome = function(visitor, ast) {
        return ast.some(function(ast) {
          return visit(visitor, ast);
        });
      };
      return ast.visit({
        visitBinary: function(ast) {
          return visit(this, ast.left) || visit(this, ast.right);
        },
        visitChain: function(ast) {
          return false;
        },
        visitConditional: function(ast) {
          return visit(this, ast.condition) || visit(this, ast.trueExp) || visit(this, ast.falseExp);
        },
        visitFunctionCall: function(ast) {
          return true;
        },
        visitImplicitReceiver: function(ast) {
          return false;
        },
        visitInterpolation: function(ast) {
          return visitSome(this, ast.expressions);
        },
        visitKeyedRead: function(ast) {
          return false;
        },
        visitKeyedWrite: function(ast) {
          return false;
        },
        visitLiteralArray: function(ast) {
          return true;
        },
        visitLiteralMap: function(ast) {
          return true;
        },
        visitLiteralPrimitive: function(ast) {
          return false;
        },
        visitMethodCall: function(ast) {
          return true;
        },
        visitPipe: function(ast) {
          return true;
        },
        visitPrefixNot: function(ast) {
          return visit(this, ast.expression);
        },
        visitPropertyRead: function(ast) {
          return false;
        },
        visitPropertyWrite: function(ast) {
          return false;
        },
        visitQuote: function(ast) {
          return false;
        },
        visitSafeMethodCall: function(ast) {
          return true;
        },
        visitSafePropertyRead: function(ast) {
          return false;
        }
      });
    };
    _AstToIrVisitor.prototype.allocateTemporary = function() {
      var tempNumber = this._currentTemporary++;
      this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
      return new ReadVarExpr(temporaryName(this.bindingIndex, tempNumber));
    };
    _AstToIrVisitor.prototype.releaseTemporary = function(temporary) {
      this._currentTemporary--;
      if (temporary.name != temporaryName(this.bindingIndex, this._currentTemporary)) {
        throw new Error("Temporary " + temporary.name + " released out of order");
      }
    };
    return _AstToIrVisitor;
  }());
  function flattenStatements(arg, output) {
    if (isArray(arg)) {
      arg.forEach(function(entry) {
        return flattenStatements(entry, output);
      });
    } else {
      output.push(arg);
    }
  }
  var CompileElementAnimationOutput = (function() {
    function CompileElementAnimationOutput(listener, output) {
      this.listener = listener;
      this.output = output;
    }
    return CompileElementAnimationOutput;
  }());
  var CompileEventListener = (function() {
    function CompileEventListener(compileElement, eventTarget, eventName, listenerIndex) {
      this.compileElement = compileElement;
      this.eventTarget = eventTarget;
      this.eventName = eventName;
      this._hasComponentHostListener = false;
      this._actionResultExprs = [];
      this._method = new CompileMethod(compileElement.view);
      this._methodName = "_handle_" + santitizeEventName(eventName) + "_" + compileElement.nodeIndex + "_" + listenerIndex;
      this._eventParam = new FnParam(EventHandlerVars.event.name, importType(this.compileElement.view.genConfig.renderTypes.renderEvent));
    }
    CompileEventListener.getOrCreate = function(compileElement, eventTarget, eventName, targetEventListeners) {
      var listener = targetEventListeners.find(function(listener) {
        return listener.eventTarget == eventTarget && listener.eventName == eventName;
      });
      if (isBlank(listener)) {
        listener = new CompileEventListener(compileElement, eventTarget, eventName, targetEventListeners.length);
        targetEventListeners.push(listener);
      }
      return listener;
    };
    Object.defineProperty(CompileEventListener.prototype, "methodName", {
      get: function() {
        return this._methodName;
      },
      enumerable: true,
      configurable: true
    });
    CompileEventListener.prototype.addAction = function(hostEvent, directive, directiveInstance) {
      if (isPresent(directive) && directive.isComponent) {
        this._hasComponentHostListener = true;
      }
      this._method.resetDebugInfo(this.compileElement.nodeIndex, hostEvent);
      var context = isPresent(directiveInstance) ? directiveInstance : this.compileElement.view.componentContext;
      var actionStmts = convertCdStatementToIr(this.compileElement.view, context, hostEvent.handler, this.compileElement.nodeIndex);
      var lastIndex = actionStmts.length - 1;
      if (lastIndex >= 0) {
        var lastStatement = actionStmts[lastIndex];
        var returnExpr = convertStmtIntoExpression(lastStatement);
        var preventDefaultVar = variable("pd_" + this._actionResultExprs.length);
        this._actionResultExprs.push(preventDefaultVar);
        if (isPresent(returnExpr)) {
          actionStmts[lastIndex] = preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false))).toDeclStmt(null, [StmtModifier.Final]);
        }
      }
      this._method.addStmts(actionStmts);
    };
    CompileEventListener.prototype.finishMethod = function() {
      var markPathToRootStart = this._hasComponentHostListener ? this.compileElement.appElement.prop('componentView') : THIS_EXPR;
      var resultExpr = literal(true);
      this._actionResultExprs.forEach(function(expr) {
        resultExpr = resultExpr.and(expr);
      });
      var stmts = [markPathToRootStart.callMethod('markPathToRootAsCheckOnce', []).toStmt()].concat(this._method.finish()).concat([new ReturnStatement(resultExpr)]);
      this.compileElement.view.eventHandlerMethods.push(new ClassMethod(this._methodName, [this._eventParam], stmts, BOOL_TYPE, [StmtModifier.Private]));
    };
    CompileEventListener.prototype.listenToRenderer = function() {
      var listenExpr;
      var eventListener = THIS_EXPR.callMethod('eventHandler', [THIS_EXPR.prop(this._methodName).callMethod(BuiltinMethod.Bind, [THIS_EXPR])]);
      if (isPresent(this.eventTarget)) {
        listenExpr = ViewProperties.renderer.callMethod('listenGlobal', [literal(this.eventTarget), literal(this.eventName), eventListener]);
      } else {
        listenExpr = ViewProperties.renderer.callMethod('listen', [this.compileElement.renderNode, literal(this.eventName), eventListener]);
      }
      var disposable = variable("disposable_" + this.compileElement.view.disposables.length);
      this.compileElement.view.disposables.push(disposable);
      this.compileElement.view.createMethod.addStmt(disposable.set(listenExpr).toDeclStmt(FUNCTION_TYPE, [StmtModifier.Private]));
    };
    CompileEventListener.prototype.listenToAnimation = function(output) {
      var outputListener = THIS_EXPR.callMethod('eventHandler', [THIS_EXPR.prop(this._methodName).callMethod(BuiltinMethod.Bind, [THIS_EXPR])]);
      var stmt = THIS_EXPR.callMethod('registerAnimationOutput', [this.compileElement.renderNode, importExpr(resolveIdentifier(Identifiers.AnimationOutput)).instantiate([literal(output.name), literal(output.phase)]), outputListener]).toStmt();
      this.compileElement.view.createMethod.addStmt(stmt);
    };
    CompileEventListener.prototype.listenToDirective = function(directiveInstance, observablePropName) {
      var subscription = variable("subscription_" + this.compileElement.view.subscriptions.length);
      this.compileElement.view.subscriptions.push(subscription);
      var eventListener = THIS_EXPR.callMethod('eventHandler', [THIS_EXPR.prop(this._methodName).callMethod(BuiltinMethod.Bind, [THIS_EXPR])]);
      this.compileElement.view.createMethod.addStmt(subscription.set(directiveInstance.prop(observablePropName).callMethod(BuiltinMethod.SubscribeObservable, [eventListener])).toDeclStmt(null, [StmtModifier.Final]));
    };
    return CompileEventListener;
  }());
  function collectEventListeners(hostEvents, dirs, compileElement) {
    var eventListeners = [];
    hostEvents.forEach(function(hostEvent) {
      compileElement.view.bindings.push(new CompileBinding(compileElement, hostEvent));
      var listener = CompileEventListener.getOrCreate(compileElement, hostEvent.target, hostEvent.name, eventListeners);
      listener.addAction(hostEvent, null, null);
    });
    dirs.forEach(function(directiveAst) {
      var directiveInstance = compileElement.instances.get(identifierToken(directiveAst.directive.type).reference);
      directiveAst.hostEvents.forEach(function(hostEvent) {
        compileElement.view.bindings.push(new CompileBinding(compileElement, hostEvent));
        var listener = CompileEventListener.getOrCreate(compileElement, hostEvent.target, hostEvent.name, eventListeners);
        listener.addAction(hostEvent, directiveAst.directive, directiveInstance);
      });
    });
    eventListeners.forEach(function(listener) {
      return listener.finishMethod();
    });
    return eventListeners;
  }
  function bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners) {
    StringMapWrapper.forEach(directiveAst.directive.outputs, function(eventName, observablePropName) {
      eventListeners.filter(function(listener) {
        return listener.eventName == eventName;
      }).forEach(function(listener) {
        listener.listenToDirective(directiveInstance, observablePropName);
      });
    });
  }
  function bindRenderOutputs(eventListeners) {
    eventListeners.forEach(function(listener) {
      return listener.listenToRenderer();
    });
  }
  function bindAnimationOutputs(eventListeners) {
    eventListeners.forEach(function(entry) {
      entry.listener.listenToAnimation(entry.output);
    });
  }
  function convertStmtIntoExpression(stmt) {
    if (stmt instanceof ExpressionStatement) {
      return stmt.expr;
    } else if (stmt instanceof ReturnStatement) {
      return stmt.value;
    }
    return null;
  }
  function santitizeEventName(name) {
    return StringWrapper.replaceAll(name, /[^a-zA-Z_]/g, '_');
  }
  var STATE_IS_NEVER_CHECKED = THIS_EXPR.prop('numberOfChecks').identical(new LiteralExpr(0));
  var NOT_THROW_ON_CHANGES = not(DetectChangesVars.throwOnChange);
  function bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement) {
    var view = compileElement.view;
    var detectChangesInInputsMethod = view.detectChangesInInputsMethod;
    var lifecycleHooks = directiveAst.directive.type.lifecycleHooks;
    if (lifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1 && directiveAst.inputs.length > 0) {
      detectChangesInInputsMethod.addStmt(new IfStmt(DetectChangesVars.changes.notIdentical(NULL_EXPR), [directiveInstance.callMethod('ngOnChanges', [DetectChangesVars.changes]).toStmt()]));
    }
    if (lifecycleHooks.indexOf(LifecycleHooks.OnInit) !== -1) {
      detectChangesInInputsMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED.and(NOT_THROW_ON_CHANGES), [directiveInstance.callMethod('ngOnInit', []).toStmt()]));
    }
    if (lifecycleHooks.indexOf(LifecycleHooks.DoCheck) !== -1) {
      detectChangesInInputsMethod.addStmt(new IfStmt(NOT_THROW_ON_CHANGES, [directiveInstance.callMethod('ngDoCheck', []).toStmt()]));
    }
  }
  function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
    var view = compileElement.view;
    var lifecycleHooks = directiveMeta.type.lifecycleHooks;
    var afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;
    afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
    if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentInit) !== -1) {
      afterContentLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterContentInit', []).toStmt()]));
    }
    if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentChecked) !== -1) {
      afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterContentChecked', []).toStmt());
    }
  }
  function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
    var view = compileElement.view;
    var lifecycleHooks = directiveMeta.type.lifecycleHooks;
    var afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;
    afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
    if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewInit) !== -1) {
      afterViewLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterViewInit', []).toStmt()]));
    }
    if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewChecked) !== -1) {
      afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterViewChecked', []).toStmt());
    }
  }
  function bindInjectableDestroyLifecycleCallbacks(provider, providerInstance, compileElement) {
    var onDestroyMethod = compileElement.view.destroyMethod;
    onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
    if (provider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
      onDestroyMethod.addStmt(providerInstance.callMethod('ngOnDestroy', []).toStmt());
    }
  }
  function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {
    var onDestroyMethod = view.destroyMethod;
    if (pipeMeta.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
      onDestroyMethod.addStmt(pipeInstance.callMethod('ngOnDestroy', []).toStmt());
    }
  }
  function createBindFieldExpr(exprIndex) {
    return THIS_EXPR.prop("_expr_" + exprIndex);
  }
  function createCurrValueExpr(exprIndex) {
    return variable("currVal_" + exprIndex);
  }
  var _animationViewCheckedFlagMap = new Map();
  function bind(view, currValExpr, fieldExpr, parsedExpression, context, actions, method, bindingIndex) {
    var checkExpression = convertCdExpressionToIr(view, context, parsedExpression, DetectChangesVars.valUnwrapper, bindingIndex);
    if (isBlank(checkExpression.expression)) {
      return;
    }
    if (checkExpression.temporaryCount) {
      for (var i = 0; i < checkExpression.temporaryCount; i++) {
        method.addStmt(temporaryDeclaration(bindingIndex, i));
      }
    }
    view.fields.push(new ClassField(fieldExpr.name, null, [StmtModifier.Private]));
    view.createMethod.addStmt(THIS_EXPR.prop(fieldExpr.name).set(importExpr(resolveIdentifier(Identifiers.UNINITIALIZED))).toStmt());
    if (checkExpression.needsValueUnwrapper) {
      var initValueUnwrapperStmt = DetectChangesVars.valUnwrapper.callMethod('reset', []).toStmt();
      method.addStmt(initValueUnwrapperStmt);
    }
    method.addStmt(currValExpr.set(checkExpression.expression).toDeclStmt(null, [StmtModifier.Final]));
    var condition = importExpr(resolveIdentifier(Identifiers.checkBinding)).callFn([DetectChangesVars.throwOnChange, fieldExpr, currValExpr]);
    if (checkExpression.needsValueUnwrapper) {
      condition = DetectChangesVars.valUnwrapper.prop('hasWrappedValue').or(condition);
    }
    method.addStmt(new IfStmt(condition, actions.concat([THIS_EXPR.prop(fieldExpr.name).set(currValExpr).toStmt()])));
  }
  function bindRenderText(boundText, compileNode, view) {
    var bindingIndex = view.bindings.length;
    view.bindings.push(new CompileBinding(compileNode, boundText));
    var currValExpr = createCurrValueExpr(bindingIndex);
    var valueField = createBindFieldExpr(bindingIndex);
    view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText);
    bind(view, currValExpr, valueField, boundText.value, view.componentContext, [THIS_EXPR.prop('renderer').callMethod('setText', [compileNode.renderNode, currValExpr]).toStmt()], view.detectChangesRenderPropertiesMethod, bindingIndex);
  }
  function bindAndWriteToRenderer(boundProps, context, compileElement, isHostProp) {
    var view = compileElement.view;
    var renderNode = compileElement.renderNode;
    boundProps.forEach(function(boundProp) {
      var bindingIndex = view.bindings.length;
      view.bindings.push(new CompileBinding(compileElement, boundProp));
      view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);
      var fieldExpr = createBindFieldExpr(bindingIndex);
      var currValExpr = createCurrValueExpr(bindingIndex);
      var renderMethod;
      var oldRenderValue = sanitizedValue(boundProp, fieldExpr);
      var renderValue = sanitizedValue(boundProp, currValExpr);
      var updateStmts = [];
      switch (boundProp.type) {
        case exports.PropertyBindingType.Property:
          if (view.genConfig.logBindingUpdate) {
            updateStmts.push(logBindingUpdateStmt(renderNode, boundProp.name, renderValue));
          }
          updateStmts.push(THIS_EXPR.prop('renderer').callMethod('setElementProperty', [renderNode, literal(boundProp.name), renderValue]).toStmt());
          break;
        case exports.PropertyBindingType.Attribute:
          renderValue = renderValue.isBlank().conditional(NULL_EXPR, renderValue.callMethod('toString', []));
          updateStmts.push(THIS_EXPR.prop('renderer').callMethod('setElementAttribute', [renderNode, literal(boundProp.name), renderValue]).toStmt());
          break;
        case exports.PropertyBindingType.Class:
          updateStmts.push(THIS_EXPR.prop('renderer').callMethod('setElementClass', [renderNode, literal(boundProp.name), renderValue]).toStmt());
          break;
        case exports.PropertyBindingType.Style:
          var strValue = renderValue.callMethod('toString', []);
          if (isPresent(boundProp.unit)) {
            strValue = strValue.plus(literal(boundProp.unit));
          }
          renderValue = renderValue.isBlank().conditional(NULL_EXPR, strValue);
          updateStmts.push(THIS_EXPR.prop('renderer').callMethod('setElementStyle', [renderNode, literal(boundProp.name), renderValue]).toStmt());
          break;
        case exports.PropertyBindingType.Animation:
          var animationName = boundProp.name;
          var targetViewExpr = THIS_EXPR;
          if (isHostProp) {
            targetViewExpr = compileElement.appElement.prop('componentView');
          }
          var animationFnExpr = targetViewExpr.prop('componentType').prop('animations').key(literal(animationName));
          var emptyStateValue = literal(EMPTY_ANIMATION_STATE);
          var oldRenderVar = variable('oldRenderVar');
          updateStmts.push(oldRenderVar.set(oldRenderValue).toDeclStmt());
          updateStmts.push(new IfStmt(oldRenderVar.equals(importExpr(resolveIdentifier(Identifiers.UNINITIALIZED))), [oldRenderVar.set(emptyStateValue).toStmt()]));
          var newRenderVar = variable('newRenderVar');
          updateStmts.push(newRenderVar.set(renderValue).toDeclStmt());
          updateStmts.push(new IfStmt(newRenderVar.equals(importExpr(resolveIdentifier(Identifiers.UNINITIALIZED))), [newRenderVar.set(emptyStateValue).toStmt()]));
          updateStmts.push(animationFnExpr.callFn([THIS_EXPR, renderNode, oldRenderVar, newRenderVar]).toStmt());
          view.detachMethod.addStmt(animationFnExpr.callFn([THIS_EXPR, renderNode, oldRenderValue, emptyStateValue]).toStmt());
          if (!_animationViewCheckedFlagMap.get(view)) {
            _animationViewCheckedFlagMap.set(view, true);
            var triggerStmt = THIS_EXPR.callMethod('triggerQueuedAnimations', []).toStmt();
            view.afterViewLifecycleCallbacksMethod.addStmt(triggerStmt);
            view.detachMethod.addStmt(triggerStmt);
          }
          break;
      }
      bind(view, currValExpr, fieldExpr, boundProp.value, context, updateStmts, view.detectChangesRenderPropertiesMethod, view.bindings.length);
    });
  }
  function sanitizedValue(boundProp, renderValue) {
    var enumValue;
    switch (boundProp.securityContext) {
      case _angular_core.SecurityContext.NONE:
        return renderValue;
      case _angular_core.SecurityContext.HTML:
        enumValue = 'HTML';
        break;
      case _angular_core.SecurityContext.STYLE:
        enumValue = 'STYLE';
        break;
      case _angular_core.SecurityContext.SCRIPT:
        enumValue = 'SCRIPT';
        break;
      case _angular_core.SecurityContext.URL:
        enumValue = 'URL';
        break;
      case _angular_core.SecurityContext.RESOURCE_URL:
        enumValue = 'RESOURCE_URL';
        break;
      default:
        throw new Error("internal error, unexpected SecurityContext " + boundProp.securityContext + ".");
    }
    var ctx = ViewProperties.viewUtils.prop('sanitizer');
    var args = [importExpr(resolveIdentifier(Identifiers.SecurityContext)).prop(enumValue), renderValue];
    return ctx.callMethod('sanitize', args);
  }
  function bindRenderInputs(boundProps, compileElement) {
    bindAndWriteToRenderer(boundProps, compileElement.view.componentContext, compileElement, false);
  }
  function bindDirectiveHostProps(directiveAst, directiveInstance, compileElement) {
    bindAndWriteToRenderer(directiveAst.hostProperties, directiveInstance, compileElement, true);
  }
  function bindDirectiveInputs(directiveAst, directiveInstance, compileElement) {
    if (directiveAst.inputs.length === 0) {
      return;
    }
    var view = compileElement.view;
    var detectChangesInInputsMethod = view.detectChangesInInputsMethod;
    detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
    var lifecycleHooks = directiveAst.directive.type.lifecycleHooks;
    var calcChangesMap = lifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1;
    var isOnPushComp = directiveAst.directive.isComponent && !isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);
    if (calcChangesMap) {
      detectChangesInInputsMethod.addStmt(DetectChangesVars.changes.set(NULL_EXPR).toStmt());
    }
    if (isOnPushComp) {
      detectChangesInInputsMethod.addStmt(DetectChangesVars.changed.set(literal(false)).toStmt());
    }
    directiveAst.inputs.forEach(function(input) {
      var bindingIndex = view.bindings.length;
      view.bindings.push(new CompileBinding(compileElement, input));
      detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);
      var fieldExpr = createBindFieldExpr(bindingIndex);
      var currValExpr = createCurrValueExpr(bindingIndex);
      var statements = [directiveInstance.prop(input.directiveName).set(currValExpr).toStmt()];
      if (calcChangesMap) {
        statements.push(new IfStmt(DetectChangesVars.changes.identical(NULL_EXPR), [DetectChangesVars.changes.set(literalMap([], new MapType(importType(resolveIdentifier(Identifiers.SimpleChange))))).toStmt()]));
        statements.push(DetectChangesVars.changes.key(literal(input.directiveName)).set(importExpr(resolveIdentifier(Identifiers.SimpleChange)).instantiate([fieldExpr, currValExpr])).toStmt());
      }
      if (isOnPushComp) {
        statements.push(DetectChangesVars.changed.set(literal(true)).toStmt());
      }
      if (view.genConfig.logBindingUpdate) {
        statements.push(logBindingUpdateStmt(compileElement.renderNode, input.directiveName, currValExpr));
      }
      bind(view, currValExpr, fieldExpr, input.value, view.componentContext, statements, detectChangesInInputsMethod, bindingIndex);
    });
    if (isOnPushComp) {
      detectChangesInInputsMethod.addStmt(new IfStmt(DetectChangesVars.changed, [compileElement.appElement.prop('componentView').callMethod('markAsCheckOnce', []).toStmt()]));
    }
  }
  function logBindingUpdateStmt(renderNode, propName, value) {
    var tryStmt = THIS_EXPR.prop('renderer').callMethod('setBindingDebugInfo', [renderNode, literal("ng-reflect-" + camelCaseToDashCase(propName)), value.isBlank().conditional(NULL_EXPR, value.callMethod('toString', []))]).toStmt();
    var catchStmt = THIS_EXPR.prop('renderer').callMethod('setBindingDebugInfo', [renderNode, literal("ng-reflect-" + camelCaseToDashCase(propName)), literal('[ERROR] Exception while trying to serialize the value')]).toStmt();
    return new TryCatchStmt([tryStmt], [catchStmt]);
  }
  function bindView(view, parsedTemplate, animationOutputs) {
    var visitor = new ViewBinderVisitor(view, animationOutputs);
    templateVisitAll(visitor, parsedTemplate);
    view.pipes.forEach(function(pipe) {
      bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view);
    });
  }
  var ViewBinderVisitor = (function() {
    function ViewBinderVisitor(view, animationOutputs) {
      var _this = this;
      this.view = view;
      this.animationOutputs = animationOutputs;
      this._nodeIndex = 0;
      this._animationOutputsMap = {};
      animationOutputs.forEach(function(entry) {
        _this._animationOutputsMap[entry.fullPropertyName] = entry;
      });
    }
    ViewBinderVisitor.prototype.visitBoundText = function(ast, parent) {
      var node = this.view.nodes[this._nodeIndex++];
      bindRenderText(ast, node, this.view);
      return null;
    };
    ViewBinderVisitor.prototype.visitText = function(ast, parent) {
      this._nodeIndex++;
      return null;
    };
    ViewBinderVisitor.prototype.visitNgContent = function(ast, parent) {
      return null;
    };
    ViewBinderVisitor.prototype.visitElement = function(ast, parent) {
      var _this = this;
      var compileElement = this.view.nodes[this._nodeIndex++];
      var eventListeners = [];
      var animationEventListeners = [];
      collectEventListeners(ast.outputs, ast.directives, compileElement).forEach(function(entry) {
        if (entry.eventName[0] == '@') {
          var animationOutputName = entry.eventName.substr(1);
          var output = _this._animationOutputsMap[animationOutputName];
          if (output) {
            animationEventListeners.push(new CompileElementAnimationOutput(entry, output));
          }
        } else {
          eventListeners.push(entry);
        }
      });
      bindAnimationOutputs(animationEventListeners);
      bindRenderInputs(ast.inputs, compileElement);
      bindRenderOutputs(eventListeners);
      ast.directives.forEach(function(directiveAst) {
        var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
        bindDirectiveInputs(directiveAst, directiveInstance, compileElement);
        bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement);
        bindDirectiveHostProps(directiveAst, directiveInstance, compileElement);
        bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners);
      });
      templateVisitAll(this, ast.children, compileElement);
      ast.directives.forEach(function(directiveAst) {
        var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
        bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
        bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
      });
      ast.providers.forEach(function(providerAst) {
        var providerInstance = compileElement.instances.get(providerAst.token.reference);
        bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
      });
      return null;
    };
    ViewBinderVisitor.prototype.visitEmbeddedTemplate = function(ast, parent) {
      var compileElement = this.view.nodes[this._nodeIndex++];
      var eventListeners = collectEventListeners(ast.outputs, ast.directives, compileElement);
      ast.directives.forEach(function(directiveAst) {
        var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
        bindDirectiveInputs(directiveAst, directiveInstance, compileElement);
        bindDirectiveDetectChangesLifecycleCallbacks(directiveAst, directiveInstance, compileElement);
        bindDirectiveOutputs(directiveAst, directiveInstance, eventListeners);
        bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
        bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
      });
      ast.providers.forEach(function(providerAst) {
        var providerInstance = compileElement.instances.get(providerAst.token.reference);
        bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
      });
      bindView(compileElement.embeddedView, ast.children, this.animationOutputs);
      return null;
    };
    ViewBinderVisitor.prototype.visitAttr = function(ast, ctx) {
      return null;
    };
    ViewBinderVisitor.prototype.visitDirective = function(ast, ctx) {
      return null;
    };
    ViewBinderVisitor.prototype.visitEvent = function(ast, eventTargetAndNames) {
      return null;
    };
    ViewBinderVisitor.prototype.visitReference = function(ast, ctx) {
      return null;
    };
    ViewBinderVisitor.prototype.visitVariable = function(ast, ctx) {
      return null;
    };
    ViewBinderVisitor.prototype.visitDirectiveProperty = function(ast, context) {
      return null;
    };
    ViewBinderVisitor.prototype.visitElementProperty = function(ast, context) {
      return null;
    };
    return ViewBinderVisitor;
  }());
  var IMPLICIT_TEMPLATE_VAR = '\$implicit';
  var CLASS_ATTR$1 = 'class';
  var STYLE_ATTR = 'style';
  var NG_CONTAINER_TAG = 'ng-container';
  var parentRenderNodeVar = variable('parentRenderNode');
  var rootSelectorVar = variable('rootSelector');
  var ViewFactoryDependency = (function() {
    function ViewFactoryDependency(comp, placeholder) {
      this.comp = comp;
      this.placeholder = placeholder;
    }
    return ViewFactoryDependency;
  }());
  var ComponentFactoryDependency = (function() {
    function ComponentFactoryDependency(comp, placeholder) {
      this.comp = comp;
      this.placeholder = placeholder;
    }
    return ComponentFactoryDependency;
  }());
  function buildView(view, template, targetDependencies) {
    var builderVisitor = new ViewBuilderVisitor(view, targetDependencies);
    templateVisitAll(builderVisitor, template, view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent);
    return builderVisitor.nestedViewCount;
  }
  function finishView(view, targetStatements) {
    view.afterNodes();
    createViewTopLevelStmts(view, targetStatements);
    view.nodes.forEach(function(node) {
      if (node instanceof CompileElement && node.hasEmbeddedView) {
        finishView(node.embeddedView, targetStatements);
      }
    });
  }
  var ViewBuilderVisitor = (function() {
    function ViewBuilderVisitor(view, targetDependencies) {
      this.view = view;
      this.targetDependencies = targetDependencies;
      this.nestedViewCount = 0;
      this._animationCompiler = new AnimationCompiler();
    }
    ViewBuilderVisitor.prototype._isRootNode = function(parent) {
      return parent.view !== this.view;
    };
    ViewBuilderVisitor.prototype._addRootNodeAndProject = function(node) {
      var projectedNode = _getOuterContainerOrSelf(node);
      var parent = projectedNode.parent;
      var ngContentIndex = projectedNode.sourceAst.ngContentIndex;
      var vcAppEl = (node instanceof CompileElement && node.hasViewContainer) ? node.appElement : null;
      if (this._isRootNode(parent)) {
        if (this.view.viewType !== ViewType.COMPONENT) {
          this.view.rootNodesOrAppElements.push(isPresent(vcAppEl) ? vcAppEl : node.renderNode);
        }
      } else if (isPresent(parent.component) && isPresent(ngContentIndex)) {
        parent.addContentNode(ngContentIndex, isPresent(vcAppEl) ? vcAppEl : node.renderNode);
      }
    };
    ViewBuilderVisitor.prototype._getParentRenderNode = function(parent) {
      parent = _getOuterContainerParentOrSelf(parent);
      if (this._isRootNode(parent)) {
        if (this.view.viewType === ViewType.COMPONENT) {
          return parentRenderNodeVar;
        } else {
          return NULL_EXPR;
        }
      } else {
        return isPresent(parent.component) && parent.component.template.encapsulation !== _angular_core.ViewEncapsulation.Native ? NULL_EXPR : parent.renderNode;
      }
    };
    ViewBuilderVisitor.prototype.visitBoundText = function(ast, parent) {
      return this._visitText(ast, '', parent);
    };
    ViewBuilderVisitor.prototype.visitText = function(ast, parent) {
      return this._visitText(ast, ast.value, parent);
    };
    ViewBuilderVisitor.prototype._visitText = function(ast, value, parent) {
      var fieldName = "_text_" + this.view.nodes.length;
      this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderText)));
      var renderNode = THIS_EXPR.prop(fieldName);
      var compileNode = new CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast);
      var createRenderNode = THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod('createText', [this._getParentRenderNode(parent), literal(value), this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast)])).toStmt();
      this.view.nodes.push(compileNode);
      this.view.createMethod.addStmt(createRenderNode);
      this._addRootNodeAndProject(compileNode);
      return renderNode;
    };
    ViewBuilderVisitor.prototype.visitNgContent = function(ast, parent) {
      this.view.createMethod.resetDebugInfo(null, ast);
      var parentRenderNode = this._getParentRenderNode(parent);
      var nodesExpression = ViewProperties.projectableNodes.key(literal(ast.index), new ArrayType(importType(this.view.genConfig.renderTypes.renderNode)));
      if (parentRenderNode !== NULL_EXPR) {
        this.view.createMethod.addStmt(ViewProperties.renderer.callMethod('projectNodes', [parentRenderNode, importExpr(resolveIdentifier(Identifiers.flattenNestedViewRenderNodes)).callFn([nodesExpression])]).toStmt());
      } else if (this._isRootNode(parent)) {
        if (this.view.viewType !== ViewType.COMPONENT) {
          this.view.rootNodesOrAppElements.push(nodesExpression);
        }
      } else {
        if (isPresent(parent.component) && isPresent(ast.ngContentIndex)) {
          parent.addContentNode(ast.ngContentIndex, nodesExpression);
        }
      }
      return null;
    };
    ViewBuilderVisitor.prototype.visitElement = function(ast, parent) {
      var _this = this;
      var nodeIndex = this.view.nodes.length;
      var createRenderNodeExpr;
      var debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);
      if (nodeIndex === 0 && this.view.viewType === ViewType.HOST) {
        createRenderNodeExpr = THIS_EXPR.callMethod('selectOrCreateHostElement', [literal(ast.name), rootSelectorVar, debugContextExpr]);
      } else {
        if (ast.name === NG_CONTAINER_TAG) {
          createRenderNodeExpr = ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), debugContextExpr]);
        } else {
          createRenderNodeExpr = ViewProperties.renderer.callMethod('createElement', [this._getParentRenderNode(parent), literal(ast.name), debugContextExpr]);
        }
      }
      var fieldName = "_el_" + nodeIndex;
      this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderElement)));
      this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());
      var renderNode = THIS_EXPR.prop(fieldName);
      var directives = ast.directives.map(function(directiveAst) {
        return directiveAst.directive;
      });
      var component = directives.find(function(directive) {
        return directive.isComponent;
      });
      var htmlAttrs = _readHtmlAttrs(ast.attrs);
      var attrNameAndValues = _mergeHtmlAndDirectiveAttrs(htmlAttrs, directives);
      for (var i = 0; i < attrNameAndValues.length; i++) {
        var attrName = attrNameAndValues[i][0];
        if (ast.name !== NG_CONTAINER_TAG) {
          var attrValue = attrNameAndValues[i][1];
          this.view.createMethod.addStmt(ViewProperties.renderer.callMethod('setElementAttribute', [renderNode, literal(attrName), literal(attrValue)]).toStmt());
        }
      }
      var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, false, ast.references);
      this.view.nodes.push(compileElement);
      var compViewExpr = null;
      if (isPresent(component)) {
        var nestedComponentIdentifier = new CompileIdentifierMetadata({name: getViewFactoryName(component, 0)});
        this.targetDependencies.push(new ViewFactoryDependency(component.type, nestedComponentIdentifier));
        var entryComponentIdentifiers = component.entryComponents.map(function(entryComponent) {
          var id = new CompileIdentifierMetadata({name: entryComponent.name});
          _this.targetDependencies.push(new ComponentFactoryDependency(entryComponent, id));
          return id;
        });
        compileElement.createComponentFactoryResolver(entryComponentIdentifiers);
        compViewExpr = variable("compView_" + nodeIndex);
        compileElement.setComponentView(compViewExpr);
        this.view.createMethod.addStmt(compViewExpr.set(importExpr(nestedComponentIdentifier).callFn([ViewProperties.viewUtils, compileElement.injector, compileElement.appElement])).toDeclStmt());
      }
      compileElement.beforeChildren();
      this._addRootNodeAndProject(compileElement);
      templateVisitAll(this, ast.children, compileElement);
      compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1);
      if (isPresent(compViewExpr)) {
        var codeGenContentNodes;
        if (this.view.component.type.isHost) {
          codeGenContentNodes = ViewProperties.projectableNodes;
        } else {
          codeGenContentNodes = literalArr(compileElement.contentNodesByNgContentIndex.map(function(nodes) {
            return createFlatArray(nodes);
          }));
        }
        this.view.createMethod.addStmt(compViewExpr.callMethod('create', [compileElement.getComponent(), codeGenContentNodes, NULL_EXPR]).toStmt());
      }
      return null;
    };
    ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function(ast, parent) {
      var nodeIndex = this.view.nodes.length;
      var fieldName = "_anchor_" + nodeIndex;
      this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderComment)));
      this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast)])).toStmt());
      var renderNode = THIS_EXPR.prop(fieldName);
      var templateVariableBindings = ast.variables.map(function(varAst) {
        return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name];
      });
      var directives = ast.directives.map(function(directiveAst) {
        return directiveAst.directive;
      });
      var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, true, ast.references);
      this.view.nodes.push(compileElement);
      var compiledAnimations = this._animationCompiler.compileComponent(this.view.component, [ast]);
      this.nestedViewCount++;
      var embeddedView = new CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, NULL_EXPR, compiledAnimations.triggers, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings);
      this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies);
      compileElement.beforeChildren();
      this._addRootNodeAndProject(compileElement);
      compileElement.afterChildren(0);
      return null;
    };
    ViewBuilderVisitor.prototype.visitAttr = function(ast, ctx) {
      return null;
    };
    ViewBuilderVisitor.prototype.visitDirective = function(ast, ctx) {
      return null;
    };
    ViewBuilderVisitor.prototype.visitEvent = function(ast, eventTargetAndNames) {
      return null;
    };
    ViewBuilderVisitor.prototype.visitReference = function(ast, ctx) {
      return null;
    };
    ViewBuilderVisitor.prototype.visitVariable = function(ast, ctx) {
      return null;
    };
    ViewBuilderVisitor.prototype.visitDirectiveProperty = function(ast, context) {
      return null;
    };
    ViewBuilderVisitor.prototype.visitElementProperty = function(ast, context) {
      return null;
    };
    return ViewBuilderVisitor;
  }());
  function _getOuterContainerOrSelf(node) {
    var view = node.view;
    while (_isNgContainer(node.parent, view)) {
      node = node.parent;
    }
    return node;
  }
  function _getOuterContainerParentOrSelf(el) {
    var view = el.view;
    while (_isNgContainer(el, view)) {
      el = el.parent;
    }
    return el;
  }
  function _isNgContainer(node, view) {
    return !node.isNull() && node.sourceAst.name === NG_CONTAINER_TAG && node.view === view;
  }
  function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {
    var result = {};
    StringMapWrapper.forEach(declaredHtmlAttrs, function(value, key) {
      result[key] = value;
    });
    directives.forEach(function(directiveMeta) {
      StringMapWrapper.forEach(directiveMeta.hostAttributes, function(value, name) {
        var prevValue = result[name];
        result[name] = isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
      });
    });
    return mapToKeyValueArray(result);
  }
  function _readHtmlAttrs(attrs) {
    var htmlAttrs = {};
    attrs.forEach(function(ast) {
      htmlAttrs[ast.name] = ast.value;
    });
    return htmlAttrs;
  }
  function mergeAttributeValue(attrName, attrValue1, attrValue2) {
    if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {
      return attrValue1 + " " + attrValue2;
    } else {
      return attrValue2;
    }
  }
  function mapToKeyValueArray(data) {
    var entryArray = [];
    StringMapWrapper.forEach(data, function(value, name) {
      entryArray.push([name, value]);
    });
    ListWrapper.sort(entryArray, function(entry1, entry2) {
      return StringWrapper.compare(entry1[0], entry2[0]);
    });
    return entryArray;
  }
  function createViewTopLevelStmts(view, targetStatements) {
    var nodeDebugInfosVar = NULL_EXPR;
    if (view.genConfig.genDebugInfo) {
      nodeDebugInfosVar = variable("nodeDebugInfos_" + view.component.type.name + view.viewIndex);
      targetStatements.push(nodeDebugInfosVar.set(literalArr(view.nodes.map(createStaticNodeDebugInfo), new ArrayType(new ExternalType(resolveIdentifier(Identifiers.StaticNodeDebugInfo)), [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]));
    }
    var renderCompTypeVar = variable("renderType_" + view.component.type.name);
    if (view.viewIndex === 0) {
      targetStatements.push(renderCompTypeVar.set(NULL_EXPR).toDeclStmt(importType(resolveIdentifier(Identifiers.RenderComponentType))));
    }
    var viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);
    targetStatements.push(viewClass);
    targetStatements.push(createViewFactory(view, viewClass, renderCompTypeVar));
  }
  function createStaticNodeDebugInfo(node) {
    var compileElement = node instanceof CompileElement ? node : null;
    var providerTokens = [];
    var componentToken = NULL_EXPR;
    var varTokenEntries = [];
    if (isPresent(compileElement)) {
      providerTokens = compileElement.getProviderTokens();
      if (isPresent(compileElement.component)) {
        componentToken = createDiTokenExpression(identifierToken(compileElement.component.type));
      }
      StringMapWrapper.forEach(compileElement.referenceTokens, function(token, varName) {
        varTokenEntries.push([varName, isPresent(token) ? createDiTokenExpression(token) : NULL_EXPR]);
      });
    }
    return importExpr(resolveIdentifier(Identifiers.StaticNodeDebugInfo)).instantiate([literalArr(providerTokens, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])), componentToken, literalMap(varTokenEntries, new MapType(DYNAMIC_TYPE, [TypeModifier.Const]))], importType(resolveIdentifier(Identifiers.StaticNodeDebugInfo), null, [TypeModifier.Const]));
  }
  function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {
    var viewConstructorArgs = [new FnParam(ViewConstructorVars.viewUtils.name, importType(resolveIdentifier(Identifiers.ViewUtils))), new FnParam(ViewConstructorVars.parentInjector.name, importType(resolveIdentifier(Identifiers.Injector))), new FnParam(ViewConstructorVars.declarationEl.name, importType(resolveIdentifier(Identifiers.AppElement)))];
    var superConstructorArgs = [variable(view.className), renderCompTypeVar, ViewTypeEnum.fromValue(view.viewType), ViewConstructorVars.viewUtils, ViewConstructorVars.parentInjector, ViewConstructorVars.declarationEl, ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view))];
    if (view.genConfig.genDebugInfo) {
      superConstructorArgs.push(nodeDebugInfosVar);
    }
    var viewConstructor = new ClassMethod(null, viewConstructorArgs, [SUPER_EXPR.callFn(superConstructorArgs).toStmt()]);
    var viewMethods = [new ClassMethod('createInternal', [new FnParam(rootSelectorVar.name, STRING_TYPE)], generateCreateMethod(view), importType(resolveIdentifier(Identifiers.AppElement))), new ClassMethod('injectorGetInternal', [new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE), new FnParam(InjectMethodVars.requestNodeIndex.name, NUMBER_TYPE), new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE)], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), InjectMethodVars.notFoundResult), DYNAMIC_TYPE), new ClassMethod('detectChangesInternal', [new FnParam(DetectChangesVars.throwOnChange.name, BOOL_TYPE)], generateDetectChangesMethod(view)), new ClassMethod('dirtyParentQueriesInternal', [], view.dirtyParentQueriesMethod.finish()), new ClassMethod('destroyInternal', [], view.destroyMethod.finish()), new ClassMethod('detachInternal', [], view.detachMethod.finish())].concat(view.eventHandlerMethods);
    var superClass = view.genConfig.genDebugInfo ? Identifiers.DebugAppView : Identifiers.AppView;
    var viewClass = new ClassStmt(view.className, importExpr(resolveIdentifier(superClass), [getContextType(view)]), view.fields, view.getters, viewConstructor, viewMethods.filter(function(method) {
      return method.body.length > 0;
    }));
    return viewClass;
  }
  function createViewFactory(view, viewClass, renderCompTypeVar) {
    var viewFactoryArgs = [new FnParam(ViewConstructorVars.viewUtils.name, importType(resolveIdentifier(Identifiers.ViewUtils))), new FnParam(ViewConstructorVars.parentInjector.name, importType(resolveIdentifier(Identifiers.Injector))), new FnParam(ViewConstructorVars.declarationEl.name, importType(resolveIdentifier(Identifiers.AppElement)))];
    var initRenderCompTypeStmts = [];
    var templateUrlInfo;
    if (view.component.template.templateUrl == view.component.type.moduleUrl) {
      templateUrlInfo = view.component.type.moduleUrl + " class " + view.component.type.name + " - inline template";
    } else {
      templateUrlInfo = view.component.template.templateUrl;
    }
    if (view.viewIndex === 0) {
      var animationsExpr = literalMap(view.animations.map(function(entry) {
        return [entry.name, entry.fnVariable];
      }));
      initRenderCompTypeStmts = [new IfStmt(renderCompTypeVar.identical(NULL_EXPR), [renderCompTypeVar.set(ViewConstructorVars.viewUtils.callMethod('createRenderComponentType', [literal(templateUrlInfo), literal(view.component.template.ngContentSelectors.length), ViewEncapsulationEnum.fromValue(view.component.template.encapsulation), view.styles, animationsExpr])).toStmt()])];
    }
    return fn(viewFactoryArgs, initRenderCompTypeStmts.concat([new ReturnStatement(variable(viewClass.name).instantiate(viewClass.constructorMethod.params.map(function(param) {
      return variable(param.name);
    })))]), importType(resolveIdentifier(Identifiers.AppView), [getContextType(view)])).toDeclStmt(view.viewFactory.name, [StmtModifier.Final]);
  }
  function generateCreateMethod(view) {
    var parentRenderNodeExpr = NULL_EXPR;
    var parentRenderNodeStmts = [];
    if (view.viewType === ViewType.COMPONENT) {
      parentRenderNodeExpr = ViewProperties.renderer.callMethod('createViewRoot', [THIS_EXPR.prop('declarationAppElement').prop('nativeElement')]);
      parentRenderNodeStmts = [parentRenderNodeVar.set(parentRenderNodeExpr).toDeclStmt(importType(view.genConfig.renderTypes.renderNode), [StmtModifier.Final])];
    }
    var resultExpr;
    if (view.viewType === ViewType.HOST) {
      resultExpr = view.nodes[0].appElement;
    } else {
      resultExpr = NULL_EXPR;
    }
    return parentRenderNodeStmts.concat(view.createMethod.finish(), [THIS_EXPR.callMethod('init', [createFlatArray(view.rootNodesOrAppElements), literalArr(view.nodes.map(function(node) {
      return node.renderNode;
    })), literalArr(view.disposables), literalArr(view.subscriptions)]).toStmt(), new ReturnStatement(resultExpr)]);
  }
  function generateDetectChangesMethod(view) {
    var stmts = [];
    if (view.detectChangesInInputsMethod.isEmpty() && view.updateContentQueriesMethod.isEmpty() && view.afterContentLifecycleCallbacksMethod.isEmpty() && view.detectChangesRenderPropertiesMethod.isEmpty() && view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty()) {
      return stmts;
    }
    ListWrapper.addAll(stmts, view.detectChangesInInputsMethod.finish());
    stmts.push(THIS_EXPR.callMethod('detectContentChildrenChanges', [DetectChangesVars.throwOnChange]).toStmt());
    var afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());
    if (afterContentStmts.length > 0) {
      stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterContentStmts));
    }
    ListWrapper.addAll(stmts, view.detectChangesRenderPropertiesMethod.finish());
    stmts.push(THIS_EXPR.callMethod('detectViewChildrenChanges', [DetectChangesVars.throwOnChange]).toStmt());
    var afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());
    if (afterViewStmts.length > 0) {
      stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterViewStmts));
    }
    var varStmts = [];
    var readVars = findReadVarNames(stmts);
    if (SetWrapper.has(readVars, DetectChangesVars.changed.name)) {
      varStmts.push(DetectChangesVars.changed.set(literal(true)).toDeclStmt(BOOL_TYPE));
    }
    if (SetWrapper.has(readVars, DetectChangesVars.changes.name)) {
      varStmts.push(DetectChangesVars.changes.set(NULL_EXPR).toDeclStmt(new MapType(importType(resolveIdentifier(Identifiers.SimpleChange)))));
    }
    if (SetWrapper.has(readVars, DetectChangesVars.valUnwrapper.name)) {
      varStmts.push(DetectChangesVars.valUnwrapper.set(importExpr(resolveIdentifier(Identifiers.ValueUnwrapper)).instantiate([])).toDeclStmt(null, [StmtModifier.Final]));
    }
    return varStmts.concat(stmts);
  }
  function addReturnValuefNotEmpty(statements, value) {
    if (statements.length > 0) {
      return statements.concat([new ReturnStatement(value)]);
    } else {
      return statements;
    }
  }
  function getContextType(view) {
    if (view.viewType === ViewType.COMPONENT) {
      return importType(view.component.type);
    }
    return DYNAMIC_TYPE;
  }
  function getChangeDetectionMode(view) {
    var mode;
    if (view.viewType === ViewType.COMPONENT) {
      mode = isDefaultChangeDetectionStrategy(view.component.changeDetection) ? ChangeDetectorStatus.CheckAlways : ChangeDetectorStatus.CheckOnce;
    } else {
      mode = ChangeDetectorStatus.CheckAlways;
    }
    return mode;
  }
  var ViewCompileResult = (function() {
    function ViewCompileResult(statements, viewFactoryVar, dependencies) {
      this.statements = statements;
      this.viewFactoryVar = viewFactoryVar;
      this.dependencies = dependencies;
    }
    return ViewCompileResult;
  }());
  var ViewCompiler = (function() {
    function ViewCompiler(_genConfig) {
      this._genConfig = _genConfig;
      this._animationCompiler = new AnimationCompiler();
    }
    ViewCompiler.prototype.compileComponent = function(component, template, styles, pipes) {
      var dependencies = [];
      var compiledAnimations = this._animationCompiler.compileComponent(component, template);
      var statements = [];
      var animationTriggers = compiledAnimations.triggers;
      animationTriggers.forEach(function(entry) {
        statements.push(entry.statesMapStatement);
        statements.push(entry.fnStatement);
      });
      var view = new CompileView(component, this._genConfig, pipes, styles, animationTriggers, 0, CompileElement.createNull(), []);
      buildView(view, template, dependencies);
      bindView(view, template, compiledAnimations.outputs);
      finishView(view, statements);
      return new ViewCompileResult(statements, view.viewFactory.name, dependencies);
    };
    ViewCompiler.decorators = [{type: _angular_core.Injectable}];
    ViewCompiler.ctorParameters = [{type: CompilerConfig}];
    return ViewCompiler;
  }());
  var SourceModule = (function() {
    function SourceModule(moduleUrl, source) {
      this.moduleUrl = moduleUrl;
      this.source = source;
    }
    return SourceModule;
  }());
  var NgModulesSummary = (function() {
    function NgModulesSummary(ngModuleByComponent) {
      this.ngModuleByComponent = ngModuleByComponent;
    }
    return NgModulesSummary;
  }());
  var OfflineCompiler = (function() {
    function OfflineCompiler(_metadataResolver, _directiveNormalizer, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _outputEmitter, _localeId, _translationFormat) {
      this._metadataResolver = _metadataResolver;
      this._directiveNormalizer = _directiveNormalizer;
      this._templateParser = _templateParser;
      this._styleCompiler = _styleCompiler;
      this._viewCompiler = _viewCompiler;
      this._ngModuleCompiler = _ngModuleCompiler;
      this._outputEmitter = _outputEmitter;
      this._localeId = _localeId;
      this._translationFormat = _translationFormat;
    }
    OfflineCompiler.prototype.analyzeModules = function(ngModules) {
      var _this = this;
      var ngModuleByComponent = new Map();
      ngModules.forEach(function(ngModule) {
        var ngModuleMeta = _this._metadataResolver.getNgModuleMetadata(ngModule);
        ngModuleMeta.declaredDirectives.forEach(function(dirMeta) {
          if (dirMeta.isComponent) {
            ngModuleByComponent.set(dirMeta.type.reference, ngModuleMeta);
          }
        });
      });
      return new NgModulesSummary(ngModuleByComponent);
    };
    OfflineCompiler.prototype.clearCache = function() {
      this._directiveNormalizer.clearCache();
      this._metadataResolver.clearCache();
    };
    OfflineCompiler.prototype.compile = function(moduleUrl, ngModulesSummary, components, ngModules) {
      var _this = this;
      var fileSuffix = _splitTypescriptSuffix(moduleUrl)[1];
      var statements = [];
      var exportedVars = [];
      var outputSourceModules = [];
      exportedVars.push.apply(exportedVars, ngModules.map(function(ngModuleType) {
        return _this._compileModule(ngModuleType, statements);
      }));
      return Promise.all(components.map(function(compType) {
        var compMeta = _this._metadataResolver.getDirectiveMetadata(compType);
        var ngModule = ngModulesSummary.ngModuleByComponent.get(compType);
        if (!ngModule) {
          throw new Error("Cannot determine the module for component " + compMeta.type.name + "!");
        }
        return Promise.all([compMeta].concat(ngModule.transitiveModule.directives).map(function(dirMeta) {
          return _this._directiveNormalizer.normalizeDirective(dirMeta).asyncResult;
        })).then(function(normalizedCompWithDirectives) {
          var compMeta = normalizedCompWithDirectives[0];
          var dirMetas = normalizedCompWithDirectives.slice(1);
          _assertComponent(compMeta);
          var stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);
          stylesCompileResults.externalStylesheets.forEach(function(compiledStyleSheet) {
            outputSourceModules.push(_this._codgenStyles(compiledStyleSheet, fileSuffix));
          });
          exportedVars.push(_this._compileComponentFactory(compMeta, fileSuffix, statements));
          exportedVars.push(_this._compileComponent(compMeta, dirMetas, ngModule.transitiveModule.pipes, ngModule.schemas, stylesCompileResults.componentStylesheet, fileSuffix, statements));
        });
      })).then(function() {
        if (statements.length > 0) {
          outputSourceModules.unshift(_this._codegenSourceModule(_ngfactoryModuleUrl(moduleUrl), statements, exportedVars));
        }
        return outputSourceModules;
      });
    };
    OfflineCompiler.prototype._compileModule = function(ngModuleType, targetStatements) {
      var ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);
      var appCompileResult = this._ngModuleCompiler.compile(ngModule, [new CompileProviderMetadata({
        token: resolveIdentifierToken(Identifiers.LOCALE_ID),
        useValue: this._localeId
      }), new CompileProviderMetadata({
        token: resolveIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),
        useValue: this._translationFormat
      })]);
      appCompileResult.dependencies.forEach(function(dep) {
        dep.placeholder.name = _componentFactoryName(dep.comp);
        dep.placeholder.moduleUrl = _ngfactoryModuleUrl(dep.comp.moduleUrl);
      });
      targetStatements.push.apply(targetStatements, appCompileResult.statements);
      return appCompileResult.ngModuleFactoryVar;
    };
    OfflineCompiler.prototype._compileComponentFactory = function(compMeta, fileSuffix, targetStatements) {
      var hostMeta = createHostComponentMeta(compMeta);
      var hostViewFactoryVar = this._compileComponent(hostMeta, [compMeta], [], [], null, fileSuffix, targetStatements);
      var compFactoryVar = _componentFactoryName(compMeta.type);
      targetStatements.push(variable(compFactoryVar).set(importExpr(resolveIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)]).instantiate([literal(compMeta.selector), variable(hostViewFactoryVar), importExpr(compMeta.type)], importType(resolveIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)], [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]));
      return compFactoryVar;
    };
    OfflineCompiler.prototype._compileComponent = function(compMeta, directives, pipes, schemas, componentStyles, fileSuffix, targetStatements) {
      var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, schemas, compMeta.type.name);
      var stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);
      var viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, pipes);
      if (componentStyles) {
        ListWrapper.addAll(targetStatements, _resolveStyleStatements(componentStyles, fileSuffix));
      }
      ListWrapper.addAll(targetStatements, _resolveViewStatements(viewResult));
      return viewResult.viewFactoryVar;
    };
    OfflineCompiler.prototype._codgenStyles = function(stylesCompileResult, fileSuffix) {
      _resolveStyleStatements(stylesCompileResult, fileSuffix);
      return this._codegenSourceModule(_stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
    };
    OfflineCompiler.prototype._codegenSourceModule = function(moduleUrl, statements, exportedVars) {
      return new SourceModule(moduleUrl, this._outputEmitter.emitStatements(moduleUrl, statements, exportedVars));
    };
    return OfflineCompiler;
  }());
  function _resolveViewStatements(compileResult) {
    compileResult.dependencies.forEach(function(dep) {
      if (dep instanceof ViewFactoryDependency) {
        var vfd = dep;
        vfd.placeholder.moduleUrl = _ngfactoryModuleUrl(vfd.comp.moduleUrl);
      } else if (dep instanceof ComponentFactoryDependency) {
        var cfd = dep;
        cfd.placeholder.name = _componentFactoryName(cfd.comp);
        cfd.placeholder.moduleUrl = _ngfactoryModuleUrl(cfd.comp.moduleUrl);
      }
    });
    return compileResult.statements;
  }
  function _resolveStyleStatements(compileResult, fileSuffix) {
    compileResult.dependencies.forEach(function(dep) {
      dep.valuePlaceholder.moduleUrl = _stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix);
    });
    return compileResult.statements;
  }
  function _ngfactoryModuleUrl(compUrl) {
    var urlWithSuffix = _splitTypescriptSuffix(compUrl);
    return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
  }
  function _componentFactoryName(comp) {
    return comp.name + "NgFactory";
  }
  function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
    return shim ? stylesheetUrl + ".shim" + suffix : "" + stylesheetUrl + suffix;
  }
  function _assertComponent(meta) {
    if (!meta.isComponent) {
      throw new Error("Could not compile '" + meta.type.name + "' because it is not a component.");
    }
  }
  function _splitTypescriptSuffix(path) {
    if (/\.d\.ts$/.test(path)) {
      return [path.substring(0, path.length - 5), '.ts'];
    }
    var lastDot = path.lastIndexOf('.');
    if (lastDot !== -1) {
      return [path.substring(0, lastDot), path.substring(lastDot)];
    } else {
      return [path, ''];
    }
  }
  var ResourceLoader = (function() {
    function ResourceLoader() {}
    ResourceLoader.prototype.get = function(url) {
      return null;
    };
    return ResourceLoader;
  }());
  var _ASSET_SCHEME = 'asset:';
  function createOfflineCompileUrlResolver() {
    return new UrlResolver(_ASSET_SCHEME);
  }
  var DEFAULT_PACKAGE_URL_PROVIDER = {
    provide: _angular_core.PACKAGE_ROOT_URL,
    useValue: '/'
  };
  var UrlResolver = (function() {
    function UrlResolver(_packagePrefix) {
      if (_packagePrefix === void 0) {
        _packagePrefix = null;
      }
      this._packagePrefix = _packagePrefix;
    }
    UrlResolver.prototype.resolve = function(baseUrl, url) {
      var resolvedUrl = url;
      if (isPresent(baseUrl) && baseUrl.length > 0) {
        resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
      }
      var resolvedParts = _split(resolvedUrl);
      var prefix = this._packagePrefix;
      if (isPresent(prefix) && isPresent(resolvedParts) && resolvedParts[_ComponentIndex.Scheme] == 'package') {
        var path = resolvedParts[_ComponentIndex.Path];
        if (this._packagePrefix === _ASSET_SCHEME) {
          var pathSegements = path.split(/\//);
          resolvedUrl = "asset:" + pathSegements[0] + "/lib/" + pathSegements.slice(1).join('/');
        } else {
          prefix = StringWrapper.stripRight(prefix, '/');
          path = StringWrapper.stripLeft(path, '/');
          return prefix + "/" + path;
        }
      }
      return resolvedUrl;
    };
    UrlResolver.decorators = [{type: _angular_core.Injectable}];
    UrlResolver.ctorParameters = [{
      type: undefined,
      decorators: [{
        type: _angular_core.Inject,
        args: [_angular_core.PACKAGE_ROOT_URL]
      }]
    }];
    return UrlResolver;
  }());
  function getUrlScheme(url) {
    var match = _split(url);
    return (match && match[_ComponentIndex.Scheme]) || '';
  }
  function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
    var out = [];
    if (isPresent(opt_scheme)) {
      out.push(opt_scheme + ':');
    }
    if (isPresent(opt_domain)) {
      out.push('//');
      if (isPresent(opt_userInfo)) {
        out.push(opt_userInfo + '@');
      }
      out.push(opt_domain);
      if (isPresent(opt_port)) {
        out.push(':' + opt_port);
      }
    }
    if (isPresent(opt_path)) {
      out.push(opt_path);
    }
    if (isPresent(opt_queryData)) {
      out.push('?' + opt_queryData);
    }
    if (isPresent(opt_fragment)) {
      out.push('#' + opt_fragment);
    }
    return out.join('');
  }
  var _splitRe = new RegExp('^' + '(?:' + '([^:/?#.]+)' + ':)?' + '(?://' + '(?:([^/?#]*)@)?' + '([\\w\\d\\-\\u0100-\\uffff.%]*)' + '(?::([0-9]+))?' + ')?' + '([^?#]+)?' + '(?:\\?([^#]*))?' + '(?:#(.*))?' + '$');
  var _ComponentIndex;
  (function(_ComponentIndex) {
    _ComponentIndex[_ComponentIndex["Scheme"] = 1] = "Scheme";
    _ComponentIndex[_ComponentIndex["UserInfo"] = 2] = "UserInfo";
    _ComponentIndex[_ComponentIndex["Domain"] = 3] = "Domain";
    _ComponentIndex[_ComponentIndex["Port"] = 4] = "Port";
    _ComponentIndex[_ComponentIndex["Path"] = 5] = "Path";
    _ComponentIndex[_ComponentIndex["QueryData"] = 6] = "QueryData";
    _ComponentIndex[_ComponentIndex["Fragment"] = 7] = "Fragment";
  })(_ComponentIndex || (_ComponentIndex = {}));
  function _split(uri) {
    return uri.match(_splitRe);
  }
  function _removeDotSegments(path) {
    if (path == '/')
      return '/';
    var leadingSlash = path[0] == '/' ? '/' : '';
    var trailingSlash = path[path.length - 1] === '/' ? '/' : '';
    var segments = path.split('/');
    var out = [];
    var up = 0;
    for (var pos = 0; pos < segments.length; pos++) {
      var segment = segments[pos];
      switch (segment) {
        case '':
        case '.':
          break;
        case '..':
          if (out.length > 0) {
            out.pop();
          } else {
            up++;
          }
          break;
        default:
          out.push(segment);
      }
    }
    if (leadingSlash == '') {
      while (up-- > 0) {
        out.unshift('..');
      }
      if (out.length === 0)
        out.push('.');
    }
    return leadingSlash + out.join('/') + trailingSlash;
  }
  function _joinAndCanonicalizePath(parts) {
    var path = parts[_ComponentIndex.Path];
    path = isBlank(path) ? '' : _removeDotSegments(path);
    parts[_ComponentIndex.Path] = path;
    return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
  }
  function _resolveUrl(base, url) {
    var parts = _split(encodeURI(url));
    var baseParts = _split(base);
    if (isPresent(parts[_ComponentIndex.Scheme])) {
      return _joinAndCanonicalizePath(parts);
    } else {
      parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
    }
    for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
      if (isBlank(parts[i])) {
        parts[i] = baseParts[i];
      }
    }
    if (parts[_ComponentIndex.Path][0] == '/') {
      return _joinAndCanonicalizePath(parts);
    }
    var path = baseParts[_ComponentIndex.Path];
    if (isBlank(path))
      path = '/';
    var index = path.lastIndexOf('/');
    path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
    parts[_ComponentIndex.Path] = path;
    return _joinAndCanonicalizePath(parts);
  }
  var DirectiveNormalizer = (function() {
    function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {
      this._resourceLoader = _resourceLoader;
      this._urlResolver = _urlResolver;
      this._htmlParser = _htmlParser;
      this._config = _config;
      this._resourceLoaderCache = new Map();
    }
    DirectiveNormalizer.prototype.clearCache = function() {
      this._resourceLoaderCache.clear();
    };
    DirectiveNormalizer.prototype.clearCacheFor = function(normalizedDirective) {
      var _this = this;
      if (!normalizedDirective.isComponent) {
        return;
      }
      this._resourceLoaderCache.delete(normalizedDirective.template.templateUrl);
      normalizedDirective.template.externalStylesheets.forEach(function(stylesheet) {
        _this._resourceLoaderCache.delete(stylesheet.moduleUrl);
      });
    };
    DirectiveNormalizer.prototype._fetch = function(url) {
      var result = this._resourceLoaderCache.get(url);
      if (!result) {
        result = this._resourceLoader.get(url);
        this._resourceLoaderCache.set(url, result);
      }
      return result;
    };
    DirectiveNormalizer.prototype.normalizeDirective = function(directive) {
      var _this = this;
      if (!directive.isComponent) {
        return new SyncAsyncResult(directive, Promise.resolve(directive));
      }
      var normalizedTemplateSync = null;
      var normalizedTemplateAsync;
      if (isPresent(directive.template.template)) {
        normalizedTemplateSync = this.normalizeTemplateSync(directive.type, directive.template);
        normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
      } else if (directive.template.templateUrl) {
        normalizedTemplateAsync = this.normalizeTemplateAsync(directive.type, directive.template);
      } else {
        throw new Error("No template specified for component " + directive.type.name);
      }
      if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {
        var normalizedDirective = _cloneDirectiveWithTemplate(directive, normalizedTemplateSync);
        return new SyncAsyncResult(normalizedDirective, Promise.resolve(normalizedDirective));
      } else {
        return new SyncAsyncResult(null, normalizedTemplateAsync.then(function(normalizedTemplate) {
          return _this.normalizeExternalStylesheets(normalizedTemplate);
        }).then(function(normalizedTemplate) {
          return _cloneDirectiveWithTemplate(directive, normalizedTemplate);
        }));
      }
    };
    DirectiveNormalizer.prototype.normalizeTemplateSync = function(directiveType, template) {
      return this.normalizeLoadedTemplate(directiveType, template, template.template, directiveType.moduleUrl);
    };
    DirectiveNormalizer.prototype.normalizeTemplateAsync = function(directiveType, template) {
      var _this = this;
      var templateUrl = this._urlResolver.resolve(directiveType.moduleUrl, template.templateUrl);
      return this._fetch(templateUrl).then(function(value) {
        return _this.normalizeLoadedTemplate(directiveType, template, value, templateUrl);
      });
    };
    DirectiveNormalizer.prototype.normalizeLoadedTemplate = function(directiveType, templateMeta, template, templateAbsUrl) {
      var interpolationConfig = InterpolationConfig.fromArray(templateMeta.interpolation);
      var rootNodesAndErrors = this._htmlParser.parse(template, directiveType.name, false, interpolationConfig);
      if (rootNodesAndErrors.errors.length > 0) {
        var errorString = rootNodesAndErrors.errors.join('\n');
        throw new Error("Template parse errors:\n" + errorString);
      }
      var templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
        styles: templateMeta.styles,
        styleUrls: templateMeta.styleUrls,
        moduleUrl: directiveType.moduleUrl
      }));
      var visitor = new TemplatePreparseVisitor();
      visitAll(visitor, rootNodesAndErrors.rootNodes);
      var templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
        styles: visitor.styles,
        styleUrls: visitor.styleUrls,
        moduleUrl: templateAbsUrl
      }));
      var allStyles = templateMetadataStyles.styles.concat(templateStyles.styles);
      var allStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);
      var encapsulation = templateMeta.encapsulation;
      if (isBlank(encapsulation)) {
        encapsulation = this._config.defaultEncapsulation;
      }
      if (encapsulation === _angular_core.ViewEncapsulation.Emulated && allStyles.length === 0 && allStyleUrls.length === 0) {
        encapsulation = _angular_core.ViewEncapsulation.None;
      }
      return new CompileTemplateMetadata({
        encapsulation: encapsulation,
        template: template,
        templateUrl: templateAbsUrl,
        styles: allStyles,
        styleUrls: allStyleUrls,
        externalStylesheets: templateMeta.externalStylesheets,
        ngContentSelectors: visitor.ngContentSelectors,
        animations: templateMeta.animations,
        interpolation: templateMeta.interpolation
      });
    };
    DirectiveNormalizer.prototype.normalizeExternalStylesheets = function(templateMeta) {
      return this._loadMissingExternalStylesheets(templateMeta.styleUrls).then(function(externalStylesheets) {
        return new CompileTemplateMetadata({
          encapsulation: templateMeta.encapsulation,
          template: templateMeta.template,
          templateUrl: templateMeta.templateUrl,
          styles: templateMeta.styles,
          styleUrls: templateMeta.styleUrls,
          externalStylesheets: externalStylesheets,
          ngContentSelectors: templateMeta.ngContentSelectors,
          animations: templateMeta.animations,
          interpolation: templateMeta.interpolation
        });
      });
    };
    DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function(styleUrls, loadedStylesheets) {
      var _this = this;
      if (loadedStylesheets === void 0) {
        loadedStylesheets = new Map();
      }
      return Promise.all(styleUrls.filter(function(styleUrl) {
        return !loadedStylesheets.has(styleUrl);
      }).map(function(styleUrl) {
        return _this._fetch(styleUrl).then(function(loadedStyle) {
          var stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({
            styles: [loadedStyle],
            moduleUrl: styleUrl
          }));
          loadedStylesheets.set(styleUrl, stylesheet);
          return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
        });
      })).then(function(_) {
        return MapWrapper.values(loadedStylesheets);
      });
    };
    DirectiveNormalizer.prototype.normalizeStylesheet = function(stylesheet) {
      var _this = this;
      var allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable).map(function(url) {
        return _this._urlResolver.resolve(stylesheet.moduleUrl, url);
      });
      var allStyles = stylesheet.styles.map(function(style) {
        var styleWithImports = extractStyleUrls(_this._urlResolver, stylesheet.moduleUrl, style);
        allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);
        return styleWithImports.style;
      });
      return new CompileStylesheetMetadata({
        styles: allStyles,
        styleUrls: allStyleUrls,
        moduleUrl: stylesheet.moduleUrl
      });
    };
    DirectiveNormalizer.decorators = [{type: _angular_core.Injectable}];
    DirectiveNormalizer.ctorParameters = [{type: ResourceLoader}, {type: UrlResolver}, {type: HtmlParser}, {type: CompilerConfig}];
    return DirectiveNormalizer;
  }());
  var TemplatePreparseVisitor = (function() {
    function TemplatePreparseVisitor() {
      this.ngContentSelectors = [];
      this.styles = [];
      this.styleUrls = [];
      this.ngNonBindableStackCount = 0;
    }
    TemplatePreparseVisitor.prototype.visitElement = function(ast, context) {
      var preparsedElement = preparseElement(ast);
      switch (preparsedElement.type) {
        case PreparsedElementType.NG_CONTENT:
          if (this.ngNonBindableStackCount === 0) {
            this.ngContentSelectors.push(preparsedElement.selectAttr);
          }
          break;
        case PreparsedElementType.STYLE:
          var textContent = '';
          ast.children.forEach(function(child) {
            if (child instanceof Text) {
              textContent += child.value;
            }
          });
          this.styles.push(textContent);
          break;
        case PreparsedElementType.STYLESHEET:
          this.styleUrls.push(preparsedElement.hrefAttr);
          break;
        default:
          break;
      }
      if (preparsedElement.nonBindable) {
        this.ngNonBindableStackCount++;
      }
      visitAll(this, ast.children);
      if (preparsedElement.nonBindable) {
        this.ngNonBindableStackCount--;
      }
      return null;
    };
    TemplatePreparseVisitor.prototype.visitComment = function(ast, context) {
      return null;
    };
    TemplatePreparseVisitor.prototype.visitAttribute = function(ast, context) {
      return null;
    };
    TemplatePreparseVisitor.prototype.visitText = function(ast, context) {
      return null;
    };
    TemplatePreparseVisitor.prototype.visitExpansion = function(ast, context) {
      return null;
    };
    TemplatePreparseVisitor.prototype.visitExpansionCase = function(ast, context) {
      return null;
    };
    return TemplatePreparseVisitor;
  }());
  function _cloneDirectiveWithTemplate(directive, template) {
    return new CompileDirectiveMetadata({
      type: directive.type,
      isComponent: directive.isComponent,
      selector: directive.selector,
      exportAs: directive.exportAs,
      changeDetection: directive.changeDetection,
      inputs: directive.inputs,
      outputs: directive.outputs,
      hostListeners: directive.hostListeners,
      hostProperties: directive.hostProperties,
      hostAttributes: directive.hostAttributes,
      providers: directive.providers,
      viewProviders: directive.viewProviders,
      queries: directive.queries,
      viewQueries: directive.viewQueries,
      entryComponents: directive.entryComponents,
      template: template
    });
  }
  function _isDirectiveMetadata(type) {
    return type instanceof _angular_core.DirectiveMetadata;
  }
  var DirectiveResolver = (function() {
    function DirectiveResolver(_reflector) {
      if (_reflector === void 0) {
        _reflector = reflector;
      }
      this._reflector = _reflector;
    }
    DirectiveResolver.prototype.resolve = function(type, throwIfNotFound) {
      if (throwIfNotFound === void 0) {
        throwIfNotFound = true;
      }
      var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
      if (isPresent(typeMetadata)) {
        var metadata = typeMetadata.find(_isDirectiveMetadata);
        if (isPresent(metadata)) {
          var propertyMetadata = this._reflector.propMetadata(type);
          return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
        }
      }
      if (throwIfNotFound) {
        throw new Error("No Directive annotation found on " + stringify(type));
      }
      return null;
    };
    DirectiveResolver.prototype._mergeWithPropertyMetadata = function(dm, propertyMetadata, directiveType) {
      var inputs = [];
      var outputs = [];
      var host = {};
      var queries = {};
      StringMapWrapper.forEach(propertyMetadata, function(metadata, propName) {
        metadata.forEach(function(a) {
          if (a instanceof _angular_core.InputMetadata) {
            if (isPresent(a.bindingPropertyName)) {
              inputs.push(propName + ": " + a.bindingPropertyName);
            } else {
              inputs.push(propName);
            }
          } else if (a instanceof _angular_core.OutputMetadata) {
            if (isPresent(a.bindingPropertyName)) {
              outputs.push(propName + ": " + a.bindingPropertyName);
            } else {
              outputs.push(propName);
            }
          } else if (a instanceof _angular_core.HostBindingMetadata) {
            if (isPresent(a.hostPropertyName)) {
              host[("[" + a.hostPropertyName + "]")] = propName;
            } else {
              host[("[" + propName + "]")] = propName;
            }
          } else if (a instanceof _angular_core.HostListenerMetadata) {
            var args = isPresent(a.args) ? a.args.join(', ') : '';
            host[("(" + a.eventName + ")")] = propName + "(" + args + ")";
          } else if (a instanceof _angular_core.QueryMetadata) {
            queries[propName] = a;
          }
        });
      });
      return this._merge(dm, inputs, outputs, host, queries, directiveType);
    };
    DirectiveResolver.prototype._extractPublicName = function(def) {
      return splitAtColon(def, [null, def])[1].trim();
    };
    DirectiveResolver.prototype._merge = function(dm, inputs, outputs, host, queries, directiveType) {
      var _this = this;
      var mergedInputs;
      if (isPresent(dm.inputs)) {
        var inputNames_1 = dm.inputs.map(function(def) {
          return _this._extractPublicName(def);
        });
        inputs.forEach(function(inputDef) {
          var publicName = _this._extractPublicName(inputDef);
          if (inputNames_1.indexOf(publicName) > -1) {
            throw new Error("Input '" + publicName + "' defined multiple times in '" + stringify(directiveType) + "'");
          }
        });
        mergedInputs = dm.inputs.concat(inputs);
      } else {
        mergedInputs = inputs;
      }
      var mergedOutputs;
      if (isPresent(dm.outputs)) {
        var outputNames_1 = dm.outputs.map(function(def) {
          return _this._extractPublicName(def);
        });
        outputs.forEach(function(outputDef) {
          var publicName = _this._extractPublicName(outputDef);
          if (outputNames_1.indexOf(publicName) > -1) {
            throw new Error("Output event '" + publicName + "' defined multiple times in '" + stringify(directiveType) + "'");
          }
        });
        mergedOutputs = dm.outputs.concat(outputs);
      } else {
        mergedOutputs = outputs;
      }
      var mergedHost = isPresent(dm.host) ? StringMapWrapper.merge(dm.host, host) : host;
      var mergedQueries = isPresent(dm.queries) ? StringMapWrapper.merge(dm.queries, queries) : queries;
      if (dm instanceof _angular_core.ComponentMetadata) {
        return new _angular_core.ComponentMetadata({
          selector: dm.selector,
          inputs: mergedInputs,
          outputs: mergedOutputs,
          host: mergedHost,
          exportAs: dm.exportAs,
          moduleId: dm.moduleId,
          queries: mergedQueries,
          changeDetection: dm.changeDetection,
          providers: dm.providers,
          viewProviders: dm.viewProviders,
          entryComponents: dm.entryComponents,
          template: dm.template,
          templateUrl: dm.templateUrl,
          styles: dm.styles,
          styleUrls: dm.styleUrls,
          encapsulation: dm.encapsulation,
          animations: dm.animations,
          interpolation: dm.interpolation
        });
      } else {
        return new _angular_core.DirectiveMetadata({
          selector: dm.selector,
          inputs: mergedInputs,
          outputs: mergedOutputs,
          host: mergedHost,
          exportAs: dm.exportAs,
          queries: mergedQueries,
          providers: dm.providers
        });
      }
    };
    DirectiveResolver.decorators = [{type: _angular_core.Injectable}];
    DirectiveResolver.ctorParameters = [{type: ReflectorReader}];
    return DirectiveResolver;
  }());
  var LIFECYCLE_INTERFACES = MapWrapper.createFromPairs([[LifecycleHooks.OnInit, _angular_core.OnInit], [LifecycleHooks.OnDestroy, _angular_core.OnDestroy], [LifecycleHooks.DoCheck, _angular_core.DoCheck], [LifecycleHooks.OnChanges, _angular_core.OnChanges], [LifecycleHooks.AfterContentInit, _angular_core.AfterContentInit], [LifecycleHooks.AfterContentChecked, _angular_core.AfterContentChecked], [LifecycleHooks.AfterViewInit, _angular_core.AfterViewInit], [LifecycleHooks.AfterViewChecked, _angular_core.AfterViewChecked]]);
  var LIFECYCLE_PROPS = MapWrapper.createFromPairs([[LifecycleHooks.OnInit, 'ngOnInit'], [LifecycleHooks.OnDestroy, 'ngOnDestroy'], [LifecycleHooks.DoCheck, 'ngDoCheck'], [LifecycleHooks.OnChanges, 'ngOnChanges'], [LifecycleHooks.AfterContentInit, 'ngAfterContentInit'], [LifecycleHooks.AfterContentChecked, 'ngAfterContentChecked'], [LifecycleHooks.AfterViewInit, 'ngAfterViewInit'], [LifecycleHooks.AfterViewChecked, 'ngAfterViewChecked']]);
  function hasLifecycleHook(hook, token) {
    var lcInterface = LIFECYCLE_INTERFACES.get(hook);
    var lcProp = LIFECYCLE_PROPS.get(hook);
    return reflector.hasLifecycleHook(token, lcInterface, lcProp);
  }
  function _isNgModuleMetadata(obj) {
    return obj instanceof _angular_core.NgModuleMetadata;
  }
  var NgModuleResolver = (function() {
    function NgModuleResolver(_reflector) {
      if (_reflector === void 0) {
        _reflector = reflector;
      }
      this._reflector = _reflector;
    }
    NgModuleResolver.prototype.resolve = function(type, throwIfNotFound) {
      if (throwIfNotFound === void 0) {
        throwIfNotFound = true;
      }
      var ngModuleMeta = this._reflector.annotations(type).find(_isNgModuleMetadata);
      if (isPresent(ngModuleMeta)) {
        return ngModuleMeta;
      } else {
        if (throwIfNotFound) {
          throw new Error("No NgModule metadata found for '" + stringify(type) + "'.");
        }
        return null;
      }
    };
    NgModuleResolver.decorators = [{type: _angular_core.Injectable}];
    NgModuleResolver.ctorParameters = [{type: ReflectorReader}];
    return NgModuleResolver;
  }());
  function _isPipeMetadata(type) {
    return type instanceof _angular_core.PipeMetadata;
  }
  var PipeResolver = (function() {
    function PipeResolver(_reflector) {
      if (_reflector === void 0) {
        _reflector = reflector;
      }
      this._reflector = _reflector;
    }
    PipeResolver.prototype.resolve = function(type, throwIfNotFound) {
      if (throwIfNotFound === void 0) {
        throwIfNotFound = true;
      }
      var metas = this._reflector.annotations(_angular_core.resolveForwardRef(type));
      if (isPresent(metas)) {
        var annotation = metas.find(_isPipeMetadata);
        if (isPresent(annotation)) {
          return annotation;
        }
      }
      if (throwIfNotFound) {
        throw new Error("No Pipe decorator found on " + stringify(type));
      }
      return null;
    };
    PipeResolver.decorators = [{type: _angular_core.Injectable}];
    PipeResolver.ctorParameters = [{type: ReflectorReader}];
    return PipeResolver;
  }());
  var __extends$14 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var CompileMetadataResolver = (function() {
    function CompileMetadataResolver(_ngModuleResolver, _directiveResolver, _pipeResolver, _schemaRegistry, _reflector) {
      if (_reflector === void 0) {
        _reflector = reflector;
      }
      this._ngModuleResolver = _ngModuleResolver;
      this._directiveResolver = _directiveResolver;
      this._pipeResolver = _pipeResolver;
      this._schemaRegistry = _schemaRegistry;
      this._reflector = _reflector;
      this._directiveCache = new Map();
      this._pipeCache = new Map();
      this._ngModuleCache = new Map();
      this._ngModuleOfTypes = new Map();
      this._anonymousTypes = new Map();
      this._anonymousTypeIndex = 0;
    }
    CompileMetadataResolver.prototype.sanitizeTokenName = function(token) {
      var identifier = stringify(token);
      if (identifier.indexOf('(') >= 0) {
        var found = this._anonymousTypes.get(token);
        if (isBlank(found)) {
          this._anonymousTypes.set(token, this._anonymousTypeIndex++);
          found = this._anonymousTypes.get(token);
        }
        identifier = "anonymous_token_" + found + "_";
      }
      return sanitizeIdentifier(identifier);
    };
    CompileMetadataResolver.prototype.clearCacheFor = function(type) {
      this._directiveCache.delete(type);
      this._pipeCache.delete(type);
      this._ngModuleOfTypes.delete(type);
      this._ngModuleCache.clear();
    };
    CompileMetadataResolver.prototype.clearCache = function() {
      this._directiveCache.clear();
      this._pipeCache.clear();
      this._ngModuleCache.clear();
      this._ngModuleOfTypes.clear();
    };
    CompileMetadataResolver.prototype.getAnimationEntryMetadata = function(entry) {
      var _this = this;
      var defs = entry.definitions.map(function(def) {
        return _this.getAnimationStateMetadata(def);
      });
      return new CompileAnimationEntryMetadata(entry.name, defs);
    };
    CompileMetadataResolver.prototype.getAnimationStateMetadata = function(value) {
      if (value instanceof _angular_core.AnimationStateDeclarationMetadata) {
        var styles = this.getAnimationStyleMetadata(value.styles);
        return new CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles);
      } else if (value instanceof _angular_core.AnimationStateTransitionMetadata) {
        return new CompileAnimationStateTransitionMetadata(value.stateChangeExpr, this.getAnimationMetadata(value.steps));
      }
      return null;
    };
    CompileMetadataResolver.prototype.getAnimationStyleMetadata = function(value) {
      return new CompileAnimationStyleMetadata(value.offset, value.styles);
    };
    CompileMetadataResolver.prototype.getAnimationMetadata = function(value) {
      var _this = this;
      if (value instanceof _angular_core.AnimationStyleMetadata) {
        return this.getAnimationStyleMetadata(value);
      } else if (value instanceof _angular_core.AnimationKeyframesSequenceMetadata) {
        return new CompileAnimationKeyframesSequenceMetadata(value.steps.map(function(entry) {
          return _this.getAnimationStyleMetadata(entry);
        }));
      } else if (value instanceof _angular_core.AnimationAnimateMetadata) {
        var animateData = this.getAnimationMetadata(value.styles);
        return new CompileAnimationAnimateMetadata(value.timings, animateData);
      } else if (value instanceof _angular_core.AnimationWithStepsMetadata) {
        var steps = value.steps.map(function(step) {
          return _this.getAnimationMetadata(step);
        });
        if (value instanceof _angular_core.AnimationGroupMetadata) {
          return new CompileAnimationGroupMetadata(steps);
        } else {
          return new CompileAnimationSequenceMetadata(steps);
        }
      }
      return null;
    };
    CompileMetadataResolver.prototype.getDirectiveMetadata = function(directiveType, throwIfNotFound) {
      var _this = this;
      if (throwIfNotFound === void 0) {
        throwIfNotFound = true;
      }
      directiveType = _angular_core.resolveForwardRef(directiveType);
      var meta = this._directiveCache.get(directiveType);
      if (isBlank(meta)) {
        var dirMeta = this._directiveResolver.resolve(directiveType, throwIfNotFound);
        if (!dirMeta) {
          return null;
        }
        var templateMeta = null;
        var changeDetectionStrategy = null;
        var viewProviders = [];
        var moduleUrl = staticTypeModuleUrl(directiveType);
        var entryComponentMetadata = [];
        var selector = dirMeta.selector;
        if (dirMeta instanceof _angular_core.ComponentMetadata) {
          var cmpMeta = dirMeta;
          assertArrayOfStrings('styles', cmpMeta.styles);
          assertInterpolationSymbols('interpolation', cmpMeta.interpolation);
          var animations = isPresent(cmpMeta.animations) ? cmpMeta.animations.map(function(e) {
            return _this.getAnimationEntryMetadata(e);
          }) : null;
          assertArrayOfStrings('styles', cmpMeta.styles);
          assertArrayOfStrings('styleUrls', cmpMeta.styleUrls);
          templateMeta = new CompileTemplateMetadata({
            encapsulation: cmpMeta.encapsulation,
            template: cmpMeta.template,
            templateUrl: cmpMeta.templateUrl,
            styles: cmpMeta.styles,
            styleUrls: cmpMeta.styleUrls,
            animations: animations,
            interpolation: cmpMeta.interpolation
          });
          changeDetectionStrategy = cmpMeta.changeDetection;
          if (isPresent(dirMeta.viewProviders)) {
            viewProviders = this.getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, "viewProviders for \"" + stringify(directiveType) + "\"");
          }
          moduleUrl = componentModuleUrl(this._reflector, directiveType, cmpMeta);
          if (cmpMeta.entryComponents) {
            entryComponentMetadata = flattenArray(cmpMeta.entryComponents).map(function(type) {
              return _this.getTypeMetadata(type, staticTypeModuleUrl(type));
            }).concat(entryComponentMetadata);
          }
          if (!selector) {
            selector = this._schemaRegistry.getDefaultComponentElementName();
          }
        } else {
          if (!selector) {
            throw new Error("Directive " + stringify(directiveType) + " has no selector, please add it!");
          }
        }
        var providers = [];
        if (isPresent(dirMeta.providers)) {
          providers = this.getProvidersMetadata(dirMeta.providers, entryComponentMetadata, "providers for \"" + stringify(directiveType) + "\"");
        }
        var queries = [];
        var viewQueries = [];
        if (isPresent(dirMeta.queries)) {
          queries = this.getQueriesMetadata(dirMeta.queries, false, directiveType);
          viewQueries = this.getQueriesMetadata(dirMeta.queries, true, directiveType);
        }
        meta = CompileDirectiveMetadata.create({
          selector: selector,
          exportAs: dirMeta.exportAs,
          isComponent: isPresent(templateMeta),
          type: this.getTypeMetadata(directiveType, moduleUrl),
          template: templateMeta,
          changeDetection: changeDetectionStrategy,
          inputs: dirMeta.inputs,
          outputs: dirMeta.outputs,
          host: dirMeta.host,
          providers: providers,
          viewProviders: viewProviders,
          queries: queries,
          viewQueries: viewQueries,
          entryComponents: entryComponentMetadata
        });
        this._directiveCache.set(directiveType, meta);
      }
      return meta;
    };
    CompileMetadataResolver.prototype.getNgModuleMetadata = function(moduleType, throwIfNotFound) {
      var _this = this;
      if (throwIfNotFound === void 0) {
        throwIfNotFound = true;
      }
      moduleType = _angular_core.resolveForwardRef(moduleType);
      var compileMeta = this._ngModuleCache.get(moduleType);
      if (!compileMeta) {
        var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
        if (!meta) {
          return null;
        }
        var declaredDirectives_1 = [];
        var exportedDirectives_1 = [];
        var declaredPipes_1 = [];
        var exportedPipes_1 = [];
        var importedModules_1 = [];
        var exportedModules_1 = [];
        var providers_1 = [];
        var entryComponents_1 = [];
        var bootstrapComponents = [];
        var schemas = [];
        if (meta.imports) {
          flattenArray(meta.imports).forEach(function(importedType) {
            var importedModuleType;
            if (isValidType(importedType)) {
              importedModuleType = importedType;
            } else if (importedType && importedType.ngModule) {
              var moduleWithProviders = importedType;
              importedModuleType = moduleWithProviders.ngModule;
              if (moduleWithProviders.providers) {
                providers_1.push.apply(providers_1, _this.getProvidersMetadata(moduleWithProviders.providers, entryComponents_1, "provider for the NgModule '" + stringify(importedModuleType) + "'"));
              }
            }
            if (importedModuleType) {
              var importedMeta = _this.getNgModuleMetadata(importedModuleType, false);
              if (importedMeta === null) {
                throw new Error("Unexpected " + _this._getTypeDescriptor(importedType) + " '" + stringify(importedType) + "' imported by the module '" + stringify(moduleType) + "'");
              }
              importedModules_1.push(importedMeta);
            } else {
              throw new Error("Unexpected value '" + stringify(importedType) + "' imported by the module '" + stringify(moduleType) + "'");
            }
          });
        }
        if (meta.exports) {
          flattenArray(meta.exports).forEach(function(exportedType) {
            if (!isValidType(exportedType)) {
              throw new Error("Unexpected value '" + stringify(exportedType) + "' exported by the module '" + stringify(moduleType) + "'");
            }
            var exportedDirMeta;
            var exportedPipeMeta;
            var exportedModuleMeta;
            if (exportedDirMeta = _this.getDirectiveMetadata(exportedType, false)) {
              exportedDirectives_1.push(exportedDirMeta);
            } else if (exportedPipeMeta = _this.getPipeMetadata(exportedType, false)) {
              exportedPipes_1.push(exportedPipeMeta);
            } else if (exportedModuleMeta = _this.getNgModuleMetadata(exportedType, false)) {
              exportedModules_1.push(exportedModuleMeta);
            } else {
              throw new Error("Unexpected " + _this._getTypeDescriptor(exportedType) + " '" + stringify(exportedType) + "' exported by the module '" + stringify(moduleType) + "'");
            }
          });
        }
        var transitiveModule_1 = this._getTransitiveNgModuleMetadata(importedModules_1, exportedModules_1);
        if (meta.declarations) {
          flattenArray(meta.declarations).forEach(function(declaredType) {
            if (!isValidType(declaredType)) {
              throw new Error("Unexpected value '" + stringify(declaredType) + "' declared by the module '" + stringify(moduleType) + "'");
            }
            var declaredDirMeta;
            var declaredPipeMeta;
            if (declaredDirMeta = _this.getDirectiveMetadata(declaredType, false)) {
              _this._addDirectiveToModule(declaredDirMeta, moduleType, transitiveModule_1, declaredDirectives_1, true);
            } else if (declaredPipeMeta = _this.getPipeMetadata(declaredType, false)) {
              _this._addPipeToModule(declaredPipeMeta, moduleType, transitiveModule_1, declaredPipes_1, true);
            } else {
              throw new Error("Unexpected " + _this._getTypeDescriptor(declaredType) + " '" + stringify(declaredType) + "' declared by the module '" + stringify(moduleType) + "'");
            }
          });
        }
        if (meta.providers) {
          providers_1.push.apply(providers_1, this.getProvidersMetadata(meta.providers, entryComponents_1, "provider for the NgModule '" + stringify(moduleType) + "'"));
        }
        if (meta.entryComponents) {
          entryComponents_1.push.apply(entryComponents_1, flattenArray(meta.entryComponents).map(function(type) {
            return _this.getTypeMetadata(type, staticTypeModuleUrl(type));
          }));
        }
        if (meta.bootstrap) {
          bootstrapComponents.push.apply(bootstrapComponents, flattenArray(meta.bootstrap).map(function(type) {
            return _this.getTypeMetadata(type, staticTypeModuleUrl(type));
          }));
        }
        entryComponents_1.push.apply(entryComponents_1, bootstrapComponents);
        if (meta.schemas) {
          schemas.push.apply(schemas, flattenArray(meta.schemas));
        }
        (_a = transitiveModule_1.entryComponents).push.apply(_a, entryComponents_1);
        (_b = transitiveModule_1.providers).push.apply(_b, providers_1);
        compileMeta = new CompileNgModuleMetadata({
          type: this.getTypeMetadata(moduleType, staticTypeModuleUrl(moduleType)),
          providers: providers_1,
          entryComponents: entryComponents_1,
          bootstrapComponents: bootstrapComponents,
          schemas: schemas,
          declaredDirectives: declaredDirectives_1,
          exportedDirectives: exportedDirectives_1,
          declaredPipes: declaredPipes_1,
          exportedPipes: exportedPipes_1,
          importedModules: importedModules_1,
          exportedModules: exportedModules_1,
          transitiveModule: transitiveModule_1
        });
        transitiveModule_1.modules.push(compileMeta);
        this._verifyModule(compileMeta);
        this._ngModuleCache.set(moduleType, compileMeta);
      }
      return compileMeta;
      var _a,
          _b;
    };
    CompileMetadataResolver.prototype._verifyModule = function(moduleMeta) {
      moduleMeta.exportedDirectives.forEach(function(dirMeta) {
        if (!moduleMeta.transitiveModule.directivesSet.has(dirMeta.type.reference)) {
          throw new Error("Can't export directive " + stringify(dirMeta.type.reference) + " from " + stringify(moduleMeta.type.reference) + " as it was neither declared nor imported!");
        }
      });
      moduleMeta.exportedPipes.forEach(function(pipeMeta) {
        if (!moduleMeta.transitiveModule.pipesSet.has(pipeMeta.type.reference)) {
          throw new Error("Can't export pipe " + stringify(pipeMeta.type.reference) + " from " + stringify(moduleMeta.type.reference) + " as it was neither declared nor imported!");
        }
      });
    };
    CompileMetadataResolver.prototype._getTypeDescriptor = function(type) {
      if (this._directiveResolver.resolve(type, false) !== null) {
        return 'directive';
      } else if (this._pipeResolver.resolve(type, false) !== null) {
        return 'pipe';
      } else if (this._ngModuleResolver.resolve(type, false) !== null) {
        return 'module';
      } else if (type.provide) {
        return 'provider';
      } else {
        return 'value';
      }
    };
    CompileMetadataResolver.prototype._addTypeToModule = function(type, moduleType) {
      var oldModule = this._ngModuleOfTypes.get(type);
      if (oldModule && oldModule !== moduleType) {
        throw new Error("Type " + stringify(type) + " is part of the declarations of 2 modules: " + stringify(oldModule) + " and " + stringify(moduleType) + "!");
      }
      this._ngModuleOfTypes.set(type, moduleType);
    };
    CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function(importedModules, exportedModules) {
      var transitiveModules = getTransitiveModules(importedModules.concat(exportedModules), true);
      var providers = flattenArray(transitiveModules.map(function(ngModule) {
        return ngModule.providers;
      }));
      var entryComponents = flattenArray(transitiveModules.map(function(ngModule) {
        return ngModule.entryComponents;
      }));
      var transitiveExportedModules = getTransitiveModules(importedModules, false);
      var directives = flattenArray(transitiveExportedModules.map(function(ngModule) {
        return ngModule.exportedDirectives;
      }));
      var pipes = flattenArray(transitiveExportedModules.map(function(ngModule) {
        return ngModule.exportedPipes;
      }));
      return new TransitiveCompileNgModuleMetadata(transitiveModules, providers, entryComponents, directives, pipes);
    };
    CompileMetadataResolver.prototype._addDirectiveToModule = function(dirMeta, moduleType, transitiveModule, declaredDirectives, force) {
      if (force === void 0) {
        force = false;
      }
      if (force || !transitiveModule.directivesSet.has(dirMeta.type.reference)) {
        transitiveModule.directivesSet.add(dirMeta.type.reference);
        transitiveModule.directives.push(dirMeta);
        declaredDirectives.push(dirMeta);
        this._addTypeToModule(dirMeta.type.reference, moduleType);
        return true;
      }
      return false;
    };
    CompileMetadataResolver.prototype._addPipeToModule = function(pipeMeta, moduleType, transitiveModule, declaredPipes, force) {
      if (force === void 0) {
        force = false;
      }
      if (force || !transitiveModule.pipesSet.has(pipeMeta.type.reference)) {
        transitiveModule.pipesSet.add(pipeMeta.type.reference);
        transitiveModule.pipes.push(pipeMeta);
        declaredPipes.push(pipeMeta);
        this._addTypeToModule(pipeMeta.type.reference, moduleType);
        return true;
      }
      return false;
    };
    CompileMetadataResolver.prototype.getTypeMetadata = function(type, moduleUrl, dependencies) {
      if (dependencies === void 0) {
        dependencies = null;
      }
      type = _angular_core.resolveForwardRef(type);
      return new CompileTypeMetadata({
        name: this.sanitizeTokenName(type),
        moduleUrl: moduleUrl,
        reference: type,
        diDeps: this.getDependenciesMetadata(type, dependencies),
        lifecycleHooks: LIFECYCLE_HOOKS_VALUES.filter(function(hook) {
          return hasLifecycleHook(hook, type);
        })
      });
    };
    CompileMetadataResolver.prototype.getFactoryMetadata = function(factory, moduleUrl, dependencies) {
      if (dependencies === void 0) {
        dependencies = null;
      }
      factory = _angular_core.resolveForwardRef(factory);
      return new CompileFactoryMetadata({
        name: this.sanitizeTokenName(factory),
        moduleUrl: moduleUrl,
        reference: factory,
        diDeps: this.getDependenciesMetadata(factory, dependencies)
      });
    };
    CompileMetadataResolver.prototype.getPipeMetadata = function(pipeType, throwIfNotFound) {
      if (throwIfNotFound === void 0) {
        throwIfNotFound = true;
      }
      pipeType = _angular_core.resolveForwardRef(pipeType);
      var meta = this._pipeCache.get(pipeType);
      if (isBlank(meta)) {
        var pipeMeta = this._pipeResolver.resolve(pipeType, throwIfNotFound);
        if (!pipeMeta) {
          return null;
        }
        meta = new CompilePipeMetadata({
          type: this.getTypeMetadata(pipeType, staticTypeModuleUrl(pipeType)),
          name: pipeMeta.name,
          pure: pipeMeta.pure
        });
        this._pipeCache.set(pipeType, meta);
      }
      return meta;
    };
    CompileMetadataResolver.prototype.getDependenciesMetadata = function(typeOrFunc, dependencies) {
      var _this = this;
      var hasUnknownDeps = false;
      var params = isPresent(dependencies) ? dependencies : this._reflector.parameters(typeOrFunc);
      if (isBlank(params)) {
        params = [];
      }
      var dependenciesMetadata = params.map(function(param) {
        var isAttribute = false;
        var isHost = false;
        var isSelf = false;
        var isSkipSelf = false;
        var isOptional = false;
        var query = null;
        var viewQuery = null;
        var token = null;
        if (isArray(param)) {
          param.forEach(function(paramEntry) {
            if (paramEntry instanceof _angular_core.HostMetadata) {
              isHost = true;
            } else if (paramEntry instanceof _angular_core.SelfMetadata) {
              isSelf = true;
            } else if (paramEntry instanceof _angular_core.SkipSelfMetadata) {
              isSkipSelf = true;
            } else if (paramEntry instanceof _angular_core.OptionalMetadata) {
              isOptional = true;
            } else if (paramEntry instanceof _angular_core.AttributeMetadata) {
              isAttribute = true;
              token = paramEntry.attributeName;
            } else if (paramEntry instanceof _angular_core.QueryMetadata) {
              if (paramEntry.isViewQuery) {
                viewQuery = paramEntry;
              } else {
                query = paramEntry;
              }
            } else if (paramEntry instanceof _angular_core.InjectMetadata) {
              token = paramEntry.token;
            } else if (isValidType(paramEntry) && isBlank(token)) {
              token = paramEntry;
            }
          });
        } else {
          token = param;
        }
        if (isBlank(token)) {
          hasUnknownDeps = true;
          return null;
        }
        return new CompileDiDependencyMetadata({
          isAttribute: isAttribute,
          isHost: isHost,
          isSelf: isSelf,
          isSkipSelf: isSkipSelf,
          isOptional: isOptional,
          query: isPresent(query) ? _this.getQueryMetadata(query, null, typeOrFunc) : null,
          viewQuery: isPresent(viewQuery) ? _this.getQueryMetadata(viewQuery, null, typeOrFunc) : null,
          token: _this.getTokenMetadata(token)
        });
      });
      if (hasUnknownDeps) {
        var depsTokens = dependenciesMetadata.map(function(dep) {
          return dep ? stringify(dep.token) : '?';
        }).join(', ');
        throw new Error("Can't resolve all parameters for " + stringify(typeOrFunc) + ": (" + depsTokens + ").");
      }
      return dependenciesMetadata;
    };
    CompileMetadataResolver.prototype.getTokenMetadata = function(token) {
      token = _angular_core.resolveForwardRef(token);
      var compileToken;
      if (isString(token)) {
        compileToken = new CompileTokenMetadata({value: token});
      } else {
        compileToken = new CompileTokenMetadata({identifier: new CompileIdentifierMetadata({
            reference: token,
            name: this.sanitizeTokenName(token),
            moduleUrl: staticTypeModuleUrl(token)
          })});
      }
      return compileToken;
    };
    CompileMetadataResolver.prototype.getProvidersMetadata = function(providers, targetEntryComponents, debugInfo) {
      var _this = this;
      var compileProviders = [];
      providers.forEach(function(provider, providerIdx) {
        provider = _angular_core.resolveForwardRef(provider);
        if (provider && typeof provider == 'object' && provider.hasOwnProperty('provide')) {
          provider = new ProviderMeta(provider.provide, provider);
        }
        var compileProvider;
        if (isArray(provider)) {
          compileProvider = _this.getProvidersMetadata(provider, targetEntryComponents, debugInfo);
        } else if (provider instanceof ProviderMeta) {
          var tokenMeta = _this.getTokenMetadata(provider.token);
          if (tokenMeta.reference === resolveIdentifierToken(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS).reference) {
            targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(provider));
          } else {
            compileProvider = _this.getProviderMetadata(provider);
          }
        } else if (isValidType(provider)) {
          compileProvider = _this.getTypeMetadata(provider, staticTypeModuleUrl(provider));
        } else {
          var providersInfo = providers.reduce(function(soFar, seenProvider, seenProviderIdx) {
            if (seenProviderIdx < providerIdx) {
              soFar.push("" + stringify(seenProvider));
            } else if (seenProviderIdx == providerIdx) {
              soFar.push("?" + stringify(seenProvider) + "?");
            } else if (seenProviderIdx == providerIdx + 1) {
              soFar.push('...');
            }
            return soFar;
          }, []).join(', ');
          throw new Error("Invalid " + (debugInfo ? debugInfo : 'provider') + " - only instances of Provider and Type are allowed, got: [" + providersInfo + "]");
        }
        if (compileProvider) {
          compileProviders.push(compileProvider);
        }
      });
      return compileProviders;
    };
    CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function(provider) {
      var _this = this;
      var components = [];
      var collectedIdentifiers = [];
      if (provider.useFactory || provider.useExisting || provider.useClass) {
        throw new Error("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!");
      }
      if (!provider.multi) {
        throw new Error("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!");
      }
      convertToCompileValue(provider.useValue, collectedIdentifiers);
      collectedIdentifiers.forEach(function(identifier) {
        var dirMeta = _this.getDirectiveMetadata(identifier.reference, false);
        if (dirMeta) {
          components.push(dirMeta.type);
        }
      });
      return components;
    };
    CompileMetadataResolver.prototype.getProviderMetadata = function(provider) {
      var compileDeps;
      var compileTypeMetadata = null;
      var compileFactoryMetadata = null;
      if (isPresent(provider.useClass)) {
        compileTypeMetadata = this.getTypeMetadata(provider.useClass, staticTypeModuleUrl(provider.useClass), provider.dependencies);
        compileDeps = compileTypeMetadata.diDeps;
      } else if (isPresent(provider.useFactory)) {
        compileFactoryMetadata = this.getFactoryMetadata(provider.useFactory, staticTypeModuleUrl(provider.useFactory), provider.dependencies);
        compileDeps = compileFactoryMetadata.diDeps;
      }
      return new CompileProviderMetadata({
        token: this.getTokenMetadata(provider.token),
        useClass: compileTypeMetadata,
        useValue: convertToCompileValue(provider.useValue, []),
        useFactory: compileFactoryMetadata,
        useExisting: isPresent(provider.useExisting) ? this.getTokenMetadata(provider.useExisting) : null,
        deps: compileDeps,
        multi: provider.multi
      });
    };
    CompileMetadataResolver.prototype.getQueriesMetadata = function(queries, isViewQuery, directiveType) {
      var _this = this;
      var res = [];
      StringMapWrapper.forEach(queries, function(query, propertyName) {
        if (query.isViewQuery === isViewQuery) {
          res.push(_this.getQueryMetadata(query, propertyName, directiveType));
        }
      });
      return res;
    };
    CompileMetadataResolver.prototype.getQueryMetadata = function(q, propertyName, typeOrFunc) {
      var _this = this;
      var selectors;
      if (q.isVarBindingQuery) {
        selectors = q.varBindings.map(function(varName) {
          return _this.getTokenMetadata(varName);
        });
      } else {
        if (!isPresent(q.selector)) {
          throw new Error("Can't construct a query for the property \"" + propertyName + "\" of \"" + stringify(typeOrFunc) + "\" since the query selector wasn't defined.");
        }
        selectors = [this.getTokenMetadata(q.selector)];
      }
      return new CompileQueryMetadata({
        selectors: selectors,
        first: q.first,
        descendants: q.descendants,
        propertyName: propertyName,
        read: isPresent(q.read) ? this.getTokenMetadata(q.read) : null
      });
    };
    CompileMetadataResolver.decorators = [{type: _angular_core.Injectable}];
    CompileMetadataResolver.ctorParameters = [{type: NgModuleResolver}, {type: DirectiveResolver}, {type: PipeResolver}, {type: ElementSchemaRegistry}, {type: ReflectorReader}];
    return CompileMetadataResolver;
  }());
  function getTransitiveModules(modules, includeImports, targetModules, visitedModules) {
    if (targetModules === void 0) {
      targetModules = [];
    }
    if (visitedModules === void 0) {
      visitedModules = new Set();
    }
    modules.forEach(function(ngModule) {
      if (!visitedModules.has(ngModule.type.reference)) {
        visitedModules.add(ngModule.type.reference);
        var nestedModules = includeImports ? ngModule.importedModules.concat(ngModule.exportedModules) : ngModule.exportedModules;
        getTransitiveModules(nestedModules, includeImports, targetModules, visitedModules);
        targetModules.push(ngModule);
      }
    });
    return targetModules;
  }
  function flattenArray(tree, out) {
    if (out === void 0) {
      out = [];
    }
    if (tree) {
      for (var i = 0; i < tree.length; i++) {
        var item = _angular_core.resolveForwardRef(tree[i]);
        if (isArray(item)) {
          flattenArray(item, out);
        } else {
          out.push(item);
        }
      }
    }
    return out;
  }
  function isValidType(value) {
    return isStaticSymbol(value) || (value instanceof _angular_core.Type);
  }
  function staticTypeModuleUrl(value) {
    return isStaticSymbol(value) ? value.filePath : null;
  }
  function componentModuleUrl(reflector, type, cmpMetadata) {
    if (isStaticSymbol(type)) {
      return staticTypeModuleUrl(type);
    }
    if (isPresent(cmpMetadata.moduleId)) {
      var moduleId = cmpMetadata.moduleId;
      var scheme = getUrlScheme(moduleId);
      return isPresent(scheme) && scheme.length > 0 ? moduleId : "package:" + moduleId + MODULE_SUFFIX;
    }
    return reflector.importUri(type);
  }
  function convertToCompileValue(value, targetIdentifiers) {
    return visitValue(value, new _CompileValueConverter(), targetIdentifiers);
  }
  var _CompileValueConverter = (function(_super) {
    __extends$14(_CompileValueConverter, _super);
    function _CompileValueConverter() {
      _super.apply(this, arguments);
    }
    _CompileValueConverter.prototype.visitOther = function(value, targetIdentifiers) {
      var identifier;
      if (isStaticSymbol(value)) {
        identifier = new CompileIdentifierMetadata({
          name: value.name,
          moduleUrl: value.filePath,
          reference: value
        });
      } else {
        identifier = new CompileIdentifierMetadata({reference: value});
      }
      targetIdentifiers.push(identifier);
      return identifier;
    };
    return _CompileValueConverter;
  }(ValueTransformer));
  var ComponentFactoryDependency$1 = (function() {
    function ComponentFactoryDependency(comp, placeholder) {
      this.comp = comp;
      this.placeholder = placeholder;
    }
    return ComponentFactoryDependency;
  }());
  var NgModuleCompileResult = (function() {
    function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {
      this.statements = statements;
      this.ngModuleFactoryVar = ngModuleFactoryVar;
      this.dependencies = dependencies;
    }
    return NgModuleCompileResult;
  }());
  var NgModuleCompiler = (function() {
    function NgModuleCompiler() {}
    NgModuleCompiler.prototype.compile = function(ngModuleMeta, extraProviders) {
      var sourceFileName = isPresent(ngModuleMeta.type.moduleUrl) ? "in NgModule " + ngModuleMeta.type.name + " in " + ngModuleMeta.type.moduleUrl : "in NgModule " + ngModuleMeta.type.name;
      var sourceFile = new ParseSourceFile('', sourceFileName);
      var sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
      var deps = [];
      var bootstrapComponentFactories = [];
      var entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function(entryComponent) {
        var id = new CompileIdentifierMetadata({name: entryComponent.name});
        if (ngModuleMeta.bootstrapComponents.indexOf(entryComponent) > -1) {
          bootstrapComponentFactories.push(id);
        }
        deps.push(new ComponentFactoryDependency$1(entryComponent, id));
        return id;
      });
      var builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);
      var providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);
      providerParser.parse().forEach(function(provider) {
        return builder.addProvider(provider);
      });
      var injectorClass = builder.build();
      var ngModuleFactoryVar = ngModuleMeta.type.name + "NgFactory";
      var ngModuleFactoryStmt = variable(ngModuleFactoryVar).set(importExpr(resolveIdentifier(Identifiers.NgModuleFactory)).instantiate([variable(injectorClass.name), importExpr(ngModuleMeta.type)], importType(resolveIdentifier(Identifiers.NgModuleFactory), [importType(ngModuleMeta.type)], [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]);
      return new NgModuleCompileResult([injectorClass, ngModuleFactoryStmt], ngModuleFactoryVar, deps);
    };
    NgModuleCompiler.decorators = [{type: _angular_core.Injectable}];
    NgModuleCompiler.ctorParameters = [];
    return NgModuleCompiler;
  }());
  var _InjectorBuilder = (function() {
    function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
      this._ngModuleMeta = _ngModuleMeta;
      this._entryComponentFactories = _entryComponentFactories;
      this._bootstrapComponentFactories = _bootstrapComponentFactories;
      this._sourceSpan = _sourceSpan;
      this._tokens = [];
      this._instances = new Map();
      this._fields = [];
      this._createStmts = [];
      this._destroyStmts = [];
      this._getters = [];
    }
    _InjectorBuilder.prototype.addProvider = function(resolvedProvider) {
      var _this = this;
      var providerValueExpressions = resolvedProvider.providers.map(function(provider) {
        return _this._getProviderValue(provider);
      });
      var propName = "_" + resolvedProvider.token.name + "_" + this._instances.size;
      var instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
      if (resolvedProvider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
        this._destroyStmts.push(instance.callMethod('ngOnDestroy', []).toStmt());
      }
      this._tokens.push(resolvedProvider.token);
      this._instances.set(resolvedProvider.token.reference, instance);
    };
    _InjectorBuilder.prototype.build = function() {
      var _this = this;
      var getMethodStmts = this._tokens.map(function(token) {
        var providerExpr = _this._instances.get(token.reference);
        return new IfStmt(InjectMethodVars$1.token.identical(createDiTokenExpression(token)), [new ReturnStatement(providerExpr)]);
      });
      var methods = [new ClassMethod('createInternal', [], this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), importType(this._ngModuleMeta.type)), new ClassMethod('getInternal', [new FnParam(InjectMethodVars$1.token.name, DYNAMIC_TYPE), new FnParam(InjectMethodVars$1.notFoundResult.name, DYNAMIC_TYPE)], getMethodStmts.concat([new ReturnStatement(InjectMethodVars$1.notFoundResult)]), DYNAMIC_TYPE), new ClassMethod('destroyInternal', [], this._destroyStmts)];
      var ctor = new ClassMethod(null, [new FnParam(InjectorProps.parent.name, importType(resolveIdentifier(Identifiers.Injector)))], [SUPER_EXPR.callFn([variable(InjectorProps.parent.name), literalArr(this._entryComponentFactories.map(function(componentFactory) {
        return importExpr(componentFactory);
      })), literalArr(this._bootstrapComponentFactories.map(function(componentFactory) {
        return importExpr(componentFactory);
      }))]).toStmt()]);
      var injClassName = this._ngModuleMeta.type.name + "Injector";
      return new ClassStmt(injClassName, importExpr(resolveIdentifier(Identifiers.NgModuleInjector), [importType(this._ngModuleMeta.type)]), this._fields, this._getters, ctor, methods);
    };
    _InjectorBuilder.prototype._getProviderValue = function(provider) {
      var _this = this;
      var result;
      if (isPresent(provider.useExisting)) {
        result = this._getDependency(new CompileDiDependencyMetadata({token: provider.useExisting}));
      } else if (isPresent(provider.useFactory)) {
        var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;
        var depsExpr = deps.map(function(dep) {
          return _this._getDependency(dep);
        });
        result = importExpr(provider.useFactory).callFn(depsExpr);
      } else if (isPresent(provider.useClass)) {
        var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;
        var depsExpr = deps.map(function(dep) {
          return _this._getDependency(dep);
        });
        result = importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
      } else {
        result = convertValueToOutputAst(provider.useValue);
      }
      return result;
    };
    _InjectorBuilder.prototype._createProviderProperty = function(propName, provider, providerValueExpressions, isMulti, isEager) {
      var resolvedProviderValueExpr;
      var type;
      if (isMulti) {
        resolvedProviderValueExpr = literalArr(providerValueExpressions);
        type = new ArrayType(DYNAMIC_TYPE);
      } else {
        resolvedProviderValueExpr = providerValueExpressions[0];
        type = providerValueExpressions[0].type;
      }
      if (isBlank(type)) {
        type = DYNAMIC_TYPE;
      }
      if (isEager) {
        this._fields.push(new ClassField(propName, type));
        this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
      } else {
        var internalField = "_" + propName;
        this._fields.push(new ClassField(internalField, type));
        var getterStmts = [new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]), new ReturnStatement(THIS_EXPR.prop(internalField))];
        this._getters.push(new ClassGetter(propName, getterStmts, type));
      }
      return THIS_EXPR.prop(propName);
    };
    _InjectorBuilder.prototype._getDependency = function(dep) {
      var result = null;
      if (dep.isValue) {
        result = literal(dep.value);
      }
      if (!dep.isSkipSelf) {
        if (dep.token && (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference || dep.token.reference === resolveIdentifierToken(Identifiers.ComponentFactoryResolver).reference)) {
          result = THIS_EXPR;
        }
        if (isBlank(result)) {
          result = this._instances.get(dep.token.reference);
        }
      }
      if (isBlank(result)) {
        var args = [createDiTokenExpression(dep.token)];
        if (dep.isOptional) {
          args.push(NULL_EXPR);
        }
        result = InjectorProps.parent.callMethod('get', args);
      }
      return result;
    };
    return _InjectorBuilder;
  }());
  var InjectorProps = (function() {
    function InjectorProps() {}
    InjectorProps.parent = THIS_EXPR.prop('parent');
    return InjectorProps;
  }());
  var InjectMethodVars$1 = (function() {
    function InjectMethodVars() {}
    InjectMethodVars.token = variable('token');
    InjectMethodVars.notFoundResult = variable('notFoundResult');
    return InjectMethodVars;
  }());
  var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
  var _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
  var CATCH_ERROR_VAR$2 = variable('error');
  var CATCH_STACK_VAR$2 = variable('stack');
  var _EmittedLine = (function() {
    function _EmittedLine(indent) {
      this.indent = indent;
      this.parts = [];
    }
    return _EmittedLine;
  }());
  var EmitterVisitorContext = (function() {
    function EmitterVisitorContext(_exportedVars, _indent) {
      this._exportedVars = _exportedVars;
      this._indent = _indent;
      this._classes = [];
      this._lines = [new _EmittedLine(_indent)];
    }
    EmitterVisitorContext.createRoot = function(exportedVars) {
      return new EmitterVisitorContext(exportedVars, 0);
    };
    Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
      get: function() {
        return this._lines[this._lines.length - 1];
      },
      enumerable: true,
      configurable: true
    });
    EmitterVisitorContext.prototype.isExportedVar = function(varName) {
      return this._exportedVars.indexOf(varName) !== -1;
    };
    EmitterVisitorContext.prototype.println = function(lastPart) {
      if (lastPart === void 0) {
        lastPart = '';
      }
      this.print(lastPart, true);
    };
    EmitterVisitorContext.prototype.lineIsEmpty = function() {
      return this._currentLine.parts.length === 0;
    };
    EmitterVisitorContext.prototype.print = function(part, newLine) {
      if (newLine === void 0) {
        newLine = false;
      }
      if (part.length > 0) {
        this._currentLine.parts.push(part);
      }
      if (newLine) {
        this._lines.push(new _EmittedLine(this._indent));
      }
    };
    EmitterVisitorContext.prototype.removeEmptyLastLine = function() {
      if (this.lineIsEmpty()) {
        this._lines.pop();
      }
    };
    EmitterVisitorContext.prototype.incIndent = function() {
      this._indent++;
      this._currentLine.indent = this._indent;
    };
    EmitterVisitorContext.prototype.decIndent = function() {
      this._indent--;
      this._currentLine.indent = this._indent;
    };
    EmitterVisitorContext.prototype.pushClass = function(clazz) {
      this._classes.push(clazz);
    };
    EmitterVisitorContext.prototype.popClass = function() {
      return this._classes.pop();
    };
    Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
      get: function() {
        return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
      },
      enumerable: true,
      configurable: true
    });
    EmitterVisitorContext.prototype.toSource = function() {
      var lines = this._lines;
      if (lines[lines.length - 1].parts.length === 0) {
        lines = lines.slice(0, lines.length - 1);
      }
      return lines.map(function(line) {
        if (line.parts.length > 0) {
          return _createIndent(line.indent) + line.parts.join('');
        } else {
          return '';
        }
      }).join('\n');
    };
    return EmitterVisitorContext;
  }());
  var AbstractEmitterVisitor = (function() {
    function AbstractEmitterVisitor(_escapeDollarInStrings) {
      this._escapeDollarInStrings = _escapeDollarInStrings;
    }
    AbstractEmitterVisitor.prototype.visitExpressionStmt = function(stmt, ctx) {
      stmt.expr.visitExpression(this, ctx);
      ctx.println(';');
      return null;
    };
    AbstractEmitterVisitor.prototype.visitReturnStmt = function(stmt, ctx) {
      ctx.print("return ");
      stmt.value.visitExpression(this, ctx);
      ctx.println(';');
      return null;
    };
    AbstractEmitterVisitor.prototype.visitIfStmt = function(stmt, ctx) {
      ctx.print("if (");
      stmt.condition.visitExpression(this, ctx);
      ctx.print(") {");
      var hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;
      if (stmt.trueCase.length <= 1 && !hasElseCase) {
        ctx.print(" ");
        this.visitAllStatements(stmt.trueCase, ctx);
        ctx.removeEmptyLastLine();
        ctx.print(" ");
      } else {
        ctx.println();
        ctx.incIndent();
        this.visitAllStatements(stmt.trueCase, ctx);
        ctx.decIndent();
        if (hasElseCase) {
          ctx.println("} else {");
          ctx.incIndent();
          this.visitAllStatements(stmt.falseCase, ctx);
          ctx.decIndent();
        }
      }
      ctx.println("}");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitThrowStmt = function(stmt, ctx) {
      ctx.print("throw ");
      stmt.error.visitExpression(this, ctx);
      ctx.println(";");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitCommentStmt = function(stmt, ctx) {
      var lines = stmt.comment.split('\n');
      lines.forEach(function(line) {
        ctx.println("// " + line);
      });
      return null;
    };
    AbstractEmitterVisitor.prototype.visitWriteVarExpr = function(expr, ctx) {
      var lineWasEmpty = ctx.lineIsEmpty();
      if (!lineWasEmpty) {
        ctx.print('(');
      }
      ctx.print(expr.name + " = ");
      expr.value.visitExpression(this, ctx);
      if (!lineWasEmpty) {
        ctx.print(')');
      }
      return null;
    };
    AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function(expr, ctx) {
      var lineWasEmpty = ctx.lineIsEmpty();
      if (!lineWasEmpty) {
        ctx.print('(');
      }
      expr.receiver.visitExpression(this, ctx);
      ctx.print("[");
      expr.index.visitExpression(this, ctx);
      ctx.print("] = ");
      expr.value.visitExpression(this, ctx);
      if (!lineWasEmpty) {
        ctx.print(')');
      }
      return null;
    };
    AbstractEmitterVisitor.prototype.visitWritePropExpr = function(expr, ctx) {
      var lineWasEmpty = ctx.lineIsEmpty();
      if (!lineWasEmpty) {
        ctx.print('(');
      }
      expr.receiver.visitExpression(this, ctx);
      ctx.print("." + expr.name + " = ");
      expr.value.visitExpression(this, ctx);
      if (!lineWasEmpty) {
        ctx.print(')');
      }
      return null;
    };
    AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function(expr, ctx) {
      expr.receiver.visitExpression(this, ctx);
      var name = expr.name;
      if (isPresent(expr.builtin)) {
        name = this.getBuiltinMethodName(expr.builtin);
        if (isBlank(name)) {
          return null;
        }
      }
      ctx.print("." + name + "(");
      this.visitAllExpressions(expr.args, ctx, ",");
      ctx.print(")");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function(expr, ctx) {
      expr.fn.visitExpression(this, ctx);
      ctx.print("(");
      this.visitAllExpressions(expr.args, ctx, ',');
      ctx.print(")");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitReadVarExpr = function(ast, ctx) {
      var varName = ast.name;
      if (isPresent(ast.builtin)) {
        switch (ast.builtin) {
          case BuiltinVar.Super:
            varName = 'super';
            break;
          case BuiltinVar.This:
            varName = 'this';
            break;
          case BuiltinVar.CatchError:
            varName = CATCH_ERROR_VAR$2.name;
            break;
          case BuiltinVar.CatchStack:
            varName = CATCH_STACK_VAR$2.name;
            break;
          default:
            throw new Error("Unknown builtin variable " + ast.builtin);
        }
      }
      ctx.print(varName);
      return null;
    };
    AbstractEmitterVisitor.prototype.visitInstantiateExpr = function(ast, ctx) {
      ctx.print("new ");
      ast.classExpr.visitExpression(this, ctx);
      ctx.print("(");
      this.visitAllExpressions(ast.args, ctx, ',');
      ctx.print(")");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitLiteralExpr = function(ast, ctx, absentValue) {
      if (absentValue === void 0) {
        absentValue = 'null';
      }
      var value = ast.value;
      if (isString(value)) {
        ctx.print(escapeIdentifier(value, this._escapeDollarInStrings));
      } else if (isBlank(value)) {
        ctx.print(absentValue);
      } else {
        ctx.print("" + value);
      }
      return null;
    };
    AbstractEmitterVisitor.prototype.visitConditionalExpr = function(ast, ctx) {
      ctx.print("(");
      ast.condition.visitExpression(this, ctx);
      ctx.print('? ');
      ast.trueCase.visitExpression(this, ctx);
      ctx.print(': ');
      ast.falseCase.visitExpression(this, ctx);
      ctx.print(")");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitNotExpr = function(ast, ctx) {
      ctx.print('!');
      ast.condition.visitExpression(this, ctx);
      return null;
    };
    AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
      var opStr;
      switch (ast.operator) {
        case BinaryOperator.Equals:
          opStr = '==';
          break;
        case BinaryOperator.Identical:
          opStr = '===';
          break;
        case BinaryOperator.NotEquals:
          opStr = '!=';
          break;
        case BinaryOperator.NotIdentical:
          opStr = '!==';
          break;
        case BinaryOperator.And:
          opStr = '&&';
          break;
        case BinaryOperator.Or:
          opStr = '||';
          break;
        case BinaryOperator.Plus:
          opStr = '+';
          break;
        case BinaryOperator.Minus:
          opStr = '-';
          break;
        case BinaryOperator.Divide:
          opStr = '/';
          break;
        case BinaryOperator.Multiply:
          opStr = '*';
          break;
        case BinaryOperator.Modulo:
          opStr = '%';
          break;
        case BinaryOperator.Lower:
          opStr = '<';
          break;
        case BinaryOperator.LowerEquals:
          opStr = '<=';
          break;
        case BinaryOperator.Bigger:
          opStr = '>';
          break;
        case BinaryOperator.BiggerEquals:
          opStr = '>=';
          break;
        default:
          throw new Error("Unknown operator " + ast.operator);
      }
      ctx.print("(");
      ast.lhs.visitExpression(this, ctx);
      ctx.print(" " + opStr + " ");
      ast.rhs.visitExpression(this, ctx);
      ctx.print(")");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitReadPropExpr = function(ast, ctx) {
      ast.receiver.visitExpression(this, ctx);
      ctx.print(".");
      ctx.print(ast.name);
      return null;
    };
    AbstractEmitterVisitor.prototype.visitReadKeyExpr = function(ast, ctx) {
      ast.receiver.visitExpression(this, ctx);
      ctx.print("[");
      ast.index.visitExpression(this, ctx);
      ctx.print("]");
      return null;
    };
    AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function(ast, ctx) {
      var useNewLine = ast.entries.length > 1;
      ctx.print("[", useNewLine);
      ctx.incIndent();
      this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);
      ctx.decIndent();
      ctx.print("]", useNewLine);
      return null;
    };
    AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function(ast, ctx) {
      var _this = this;
      var useNewLine = ast.entries.length > 1;
      ctx.print("{", useNewLine);
      ctx.incIndent();
      this.visitAllObjects(function(entry) {
        ctx.print(escapeIdentifier(entry[0], _this._escapeDollarInStrings, false) + ": ");
        entry[1].visitExpression(_this, ctx);
      }, ast.entries, ctx, ',', useNewLine);
      ctx.decIndent();
      ctx.print("}", useNewLine);
      return null;
    };
    AbstractEmitterVisitor.prototype.visitAllExpressions = function(expressions, ctx, separator, newLine) {
      var _this = this;
      if (newLine === void 0) {
        newLine = false;
      }
      this.visitAllObjects(function(expr) {
        return expr.visitExpression(_this, ctx);
      }, expressions, ctx, separator, newLine);
    };
    AbstractEmitterVisitor.prototype.visitAllObjects = function(handler, expressions, ctx, separator, newLine) {
      if (newLine === void 0) {
        newLine = false;
      }
      for (var i = 0; i < expressions.length; i++) {
        if (i > 0) {
          ctx.print(separator, newLine);
        }
        handler(expressions[i]);
      }
      if (newLine) {
        ctx.println();
      }
    };
    AbstractEmitterVisitor.prototype.visitAllStatements = function(statements, ctx) {
      var _this = this;
      statements.forEach(function(stmt) {
        return stmt.visitStatement(_this, ctx);
      });
    };
    return AbstractEmitterVisitor;
  }());
  function escapeIdentifier(input, escapeDollar, alwaysQuote) {
    if (alwaysQuote === void 0) {
      alwaysQuote = true;
    }
    if (isBlank(input)) {
      return null;
    }
    var body = StringWrapper.replaceAllMapped(input, _SINGLE_QUOTE_ESCAPE_STRING_RE, function(match) {
      if (match[0] == '$') {
        return escapeDollar ? '\\$' : '$';
      } else if (match[0] == '\n') {
        return '\\n';
      } else if (match[0] == '\r') {
        return '\\r';
      } else {
        return "\\" + match[0];
      }
    });
    var requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
    return requiresQuotes ? "'" + body + "'" : body;
  }
  function _createIndent(count) {
    var res = '';
    for (var i = 0; i < count; i++) {
      res += '  ';
    }
    return res;
  }
  var __extends$15 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var _debugModuleUrl = 'asset://debug/lib';
  function debugOutputAstAsTypeScript(ast) {
    var converter = new _TsEmitterVisitor(_debugModuleUrl);
    var ctx = EmitterVisitorContext.createRoot([]);
    var asts;
    if (isArray(ast)) {
      asts = ast;
    } else {
      asts = [ast];
    }
    asts.forEach(function(ast) {
      if (ast instanceof Statement) {
        ast.visitStatement(converter, ctx);
      } else if (ast instanceof Expression) {
        ast.visitExpression(converter, ctx);
      } else if (ast instanceof Type$1) {
        ast.visitType(converter, ctx);
      } else {
        throw new Error("Don't know how to print debug info for " + ast);
      }
    });
    return ctx.toSource();
  }
  var TypeScriptEmitter = (function() {
    function TypeScriptEmitter(_importGenerator) {
      this._importGenerator = _importGenerator;
    }
    TypeScriptEmitter.prototype.emitStatements = function(moduleUrl, stmts, exportedVars) {
      var _this = this;
      var converter = new _TsEmitterVisitor(moduleUrl);
      var ctx = EmitterVisitorContext.createRoot(exportedVars);
      converter.visitAllStatements(stmts, ctx);
      var srcParts = [];
      converter.importsWithPrefixes.forEach(function(prefix, importedModuleUrl) {
        srcParts.push("imp" + ("ort * as " + prefix + " from '" + _this._importGenerator.getImportPath(moduleUrl, importedModuleUrl) + "';"));
      });
      srcParts.push(ctx.toSource());
      return srcParts.join('\n');
    };
    return TypeScriptEmitter;
  }());
  var _TsEmitterVisitor = (function(_super) {
    __extends$15(_TsEmitterVisitor, _super);
    function _TsEmitterVisitor(_moduleUrl) {
      _super.call(this, false);
      this._moduleUrl = _moduleUrl;
      this.importsWithPrefixes = new Map();
    }
    _TsEmitterVisitor.prototype.visitType = function(t, ctx, defaultType) {
      if (defaultType === void 0) {
        defaultType = 'any';
      }
      if (isPresent(t)) {
        t.visitType(this, ctx);
      } else {
        ctx.print(defaultType);
      }
    };
    _TsEmitterVisitor.prototype.visitLiteralExpr = function(ast, ctx) {
      _super.prototype.visitLiteralExpr.call(this, ast, ctx, '(null as any)');
    };
    _TsEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
      this._visitIdentifier(ast.value, ast.typeParams, ctx);
      return null;
    };
    _TsEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
      if (ctx.isExportedVar(stmt.name)) {
        ctx.print("export ");
      }
      if (stmt.hasModifier(StmtModifier.Final)) {
        ctx.print("const");
      } else {
        ctx.print("var");
      }
      ctx.print(" " + stmt.name + ":");
      this.visitType(stmt.type, ctx);
      ctx.print(" = ");
      stmt.value.visitExpression(this, ctx);
      ctx.println(";");
      return null;
    };
    _TsEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
      ctx.print("(<");
      ast.type.visitType(this, ctx);
      ctx.print(">");
      ast.value.visitExpression(this, ctx);
      ctx.print(")");
      return null;
    };
    _TsEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
      var _this = this;
      ctx.pushClass(stmt);
      if (ctx.isExportedVar(stmt.name)) {
        ctx.print("export ");
      }
      ctx.print("class " + stmt.name);
      if (isPresent(stmt.parent)) {
        ctx.print(" extends ");
        stmt.parent.visitExpression(this, ctx);
      }
      ctx.println(" {");
      ctx.incIndent();
      stmt.fields.forEach(function(field) {
        return _this._visitClassField(field, ctx);
      });
      if (isPresent(stmt.constructorMethod)) {
        this._visitClassConstructor(stmt, ctx);
      }
      stmt.getters.forEach(function(getter) {
        return _this._visitClassGetter(getter, ctx);
      });
      stmt.methods.forEach(function(method) {
        return _this._visitClassMethod(method, ctx);
      });
      ctx.decIndent();
      ctx.println("}");
      ctx.popClass();
      return null;
    };
    _TsEmitterVisitor.prototype._visitClassField = function(field, ctx) {
      if (field.hasModifier(StmtModifier.Private)) {
        ctx.print("/*private*/ ");
      }
      ctx.print(field.name);
      ctx.print(':');
      this.visitType(field.type, ctx);
      ctx.println(";");
    };
    _TsEmitterVisitor.prototype._visitClassGetter = function(getter, ctx) {
      if (getter.hasModifier(StmtModifier.Private)) {
        ctx.print("private ");
      }
      ctx.print("get " + getter.name + "()");
      ctx.print(':');
      this.visitType(getter.type, ctx);
      ctx.println(" {");
      ctx.incIndent();
      this.visitAllStatements(getter.body, ctx);
      ctx.decIndent();
      ctx.println("}");
    };
    _TsEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
      ctx.print("constructor(");
      this._visitParams(stmt.constructorMethod.params, ctx);
      ctx.println(") {");
      ctx.incIndent();
      this.visitAllStatements(stmt.constructorMethod.body, ctx);
      ctx.decIndent();
      ctx.println("}");
    };
    _TsEmitterVisitor.prototype._visitClassMethod = function(method, ctx) {
      if (method.hasModifier(StmtModifier.Private)) {
        ctx.print("private ");
      }
      ctx.print(method.name + "(");
      this._visitParams(method.params, ctx);
      ctx.print("):");
      this.visitType(method.type, ctx, 'void');
      ctx.println(" {");
      ctx.incIndent();
      this.visitAllStatements(method.body, ctx);
      ctx.decIndent();
      ctx.println("}");
    };
    _TsEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
      ctx.print("(");
      this._visitParams(ast.params, ctx);
      ctx.print("):");
      this.visitType(ast.type, ctx, 'void');
      ctx.println(" => {");
      ctx.incIndent();
      this.visitAllStatements(ast.statements, ctx);
      ctx.decIndent();
      ctx.print("}");
      return null;
    };
    _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
      if (ctx.isExportedVar(stmt.name)) {
        ctx.print("export ");
      }
      ctx.print("function " + stmt.name + "(");
      this._visitParams(stmt.params, ctx);
      ctx.print("):");
      this.visitType(stmt.type, ctx, 'void');
      ctx.println(" {");
      ctx.incIndent();
      this.visitAllStatements(stmt.statements, ctx);
      ctx.decIndent();
      ctx.println("}");
      return null;
    };
    _TsEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
      ctx.println("try {");
      ctx.incIndent();
      this.visitAllStatements(stmt.bodyStmts, ctx);
      ctx.decIndent();
      ctx.println("} catch (" + CATCH_ERROR_VAR$2.name + ") {");
      ctx.incIndent();
      var catchStmts = [CATCH_STACK_VAR$2.set(CATCH_ERROR_VAR$2.prop('stack')).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);
      this.visitAllStatements(catchStmts, ctx);
      ctx.decIndent();
      ctx.println("}");
      return null;
    };
    _TsEmitterVisitor.prototype.visitBuiltintType = function(type, ctx) {
      var typeStr;
      switch (type.name) {
        case BuiltinTypeName.Bool:
          typeStr = 'boolean';
          break;
        case BuiltinTypeName.Dynamic:
          typeStr = 'any';
          break;
        case BuiltinTypeName.Function:
          typeStr = 'Function';
          break;
        case BuiltinTypeName.Number:
          typeStr = 'number';
          break;
        case BuiltinTypeName.Int:
          typeStr = 'number';
          break;
        case BuiltinTypeName.String:
          typeStr = 'string';
          break;
        default:
          throw new Error("Unsupported builtin type " + type.name);
      }
      ctx.print(typeStr);
      return null;
    };
    _TsEmitterVisitor.prototype.visitExternalType = function(ast, ctx) {
      this._visitIdentifier(ast.value, ast.typeParams, ctx);
      return null;
    };
    _TsEmitterVisitor.prototype.visitArrayType = function(type, ctx) {
      this.visitType(type.of, ctx);
      ctx.print("[]");
      return null;
    };
    _TsEmitterVisitor.prototype.visitMapType = function(type, ctx) {
      ctx.print("{[key: string]:");
      this.visitType(type.valueType, ctx);
      ctx.print("}");
      return null;
    };
    _TsEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
      var name;
      switch (method) {
        case BuiltinMethod.ConcatArray:
          name = 'concat';
          break;
        case BuiltinMethod.SubscribeObservable:
          name = 'subscribe';
          break;
        case BuiltinMethod.Bind:
          name = 'bind';
          break;
        default:
          throw new Error("Unknown builtin method: " + method);
      }
      return name;
    };
    _TsEmitterVisitor.prototype._visitParams = function(params, ctx) {
      var _this = this;
      this.visitAllObjects(function(param) {
        ctx.print(param.name);
        ctx.print(':');
        _this.visitType(param.type, ctx);
      }, params, ctx, ',');
    };
    _TsEmitterVisitor.prototype._visitIdentifier = function(value, typeParams, ctx) {
      var _this = this;
      if (isBlank(value.name)) {
        throw new Error("Internal error: unknown identifier " + value);
      }
      if (isPresent(value.moduleUrl) && value.moduleUrl != this._moduleUrl) {
        var prefix = this.importsWithPrefixes.get(value.moduleUrl);
        if (isBlank(prefix)) {
          prefix = "import" + this.importsWithPrefixes.size;
          this.importsWithPrefixes.set(value.moduleUrl, prefix);
        }
        ctx.print(prefix + ".");
      }
      if (value.reference && value.reference.members) {
        ctx.print(value.reference.name);
        ctx.print('.');
        ctx.print(value.reference.members.join('.'));
      } else {
        ctx.print(value.name);
      }
      if (isPresent(typeParams) && typeParams.length > 0) {
        ctx.print("<");
        this.visitAllObjects(function(type) {
          return type.visitType(_this, ctx);
        }, typeParams, ctx, ',');
        ctx.print(">");
      }
    };
    return _TsEmitterVisitor;
  }(AbstractEmitterVisitor));
  function interpretStatements(statements, resultVar) {
    var stmtsWithReturn = statements.concat([new ReturnStatement(variable(resultVar))]);
    var ctx = new _ExecutionContext(null, null, null, new Map());
    var visitor = new StatementInterpreter();
    var result = visitor.visitAllStatements(stmtsWithReturn, ctx);
    return isPresent(result) ? result.value : null;
  }
  function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
    var childCtx = ctx.createChildWihtLocalVars();
    for (var i = 0; i < varNames.length; i++) {
      childCtx.vars.set(varNames[i], varValues[i]);
    }
    var result = visitor.visitAllStatements(statements, childCtx);
    return isPresent(result) ? result.value : null;
  }
  var _ExecutionContext = (function() {
    function _ExecutionContext(parent, instance, className, vars) {
      this.parent = parent;
      this.instance = instance;
      this.className = className;
      this.vars = vars;
    }
    _ExecutionContext.prototype.createChildWihtLocalVars = function() {
      return new _ExecutionContext(this, this.instance, this.className, new Map());
    };
    return _ExecutionContext;
  }());
  var ReturnValue = (function() {
    function ReturnValue(value) {
      this.value = value;
    }
    return ReturnValue;
  }());
  function createDynamicClass(_classStmt, _ctx, _visitor) {
    var propertyDescriptors = {};
    _classStmt.getters.forEach(function(getter) {
      propertyDescriptors[getter.name] = {
        configurable: false,
        get: function() {
          var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
          return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
        }
      };
    });
    _classStmt.methods.forEach(function(method) {
      var paramNames = method.params.map(function(param) {
        return param.name;
      });
      propertyDescriptors[method.name] = {
        writable: false,
        configurable: false,
        value: function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
          }
          var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
          return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
        }
      };
    });
    var ctorParamNames = _classStmt.constructorMethod.params.map(function(param) {
      return param.name;
    });
    var ctor = function() {
      var _this = this;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
      _classStmt.fields.forEach(function(field) {
        _this[field.name] = undefined;
      });
      _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
    };
    var superClass = _classStmt.parent.visitExpression(_visitor, _ctx);
    ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
    return ctor;
  }
  var StatementInterpreter = (function() {
    function StatementInterpreter() {}
    StatementInterpreter.prototype.debugAst = function(ast) {
      return debugOutputAstAsTypeScript(ast);
    };
    StatementInterpreter.prototype.visitDeclareVarStmt = function(stmt, ctx) {
      ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
      return null;
    };
    StatementInterpreter.prototype.visitWriteVarExpr = function(expr, ctx) {
      var value = expr.value.visitExpression(this, ctx);
      var currCtx = ctx;
      while (currCtx != null) {
        if (currCtx.vars.has(expr.name)) {
          currCtx.vars.set(expr.name, value);
          return value;
        }
        currCtx = currCtx.parent;
      }
      throw new Error("Not declared variable " + expr.name);
    };
    StatementInterpreter.prototype.visitReadVarExpr = function(ast, ctx) {
      var varName = ast.name;
      if (isPresent(ast.builtin)) {
        switch (ast.builtin) {
          case BuiltinVar.Super:
            return ctx.instance.__proto__;
          case BuiltinVar.This:
            return ctx.instance;
          case BuiltinVar.CatchError:
            varName = CATCH_ERROR_VAR$1;
            break;
          case BuiltinVar.CatchStack:
            varName = CATCH_STACK_VAR$1;
            break;
          default:
            throw new Error("Unknown builtin variable " + ast.builtin);
        }
      }
      var currCtx = ctx;
      while (currCtx != null) {
        if (currCtx.vars.has(varName)) {
          return currCtx.vars.get(varName);
        }
        currCtx = currCtx.parent;
      }
      throw new Error("Not declared variable " + varName);
    };
    StatementInterpreter.prototype.visitWriteKeyExpr = function(expr, ctx) {
      var receiver = expr.receiver.visitExpression(this, ctx);
      var index = expr.index.visitExpression(this, ctx);
      var value = expr.value.visitExpression(this, ctx);
      receiver[index] = value;
      return value;
    };
    StatementInterpreter.prototype.visitWritePropExpr = function(expr, ctx) {
      var receiver = expr.receiver.visitExpression(this, ctx);
      var value = expr.value.visitExpression(this, ctx);
      receiver[expr.name] = value;
      return value;
    };
    StatementInterpreter.prototype.visitInvokeMethodExpr = function(expr, ctx) {
      var receiver = expr.receiver.visitExpression(this, ctx);
      var args = this.visitAllExpressions(expr.args, ctx);
      var result;
      if (isPresent(expr.builtin)) {
        switch (expr.builtin) {
          case BuiltinMethod.ConcatArray:
            result = ListWrapper.concat(receiver, args[0]);
            break;
          case BuiltinMethod.SubscribeObservable:
            result = receiver.subscribe({next: args[0]});
            break;
          case BuiltinMethod.Bind:
            result = receiver.bind(args[0]);
            break;
          default:
            throw new Error("Unknown builtin method " + expr.builtin);
        }
      } else {
        result = receiver[expr.name].apply(receiver, args);
      }
      return result;
    };
    StatementInterpreter.prototype.visitInvokeFunctionExpr = function(stmt, ctx) {
      var args = this.visitAllExpressions(stmt.args, ctx);
      var fnExpr = stmt.fn;
      if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
        ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
        return null;
      } else {
        var fn = stmt.fn.visitExpression(this, ctx);
        return fn.apply(null, args);
      }
    };
    StatementInterpreter.prototype.visitReturnStmt = function(stmt, ctx) {
      return new ReturnValue(stmt.value.visitExpression(this, ctx));
    };
    StatementInterpreter.prototype.visitDeclareClassStmt = function(stmt, ctx) {
      var clazz = createDynamicClass(stmt, ctx, this);
      ctx.vars.set(stmt.name, clazz);
      return null;
    };
    StatementInterpreter.prototype.visitExpressionStmt = function(stmt, ctx) {
      return stmt.expr.visitExpression(this, ctx);
    };
    StatementInterpreter.prototype.visitIfStmt = function(stmt, ctx) {
      var condition = stmt.condition.visitExpression(this, ctx);
      if (condition) {
        return this.visitAllStatements(stmt.trueCase, ctx);
      } else if (isPresent(stmt.falseCase)) {
        return this.visitAllStatements(stmt.falseCase, ctx);
      }
      return null;
    };
    StatementInterpreter.prototype.visitTryCatchStmt = function(stmt, ctx) {
      try {
        return this.visitAllStatements(stmt.bodyStmts, ctx);
      } catch (e) {
        var childCtx = ctx.createChildWihtLocalVars();
        childCtx.vars.set(CATCH_ERROR_VAR$1, e);
        childCtx.vars.set(CATCH_STACK_VAR$1, e.stack);
        return this.visitAllStatements(stmt.catchStmts, childCtx);
      }
    };
    StatementInterpreter.prototype.visitThrowStmt = function(stmt, ctx) {
      throw stmt.error.visitExpression(this, ctx);
    };
    StatementInterpreter.prototype.visitCommentStmt = function(stmt, context) {
      return null;
    };
    StatementInterpreter.prototype.visitInstantiateExpr = function(ast, ctx) {
      var args = this.visitAllExpressions(ast.args, ctx);
      var clazz = ast.classExpr.visitExpression(this, ctx);
      return new (clazz.bind.apply(clazz, [void 0].concat(args)))();
    };
    StatementInterpreter.prototype.visitLiteralExpr = function(ast, ctx) {
      return ast.value;
    };
    StatementInterpreter.prototype.visitExternalExpr = function(ast, ctx) {
      return ast.value.reference;
    };
    StatementInterpreter.prototype.visitConditionalExpr = function(ast, ctx) {
      if (ast.condition.visitExpression(this, ctx)) {
        return ast.trueCase.visitExpression(this, ctx);
      } else if (isPresent(ast.falseCase)) {
        return ast.falseCase.visitExpression(this, ctx);
      }
      return null;
    };
    StatementInterpreter.prototype.visitNotExpr = function(ast, ctx) {
      return !ast.condition.visitExpression(this, ctx);
    };
    StatementInterpreter.prototype.visitCastExpr = function(ast, ctx) {
      return ast.value.visitExpression(this, ctx);
    };
    StatementInterpreter.prototype.visitFunctionExpr = function(ast, ctx) {
      var paramNames = ast.params.map(function(param) {
        return param.name;
      });
      return _declareFn(paramNames, ast.statements, ctx, this);
    };
    StatementInterpreter.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
      var paramNames = stmt.params.map(function(param) {
        return param.name;
      });
      ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
      return null;
    };
    StatementInterpreter.prototype.visitBinaryOperatorExpr = function(ast, ctx) {
      var _this = this;
      var lhs = function() {
        return ast.lhs.visitExpression(_this, ctx);
      };
      var rhs = function() {
        return ast.rhs.visitExpression(_this, ctx);
      };
      switch (ast.operator) {
        case BinaryOperator.Equals:
          return lhs() == rhs();
        case BinaryOperator.Identical:
          return lhs() === rhs();
        case BinaryOperator.NotEquals:
          return lhs() != rhs();
        case BinaryOperator.NotIdentical:
          return lhs() !== rhs();
        case BinaryOperator.And:
          return lhs() && rhs();
        case BinaryOperator.Or:
          return lhs() || rhs();
        case BinaryOperator.Plus:
          return lhs() + rhs();
        case BinaryOperator.Minus:
          return lhs() - rhs();
        case BinaryOperator.Divide:
          return lhs() / rhs();
        case BinaryOperator.Multiply:
          return lhs() * rhs();
        case BinaryOperator.Modulo:
          return lhs() % rhs();
        case BinaryOperator.Lower:
          return lhs() < rhs();
        case BinaryOperator.LowerEquals:
          return lhs() <= rhs();
        case BinaryOperator.Bigger:
          return lhs() > rhs();
        case BinaryOperator.BiggerEquals:
          return lhs() >= rhs();
        default:
          throw new Error("Unknown operator " + ast.operator);
      }
    };
    StatementInterpreter.prototype.visitReadPropExpr = function(ast, ctx) {
      var result;
      var receiver = ast.receiver.visitExpression(this, ctx);
      result = receiver[ast.name];
      return result;
    };
    StatementInterpreter.prototype.visitReadKeyExpr = function(ast, ctx) {
      var receiver = ast.receiver.visitExpression(this, ctx);
      var prop = ast.index.visitExpression(this, ctx);
      return receiver[prop];
    };
    StatementInterpreter.prototype.visitLiteralArrayExpr = function(ast, ctx) {
      return this.visitAllExpressions(ast.entries, ctx);
    };
    StatementInterpreter.prototype.visitLiteralMapExpr = function(ast, ctx) {
      var _this = this;
      var result = {};
      ast.entries.forEach(function(entry) {
        return result[entry[0]] = entry[1].visitExpression(_this, ctx);
      });
      return result;
    };
    StatementInterpreter.prototype.visitAllExpressions = function(expressions, ctx) {
      var _this = this;
      return expressions.map(function(expr) {
        return expr.visitExpression(_this, ctx);
      });
    };
    StatementInterpreter.prototype.visitAllStatements = function(statements, ctx) {
      for (var i = 0; i < statements.length; i++) {
        var stmt = statements[i];
        var val = stmt.visitStatement(this, ctx);
        if (val instanceof ReturnValue) {
          return val;
        }
      }
      return null;
    };
    return StatementInterpreter;
  }());
  function _declareFn(varNames, statements, ctx, visitor) {
    return function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
    };
  }
  var CATCH_ERROR_VAR$1 = 'error';
  var CATCH_STACK_VAR$1 = 'stack';
  var __extends$17 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AbstractJsEmitterVisitor = (function(_super) {
    __extends$17(AbstractJsEmitterVisitor, _super);
    function AbstractJsEmitterVisitor() {
      _super.call(this, false);
    }
    AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function(stmt, ctx) {
      var _this = this;
      ctx.pushClass(stmt);
      this._visitClassConstructor(stmt, ctx);
      if (isPresent(stmt.parent)) {
        ctx.print(stmt.name + ".prototype = Object.create(");
        stmt.parent.visitExpression(this, ctx);
        ctx.println(".prototype);");
      }
      stmt.getters.forEach(function(getter) {
        return _this._visitClassGetter(stmt, getter, ctx);
      });
      stmt.methods.forEach(function(method) {
        return _this._visitClassMethod(stmt, method, ctx);
      });
      ctx.popClass();
      return null;
    };
    AbstractJsEmitterVisitor.prototype._visitClassConstructor = function(stmt, ctx) {
      ctx.print("function " + stmt.name + "(");
      if (isPresent(stmt.constructorMethod)) {
        this._visitParams(stmt.constructorMethod.params, ctx);
      }
      ctx.println(") {");
      ctx.incIndent();
      if (isPresent(stmt.constructorMethod)) {
        if (stmt.constructorMethod.body.length > 0) {
          ctx.println("var self = this;");
          this.visitAllStatements(stmt.constructorMethod.body, ctx);
        }
      }
      ctx.decIndent();
      ctx.println("}");
    };
    AbstractJsEmitterVisitor.prototype._visitClassGetter = function(stmt, getter, ctx) {
      ctx.println("Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {");
      ctx.incIndent();
      if (getter.body.length > 0) {
        ctx.println("var self = this;");
        this.visitAllStatements(getter.body, ctx);
      }
      ctx.decIndent();
      ctx.println("}});");
    };
    AbstractJsEmitterVisitor.prototype._visitClassMethod = function(stmt, method, ctx) {
      ctx.print(stmt.name + ".prototype." + method.name + " = function(");
      this._visitParams(method.params, ctx);
      ctx.println(") {");
      ctx.incIndent();
      if (method.body.length > 0) {
        ctx.println("var self = this;");
        this.visitAllStatements(method.body, ctx);
      }
      ctx.decIndent();
      ctx.println("};");
    };
    AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function(ast, ctx) {
      if (ast.builtin === BuiltinVar.This) {
        ctx.print('self');
      } else if (ast.builtin === BuiltinVar.Super) {
        throw new Error("'super' needs to be handled at a parent ast node, not at the variable level!");
      } else {
        _super.prototype.visitReadVarExpr.call(this, ast, ctx);
      }
      return null;
    };
    AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function(stmt, ctx) {
      ctx.print("var " + stmt.name + " = ");
      stmt.value.visitExpression(this, ctx);
      ctx.println(";");
      return null;
    };
    AbstractJsEmitterVisitor.prototype.visitCastExpr = function(ast, ctx) {
      ast.value.visitExpression(this, ctx);
      return null;
    };
    AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function(expr, ctx) {
      var fnExpr = expr.fn;
      if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
        ctx.currentClass.parent.visitExpression(this, ctx);
        ctx.print(".call(this");
        if (expr.args.length > 0) {
          ctx.print(", ");
          this.visitAllExpressions(expr.args, ctx, ',');
        }
        ctx.print(")");
      } else {
        _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);
      }
      return null;
    };
    AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function(ast, ctx) {
      ctx.print("function(");
      this._visitParams(ast.params, ctx);
      ctx.println(") {");
      ctx.incIndent();
      this.visitAllStatements(ast.statements, ctx);
      ctx.decIndent();
      ctx.print("}");
      return null;
    };
    AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function(stmt, ctx) {
      ctx.print("function " + stmt.name + "(");
      this._visitParams(stmt.params, ctx);
      ctx.println(") {");
      ctx.incIndent();
      this.visitAllStatements(stmt.statements, ctx);
      ctx.decIndent();
      ctx.println("}");
      return null;
    };
    AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function(stmt, ctx) {
      ctx.println("try {");
      ctx.incIndent();
      this.visitAllStatements(stmt.bodyStmts, ctx);
      ctx.decIndent();
      ctx.println("} catch (" + CATCH_ERROR_VAR$2.name + ") {");
      ctx.incIndent();
      var catchStmts = [CATCH_STACK_VAR$2.set(CATCH_ERROR_VAR$2.prop('stack')).toDeclStmt(null, [StmtModifier.Final])].concat(stmt.catchStmts);
      this.visitAllStatements(catchStmts, ctx);
      ctx.decIndent();
      ctx.println("}");
      return null;
    };
    AbstractJsEmitterVisitor.prototype._visitParams = function(params, ctx) {
      this.visitAllObjects(function(param) {
        return ctx.print(param.name);
      }, params, ctx, ',');
    };
    AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function(method) {
      var name;
      switch (method) {
        case BuiltinMethod.ConcatArray:
          name = 'concat';
          break;
        case BuiltinMethod.SubscribeObservable:
          name = 'subscribe';
          break;
        case BuiltinMethod.Bind:
          name = 'bind';
          break;
        default:
          throw new Error("Unknown builtin method: " + method);
      }
      return name;
    };
    return AbstractJsEmitterVisitor;
  }(AbstractEmitterVisitor));
  var __extends$16 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function jitStatements(sourceUrl, statements, resultVar) {
    var converter = new JitEmitterVisitor();
    var ctx = EmitterVisitorContext.createRoot([resultVar]);
    converter.visitAllStatements(statements, ctx);
    return evalExpression(sourceUrl, resultVar, ctx.toSource(), converter.getArgs());
  }
  var JitEmitterVisitor = (function(_super) {
    __extends$16(JitEmitterVisitor, _super);
    function JitEmitterVisitor() {
      _super.apply(this, arguments);
      this._evalArgNames = [];
      this._evalArgValues = [];
    }
    JitEmitterVisitor.prototype.getArgs = function() {
      var result = {};
      for (var i = 0; i < this._evalArgNames.length; i++) {
        result[this._evalArgNames[i]] = this._evalArgValues[i];
      }
      return result;
    };
    JitEmitterVisitor.prototype.visitExternalExpr = function(ast, ctx) {
      var value = ast.value.reference;
      var id = this._evalArgValues.indexOf(value);
      if (id === -1) {
        id = this._evalArgValues.length;
        this._evalArgValues.push(value);
        var name = isPresent(ast.value.name) ? sanitizeIdentifier(ast.value.name) : 'val';
        this._evalArgNames.push(sanitizeIdentifier("jit_" + name + id));
      }
      ctx.print(this._evalArgNames[id]);
      return null;
    };
    return JitEmitterVisitor;
  }(AbstractJsEmitterVisitor));
  var ShadowCss = (function() {
    function ShadowCss() {
      this.strictStyling = true;
    }
    ShadowCss.prototype.shimCssText = function(cssText, selector, hostSelector) {
      if (hostSelector === void 0) {
        hostSelector = '';
      }
      var sourceMappingUrl = extractSourceMappingUrl(cssText);
      cssText = stripComments(cssText);
      cssText = this._insertDirectives(cssText);
      return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;
    };
    ShadowCss.prototype._insertDirectives = function(cssText) {
      cssText = this._insertPolyfillDirectivesInCssText(cssText);
      return this._insertPolyfillRulesInCssText(cssText);
    };
    ShadowCss.prototype._insertPolyfillDirectivesInCssText = function(cssText) {
      return StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function(m) {
        return m[1] + '{';
      });
    };
    ShadowCss.prototype._insertPolyfillRulesInCssText = function(cssText) {
      return StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function(m) {
        var rule = m[0];
        rule = StringWrapper.replace(rule, m[1], '');
        rule = StringWrapper.replace(rule, m[2], '');
        return m[3] + rule;
      });
    };
    ShadowCss.prototype._scopeCssText = function(cssText, scopeSelector, hostSelector) {
      var unscoped = this._extractUnscopedRulesFromCssText(cssText);
      cssText = this._insertPolyfillHostInCssText(cssText);
      cssText = this._convertColonHost(cssText);
      cssText = this._convertColonHostContext(cssText);
      cssText = this._convertShadowDOMSelectors(cssText);
      if (isPresent(scopeSelector)) {
        cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
      }
      cssText = cssText + '\n' + unscoped;
      return cssText.trim();
    };
    ShadowCss.prototype._extractUnscopedRulesFromCssText = function(cssText) {
      var r = '';
      var m;
      _cssContentUnscopedRuleRe.lastIndex = 0;
      while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
        var rule = m[0];
        rule = StringWrapper.replace(rule, m[2], '');
        rule = StringWrapper.replace(rule, m[1], m[3]);
        r += rule + '\n\n';
      }
      return r;
    };
    ShadowCss.prototype._convertColonHost = function(cssText) {
      return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
    };
    ShadowCss.prototype._convertColonHostContext = function(cssText) {
      return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
    };
    ShadowCss.prototype._convertColonRule = function(cssText, regExp, partReplacer) {
      return StringWrapper.replaceAllMapped(cssText, regExp, function(m) {
        if (isPresent(m[2])) {
          var parts = m[2].split(','),
              r = [];
          for (var i = 0; i < parts.length; i++) {
            var p = parts[i];
            if (isBlank(p))
              break;
            p = p.trim();
            r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
          }
          return r.join(',');
        } else {
          return _polyfillHostNoCombinator + m[3];
        }
      });
    };
    ShadowCss.prototype._colonHostContextPartReplacer = function(host, part, suffix) {
      if (StringWrapper.contains(part, _polyfillHost)) {
        return this._colonHostPartReplacer(host, part, suffix);
      } else {
        return host + part + suffix + ', ' + part + ' ' + host + suffix;
      }
    };
    ShadowCss.prototype._colonHostPartReplacer = function(host, part, suffix) {
      return host + StringWrapper.replace(part, _polyfillHost, '') + suffix;
    };
    ShadowCss.prototype._convertShadowDOMSelectors = function(cssText) {
      return _shadowDOMSelectorsRe.reduce(function(result, pattern) {
        return StringWrapper.replaceAll(result, pattern, ' ');
      }, cssText);
    };
    ShadowCss.prototype._scopeSelectors = function(cssText, scopeSelector, hostSelector) {
      var _this = this;
      return processRules(cssText, function(rule) {
        var selector = rule.selector;
        var content = rule.content;
        if (rule.selector[0] != '@' || rule.selector.startsWith('@page')) {
          selector = _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
        } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports')) {
          content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
        }
        return new CssRule(selector, content);
      });
    };
    ShadowCss.prototype._scopeSelector = function(selector, scopeSelector, hostSelector, strict) {
      var _this = this;
      return selector.split(',').map(function(part) {
        return part.trim().split(_shadowDeepSelectors);
      }).map(function(deepParts) {
        var shallowPart = deepParts[0],
            otherParts = deepParts.slice(1);
        var applyScope = function(shallowPart) {
          if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {
            return strict ? _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) : _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
          } else {
            return shallowPart;
          }
        };
        return [applyScope(shallowPart)].concat(otherParts).join(' ');
      }).join(', ');
    };
    ShadowCss.prototype._selectorNeedsScoping = function(selector, scopeSelector) {
      var re = this._makeScopeMatcher(scopeSelector);
      return !re.test(selector);
    };
    ShadowCss.prototype._makeScopeMatcher = function(scopeSelector) {
      var lre = /\[/g;
      var rre = /\]/g;
      scopeSelector = StringWrapper.replaceAll(scopeSelector, lre, '\\[');
      scopeSelector = StringWrapper.replaceAll(scopeSelector, rre, '\\]');
      return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
    };
    ShadowCss.prototype._applySelectorScope = function(selector, scopeSelector, hostSelector) {
      return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
    };
    ShadowCss.prototype._applySimpleSelectorScope = function(selector, scopeSelector, hostSelector) {
      _polyfillHostRe.lastIndex = 0;
      if (_polyfillHostRe.test(selector)) {
        var replaceBy = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
        selector = StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy);
        return StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + ' ');
      } else {
        return scopeSelector + ' ' + selector;
      }
    };
    ShadowCss.prototype._applyStrictSelectorScope = function(selector, scopeSelector, hostSelector) {
      var _this = this;
      var isRe = /\[is=([^\]]*)\]/g;
      scopeSelector = scopeSelector.replace(isRe, function(_) {
        var parts = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          parts[_i - 1] = arguments[_i];
        }
        return parts[0];
      });
      var attrName = '[' + scopeSelector + ']';
      var _scopeSelectorPart = function(p) {
        var scopedP = p.trim();
        if (scopedP.length == 0) {
          return '';
        }
        if (p.indexOf(_polyfillHostNoCombinator) > -1) {
          scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
        } else {
          var t = p.replace(_polyfillHostRe, '');
          if (t.length > 0) {
            var matches = t.match(/([^:]*)(:*)(.*)/);
            if (matches !== null) {
              scopedP = matches[1] + attrName + matches[2] + matches[3];
            }
          }
        }
        return scopedP;
      };
      var sep = /( |>|\+|~)\s*/g;
      var scopeAfter = selector.indexOf(_polyfillHostNoCombinator);
      var scoped = '';
      var startIndex = 0;
      var res;
      while ((res = sep.exec(selector)) !== null) {
        var separator = res[1];
        var part = selector.slice(startIndex, res.index).trim();
        var scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;
        scoped += scopedPart + " " + separator + " ";
        startIndex = sep.lastIndex;
      }
      return scoped + _scopeSelectorPart(selector.substring(startIndex));
    };
    ShadowCss.prototype._insertPolyfillHostInCssText = function(selector) {
      return selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost);
    };
    return ShadowCss;
  }());
  var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?['"](.*?)['"][;\s]*}([^{]*?){/gim;
  var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
  var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim;
  var _polyfillHost = '-shadowcsshost';
  var _polyfillHostContext = '-shadowcsscontext';
  var _parenSuffix = ')(?:\\((' + '(?:\\([^)(]*\\)|[^)(]*)+?' + ')\\))?([^,{]*)';
  var _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');
  var _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');
  var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
  var _shadowDOMSelectorsRe = [/::shadow/g, /::content/g, /\/shadow-deep\//g, /\/shadow\//g];
  var _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
  var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
  var _polyfillHostRe = /-shadowcsshost/gim;
  var _colonHostRe = /:host/gim;
  var _colonHostContextRe = /:host-context/gim;
  var _commentRe = /\/\*\s*[\s\S]*?\*\//g;
  function stripComments(input) {
    return StringWrapper.replaceAllMapped(input, _commentRe, function(_) {
      return '';
    });
  }
  var _sourceMappingUrlRe = /[\s\S]*(\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\/)\s*$/;
  function extractSourceMappingUrl(input) {
    var matcher = input.match(_sourceMappingUrlRe);
    return matcher ? matcher[1] : '';
  }
  var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
  var _curlyRe = /([{}])/g;
  var OPEN_CURLY = '{';
  var CLOSE_CURLY = '}';
  var BLOCK_PLACEHOLDER = '%BLOCK%';
  var CssRule = (function() {
    function CssRule(selector, content) {
      this.selector = selector;
      this.content = content;
    }
    return CssRule;
  }());
  function processRules(input, ruleCallback) {
    var inputWithEscapedBlocks = escapeBlocks(input);
    var nextBlockIndex = 0;
    return StringWrapper.replaceAllMapped(inputWithEscapedBlocks.escapedString, _ruleRe, function(m) {
      var selector = m[2];
      var content = '';
      var suffix = m[4];
      var contentPrefix = '';
      if (isPresent(m[4]) && m[4].startsWith('{' + BLOCK_PLACEHOLDER)) {
        content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
        suffix = m[4].substring(BLOCK_PLACEHOLDER.length + 1);
        contentPrefix = '{';
      }
      var rule = ruleCallback(new CssRule(selector, content));
      return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
    });
  }
  var StringWithEscapedBlocks = (function() {
    function StringWithEscapedBlocks(escapedString, blocks) {
      this.escapedString = escapedString;
      this.blocks = blocks;
    }
    return StringWithEscapedBlocks;
  }());
  function escapeBlocks(input) {
    var inputParts = StringWrapper.split(input, _curlyRe);
    var resultParts = [];
    var escapedBlocks = [];
    var bracketCount = 0;
    var currentBlockParts = [];
    for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {
      var part = inputParts[partIndex];
      if (part == CLOSE_CURLY) {
        bracketCount--;
      }
      if (bracketCount > 0) {
        currentBlockParts.push(part);
      } else {
        if (currentBlockParts.length > 0) {
          escapedBlocks.push(currentBlockParts.join(''));
          resultParts.push(BLOCK_PLACEHOLDER);
          currentBlockParts = [];
        }
        resultParts.push(part);
      }
      if (part == OPEN_CURLY) {
        bracketCount++;
      }
    }
    if (currentBlockParts.length > 0) {
      escapedBlocks.push(currentBlockParts.join(''));
      resultParts.push(BLOCK_PLACEHOLDER);
    }
    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
  }
  var COMPONENT_VARIABLE = '%COMP%';
  var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
  var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
  var StylesCompileDependency = (function() {
    function StylesCompileDependency(moduleUrl, isShimmed, valuePlaceholder) {
      this.moduleUrl = moduleUrl;
      this.isShimmed = isShimmed;
      this.valuePlaceholder = valuePlaceholder;
    }
    return StylesCompileDependency;
  }());
  var StylesCompileResult = (function() {
    function StylesCompileResult(componentStylesheet, externalStylesheets) {
      this.componentStylesheet = componentStylesheet;
      this.externalStylesheets = externalStylesheets;
    }
    return StylesCompileResult;
  }());
  var CompiledStylesheet = (function() {
    function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
      this.statements = statements;
      this.stylesVar = stylesVar;
      this.dependencies = dependencies;
      this.isShimmed = isShimmed;
      this.meta = meta;
    }
    return CompiledStylesheet;
  }());
  var StyleCompiler = (function() {
    function StyleCompiler(_urlResolver) {
      this._urlResolver = _urlResolver;
      this._shadowCss = new ShadowCss();
    }
    StyleCompiler.prototype.compileComponent = function(comp) {
      var _this = this;
      var externalStylesheets = [];
      var componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({
        styles: comp.template.styles,
        styleUrls: comp.template.styleUrls,
        moduleUrl: comp.type.moduleUrl
      }), true);
      comp.template.externalStylesheets.forEach(function(stylesheetMeta) {
        var compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, false);
        externalStylesheets.push(compiledStylesheet);
      });
      return new StylesCompileResult(componentStylesheet, externalStylesheets);
    };
    StyleCompiler.prototype._compileStyles = function(comp, stylesheet, isComponentStylesheet) {
      var _this = this;
      var shim = comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated;
      var styleExpressions = stylesheet.styles.map(function(plainStyle) {
        return literal(_this._shimIfNeeded(plainStyle, shim));
      });
      var dependencies = [];
      for (var i = 0; i < stylesheet.styleUrls.length; i++) {
        var identifier = new CompileIdentifierMetadata({name: getStylesVarName(null)});
        dependencies.push(new StylesCompileDependency(stylesheet.styleUrls[i], shim, identifier));
        styleExpressions.push(new ExternalExpr(identifier));
      }
      var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
      var stmt = variable(stylesVar).set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const]))).toDeclStmt(null, [StmtModifier.Final]);
      return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);
    };
    StyleCompiler.prototype._shimIfNeeded = function(style, shim) {
      return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
    };
    StyleCompiler.decorators = [{type: _angular_core.Injectable}];
    StyleCompiler.ctorParameters = [{type: UrlResolver}];
    return StyleCompiler;
  }());
  function getStylesVarName(component) {
    var result = "styles";
    if (component) {
      result += "_" + component.type.name;
    }
    return result;
  }
  var RuntimeCompiler = (function() {
    function RuntimeCompiler(_injector, _metadataResolver, _templateNormalizer, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _compilerConfig) {
      this._injector = _injector;
      this._metadataResolver = _metadataResolver;
      this._templateNormalizer = _templateNormalizer;
      this._templateParser = _templateParser;
      this._styleCompiler = _styleCompiler;
      this._viewCompiler = _viewCompiler;
      this._ngModuleCompiler = _ngModuleCompiler;
      this._compilerConfig = _compilerConfig;
      this._compiledTemplateCache = new Map();
      this._compiledHostTemplateCache = new Map();
      this._compiledNgModuleCache = new Map();
    }
    Object.defineProperty(RuntimeCompiler.prototype, "injector", {
      get: function() {
        return this._injector;
      },
      enumerable: true,
      configurable: true
    });
    RuntimeCompiler.prototype.compileModuleSync = function(moduleType) {
      return this._compileModuleAndComponents(moduleType, true).syncResult;
    };
    RuntimeCompiler.prototype.compileModuleAsync = function(moduleType) {
      return this._compileModuleAndComponents(moduleType, false).asyncResult;
    };
    RuntimeCompiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
      return this._compileModuleAndAllComponents(moduleType, true).syncResult;
    };
    RuntimeCompiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
      return this._compileModuleAndAllComponents(moduleType, false).asyncResult;
    };
    RuntimeCompiler.prototype._compileModuleAndComponents = function(moduleType, isSync) {
      var componentPromise = this._compileComponents(moduleType, isSync);
      var ngModuleFactory = this._compileModule(moduleType);
      return new SyncAsyncResult(ngModuleFactory, componentPromise.then(function() {
        return ngModuleFactory;
      }));
    };
    RuntimeCompiler.prototype._compileModuleAndAllComponents = function(moduleType, isSync) {
      var _this = this;
      var componentPromise = this._compileComponents(moduleType, isSync);
      var ngModuleFactory = this._compileModule(moduleType);
      var moduleMeta = this._metadataResolver.getNgModuleMetadata(moduleType);
      var componentFactories = [];
      var templates = new Set();
      moduleMeta.transitiveModule.modules.forEach(function(moduleMeta) {
        moduleMeta.declaredDirectives.forEach(function(dirMeta) {
          if (dirMeta.isComponent) {
            var template = _this._createCompiledHostTemplate(dirMeta.type.reference);
            templates.add(template);
            componentFactories.push(template.proxyComponentFactory);
          }
        });
      });
      var syncResult = new _angular_core.ModuleWithComponentFactories(ngModuleFactory, componentFactories);
      var compile = function() {
        templates.forEach(function(template) {
          _this._compileTemplate(template);
        });
        return syncResult;
      };
      var asyncResult = isSync ? Promise.resolve(compile()) : componentPromise.then(compile);
      return new SyncAsyncResult(syncResult, asyncResult);
    };
    RuntimeCompiler.prototype._compileModule = function(moduleType) {
      var _this = this;
      var ngModuleFactory = this._compiledNgModuleCache.get(moduleType);
      if (!ngModuleFactory) {
        var moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType);
        var extraProviders = [this._metadataResolver.getProviderMetadata(new ProviderMeta(_angular_core.Compiler, {useFactory: function() {
            return new ModuleBoundCompiler(_this, moduleMeta_1.type.reference);
          }}))];
        var compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);
        compileResult.dependencies.forEach(function(dep) {
          dep.placeholder.reference = _this._assertComponentKnown(dep.comp.reference, true).proxyComponentFactory;
          dep.placeholder.name = "compFactory_" + dep.comp.name;
        });
        if (!this._compilerConfig.useJit) {
          ngModuleFactory = interpretStatements(compileResult.statements, compileResult.ngModuleFactoryVar);
        } else {
          ngModuleFactory = jitStatements(moduleMeta_1.type.name + ".ngfactory.js", compileResult.statements, compileResult.ngModuleFactoryVar);
        }
        this._compiledNgModuleCache.set(moduleMeta_1.type.reference, ngModuleFactory);
      }
      return ngModuleFactory;
    };
    RuntimeCompiler.prototype._compileComponents = function(mainModule, isSync) {
      var _this = this;
      var templates = new Set();
      var loadingPromises = [];
      var ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
      ngModule.transitiveModule.modules.forEach(function(localModuleMeta) {
        localModuleMeta.declaredDirectives.forEach(function(dirMeta) {
          if (dirMeta.isComponent) {
            templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));
            dirMeta.entryComponents.forEach(function(entryComponentType) {
              templates.add(_this._createCompiledHostTemplate(entryComponentType.reference));
            });
          }
        });
        localModuleMeta.entryComponents.forEach(function(entryComponentType) {
          templates.add(_this._createCompiledHostTemplate(entryComponentType.reference));
        });
      });
      templates.forEach(function(template) {
        if (template.loading) {
          if (isSync) {
            throw new ComponentStillLoadingError(template.compType.reference);
          } else {
            loadingPromises.push(template.loading);
          }
        }
      });
      var compile = function() {
        templates.forEach(function(template) {
          _this._compileTemplate(template);
        });
      };
      if (isSync) {
        compile();
        return Promise.resolve(null);
      } else {
        return Promise.all(loadingPromises).then(compile);
      }
    };
    RuntimeCompiler.prototype.clearCacheFor = function(type) {
      this._compiledNgModuleCache.delete(type);
      this._metadataResolver.clearCacheFor(type);
      this._compiledHostTemplateCache.delete(type);
      var compiledTemplate = this._compiledTemplateCache.get(type);
      if (compiledTemplate) {
        this._templateNormalizer.clearCacheFor(compiledTemplate.normalizedCompMeta);
        this._compiledTemplateCache.delete(type);
      }
    };
    RuntimeCompiler.prototype.clearCache = function() {
      this._metadataResolver.clearCache();
      this._compiledTemplateCache.clear();
      this._compiledHostTemplateCache.clear();
      this._templateNormalizer.clearCache();
      this._compiledNgModuleCache.clear();
    };
    RuntimeCompiler.prototype._createCompiledHostTemplate = function(compType) {
      var compiledTemplate = this._compiledHostTemplateCache.get(compType);
      if (isBlank(compiledTemplate)) {
        var compMeta = this._metadataResolver.getDirectiveMetadata(compType);
        assertComponent(compMeta);
        var hostMeta = createHostComponentMeta(compMeta);
        compiledTemplate = new CompiledTemplate(true, compMeta.selector, compMeta.type, [compMeta], [], [], this._templateNormalizer.normalizeDirective(hostMeta));
        this._compiledHostTemplateCache.set(compType, compiledTemplate);
      }
      return compiledTemplate;
    };
    RuntimeCompiler.prototype._createCompiledTemplate = function(compMeta, ngModule) {
      var compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);
      if (isBlank(compiledTemplate)) {
        assertComponent(compMeta);
        compiledTemplate = new CompiledTemplate(false, compMeta.selector, compMeta.type, ngModule.transitiveModule.directives, ngModule.transitiveModule.pipes, ngModule.schemas, this._templateNormalizer.normalizeDirective(compMeta));
        this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);
      }
      return compiledTemplate;
    };
    RuntimeCompiler.prototype._assertComponentKnown = function(compType, isHost) {
      var compiledTemplate = isHost ? this._compiledHostTemplateCache.get(compType) : this._compiledTemplateCache.get(compType);
      if (!compiledTemplate) {
        if (isHost) {
          throw new Error("Illegal state: Compiled view for component " + stringify(compType) + " does not exist!");
        } else {
          throw new Error("Component " + stringify(compType) + " is not part of any NgModule or the module has not been imported into your module.");
        }
      }
      return compiledTemplate;
    };
    RuntimeCompiler.prototype._assertComponentLoaded = function(compType, isHost) {
      var compiledTemplate = this._assertComponentKnown(compType, isHost);
      if (compiledTemplate.loading) {
        throw new Error("Illegal state: CompiledTemplate for " + stringify(compType) + " (isHost: " + isHost + ") is still loading!");
      }
      return compiledTemplate;
    };
    RuntimeCompiler.prototype._compileTemplate = function(template) {
      var _this = this;
      if (template.isCompiled) {
        return;
      }
      var compMeta = template.normalizedCompMeta;
      var externalStylesheetsByModuleUrl = new Map();
      var stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
      stylesCompileResult.externalStylesheets.forEach(function(r) {
        externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r);
      });
      this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
      var viewCompMetas = template.viewComponentTypes.map(function(compType) {
        return _this._assertComponentLoaded(compType, false).normalizedCompMeta;
      });
      var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, template.viewDirectives.concat(viewCompMetas), template.viewPipes, template.schemas, compMeta.type.name);
      var compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), template.viewPipes);
      compileResult.dependencies.forEach(function(dep) {
        var depTemplate;
        if (dep instanceof ViewFactoryDependency) {
          var vfd = dep;
          depTemplate = _this._assertComponentLoaded(vfd.comp.reference, false);
          vfd.placeholder.reference = depTemplate.proxyViewFactory;
          vfd.placeholder.name = "viewFactory_" + vfd.comp.name;
        } else if (dep instanceof ComponentFactoryDependency) {
          var cfd = dep;
          depTemplate = _this._assertComponentLoaded(cfd.comp.reference, true);
          cfd.placeholder.reference = depTemplate.proxyComponentFactory;
          cfd.placeholder.name = "compFactory_" + cfd.comp.name;
        }
      });
      var statements = stylesCompileResult.componentStylesheet.statements.concat(compileResult.statements);
      var factory;
      if (!this._compilerConfig.useJit) {
        factory = interpretStatements(statements, compileResult.viewFactoryVar);
      } else {
        factory = jitStatements("" + template.compType.name + (template.isHost ? '_Host' : '') + ".ngfactory.js", statements, compileResult.viewFactoryVar);
      }
      template.compiled(factory);
    };
    RuntimeCompiler.prototype._resolveStylesCompileResult = function(result, externalStylesheetsByModuleUrl) {
      var _this = this;
      result.dependencies.forEach(function(dep, i) {
        var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);
        var nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
        dep.valuePlaceholder.reference = nestedStylesArr;
        dep.valuePlaceholder.name = "importedStyles" + i;
      });
    };
    RuntimeCompiler.prototype._resolveAndEvalStylesCompileResult = function(result, externalStylesheetsByModuleUrl) {
      this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);
      if (!this._compilerConfig.useJit) {
        return interpretStatements(result.statements, result.stylesVar);
      } else {
        return jitStatements(result.meta.moduleUrl + ".css.js", result.statements, result.stylesVar);
      }
    };
    RuntimeCompiler.decorators = [{type: _angular_core.Injectable}];
    RuntimeCompiler.ctorParameters = [{type: _angular_core.Injector}, {type: CompileMetadataResolver}, {type: DirectiveNormalizer}, {type: TemplateParser}, {type: StyleCompiler}, {type: ViewCompiler}, {type: NgModuleCompiler}, {type: CompilerConfig}];
    return RuntimeCompiler;
  }());
  var CompiledTemplate = (function() {
    function CompiledTemplate(isHost, selector, compType, viewDirectivesAndComponents, viewPipes, schemas, _normalizeResult) {
      var _this = this;
      this.isHost = isHost;
      this.compType = compType;
      this.viewPipes = viewPipes;
      this.schemas = schemas;
      this._viewFactory = null;
      this.loading = null;
      this._normalizedCompMeta = null;
      this.isCompiled = false;
      this.isCompiledWithDeps = false;
      this.viewComponentTypes = [];
      this.viewDirectives = [];
      viewDirectivesAndComponents.forEach(function(dirMeta) {
        if (dirMeta.isComponent) {
          _this.viewComponentTypes.push(dirMeta.type.reference);
        } else {
          _this.viewDirectives.push(dirMeta);
        }
      });
      this.proxyViewFactory = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i - 0] = arguments[_i];
        }
        if (!_this._viewFactory) {
          throw new Error("Illegal state: CompiledTemplate for " + stringify(_this.compType) + " is not compiled yet!");
        }
        return _this._viewFactory.apply(null, args);
      };
      this.proxyComponentFactory = isHost ? new _angular_core.ComponentFactory(selector, this.proxyViewFactory, compType.reference) : null;
      if (_normalizeResult.syncResult) {
        this._normalizedCompMeta = _normalizeResult.syncResult;
      } else {
        this.loading = _normalizeResult.asyncResult.then(function(normalizedCompMeta) {
          _this._normalizedCompMeta = normalizedCompMeta;
          _this.loading = null;
        });
      }
    }
    Object.defineProperty(CompiledTemplate.prototype, "normalizedCompMeta", {
      get: function() {
        if (this.loading) {
          throw new Error("Template is still loading for " + this.compType.name + "!");
        }
        return this._normalizedCompMeta;
      },
      enumerable: true,
      configurable: true
    });
    CompiledTemplate.prototype.compiled = function(viewFactory) {
      this._viewFactory = viewFactory;
      this.isCompiled = true;
    };
    CompiledTemplate.prototype.depsCompiled = function() {
      this.isCompiledWithDeps = true;
    };
    return CompiledTemplate;
  }());
  function assertComponent(meta) {
    if (!meta.isComponent) {
      throw new Error("Could not compile '" + meta.type.name + "' because it is not a component.");
    }
  }
  var ModuleBoundCompiler = (function() {
    function ModuleBoundCompiler(_delegate, _ngModule) {
      this._delegate = _delegate;
      this._ngModule = _ngModule;
    }
    Object.defineProperty(ModuleBoundCompiler.prototype, "_injector", {
      get: function() {
        return this._delegate.injector;
      },
      enumerable: true,
      configurable: true
    });
    ModuleBoundCompiler.prototype.compileModuleSync = function(moduleType) {
      return this._delegate.compileModuleSync(moduleType);
    };
    ModuleBoundCompiler.prototype.compileModuleAsync = function(moduleType) {
      return this._delegate.compileModuleAsync(moduleType);
    };
    ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
      return this._delegate.compileModuleAndAllComponentsSync(moduleType);
    };
    ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
      return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
    };
    ModuleBoundCompiler.prototype.clearCache = function() {
      this._delegate.clearCache();
    };
    ModuleBoundCompiler.prototype.clearCacheFor = function(type) {
      this._delegate.clearCacheFor(type);
    };
    return ModuleBoundCompiler;
  }());
  var SECURITY_SCHEMA = {};
  function registerContext(ctx, specs) {
    for (var _i = 0,
        specs_1 = specs; _i < specs_1.length; _i++) {
      var spec = specs_1[_i];
      SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
    }
  }
  registerContext(_angular_core.SecurityContext.HTML, ['iframe|srcdoc', '*|innerHTML', '*|outerHTML']);
  registerContext(_angular_core.SecurityContext.STYLE, ['*|style']);
  registerContext(_angular_core.SecurityContext.URL, ['*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href', 'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action', 'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite', 'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src']);
  registerContext(_angular_core.SecurityContext.RESOURCE_URL, ['applet|code', 'applet|codebase', 'base|href', 'embed|src', 'frame|src', 'head|profile', 'html|manifest', 'iframe|src', 'link|href', 'media|src', 'object|codebase', 'object|data', 'script|src']);
  var __extends$18 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var BOOLEAN = 'boolean';
  var NUMBER = 'number';
  var STRING = 'string';
  var OBJECT = 'object';
  var SCHEMA = (['*|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop', 'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^*|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'media^abbr|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume', ':svg:^abbr|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex', ':svg:graphics^:svg:|', ':svg:animation^:svg:|*begin,*end,*repeat', ':svg:geometry^:svg:|', ':svg:componentTransferFunction^:svg:|', ':svg:gradient^:svg:|', ':svg:textContent^:svg:graphics|', ':svg:textPositioning^:svg:textContent|', 'abbr^*|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate', 'a^abbr|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username', 'area^abbr|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username', 'audio^media|', 'br^abbr|clear', 'base^abbr|href,target', 'body^abbr|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink', 'button^abbr|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value', 'canvas^abbr|#height,#width', 'content^abbr|select', 'dl^abbr|!compact', 'datalist^abbr|', 'details^abbr|!open', 'dialog^abbr|!open,returnValue', 'dir^abbr|!compact', 'div^abbr|align', 'embed^abbr|align,height,name,src,type,width', 'fieldset^abbr|!disabled,name', 'font^abbr|color,face,size', 'form^abbr|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target', 'frame^abbr|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src', 'frameset^abbr|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows', 'hr^abbr|align,color,!noShade,size,width', 'head^abbr|', 'h1,h2,h3,h4,h5,h6^abbr|align', 'html^abbr|version', 'iframe^abbr|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width', 'img^abbr|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width', 'input^abbr|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width', 'keygen^abbr|!autofocus,challenge,!disabled,keytype,name', 'li^abbr|type,#value', 'label^abbr|htmlFor', 'legend^abbr|align', 'link^abbr|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type', 'map^abbr|name', 'marquee^abbr|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width', 'menu^abbr|!compact', 'meta^abbr|content,httpEquiv,name,scheme', 'meter^abbr|#high,#low,#max,#min,#optimum,#value', 'ins,del^abbr|cite,dateTime', 'ol^abbr|!compact,!reversed,#start,type', 'object^abbr|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width', 'optgroup^abbr|!disabled,label', 'option^abbr|!defaultSelected,!disabled,label,!selected,text,value', 'output^abbr|defaultValue,%htmlFor,name,value', 'p^abbr|align', 'param^abbr|name,type,value,valueType', 'picture^abbr|', 'pre^abbr|#width', 'progress^abbr|#max,#value', 'q,blockquote,cite^abbr|', 'script^abbr|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type', 'select^abbr|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value', 'shadow^abbr|', 'source^abbr|media,sizes,src,srcset,type', 'span^abbr|', 'style^abbr|!disabled,media,type', 'caption^abbr|align', 'th,td^abbr|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width', 'col,colgroup^abbr|align,ch,chOff,#span,vAlign,width', 'table^abbr|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width', 'tr^abbr|align,bgColor,ch,chOff,vAlign', 'tfoot,thead,tbody^abbr|align,ch,chOff,vAlign', 'template^abbr|', 'textarea^abbr|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap', 'title^abbr|text', 'track^abbr|!default,kind,label,src,srclang', 'ul^abbr|!compact,type', 'unknown^abbr|', 'video^media|#height,poster,#width', ':svg:a^:svg:graphics|', ':svg:animate^:svg:animation|', ':svg:animateMotion^:svg:animation|', ':svg:animateTransform^:svg:animation|', ':svg:circle^:svg:geometry|', ':svg:clipPath^:svg:graphics|', ':svg:cursor^:svg:|', ':svg:defs^:svg:graphics|', ':svg:desc^:svg:|', ':svg:discard^:svg:|', ':svg:ellipse^:svg:geometry|', ':svg:feBlend^:svg:|', ':svg:feColorMatrix^:svg:|', ':svg:feComponentTransfer^:svg:|', ':svg:feComposite^:svg:|', ':svg:feConvolveMatrix^:svg:|', ':svg:feDiffuseLighting^:svg:|', ':svg:feDisplacementMap^:svg:|', ':svg:feDistantLight^:svg:|', ':svg:feDropShadow^:svg:|', ':svg:feFlood^:svg:|', ':svg:feFuncA^:svg:componentTransferFunction|', ':svg:feFuncB^:svg:componentTransferFunction|', ':svg:feFuncG^:svg:componentTransferFunction|', ':svg:feFuncR^:svg:componentTransferFunction|', ':svg:feGaussianBlur^:svg:|', ':svg:feImage^:svg:|', ':svg:feMerge^:svg:|', ':svg:feMergeNode^:svg:|', ':svg:feMorphology^:svg:|', ':svg:feOffset^:svg:|', ':svg:fePointLight^:svg:|', ':svg:feSpecularLighting^:svg:|', ':svg:feSpotLight^:svg:|', ':svg:feTile^:svg:|', ':svg:feTurbulence^:svg:|', ':svg:filter^:svg:|', ':svg:foreignObject^:svg:graphics|', ':svg:g^:svg:graphics|', ':svg:image^:svg:graphics|', ':svg:line^:svg:geometry|', ':svg:linearGradient^:svg:gradient|', ':svg:mpath^:svg:|', ':svg:marker^:svg:|', ':svg:mask^:svg:|', ':svg:metadata^:svg:|', ':svg:path^:svg:geometry|', ':svg:pattern^:svg:|', ':svg:polygon^:svg:geometry|', ':svg:polyline^:svg:geometry|', ':svg:radialGradient^:svg:gradient|', ':svg:rect^:svg:geometry|', ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan', ':svg:script^:svg:|type', ':svg:set^:svg:animation|', ':svg:stop^:svg:|', ':svg:style^:svg:|!disabled,media,title,type', ':svg:switch^:svg:graphics|', ':svg:symbol^:svg:|', ':svg:tspan^:svg:textPositioning|', ':svg:text^:svg:textPositioning|', ':svg:textPath^:svg:textContent|', ':svg:title^:svg:|', ':svg:use^:svg:graphics|', ':svg:view^:svg:|#zoomAndPan']);
  var _ATTR_TO_PROP = {
    'class': 'className',
    'formaction': 'formAction',
    'innerHtml': 'innerHTML',
    'readonly': 'readOnly',
    'tabindex': 'tabIndex'
  };
  var DomElementSchemaRegistry = (function(_super) {
    __extends$18(DomElementSchemaRegistry, _super);
    function DomElementSchemaRegistry() {
      var _this = this;
      _super.call(this);
      this._schema = {};
      SCHEMA.forEach(function(encodedType) {
        var _a = encodedType.split('|'),
            strType = _a[0],
            strProperties = _a[1];
        var properties = strProperties.split(',');
        var _b = strType.split('^'),
            typeNames = _b[0],
            superName = _b[1];
        var type = {};
        typeNames.split(',').forEach(function(tag) {
          return _this._schema[tag.toLowerCase()] = type;
        });
        var superType = _this._schema[superName];
        if (superType) {
          Object.keys(superType).forEach(function(prop) {
            type[prop] = superType[prop];
          });
        }
        properties.forEach(function(property) {
          if (property.length > 0) {
            switch (property[0]) {
              case '*':
                break;
              case '!':
                type[property.substring(1)] = BOOLEAN;
                break;
              case '#':
                type[property.substring(1)] = NUMBER;
                break;
              case '%':
                type[property.substring(1)] = OBJECT;
                break;
              default:
                type[property] = STRING;
            }
          }
        });
      });
    }
    DomElementSchemaRegistry.prototype.hasProperty = function(tagName, propName, schemaMetas) {
      if (schemaMetas.some(function(schema) {
        return schema.name === _angular_core.NO_ERRORS_SCHEMA.name;
      })) {
        return true;
      }
      if (tagName.indexOf('-') > -1) {
        if (tagName === 'ng-container' || tagName === 'ng-content') {
          return false;
        }
        if (schemaMetas.some(function(schema) {
          return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name;
        })) {
          return true;
        }
      }
      var elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];
      return !!elementProperties[propName];
    };
    DomElementSchemaRegistry.prototype.hasElement = function(tagName, schemaMetas) {
      if (schemaMetas.some(function(schema) {
        return schema.name === _angular_core.NO_ERRORS_SCHEMA.name;
      })) {
        return true;
      }
      if (tagName.indexOf('-') > -1) {
        if (tagName === 'ng-container' || tagName === 'ng-content') {
          return true;
        }
        if (schemaMetas.some(function(schema) {
          return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name;
        })) {
          return true;
        }
      }
      return !!this._schema[tagName.toLowerCase()];
    };
    DomElementSchemaRegistry.prototype.securityContext = function(tagName, propName) {
      tagName = tagName.toLowerCase();
      propName = propName.toLowerCase();
      var ctx = SECURITY_SCHEMA[tagName + '|' + propName];
      if (ctx) {
        return ctx;
      }
      ctx = SECURITY_SCHEMA['*|' + propName];
      return ctx ? ctx : _angular_core.SecurityContext.NONE;
    };
    DomElementSchemaRegistry.prototype.getMappedPropName = function(propName) {
      return _ATTR_TO_PROP[propName] || propName;
    };
    DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function() {
      return 'ng-component';
    };
    DomElementSchemaRegistry.decorators = [{type: _angular_core.Injectable}];
    DomElementSchemaRegistry.ctorParameters = [];
    return DomElementSchemaRegistry;
  }(ElementSchemaRegistry));
  var _NO_RESOURCE_LOADER = {get: function(url) {
      throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + "\"");
    }};
  var COMPILER_PROVIDERS = [{
    provide: Reflector,
    useValue: reflector
  }, {
    provide: ReflectorReader,
    useExisting: Reflector
  }, {
    provide: ResourceLoader,
    useValue: _NO_RESOURCE_LOADER
  }, Console, Lexer, Parser, HtmlParser, {
    provide: I18NHtmlParser,
    useFactory: function(parser, translations, format) {
      return new I18NHtmlParser(parser, translations, format);
    },
    deps: [HtmlParser, [new _angular_core.OptionalMetadata(), new _angular_core.Inject(_angular_core.TRANSLATIONS)], [new _angular_core.OptionalMetadata(), new _angular_core.Inject(_angular_core.TRANSLATIONS_FORMAT)]]
  }, TemplateParser, DirectiveNormalizer, CompileMetadataResolver, DEFAULT_PACKAGE_URL_PROVIDER, StyleCompiler, ViewCompiler, NgModuleCompiler, {
    provide: CompilerConfig,
    useValue: new CompilerConfig()
  }, RuntimeCompiler, {
    provide: _angular_core.Compiler,
    useExisting: RuntimeCompiler
  }, DomElementSchemaRegistry, {
    provide: ElementSchemaRegistry,
    useExisting: DomElementSchemaRegistry
  }, UrlResolver, DirectiveResolver, PipeResolver, NgModuleResolver];
  var RuntimeCompilerFactory = (function() {
    function RuntimeCompilerFactory(defaultOptions) {
      this._defaultOptions = [{
        useDebug: _angular_core.isDevMode(),
        useJit: true,
        defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated
      }].concat(defaultOptions);
    }
    RuntimeCompilerFactory.prototype.createCompiler = function(options) {
      if (options === void 0) {
        options = [];
      }
      var mergedOptions = _mergeOptions(this._defaultOptions.concat(options));
      var injector = _angular_core.ReflectiveInjector.resolveAndCreate([COMPILER_PROVIDERS, {
        provide: CompilerConfig,
        useFactory: function() {
          return new CompilerConfig({
            genDebugInfo: mergedOptions.useDebug,
            useJit: mergedOptions.useJit,
            defaultEncapsulation: mergedOptions.defaultEncapsulation,
            logBindingUpdate: mergedOptions.useDebug
          });
        },
        deps: []
      }, mergedOptions.providers]);
      return injector.get(_angular_core.Compiler);
    };
    RuntimeCompilerFactory.decorators = [{type: _angular_core.Injectable}];
    RuntimeCompilerFactory.ctorParameters = [{
      type: Array,
      decorators: [{
        type: _angular_core.Inject,
        args: [_angular_core.COMPILER_OPTIONS]
      }]
    }];
    return RuntimeCompilerFactory;
  }());
  function _initReflector() {
    reflector.reflectionCapabilities = new ReflectionCapabilities();
  }
  var platformCoreDynamic = _angular_core.createPlatformFactory(_angular_core.platformCore, 'coreDynamic', [{
    provide: _angular_core.COMPILER_OPTIONS,
    useValue: {},
    multi: true
  }, {
    provide: _angular_core.CompilerFactory,
    useClass: RuntimeCompilerFactory
  }, {
    provide: _angular_core.PLATFORM_INITIALIZER,
    useValue: _initReflector,
    multi: true
  }]);
  function _mergeOptions(optionsArr) {
    return {
      useDebug: _lastDefined(optionsArr.map(function(options) {
        return options.useDebug;
      })),
      useJit: _lastDefined(optionsArr.map(function(options) {
        return options.useJit;
      })),
      defaultEncapsulation: _lastDefined(optionsArr.map(function(options) {
        return options.defaultEncapsulation;
      })),
      providers: _mergeArrays(optionsArr.map(function(options) {
        return options.providers;
      }))
    };
  }
  function _lastDefined(args) {
    for (var i = args.length - 1; i >= 0; i--) {
      if (args[i] !== undefined) {
        return args[i];
      }
    }
    return undefined;
  }
  function _mergeArrays(parts) {
    var result = [];
    parts.forEach(function(part) {
      return part && result.push.apply(result, part);
    });
    return result;
  }
  var _ASSET_URL_RE = /asset:([^\/]+)\/([^\/]+)\/(.+)/;
  var ImportGenerator = (function() {
    function ImportGenerator() {}
    ImportGenerator.parseAssetUrl = function(url) {
      return AssetUrl.parse(url);
    };
    return ImportGenerator;
  }());
  var AssetUrl = (function() {
    function AssetUrl(packageName, firstLevelDir, modulePath) {
      this.packageName = packageName;
      this.firstLevelDir = firstLevelDir;
      this.modulePath = modulePath;
    }
    AssetUrl.parse = function(url, allowNonMatching) {
      if (allowNonMatching === void 0) {
        allowNonMatching = true;
      }
      var match = url.match(_ASSET_URL_RE);
      if (match !== null) {
        return new AssetUrl(match[1], match[2], match[3]);
      }
      if (allowNonMatching) {
        return null;
      }
      throw new Error("Url " + url + " is not a valid asset: url");
    };
    return AssetUrl;
  }());
  var __compiler_private__ = {
    SelectorMatcher: SelectorMatcher,
    CssSelector: CssSelector,
    AssetUrl: AssetUrl,
    ImportGenerator: ImportGenerator,
    CompileMetadataResolver: CompileMetadataResolver,
    HtmlParser: HtmlParser,
    InterpolationConfig: InterpolationConfig,
    DirectiveNormalizer: DirectiveNormalizer,
    Lexer: Lexer,
    Parser: Parser,
    ParseLocation: ParseLocation,
    ParseError: ParseError,
    ParseErrorLevel: ParseErrorLevel,
    ParseSourceFile: ParseSourceFile,
    ParseSourceSpan: ParseSourceSpan,
    TemplateParser: TemplateParser,
    DomElementSchemaRegistry: DomElementSchemaRegistry,
    StyleCompiler: StyleCompiler,
    ViewCompiler: ViewCompiler,
    NgModuleCompiler: NgModuleCompiler,
    TypeScriptEmitter: TypeScriptEmitter
  };
  exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS;
  exports.CompileDiDependencyMetadata = CompileDiDependencyMetadata;
  exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
  exports.CompileFactoryMetadata = CompileFactoryMetadata;
  exports.CompileIdentifierMetadata = CompileIdentifierMetadata;
  exports.CompileMetadataWithIdentifier = CompileMetadataWithIdentifier;
  exports.CompilePipeMetadata = CompilePipeMetadata;
  exports.CompileProviderMetadata = CompileProviderMetadata;
  exports.CompileQueryMetadata = CompileQueryMetadata;
  exports.CompileTemplateMetadata = CompileTemplateMetadata;
  exports.CompileTokenMetadata = CompileTokenMetadata;
  exports.CompileTypeMetadata = CompileTypeMetadata;
  exports.CompilerConfig = CompilerConfig;
  exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER;
  exports.DirectiveResolver = DirectiveResolver;
  exports.NgModuleResolver = NgModuleResolver;
  exports.OfflineCompiler = OfflineCompiler;
  exports.PipeResolver = PipeResolver;
  exports.RenderTypes = RenderTypes;
  exports.ResourceLoader = ResourceLoader;
  exports.RuntimeCompiler = RuntimeCompiler;
  exports.SourceModule = SourceModule;
  exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS;
  exports.UrlResolver = UrlResolver;
  exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver;
  exports.platformCoreDynamic = platformCoreDynamic;
  exports.DEFAULT_INTERPOLATION_CONFIG = DEFAULT_INTERPOLATION_CONFIG;
  exports.InterpolationConfig = InterpolationConfig;
  exports.ElementSchemaRegistry = ElementSchemaRegistry;
  exports.I18NHtmlParser = I18NHtmlParser;
  exports.MessageBundle = MessageBundle;
  exports.Xliff = Xliff;
  exports.Xmb = Xmb;
  exports.Xtb = Xtb;
  exports.TextAst = TextAst;
  exports.BoundTextAst = BoundTextAst;
  exports.AttrAst = AttrAst;
  exports.BoundElementPropertyAst = BoundElementPropertyAst;
  exports.BoundEventAst = BoundEventAst;
  exports.ReferenceAst = ReferenceAst;
  exports.VariableAst = VariableAst;
  exports.ElementAst = ElementAst;
  exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
  exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
  exports.DirectiveAst = DirectiveAst;
  exports.ProviderAst = ProviderAst;
  exports.NgContentAst = NgContentAst;
  exports.templateVisitAll = templateVisitAll;
  exports.__compiler_private__ = __compiler_private__;
}));

})();
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/compiler'), require('@angular/core'), require('@angular/platform-browser')) : typeof define === 'function' && define.amd ? define("4", ["exports", "2", "3", "5"], factory) : (factory((global.ng = global.ng || {}, global.ng.platformBrowserDynamic = global.ng.platformBrowserDynamic || {}), global.ng.compiler, global.ng.core, global.ng.platformBrowser));
}(this, function(exports, _angular_compiler, _angular_core, _angular_platformBrowser) {
  'use strict';
  var INTERNAL_BROWSER_PLATFORM_PROVIDERS = _angular_platformBrowser.__platform_browser_private__.INTERNAL_BROWSER_PLATFORM_PROVIDERS;
  var globalScope;
  if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
      globalScope = self;
    } else {
      globalScope = global;
    }
  } else {
    globalScope = window;
  }
  var global$1 = globalScope;
  global$1.assert = function assert(condition) {};
  function isPresent(obj) {
    return obj !== undefined && obj !== null;
  }
  var NumberWrapper = (function() {
    function NumberWrapper() {}
    NumberWrapper.toFixed = function(n, fractionDigits) {
      return n.toFixed(fractionDigits);
    };
    NumberWrapper.equal = function(a, b) {
      return a === b;
    };
    NumberWrapper.parseIntAutoRadix = function(text) {
      var result = parseInt(text);
      if (isNaN(result)) {
        throw new Error('Invalid integer literal when parsing ' + text);
      }
      return result;
    };
    NumberWrapper.parseInt = function(text, radix) {
      if (radix == 10) {
        if (/^(\-|\+)?[0-9]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else if (radix == 16) {
        if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else {
        var result = parseInt(text, radix);
        if (!isNaN(result)) {
          return result;
        }
      }
      throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
    };
    NumberWrapper.parseFloat = function(text) {
      return parseFloat(text);
    };
    Object.defineProperty(NumberWrapper, "NaN", {
      get: function() {
        return NaN;
      },
      enumerable: true,
      configurable: true
    });
    NumberWrapper.isNumeric = function(value) {
      return !isNaN(value - parseFloat(value));
    };
    NumberWrapper.isNaN = function(value) {
      return isNaN(value);
    };
    NumberWrapper.isInteger = function(value) {
      return Number.isInteger(value);
    };
    return NumberWrapper;
  }());
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ResourceLoaderImpl = (function(_super) {
    __extends(ResourceLoaderImpl, _super);
    function ResourceLoaderImpl() {
      _super.apply(this, arguments);
    }
    ResourceLoaderImpl.prototype.get = function(url) {
      var resolve;
      var reject;
      var promise = new Promise(function(res, rej) {
        resolve = res;
        reject = rej;
      });
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, true);
      xhr.responseType = 'text';
      xhr.onload = function() {
        var response = isPresent(xhr.response) ? xhr.response : xhr.responseText;
        var status = xhr.status === 1223 ? 204 : xhr.status;
        if (status === 0) {
          status = response ? 200 : 0;
        }
        if (200 <= status && status <= 300) {
          resolve(response);
        } else {
          reject("Failed to load " + url);
        }
      };
      xhr.onerror = function() {
        reject("Failed to load " + url);
      };
      xhr.send();
      return promise;
    };
    ResourceLoaderImpl.decorators = [{type: _angular_core.Injectable}];
    ResourceLoaderImpl.ctorParameters = [];
    return ResourceLoaderImpl;
  }(_angular_compiler.ResourceLoader));
  var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [INTERNAL_BROWSER_PLATFORM_PROVIDERS, {
    provide: _angular_core.COMPILER_OPTIONS,
    useValue: {providers: [{
        provide: _angular_compiler.ResourceLoader,
        useClass: ResourceLoaderImpl
      }]},
    multi: true
  }];
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var CachedResourceLoader = (function(_super) {
    __extends$1(CachedResourceLoader, _super);
    function CachedResourceLoader() {
      _super.call(this);
      this._cache = global$1.$templateCache;
      if (this._cache == null) {
        throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');
      }
    }
    CachedResourceLoader.prototype.get = function(url) {
      if (this._cache.hasOwnProperty(url)) {
        return Promise.resolve(this._cache[url]);
      } else {
        return Promise.reject('CachedResourceLoader: Did not find cached template for ' + url);
      }
    };
    return CachedResourceLoader;
  }(_angular_compiler.ResourceLoader));
  var __platform_browser_dynamic_private__ = {
    INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,
    ResourceLoaderImpl: ResourceLoaderImpl
  };
  var RESOURCE_CACHE_PROVIDER = [{
    provide: _angular_compiler.ResourceLoader,
    useClass: CachedResourceLoader
  }];
  var platformBrowserDynamic = _angular_core.createPlatformFactory(_angular_compiler.platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);
  exports.RESOURCE_CACHE_PROVIDER = RESOURCE_CACHE_PROVIDER;
  exports.platformBrowserDynamic = platformBrowserDynamic;
  exports.__platform_browser_dynamic_private__ = __platform_browser_dynamic_private__;
}));

})();
$__System.registerDynamic("6", ["3"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var AppComponent = function () {
        function AppComponent() {}
        AppComponent = __decorate([core_1.Component({
            selector: 'my-app',
            moduleId: module.id,
            templateUrl: 'app.component.html'
        }), __metadata('design:paramtypes', [])], AppComponent);
        return AppComponent;
    }();
    exports.AppComponent = AppComponent;
    

    return module.exports;
});
$__System.registerDynamic("7", ["3"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var LoginService = function () {
        function LoginService() {}
        LoginService = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [])], LoginService);
        return LoginService;
    }();
    exports.LoginService = LoginService;
    

    return module.exports;
});
$__System.registerDynamic("8", ["3", "a", "7", "9", "b", "c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    //LoginModule
    var core_1 = $__require("3");
    var login_component_1 = $__require("a");
    var login_service_1 = $__require("7");
    var common_1 = $__require("9");
    var loading_container_1 = $__require("b");
    var primeng_1 = $__require("c");
    var primeng_2 = $__require("c");
    var LoginModule = function () {
        function LoginModule() {}
        LoginModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule, primeng_1.MessagesModule, primeng_2.DialogModule],
            declarations: [loading_container_1.LoadingContainer, login_component_1.LoginComponent],
            providers: [login_service_1.LoginService]
        }), __metadata('design:paramtypes', [])], LoginModule);
        return LoginModule;
    }();
    exports.LoginModule = LoginModule;
    

    return module.exports;
});
$__System.registerDynamic("b", ["3"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var LoadingContainer = function () {
        function LoadingContainer() {}
        __decorate([core_1.Input(), __metadata('design:type', String)], LoadingContainer.prototype, "loading", void 0);
        LoadingContainer = __decorate([core_1.Component({
            selector: 'loading-container',
            template: "\n    <div [ngSwitch]=\"loading\">\n\t<div *ngSwitchCase=\"0\">\n\t    <ng-content></ng-content>\n        </div>\n\t<div *ngSwitchCase=\"1\">\n\t    <style type='text/css'>@-webkit-keyframes uil-default-anim { 0% { opacity: 1} 100% {opacity: 0} }@keyframes uil-default-anim { 0% { opacity: 1} 100% {opacity: 0} }.uil-default-css > div:nth-of-type(1){-webkit-animation: uil-default-anim 1s linear infinite;animation: uil-default-anim 1s linear infinite;-webkit-animation-delay: -0.5s;animation-delay: -0.5s;}.uil-default-css { position: relative;background:none;width:200px;height:200px;}.uil-default-css > div:nth-of-type(2){-webkit-animation: uil-default-anim 1s linear infinite;animation: uil-default-anim 1s linear infinite;-webkit-animation-delay: -0.4166666666666667s;animation-delay: -0.4166666666666667s;}.uil-default-css { position: relative;background:none;width:200px;height:200px;}.uil-default-css > div:nth-of-type(3){-webkit-animation: uil-default-anim 1s linear infinite;animation: uil-default-anim 1s linear infinite;-webkit-animation-delay: -0.33333333333333337s;animation-delay: -0.33333333333333337s;}.uil-default-css { position: relative;background:none;width:200px;height:200px;}.uil-default-css > div:nth-of-type(4){-webkit-animation: uil-default-anim 1s linear infinite;animation: uil-default-anim 1s linear infinite;-webkit-animation-delay: -0.25s;animation-delay: -0.25s;}.uil-default-css { position: relative;background:none;width:200px;height:200px;}.uil-default-css > div:nth-of-type(5){-webkit-animation: uil-default-anim 1s linear infinite;animation: uil-default-anim 1s linear infinite;-webkit-animation-delay: -0.16666666666666669s;animation-delay: -0.16666666666666669s;}.uil-default-css { position: relative;background:none;width:200px;height:200px;}.uil-default-css > div:nth-of-type(6){-webkit-animation: uil-default-anim 1s linear infinite;animation: uil-default-anim 1s linear infinite;-webkit-animation-delay: -0.08333333333333331s;animation-delay: -0.08333333333333331s;}.uil-default-css { position: relative;background:none;width:200px;height:200px;}.uil-default-css > div:nth-of-type(7){-webkit-animation: uil-default-anim 1s linear infinite;animation: uil-default-anim 1s linear infinite;-webkit-animation-delay: 0s;animation-delay: 0s;}.uil-default-css { position: relative;background:none;width:200px;height:200px;}.uil-default-css > div:nth-of-type(8){-webkit-animation: uil-default-anim 1s linear infinite;animation: uil-default-anim 1s linear infinite;-webkit-animation-delay: 0.08333333333333337s;animation-delay: 0.08333333333333337s;}.uil-default-css { position: relative;background:none;width:200px;height:200px;}.uil-default-css > div:nth-of-type(9){-webkit-animation: uil-default-anim 1s linear infinite;animation: uil-default-anim 1s linear infinite;-webkit-animation-delay: 0.16666666666666663s;animation-delay: 0.16666666666666663s;}.uil-default-css { position: relative;background:none;width:200px;height:200px;}.uil-default-css > div:nth-of-type(10){-webkit-animation: uil-default-anim 1s linear infinite;animation: uil-default-anim 1s linear infinite;-webkit-animation-delay: 0.25s;animation-delay: 0.25s;}.uil-default-css { position: relative;background:none;width:200px;height:200px;}.uil-default-css > div:nth-of-type(11){-webkit-animation: uil-default-anim 1s linear infinite;animation: uil-default-anim 1s linear infinite;-webkit-animation-delay: 0.33333333333333337s;animation-delay: 0.33333333333333337s;}.uil-default-css { position: relative;background:none;width:200px;height:200px;}.uil-default-css > div:nth-of-type(12){-webkit-animation: uil-default-anim 1s linear infinite;animation: uil-default-anim 1s linear infinite;-webkit-animation-delay: 0.41666666666666663s;animation-delay: 0.41666666666666663s;}.uil-default-css { margin-left:42%;position: relative;background:none;width:200px;height:200px;}</style><div class='uil-default-css'><div style='top:80px;left:93px;width:14px;height:40px;background:#00b2ff;-webkit-transform:rotate(0deg) translate(0,-60px);transform:rotate(0deg) translate(0,-60px);border-radius:10px;position:absolute;'></div><div style='top:80px;left:93px;width:14px;height:40px;background:#00b2ff;-webkit-transform:rotate(30deg) translate(0,-60px);transform:rotate(30deg) translate(0,-60px);border-radius:10px;position:absolute;'></div><div style='top:80px;left:93px;width:14px;height:40px;background:#00b2ff;-webkit-transform:rotate(60deg) translate(0,-60px);transform:rotate(60deg) translate(0,-60px);border-radius:10px;position:absolute;'></div><div style='top:80px;left:93px;width:14px;height:40px;background:#00b2ff;-webkit-transform:rotate(90deg) translate(0,-60px);transform:rotate(90deg) translate(0,-60px);border-radius:10px;position:absolute;'></div><div style='top:80px;left:93px;width:14px;height:40px;background:#00b2ff;-webkit-transform:rotate(120deg) translate(0,-60px);transform:rotate(120deg) translate(0,-60px);border-radius:10px;position:absolute;'></div><div style='top:80px;left:93px;width:14px;height:40px;background:#00b2ff;-webkit-transform:rotate(150deg) translate(0,-60px);transform:rotate(150deg) translate(0,-60px);border-radius:10px;position:absolute;'></div><div style='top:80px;left:93px;width:14px;height:40px;background:#00b2ff;-webkit-transform:rotate(180deg) translate(0,-60px);transform:rotate(180deg) translate(0,-60px);border-radius:10px;position:absolute;'></div><div style='top:80px;left:93px;width:14px;height:40px;background:#00b2ff;-webkit-transform:rotate(210deg) translate(0,-60px);transform:rotate(210deg) translate(0,-60px);border-radius:10px;position:absolute;'></div><div style='top:80px;left:93px;width:14px;height:40px;background:#00b2ff;-webkit-transform:rotate(240deg) translate(0,-60px);transform:rotate(240deg) translate(0,-60px);border-radius:10px;position:absolute;'></div><div style='top:80px;left:93px;width:14px;height:40px;background:#00b2ff;-webkit-transform:rotate(270deg) translate(0,-60px);transform:rotate(270deg) translate(0,-60px);border-radius:10px;position:absolute;'></div><div style='top:80px;left:93px;width:14px;height:40px;background:#00b2ff;-webkit-transform:rotate(300deg) translate(0,-60px);transform:rotate(300deg) translate(0,-60px);border-radius:10px;position:absolute;'></div><div style='top:80px;left:93px;width:14px;height:40px;background:#00b2ff;-webkit-transform:rotate(330deg) translate(0,-60px);transform:rotate(330deg) translate(0,-60px);border-radius:10px;position:absolute;'></div></div>\n        </div>\n        <div *ngSwitchDefault>\n\t        {{loading}}\n        </div>\n    </div>"
        }), __metadata('design:paramtypes', [])], LoadingContainer);
        return LoadingContainer;
    }();
    exports.LoadingContainer = LoadingContainer;
    var LoadingPage = function () {
        function LoadingPage(val) {
            this.loading = val;
        }
        LoadingPage.prototype.standby = function () {
            this.loading = true;
        };
        LoadingPage.prototype.ready = function () {
            this.loading = false;
        };
        return LoadingPage;
    }();
    exports.LoadingPage = LoadingPage;
    

    return module.exports;
});
$__System.registerDynamic("a", ["3", "e", "d", "b"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var auth_service_1 = $__require("e");
    var router_1 = $__require("d");
    var loading_container_1 = $__require("b");
    var LoginComponent = function (_super) {
        __extends(LoginComponent, _super);
        function LoginComponent(authService, router) {
            _super.call(this, false);
            this.authService = authService;
            this.router = router;
            this.invalidCredentials = false;
            this.msgs = [];
            this.messageType = '';
            this.message = '';
            this.showCustomAlert = false;
        }
        LoginComponent.prototype.login = function (event, username, password) {
            var _this = this;
            event.preventDefault();
            this.standby();
            this.authService.authenticate(username, password).subscribe(function (data) {
                if (data.access_token) {
                    window.localStorage.setItem('auth_key', data.access_token);
                    _this.router.navigate(['index']);
                }
                _this.loading = false;
            }, function (error) {
                _this.loading = false;
                _this.messageType = 'OOPS!';
                _this.message = 'Invalid credentials';
                _this.showCustomAlert = true;
            });
        };
        LoginComponent = __decorate([core_1.Component({
            selector: 'app-login',
            templateUrl: 'login.component.html',
            moduleId: module.id,
            styleUrls: ['login.component.css']
        }), __metadata('design:paramtypes', [auth_service_1.AuthService, router_1.Router])], LoginComponent);
        return LoginComponent;
    }(loading_container_1.LoadingPage);
    exports.LoginComponent = LoginComponent;
    

    return module.exports;
});
$__System.registerDynamic("f", ["3", "e", "d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var auth_service_1 = $__require("e");
    var router_1 = $__require("d");
    var HomeComponent = function () {
        function HomeComponent(router) {
            var _this = this;
            this.router = router;
            this.step = '';
            router.events.subscribe(function (val) {
                // see also 
                if (val.url == '/index/merchants' || val.url == '/index') {
                    _this.step = 'step1';
                } else if (val.url == '/index/accountsettings') {
                    _this.step = 'step2';
                } else if (val.url == '/index/screenrestrictions') {
                    _this.step = 'step3';
                } else {
                    _this.step = 'step4';
                }
            });
        }
        HomeComponent.prototype.logout = function () {
            window.localStorage.removeItem('auth_key');
            this.router.navigate(['index']);
            window.location.reload();
        };
        HomeComponent = __decorate([core_1.Component({
            moduleId: module.id,
            selector: 'app-home',
            templateUrl: 'home.component.html',
            providers: [auth_service_1.AuthService]
        }), __metadata('design:paramtypes', [router_1.Router])], HomeComponent);
        return HomeComponent;
    }();
    exports.HomeComponent = HomeComponent;
    

    return module.exports;
});
$__System.registerDynamic('10', ['d', 'a', 'f', '11', '12', '13', '14', '15', '16'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var router_1 = $__require('d');
    var login_component_1 = $__require('a');
    var home_component_1 = $__require('f');
    var auth_manager_1 = $__require('11');
    var merchant_component_1 = $__require('12');
    var accountsettings_component_1 = $__require('13');
    var screenrestrictions_component_1 = $__require('14');
    var rolesettings_component_1 = $__require('15');
    var branchsettings_component_1 = $__require('16');
    var appRoutes = [{ path: 'login', component: login_component_1.LoginComponent }, { path: '', redirectTo: 'index',
        pathMatch: 'full'
    }, { path: 'index', component: home_component_1.HomeComponent, canActivate: [auth_manager_1.AuthManager],
        children: [{ path: '', redirectTo: 'merchants', pathMatch: 'full' }, { path: 'merchants', component: merchant_component_1.MerchantComponent }, { path: 'accountsettings', component: accountsettings_component_1.AccountSettingsComponent }, { path: 'screenrestrictions', component: screenrestrictions_component_1.ScreenRestrictionsComponent }, { path: 'rolesettings', component: rolesettings_component_1.RoleSettingsComponent }, { path: 'branchsettings', component: branchsettings_component_1.BranchSettingsComponent }] }];
    exports.appRoutingProviders = [];
    exports.routing = router_1.RouterModule.forRoot(appRoutes);
    

    return module.exports;
});
$__System.registerDynamic("17", ["3", "18"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var DataTable_1 = $__require("18");
    var DefaultSorter = function () {
        function DefaultSorter(mfTable) {
            var _this = this;
            this.mfTable = mfTable;
            this.isSortedByMeAsc = false;
            this.isSortedByMeDesc = false;
            mfTable.onSortChange.subscribe(function (event) {
                _this.isSortedByMeAsc = event.sortBy === _this.sortBy && event.sortOrder === "asc";
                _this.isSortedByMeDesc = event.sortBy === _this.sortBy && event.sortOrder === "desc";
            });
        }
        DefaultSorter.prototype.sort = function () {
            if (this.isSortedByMeAsc) {
                this.mfTable.setSort(this.sortBy, "desc");
            } else {
                this.mfTable.setSort(this.sortBy, "asc");
            }
        };
        __decorate([core_1.Input("by"), __metadata('design:type', String)], DefaultSorter.prototype, "sortBy", void 0);
        DefaultSorter = __decorate([core_1.Component({
            selector: "mfDefaultSorter",
            template: "\n        <a style=\"cursor: pointer\" (click)=\"sort()\" class=\"text-nowrap\">\n            <ng-content></ng-content>\n            <span *ngIf=\"isSortedByMeAsc\" class=\"glyphicon glyphicon-triangle-top\" aria-hidden=\"true\"></span>\n            <span *ngIf=\"isSortedByMeDesc\" class=\"glyphicon glyphicon-triangle-bottom\" aria-hidden=\"true\"></span>\n        </a>"
        }), __metadata('design:paramtypes', [DataTable_1.DataTable])], DefaultSorter);
        return DefaultSorter;
    }();
    exports.DefaultSorter = DefaultSorter;
    

    return module.exports;
});
$__System.registerDynamic("19", ["3", "18"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __param = this && this.__param || function (paramIndex, decorator) {
        return function (target, key) {
            decorator(target, key, paramIndex);
        };
    };
    var core_1 = $__require("3");
    var DataTable_1 = $__require("18");
    var Paginator = function () {
        function Paginator(injectMfTable) {
            var _this = this;
            this.injectMfTable = injectMfTable;
            this.dataLength = 0;
            this.onPageChangeSubscriber = function (event) {
                _this.activePage = event.activePage;
                _this.rowsOnPage = event.rowsOnPage;
                _this.dataLength = event.dataLength;
                _this.lastPage = Math.ceil(_this.dataLength / _this.rowsOnPage);
            };
        }
        Paginator.prototype.ngOnChanges = function (changes) {
            this.mfTable = this.inputMfTable || this.injectMfTable;
            this.onPageChangeSubscriber(this.mfTable.getPage());
            this.mfTable.onPageChange.subscribe(this.onPageChangeSubscriber);
        };
        Paginator.prototype.setPage = function (pageNumber) {
            this.mfTable.setPage(pageNumber, this.rowsOnPage);
        };
        Paginator.prototype.setRowsOnPage = function (rowsOnPage) {
            this.mfTable.setPage(this.activePage, rowsOnPage);
        };
        __decorate([core_1.Input("mfTable"), __metadata('design:type', DataTable_1.DataTable)], Paginator.prototype, "inputMfTable", void 0);
        Paginator = __decorate([core_1.Component({
            selector: "mfPaginator",
            template: "<ng-content></ng-content>"
        }), __param(0, core_1.Optional()), __metadata('design:paramtypes', [DataTable_1.DataTable])], Paginator);
        return Paginator;
    }();
    exports.Paginator = Paginator;
    

    return module.exports;
});
$__System.registerDynamic("18", ["3", "1a"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var _ = $__require("1a");
    var DataTable = function () {
        function DataTable() {
            this.inputData = [];
            this.sortBy = "";
            this.sortOrder = "asc";
            this.rowsOnPage = 1000;
            this.activePage = 1;
            this.mustRecalculateData = false;
            this.onDataChange = new core_1.EventEmitter();
            this.onSortChange = new core_1.EventEmitter();
            this.onPageChange = new core_1.EventEmitter();
        }
        DataTable.prototype.getSort = function () {
            return { sortBy: this.sortBy, sortOrder: this.sortOrder };
        };
        DataTable.prototype.setSort = function (sortBy, sortOrder) {
            if (this.sortBy !== sortBy || this.sortOrder !== sortOrder) {
                this.sortBy = sortBy;
                this.sortOrder = sortOrder;
                this.mustRecalculateData = true;
                this.onSortChange.emit({ sortBy: sortBy, sortOrder: sortOrder });
            }
        };
        DataTable.prototype.getPage = function () {
            return { activePage: this.activePage, rowsOnPage: this.rowsOnPage, dataLength: this.inputData.length };
        };
        DataTable.prototype.setPage = function (activePage, rowsOnPage) {
            if (this.rowsOnPage !== rowsOnPage || this.activePage !== activePage) {
                this.activePage = this.activePage !== activePage ? activePage : this.calculateNewActivePage(this.rowsOnPage, rowsOnPage);
                this.rowsOnPage = rowsOnPage;
                this.mustRecalculateData = true;
                this.onPageChange.emit({
                    activePage: this.activePage,
                    rowsOnPage: this.rowsOnPage,
                    dataLength: this.inputData.length
                });
            }
        };
        DataTable.prototype.calculateNewActivePage = function (previousRowsOnPage, currentRowsOnPage) {
            var firstRowOnPage = (this.activePage - 1) * previousRowsOnPage + 1;
            var newActivePage = Math.ceil(firstRowOnPage / currentRowsOnPage);
            return newActivePage;
        };
        DataTable.prototype.recalculatePage = function () {
            var lastPage = Math.ceil(this.inputData.length / this.rowsOnPage);
            this.activePage = lastPage < this.activePage ? lastPage : this.activePage;
            this.activePage = this.activePage || 1;
        };
        DataTable.prototype.ngOnChanges = function (changes) {
            if (changes["inputData"]) {
                this.inputData = changes["inputData"].currentValue || [];
                this.recalculatePage();
                this.onPageChange.emit({
                    activePage: this.activePage,
                    rowsOnPage: this.rowsOnPage,
                    dataLength: this.inputData.length
                });
                this.mustRecalculateData = true;
            }
        };
        DataTable.prototype.ngDoCheck = function () {
            if (this.mustRecalculateData) {
                this.fillData();
                this.mustRecalculateData = false;
            }
        };
        DataTable.prototype.fillData = function () {
            this.activePage = this.activePage;
            this.rowsOnPage = this.rowsOnPage;
            var offset = (this.activePage - 1) * this.rowsOnPage;
            var data = this.inputData;
            var sortBy = this.sortBy;
            if (typeof sortBy === 'string' || sortBy instanceof String) {
                data = _.orderBy(data, this.caseInsensitiveIteratee(sortBy), [this.sortOrder]);
            } else {
                data = _.orderBy(data, sortBy, [this.sortOrder]);
            }
            data = _.slice(data, offset, offset + this.rowsOnPage);
            this.data = data;
        };
        DataTable.prototype.caseInsensitiveIteratee = function (sortBy) {
            return function (row) {
                var value = row[sortBy];
                if (value && typeof value === 'string' || value instanceof String) {
                    return value.toLowerCase();
                }
                return value;
            };
        };
        __decorate([core_1.Input("mfData"), __metadata('design:type', Array)], DataTable.prototype, "inputData", void 0);
        __decorate([core_1.Input("mfRowsOnPage"), __metadata('design:type', Object)], DataTable.prototype, "rowsOnPage", void 0);
        __decorate([core_1.Input("mfActivePage"), __metadata('design:type', Object)], DataTable.prototype, "activePage", void 0);
        DataTable = __decorate([core_1.Directive({
            selector: 'table[mfData]',
            exportAs: 'mfDataTable'
        }), __metadata('design:paramtypes', [])], DataTable);
        return DataTable;
    }();
    exports.DataTable = DataTable;
    

    return module.exports;
});
(function() {
var define = $__System.amdDefine;
;
(function() {
  var undefined;
  var VERSION = '4.16.4';
  var LARGE_ARRAY_SIZE = 200;
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://github.com/es-shims.',
      FUNC_ERROR_TEXT = 'Expected a function';
  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  var MAX_MEMOIZE_SIZE = 500;
  var PLACEHOLDER = '__lodash_placeholder__';
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256,
      FLIP_FLAG = 512;
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';
  var HOT_COUNT = 500,
      HOT_SPAN = 16;
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
  var wrapFlags = [['ary', ARY_FLAG], ['bind', BIND_FLAG], ['bindKey', BIND_KEY_FLAG], ['curry', CURRY_FLAG], ['curryRight', CURRY_RIGHT_FLAG], ['flip', FLIP_FLAG], ['partial', PARTIAL_FLAG], ['partialRight', PARTIAL_RIGHT_FLAG], ['rearg', REARG_FLAG]];
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
  var reEscapeChar = /\\(\\)?/g;
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
  var reFlags = /\w*$/;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsOctal = /^0o[0-7]+$/i;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
  var reNoMatch = /($^)/;
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
      rsComboSymbolsRange = '\\u20d0-\\u20f0',
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';
  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
  var reApos = RegExp(rsApos, 'g');
  var reComboMark = RegExp(rsCombo, 'g');
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
  var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')', rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr, rsUpper + '+' + rsOptUpperContr, rsDigits, rsEmoji].join('|'), 'g');
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
  var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'];
  var templateCounter = -1;
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
  var deburredLetters = {
    '\xc0': 'A',
    '\xc1': 'A',
    '\xc2': 'A',
    '\xc3': 'A',
    '\xc4': 'A',
    '\xc5': 'A',
    '\xe0': 'a',
    '\xe1': 'a',
    '\xe2': 'a',
    '\xe3': 'a',
    '\xe4': 'a',
    '\xe5': 'a',
    '\xc7': 'C',
    '\xe7': 'c',
    '\xd0': 'D',
    '\xf0': 'd',
    '\xc8': 'E',
    '\xc9': 'E',
    '\xca': 'E',
    '\xcb': 'E',
    '\xe8': 'e',
    '\xe9': 'e',
    '\xea': 'e',
    '\xeb': 'e',
    '\xcc': 'I',
    '\xcd': 'I',
    '\xce': 'I',
    '\xcf': 'I',
    '\xec': 'i',
    '\xed': 'i',
    '\xee': 'i',
    '\xef': 'i',
    '\xd1': 'N',
    '\xf1': 'n',
    '\xd2': 'O',
    '\xd3': 'O',
    '\xd4': 'O',
    '\xd5': 'O',
    '\xd6': 'O',
    '\xd8': 'O',
    '\xf2': 'o',
    '\xf3': 'o',
    '\xf4': 'o',
    '\xf5': 'o',
    '\xf6': 'o',
    '\xf8': 'o',
    '\xd9': 'U',
    '\xda': 'U',
    '\xdb': 'U',
    '\xdc': 'U',
    '\xf9': 'u',
    '\xfa': 'u',
    '\xfb': 'u',
    '\xfc': 'u',
    '\xdd': 'Y',
    '\xfd': 'y',
    '\xff': 'y',
    '\xc6': 'Ae',
    '\xe6': 'ae',
    '\xde': 'Th',
    '\xfe': 'th',
    '\xdf': 'ss',
    '\u0100': 'A',
    '\u0102': 'A',
    '\u0104': 'A',
    '\u0101': 'a',
    '\u0103': 'a',
    '\u0105': 'a',
    '\u0106': 'C',
    '\u0108': 'C',
    '\u010a': 'C',
    '\u010c': 'C',
    '\u0107': 'c',
    '\u0109': 'c',
    '\u010b': 'c',
    '\u010d': 'c',
    '\u010e': 'D',
    '\u0110': 'D',
    '\u010f': 'd',
    '\u0111': 'd',
    '\u0112': 'E',
    '\u0114': 'E',
    '\u0116': 'E',
    '\u0118': 'E',
    '\u011a': 'E',
    '\u0113': 'e',
    '\u0115': 'e',
    '\u0117': 'e',
    '\u0119': 'e',
    '\u011b': 'e',
    '\u011c': 'G',
    '\u011e': 'G',
    '\u0120': 'G',
    '\u0122': 'G',
    '\u011d': 'g',
    '\u011f': 'g',
    '\u0121': 'g',
    '\u0123': 'g',
    '\u0124': 'H',
    '\u0126': 'H',
    '\u0125': 'h',
    '\u0127': 'h',
    '\u0128': 'I',
    '\u012a': 'I',
    '\u012c': 'I',
    '\u012e': 'I',
    '\u0130': 'I',
    '\u0129': 'i',
    '\u012b': 'i',
    '\u012d': 'i',
    '\u012f': 'i',
    '\u0131': 'i',
    '\u0134': 'J',
    '\u0135': 'j',
    '\u0136': 'K',
    '\u0137': 'k',
    '\u0138': 'k',
    '\u0139': 'L',
    '\u013b': 'L',
    '\u013d': 'L',
    '\u013f': 'L',
    '\u0141': 'L',
    '\u013a': 'l',
    '\u013c': 'l',
    '\u013e': 'l',
    '\u0140': 'l',
    '\u0142': 'l',
    '\u0143': 'N',
    '\u0145': 'N',
    '\u0147': 'N',
    '\u014a': 'N',
    '\u0144': 'n',
    '\u0146': 'n',
    '\u0148': 'n',
    '\u014b': 'n',
    '\u014c': 'O',
    '\u014e': 'O',
    '\u0150': 'O',
    '\u014d': 'o',
    '\u014f': 'o',
    '\u0151': 'o',
    '\u0154': 'R',
    '\u0156': 'R',
    '\u0158': 'R',
    '\u0155': 'r',
    '\u0157': 'r',
    '\u0159': 'r',
    '\u015a': 'S',
    '\u015c': 'S',
    '\u015e': 'S',
    '\u0160': 'S',
    '\u015b': 's',
    '\u015d': 's',
    '\u015f': 's',
    '\u0161': 's',
    '\u0162': 'T',
    '\u0164': 'T',
    '\u0166': 'T',
    '\u0163': 't',
    '\u0165': 't',
    '\u0167': 't',
    '\u0168': 'U',
    '\u016a': 'U',
    '\u016c': 'U',
    '\u016e': 'U',
    '\u0170': 'U',
    '\u0172': 'U',
    '\u0169': 'u',
    '\u016b': 'u',
    '\u016d': 'u',
    '\u016f': 'u',
    '\u0171': 'u',
    '\u0173': 'u',
    '\u0174': 'W',
    '\u0175': 'w',
    '\u0176': 'Y',
    '\u0177': 'y',
    '\u0178': 'Y',
    '\u0179': 'Z',
    '\u017b': 'Z',
    '\u017d': 'Z',
    '\u017a': 'z',
    '\u017c': 'z',
    '\u017e': 'z',
    '\u0132': 'IJ',
    '\u0133': 'ij',
    '\u0152': 'Oe',
    '\u0153': 'oe',
    '\u0149': "'n",
    '\u017f': 's'
  };
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function('return this')();
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding('util');
    } catch (e) {}
  }());
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  function addMapEntry(map, pair) {
    map.set(pair[0], pair[1]);
    return map;
  }
  function addSetEntry(set, value) {
    set.add(value);
    return set;
  }
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array ? array.length : 0;
    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0;
    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }
  function arrayEachRight(array, iteratee) {
    var length = array ? array.length : 0;
    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array ? array.length : 0;
    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array ? array.length : 0,
        resIndex = 0,
        result = [];
    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }
  function arrayIncludes(array, value) {
    var length = array ? array.length : 0;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array ? array.length : 0;
    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0,
        result = Array(length);
    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;
    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array ? array.length : 0;
    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array ? array.length : 0;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }
  function arraySome(array, predicate) {
    var index = -1,
        length = array ? array.length : 0;
    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }
  var asciiSize = baseProperty('length');
  function asciiToArray(string) {
    return string.split('');
  }
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);
    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }
  function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
  }
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;
    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }
  function baseIsNaN(value) {
    return value !== value;
  }
  function baseMean(array, iteratee) {
    var length = array ? array.length : 0;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }
  function baseSortBy(array, comparer) {
    var length = array.length;
    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;
    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }
  function cacheHas(cache, key) {
    return cache.has(key);
  }
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;
    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;
    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;
    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }
  var deburrLetter = basePropertyOf(deburredLetters);
  var escapeHtmlChar = basePropertyOf(htmlEscapes);
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }
  function iteratorToArray(iterator) {
    var data,
        result = [];
    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];
    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;
    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }
  function stringSize(string) {
    return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
  }
  function stringToArray(string) {
    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
  }
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }
  var runInContext = (function runInContext(context) {
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;
    var coreJsData = context['__core-js_shared__'];
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var idCounter = 0;
    var objectCtorString = funcToString.call(Object);
    var objectToString = objectProto.toString;
    var oldDash = root._;
    var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        iteratorSymbol = Symbol ? Symbol.iterator : undefined,
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;
    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');
    var metaMap = WeakMap && new WeakMap;
    var realNames = {};
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());
    function baseLodash() {}
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }
    lodash.templateSettings = {
      'escape': reEscape,
      'evaluate': reEvaluate,
      'interpolate': reInterpolate,
      'variable': '',
      'imports': {'_': lodash}
    };
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;
    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);
      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];
      outer: while (length-- && resIndex < takeCount) {
        index += dir;
        var iterIndex = -1,
            value = array[index];
        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);
          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;
    function Hash(entries) {
      var index = -1,
          length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1,
          length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);
      return index < 0 ? undefined : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1,
          length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index = -1,
          length = values ? values.length : 0;
      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || (isBuff && (key == 'offset' || key == 'parent')) || (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }
    function assignInDefaults(objValue, srcValue, key, object) {
      if (objValue === undefined || (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) || (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }
    function baseAt(object, paths) {
      var index = -1,
          isNil = object == null,
          length = paths.length,
          result = Array(length);
      while (++index < length) {
        result[index] = isNil ? undefined : get(object, paths[index]);
      }
      return result;
    }
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }
    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);
      var props = isArr ? undefined : (isFull ? getAllKeys : keys)(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
      });
      return result;
    }
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];
        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() {
        func.apply(undefined, args);
      }, wait);
    }
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;
      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer: while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;
        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        } else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }
    var baseEach = createBaseEach(baseForOwn);
    var baseEachRight = createBaseEach(baseForOwnRight, true);
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;
      while (++index < length) {
        var value = array[index],
            current = iteratee(value);
        if (current != null && (computed === undefined ? (current === current && !isSymbol(current)) : comparator(current, computed))) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }
    function baseFill(array, value, start, end) {
      var length = array.length;
      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    var baseFor = createBaseFor();
    var baseForRight = createBaseFor(true);
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }
    function baseGet(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);
      var index = 0,
          length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function baseGetTag(value) {
      return objectToString.call(value);
    }
    function baseGt(value, other) {
      return value > other;
    }
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];
      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120)) ? new SetCache(othIndex && array) : undefined;
      }
      array = arrays[0];
      var index = -1,
          seen = caches[0];
      outer: while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;
        value = (comparator || value !== 0) ? value : 0;
        if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }
    function baseInvoke(object, path, args) {
      if (!isKey(path, object)) {
        path = castPath(path);
        object = parent(object, path);
        path = last(path);
      }
      var func = object == null ? object : object[toKey(path)];
      return func == null ? undefined : apply(func, object, args);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && objectToString.call(value) == argsTag;
    }
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
    }
    function baseIsDate(value) {
      return isObjectLike(value) && objectToString.call(value) == dateTag;
    }
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;
      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object)) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2]) ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsRegExp(value) {
      return isObject(value) && objectToString.call(value) == regexpTag;
    }
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }
    function baseIteratee(value) {
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];
      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseLt(value, other) {
      return value < other;
    }
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];
      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue) ? hasIn(object, path) : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(object[key], srcValue, (key + ''), object, source, stack) : undefined;
          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, (key + ''), object, source, stack) : undefined;
      var isCommon = newValue === undefined;
      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return {
          'criteria': criteria,
          'index': ++index,
          'value': value
        };
      });
      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }
    function basePick(object, props) {
      object = Object(object);
      return basePickBy(object, props, function(value, key) {
        return key in object;
      });
    }
    function basePickBy(object, props, predicate) {
      var index = -1,
          length = props.length,
          result = {};
      while (++index < length) {
        var key = props[index],
            value = object[key];
        if (predicate(value, key)) {
          baseAssignValue(result, key, value);
        }
      }
      return result;
    }
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;
      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;
        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;
      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else if (!isKey(index, array)) {
            var path = castPath(index),
                object = parent(array, path);
            if (object != null) {
              delete object[toKey(last(path))];
            }
          } else {
            delete array[toKey(index)];
          }
        }
      }
      return array;
    }
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);
      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);
      return result;
    }
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }
    function baseSample(collection) {
      return arraySample(values(collection));
    }
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = isKey(path, object) ? [path] : castPath(path);
      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;
      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;
        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue) ? objValue : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;
      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }
    function baseSome(collection, predicate) {
      var result;
      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;
      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];
          if (computed !== null && !isSymbol(computed) && (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);
      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;
      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);
        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;
        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }
    function baseToString(value) {
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;
      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      } else {
        seen = iteratee ? [] : result;
      }
      outer: while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;
        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        } else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }
    function baseUnset(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);
      object = parent(object, path);
      var key = toKey(last(path));
      return !(object != null && hasOwnProperty.call(object, key)) || delete object[key];
    }
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;
      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
      return isDrop ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length)) : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }
    function baseXor(arrays, iteratee, comparator) {
      var index = -1,
          length = arrays.length;
      while (++index < length) {
        var result = result ? arrayPush(baseDifference(result, arrays[index], iteratee, comparator), baseDifference(arrays[index], result, iteratee, comparator)) : arrays[index];
      }
      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];
    }
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};
      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }
    var castRest = baseRest;
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor);
    }
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor);
    }
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);
        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);
        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) || (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) || (valIsNull && othIsDefined && othIsReflexive) || (!valIsDefined && othIsReflexive) || !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) || (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) || (othIsNull && valIsDefined && valIsReflexive) || (!othIsDefined && valIsReflexive) || !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;
      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      return object.index - other.index;
    }
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;
      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;
      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }
    function copyArray(source, array) {
      var index = -1,
          length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1,
          length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};
        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;
        customizer = (assigner.length > 3 && typeof customizer == 'function') ? (length--, customizer) : undefined;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);
        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtor(func);
      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);
        var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
        var chr = strSymbols ? strSymbols[0] : string.charAt(0);
        var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
        return chr[methodName]() + trailing;
      };
    }
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }
    function createCtor(Ctor) {
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0:
            return new Ctor;
          case 1:
            return new Ctor(args[0]);
          case 2:
            return new Ctor(args[0], args[1]);
          case 3:
            return new Ctor(args[0], args[1], args[2]);
          case 4:
            return new Ctor(args[0], args[1], args[2], args[3]);
          case 5:
            return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);
        return isObject(result) ? result : thisBinding;
      };
    }
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);
      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);
        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder) ? [] : replaceHolders(args, placeholder);
        length -= holders.length;
        if (length < arity) {
          return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) {
            return iteratee(iterable[key], key, iterable);
          };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;
        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];
          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;
          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];
          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;
          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
          isFlip = bitmask & FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);
      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;
        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;
        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);
      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
    }
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtor(func);
      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;
      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);
      if (!(bitmask & CURRY_BOUND_FLAG)) {
        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
      }
      var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];
      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = nativeMin(toInteger(precision), 292);
        if (precision) {
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));
          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }
    var createSet = !(Set && (1 / setToArray(new Set([, -0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;
      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;
        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);
      var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];
      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] == null ? (isBindKey ? 0 : func.length) : nativeMax(newData[9] - length, 0);
      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          arrLength = array.length,
          othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) || (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == (other + '');
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= UNORDERED_COMPARE_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
          stack['delete'](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === undefined ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack)) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;
        if (objCtor != othCtor && ('constructor' in object && 'constructor' in other) && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;
      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
    }
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;
      while (length--) {
        var key = result[length],
            value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }
    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };
    var getTag = baseGetTag;
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) || (Map && getTag(new Map) != mapTag) || (Promise && getTag(Promise.resolve()) != promiseTag) || (Set && getTag(new Set) != setTag) || (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = objectToString.call(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : undefined;
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;
      while (++index < length) {
        var data = transforms[index],
            size = data.size;
        switch (data.type) {
          case 'drop':
            start += size;
            break;
          case 'dropRight':
            end -= size;
            break;
          case 'take':
            end = nativeMin(end, start + size);
            break;
          case 'takeRight':
            start = nativeMax(start, end - size);
            break;
        }
      }
      return {
        'start': start,
        'end': end
      };
    }
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }
    function hasPath(object, path, hasFunc) {
      path = isKey(path, object) ? [path] : castPath(path);
      var index = -1,
          length = path.length,
          result = false;
      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object ? object.length : 0;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object)) ? baseCreate(getPrototype(object)) : {};
    }
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
          return new Ctor(+object);
        case dataViewTag:
          return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
          return cloneTypedArray(object, isDeep);
        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);
        case numberTag:
        case stringTag:
          return new Ctor(object);
        case regexpTag:
          return cloneRegExp(object);
        case setTag:
          return cloneSet(object, isDeep, cloneFunc);
        case symbolTag:
          return cloneSymbol(object);
      }
    }
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == 'number' || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number' ? (isArrayLike(object) && isIndex(index, object.length)) : (type == 'string' && index in object)) {
        return eq(object[index], value);
      }
      return false;
    }
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || (object != null && value in Object(object));
    }
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean') ? (value !== '__proto__') : (value === null);
    }
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];
      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }
    var isMaskable = coreJsData ? isFunction : stubFalse;
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
      return value === proto;
    }
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== undefined || (key in Object(object)));
      };
    }
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });
      var cache = result.cache;
      return result;
    }
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);
      var isCombo = ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) || ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) || ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));
      if (!(isCommon || isCombo)) {
        return data;
      }
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
      }
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      value = source[7];
      if (value) {
        data[7] = value;
      }
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      if (data[9] == null) {
        data[9] = source[9];
      }
      data[0] = source[0];
      data[1] = newBitmask;
      return data;
    }
    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    function parent(object, path) {
      return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
    }
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);
      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }
    var setData = shortOut(baseSetData);
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };
    var setToString = shortOut(baseSetToString);
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;
      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;
      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];
        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }
    var stringToPath = memoizeCapped(function(string) {
      string = toString(string);
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__ = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array ? array.length : 0;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));
      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = 0,
          result = [];
      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;
      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
    });
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
    });
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
    });
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }
    function dropRightWhile(array, predicate) {
      return (array && array.length) ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
    }
    function dropWhile(array, predicate) {
      return (array && array.length) ? baseWhile(array, getIteratee(predicate, 3), true) : [];
    }
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }
    function findIndex(array, predicate, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }
    function findLastIndex(array, predicate, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }
    function flatten(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, 1) : [];
    }
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, INFINITY) : [];
    }
    function flattenDepth(array, depth) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }
    function fromPairs(pairs) {
      var index = -1,
          length = pairs ? pairs.length : 0,
          result = {};
      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }
    function initial(array) {
      var length = array ? array.length : 0;
      return length ? baseSlice(array, 0, -1) : [];
    }
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0]) ? baseIntersection(mapped) : [];
    });
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);
      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0]) ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
    });
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);
      if (comparator === last(mapped)) {
        comparator = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0]) ? baseIntersection(mapped, undefined, comparator) : [];
    });
    function join(array, separator) {
      return array ? nativeJoin.call(array, separator) : '';
    }
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
    }
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }
    var pull = baseRest(pullAll);
    function pullAll(array, values) {
      return (array && array.length && values && values.length) ? basePullAll(array, values) : array;
    }
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length) ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
    }
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length) ? basePullAll(array, values, undefined, comparator) : array;
    }
    var pullAt = flatRest(function(array, indexes) {
      var length = array ? array.length : 0,
          result = baseAt(array, indexes);
      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));
      return result;
    });
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;
      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }
    function reverse(array) {
      return array ? nativeReverse.call(array) : array;
    }
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      } else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }
    function sortedIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }
    function sortedLastIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }
    function sortedUniq(array) {
      return (array && array.length) ? baseSortedUniq(array) : [];
    }
    function sortedUniqBy(array, iteratee) {
      return (array && array.length) ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
    }
    function tail(array) {
      var length = array ? array.length : 0;
      return length ? baseSlice(array, 1, length) : [];
    }
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }
    function takeRightWhile(array, predicate) {
      return (array && array.length) ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
    }
    function takeWhile(array, predicate) {
      return (array && array.length) ? baseWhile(array, getIteratee(predicate, 3)) : [];
    }
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }
    function uniqWith(array, comparator) {
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, values) : [];
    });
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });
    var zip = baseRest(unzip);
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;
      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }
    function thru(value, interceptor) {
      return interceptor(value);
    }
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) {
            return baseAt(object, paths);
          };
      if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });
    function wrapperChain() {
      return chain(this);
    }
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];
      return {
        'done': done,
        'value': value
      };
    }
    function wrapperToIterator() {
      return this;
    }
    function wrapperPlant(value) {
      var result,
          parent = this;
      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }
    var find = createFind(findIndex);
    var findLast = createFind(findLastIndex);
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;
      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection) ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1) : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];
      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() {
      return [[], []];
    });
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;
      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;
      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });
    var now = ctxNow || function() {
      return root.Date.now();
    };
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;
        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;
        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) || (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = undefined;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }
      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }
      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });
    function flip(func) {
      return createWrap(func, FLIP_FLAG);
    }
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }
    memoize.Cache = MapCache;
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0:
            return !predicate.call(this);
          case 1:
            return !predicate.call(this, args[0]);
          case 2:
            return !predicate.call(this, args[0], args[1]);
          case 3:
            return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }
    function once(func) {
      return before(2, func);
    }
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0])) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);
        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, PARTIAL_FLAG, undefined, partials, holders);
    });
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, REARG_FLAG, undefined, undefined, undefined, indexes);
    });
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);
        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }
    function unary(func) {
      return ary(func, 1);
    }
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return partial(wrapper, value);
    }
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }
    function clone(value) {
      return baseClone(value, false, true);
    }
    function cloneWith(value, customizer) {
      return baseClone(value, false, true, customizer);
    }
    function cloneDeep(value) {
      return baseClone(value, true, true);
    }
    function cloneDeepWith(value, customizer) {
      return baseClone(value, true, true, customizer);
    }
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }
    var gt = createRelationalOperation(baseGt);
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    };
    var isArray = Array.isArray;
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isBoolean(value) {
      return value === true || value === false || (isObjectLike(value) && objectToString.call(value) == boolTag);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
    function isElement(value) {
      return value != null && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }
    function isEmpty(value) {
      if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      return (objectToString.call(value) == errorTag) || (typeof value.message == 'string' && typeof value.name == 'string');
    }
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : '';
      return tag == funcTag || tag == genTag || tag == proxyTag;
    }
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }
    function isNaN(value) {
      return isNumber(value) && value != +value;
    }
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }
    function isNull(value) {
      return value === null;
    }
    function isNil(value) {
      return value == null;
    }
    function isNumber(value) {
      return typeof value == 'number' || (isObjectLike(value) && objectToString.call(value) == numberTag);
    }
    function isPlainObject(value) {
      if (!isObjectLike(value) || objectToString.call(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return (typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
    }
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
    function isString(value) {
      return typeof value == 'string' || (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
    }
    function isSymbol(value) {
      return typeof value == 'symbol' || (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function isUndefined(value) {
      return value === undefined;
    }
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }
    function isWeakSet(value) {
      return isObjectLike(value) && objectToString.call(value) == weakSetTag;
    }
    var lt = createRelationalOperation(baseLt);
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (iteratorSymbol && value[iteratorSymbol]) {
        return iteratorToArray(value[iteratorSymbol]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);
      return func(value);
    }
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;
      return result === result ? (remainder ? result - remainder : result) : 0;
    }
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value)) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : (reIsBadHex.test(value) ? NAN : +value);
    }
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    function toSafeInteger(value) {
      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    }
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });
    var at = flatRest(baseAt);
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? baseAssign(result, properties) : result;
    }
    var defaults = baseRest(function(args) {
      args.push(undefined, assignInDefaults);
      return apply(assignInWith, undefined, args);
    });
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, mergeDefaults);
      return apply(mergeWith, undefined, args);
    });
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }
    function forIn(object, iteratee) {
      return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }
    function forInRight(object, iteratee) {
      return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);
    var invoke = baseRest(baseInvoke);
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);
      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);
      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });
    var omit = flatRest(function(object, props) {
      if (object == null) {
        return {};
      }
      props = arrayMap(props, toKey);
      return basePick(object, baseDifference(getAllKeysIn(object), props));
    });
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }
    var pick = flatRest(function(object, props) {
      return object == null ? {} : basePick(object, arrayMap(props, toKey));
    });
    function pickBy(object, predicate) {
      return object == null ? {} : basePickBy(object, getAllKeysIn(object), getIteratee(predicate));
    }
    function result(object, path, defaultValue) {
      path = isKey(path, object) ? [path] : castPath(path);
      var index = -1,
          length = path.length;
      if (!length) {
        object = undefined;
        length = 1;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }
    var toPairs = createToPairs(keys);
    var toPairsIn = createToPairs(keysIn);
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);
      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        } else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        } else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }
    function values(object) {
      return object ? baseValues(object, keys(object)) : [];
    }
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        } else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      } else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);
      var length = string.length;
      position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string)) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
    }
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string)) ? string.replace(reRegExpChar, '\\$&') : string;
    }
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });
    var lowerFirst = createCaseFirst('toLowerCase');
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);
      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars));
    }
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);
      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length) ? (string + createPadding(length - strLength, chars)) : string;
    }
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);
      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length) ? (createPadding(length - strLength, chars) + string) : string;
    }
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }
    function replace() {
      var args = arguments,
          string = toString(args[0]);
      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (typeof separator == 'string' || (separator != null && !isRegExp(separator)))) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });
    function startsWith(string, target, position) {
      string = toString(string);
      position = baseClamp(toInteger(position), 0, string.length);
      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }
    function template(string, options, guard) {
      var settings = lodash.templateSettings;
      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, assignInDefaults);
      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);
      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";
      var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
      var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : ('lodash.templateSources[' + (++templateCounter) + ']')) + '\n';
      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;
        return match;
      });
      source += "';\n";
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
      source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }
    function toLower(value) {
      return toString(value).toLowerCase();
    }
    function toUpper(value) {
      return toString(value).toUpperCase();
    }
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;
      return castSlice(strSymbols, start, end).join('');
    }
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
      return castSlice(strSymbols, 0, end).join('');
    }
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));
      return castSlice(strSymbols, start).join('');
    }
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;
      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);
      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);
      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;
          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string)) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
    }
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });
    var upperFirst = createCaseFirst('toUpperCase');
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;
      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });
    function cond(pairs) {
      var length = pairs ? pairs.length : 0,
          toIteratee = getIteratee();
      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });
      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }
    function conforms(source) {
      return baseConforms(baseClone(source, true));
    }
    function constant(value) {
      return function() {
        return value;
      };
    }
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }
    var flow = createFlow();
    var flowRight = createFlow(true);
    function identity(value) {
      return value;
    }
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
    }
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);
      if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);
      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);
              actions.push({
                'func': func,
                'args': arguments,
                'thisArg': object
              });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });
      return object;
    }
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }
    function noop() {}
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }
    var over = createOver(arrayMap);
    var overEvery = createOver(arrayEvery);
    var overSome = createOver(arraySome);
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }
    var range = createRange();
    var rangeRight = createRange(true);
    function stubArray() {
      return [];
    }
    function stubFalse() {
      return false;
    }
    function stubObject() {
      return {};
    }
    function stubString() {
      return '';
    }
    function stubTrue() {
      return true;
    }
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);
      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;
      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(value));
    }
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);
    var ceil = createRound('ceil');
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);
    var floor = createRound('floor');
    function max(array) {
      return (array && array.length) ? baseExtremum(array, identity, baseGt) : undefined;
    }
    function maxBy(array, iteratee) {
      return (array && array.length) ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
    }
    function mean(array) {
      return baseMean(array, identity);
    }
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }
    function min(array) {
      return (array && array.length) ? baseExtremum(array, identity, baseLt) : undefined;
    }
    function minBy(array, iteratee) {
      return (array && array.length) ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
    }
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);
    var round = createRound('round');
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);
    function sum(array) {
      return (array && array.length) ? baseSum(array, identity) : 0;
    }
    function sumBy(array, iteratee) {
      return (array && array.length) ? baseSum(array, getIteratee(iteratee, 2)) : 0;
    }
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;
    mixin(lodash, lodash);
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;
    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), {'chain': false});
    lodash.VERSION = VERSION;
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };
      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');
      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');
      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });
    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };
    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };
    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };
    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });
    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };
    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);
      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };
    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };
    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);
      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);
        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };
        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;
        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({
            'func': thru,
            'args': [interceptor],
            'thisArg': undefined
          });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);
      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);
        names.push({
          'name': methodName,
          'func': lodashFunc
        });
      }
    });
    realNames[createHybrid(undefined, BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
    lodash.prototype.first = lodash.prototype.head;
    if (iteratorSymbol) {
      lodash.prototype[iteratorSymbol] = wrapperToIterator;
    }
    return lodash;
  });
  var _ = runInContext();
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    root._ = _;
    define("1b", [], function() {
      return _;
    });
  } else if (freeModule) {
    (freeModule.exports = _)._ = _;
    freeExports._ = _;
  } else {
    root._ = _;
  }
}.call(this));

})();
$__System.registerDynamic('1a', ['1b'], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  module.exports = $__require('1b');
  return module.exports;
});
$__System.registerDynamic("1c", ["3", "18", "1a"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var DataTable_1 = $__require("18");
    var _ = $__require("1a");
    var BootstrapPaginator = function () {
        function BootstrapPaginator() {
            this.rowsOnPageSet = [];
            this.minRowsOnPage = 0;
        }
        BootstrapPaginator.prototype.ngOnChanges = function (changes) {
            if (changes.rowsOnPageSet) {
                this.minRowsOnPage = _.min(this.rowsOnPageSet);
            }
        };
        __decorate([core_1.Input("rowsOnPageSet"), __metadata('design:type', Object)], BootstrapPaginator.prototype, "rowsOnPageSet", void 0);
        __decorate([core_1.Input("mfTable"), __metadata('design:type', DataTable_1.DataTable)], BootstrapPaginator.prototype, "mfTable", void 0);
        BootstrapPaginator = __decorate([core_1.Component({
            selector: "mfBootstrapPaginator",
            template: "\n    <mfPaginator #p [mfTable]=\"mfTable\">\n        <nav class=\"pagination\" *ngIf=\"p.dataLength > p.rowsOnPage\">\n            <li [class.disabled]=\"p.activePage <= 1\" (click)=\"p.setPage(1)\">\n                <a style=\"cursor: pointer\">&laquo;</a>\n            </li>\n            <li *ngIf=\"p.activePage > 4 && p.activePage + 1 > p.lastPage\" (click)=\"p.setPage(p.activePage - 4)\">\n                <a style=\"cursor: pointer\">{{p.activePage-4}}</a>\n            </li>\n            <li *ngIf=\"p.activePage > 3 && p.activePage + 2 > p.lastPage\" (click)=\"p.setPage(p.activePage - 3)\">\n                <a style=\"cursor: pointer\">{{p.activePage-3}}</a>\n            </li>\n            <li *ngIf=\"p.activePage > 2\" (click)=\"p.setPage(p.activePage - 2)\">\n                <a style=\"cursor: pointer\">{{p.activePage-2}}</a>\n            </li>\n            <li *ngIf=\"p.activePage > 1\" (click)=\"p.setPage(p.activePage - 1)\">\n                <a style=\"cursor: pointer\">{{p.activePage-1}}</a>\n            </li>\n            <li class=\"active\">\n                <a style=\"cursor: pointer\">{{p.activePage}}</a>\n            </li>\n            <li *ngIf=\"p.activePage + 1 <= p.lastPage\" (click)=\"p.setPage(p.activePage + 1)\">\n                <a style=\"cursor: pointer\">{{p.activePage+1}}</a>\n            </li>\n            <li *ngIf=\"p.activePage + 2 <= p.lastPage\" (click)=\"p.setPage(p.activePage + 2)\">\n                <a style=\"cursor: pointer\">{{p.activePage+2}}</a>\n            </li>\n            <li *ngIf=\"p.activePage + 3 <= p.lastPage && p.activePage < 3\" (click)=\"p.setPage(p.activePage + 3)\">\n                <a style=\"cursor: pointer\">{{p.activePage+3}}</a>\n            </li>\n            <li *ngIf=\"p.activePage + 4 <= p.lastPage && p.activePage < 2\" (click)=\"p.setPage(p.activePage + 4)\">\n                <a style=\"cursor: pointer\">{{p.activePage+4}}</a>\n            </li>\n            <li [class.disabled]=\"p.activePage >= p.lastPage\" (click)=\"p.setPage(p.lastPage)\">\n                <a style=\"cursor: pointer\">&raquo;</a>\n            </li>\n        </nav>\n        <nav class=\"pagination pull-right\" *ngIf=\"p.dataLength > minRowsOnPage\">\n            <li *ngFor=\"let rows of rowsOnPageSet\" [class.active]=\"p.rowsOnPage===rows\" (click)=\"p.setRowsOnPage(rows)\">\n                <a style=\"cursor: pointer\">{{rows}}</a>\n            </li>\n        </nav>\n    </mfPaginator>\n    "
        }), __metadata('design:paramtypes', [])], BootstrapPaginator);
        return BootstrapPaginator;
    }();
    exports.BootstrapPaginator = BootstrapPaginator;
    

    return module.exports;
});
$__System.registerDynamic("1d", ["3", "9", "18", "17", "19", "1c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var DataTable_1 = $__require("18");
    var DefaultSorter_1 = $__require("17");
    var Paginator_1 = $__require("19");
    var BootstrapPaginator_1 = $__require("1c");
    var DataTableModule = function () {
        function DataTableModule() {}
        DataTableModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            declarations: [DataTable_1.DataTable, DefaultSorter_1.DefaultSorter, Paginator_1.Paginator, BootstrapPaginator_1.BootstrapPaginator],
            exports: [DataTable_1.DataTable, DefaultSorter_1.DefaultSorter, Paginator_1.Paginator, BootstrapPaginator_1.BootstrapPaginator]
        }), __metadata('design:paramtypes', [])], DataTableModule);
        return DataTableModule;
    }();
    exports.DataTableModule = DataTableModule;
    

    return module.exports;
});
$__System.registerDynamic('1e', ['18', '17', '19', '1c', '1d'], true, function ($__require, exports, module) {
  var define,
      global = this || self,
      GLOBAL = global;
  var dataTable_directive = $__require('18');
  var defaultSorter_directive = $__require('17');
  var paginator_component = $__require('19');
  var bootstrapPaginator_component = $__require('1c');
  var dataTable_module = $__require('1d');

  exports.DataTable = dataTable_directive.DataTable;
  exports.DataEvent = dataTable_directive.DataEvent;
  exports.PageEvent = dataTable_directive.PageEvent;
  exports.SortEvent = dataTable_directive.SortEvent;
  exports.DefaultSorter = defaultSorter_directive.DefaultSorter;
  exports.Paginator = paginator_component.Paginator;
  exports.BootstrapPaginator = bootstrapPaginator_component.BootstrapPaginator;
  exports.DataTableModule = dataTable_module.DataTableModule;
  return module.exports;
});
$__System.registerDynamic("12", ["3", "1f"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var merchant_service_1 = $__require("1f");
    var MerchantComponent = function () {
        function MerchantComponent(merchantService) {
            var _this = this;
            this.merchantService = merchantService;
            this.merchant = {
                name: '',
                merchantApiKey: '',
                merchantApiSecret: '',
                customerApiKey: '',
                customerApiSecret: ''
            };
            this.messageType = '';
            this.message = '';
            this.showCustomAlert = false;
            this.display = false;
            this.selectedMerchant = {
                name: '',
                merchantApiKey: '',
                merchantApiSecret: '',
                customerApiKey: '',
                customerApiSecret: '',
                id: '',
                status: ''
            };
            this.merchants = [];
            this.merchantService.getMerchants().subscribe(function (data) {
                _this.merchants = data.data;
                console.log(_this.merchants);
            });
        }
        MerchantComponent.prototype.update = function (event) {
            var _this = this;
            event.preventDefault();
            //validate fields
            if (this.selectedMerchant.name === '' || this.selectedMerchant.merchantApiKey === '' || this.selectedMerchant.merchantApiSecret === '' || this.selectedMerchant.customerApiKey === '' || this.selectedMerchant.customerApiSecret === '') {
                this.messageType = 'OOPS!';
                this.message = 'All fields are required!';
                this.showCustomAlert = true;
                return;
            }
            console.log(this.selectedMerchant);
            this.merchantService.create(this.selectedMerchant).subscribe(function (data) {
                console.log(data);
                if (data.responseCode === '200') {
                    _this.clearMerchant();
                    _this.merchantService.getMerchants().subscribe(function (data) {
                        return _this.merchants = data.data;
                    });
                    _this.display = false;
                    _this.messageType = 'HOORAY!';
                    _this.message = 'Merchant details has been updated.';
                    _this.showCustomAlert = true;
                } else {
                    _this.messageType = 'OOPS!';
                    _this.message = 'Something unexpected went wrong please contact the developer :)';
                    _this.showCustomAlert = true;
                }
            });
        };
        MerchantComponent.prototype.create = function (event) {
            var _this = this;
            event.preventDefault();
            //validate fields
            if (this.merchant.name === '' || this.merchant.merchantApiKey === '' || this.merchant.merchantApiSecret === '' || this.merchant.customerApiKey === '' || this.merchant.customerApiSecret === '') {
                this.messageType = 'OOPS!';
                this.message = 'All fields are required!';
                this.showCustomAlert = true;
                return;
            }
            this.merchantService.create(this.merchant).subscribe(function (data) {
                console.log(data);
                if (data.responseCode === '200') {
                    _this.clearMerchant();
                    _this.merchantService.getMerchants().subscribe(function (data) {
                        return _this.merchants = data.data;
                    });
                    _this.messageType = 'HOORAY!';
                    _this.message = 'Merchant has been created.';
                    _this.showCustomAlert = true;
                } else {
                    _this.messageType = 'OOPS!';
                    _this.message = 'Something unexpected went wrong please contact the developer :)';
                    _this.showCustomAlert = true;
                }
            });
        };
        MerchantComponent.prototype.clear = function ($event) {
            event.preventDefault();
            this.clearMerchant();
        };
        MerchantComponent.prototype.clearMerchant = function () {
            this.merchant = {
                name: '',
                merchantApiKey: '',
                merchantApiSecret: '',
                customerApiKey: '',
                customerApiSecret: ''
            };
        };
        MerchantComponent.prototype.showDialog = function (event, merchant) {
            event.preventDefault();
            this.selectedMerchant = {
                name: merchant.name,
                merchantApiKey: merchant.merchantApiKey,
                merchantApiSecret: merchant.merchantApiSecret,
                customerApiKey: merchant.customerApiKey,
                customerApiSecret: merchant.customerApiSecret,
                id: merchant.id,
                status: merchant.status
            };
            this.display = true;
        };
        MerchantComponent = __decorate([core_1.Component({
            moduleId: module.id,
            selector: 'app-merchants',
            templateUrl: 'merchant.html',
            providers: [merchant_service_1.MerchantService]
        }), __metadata('design:paramtypes', [merchant_service_1.MerchantService])], MerchantComponent);
        return MerchantComponent;
    }();
    exports.MerchantComponent = MerchantComponent;
    

    return module.exports;
});
$__System.registerDynamic("20", ["3", "9", "21"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var shared_1 = $__require("21");
    var Accordion = function () {
        function Accordion(el) {
            this.el = el;
            this.onClose = new core_1.EventEmitter();
            this.onOpen = new core_1.EventEmitter();
            this.tabs = [];
        }
        Accordion.prototype.addTab = function (tab) {
            this.tabs.push(tab);
        };
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Accordion.prototype, "multiple", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Accordion.prototype, "onClose", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Accordion.prototype, "onOpen", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Accordion.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Accordion.prototype, "styleClass", void 0);
        Accordion = __decorate([core_1.Component({
            selector: 'p-accordion',
            template: "\n        <div [ngClass]=\"'ui-accordion ui-widget ui-helper-reset'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <ng-content></ng-content>\n        </div>\n    "
        }), __metadata('design:paramtypes', [core_1.ElementRef])], Accordion);
        return Accordion;
    }();
    exports.Accordion = Accordion;
    var AccordionTab = function () {
        function AccordionTab(accordion) {
            this.accordion = accordion;
            this.selectedChange = new core_1.EventEmitter();
            this.accordion.addTab(this);
        }
        AccordionTab.prototype.toggle = function (event) {
            var _this = this;
            if (this.disabled) {
                return;
            }
            this.animating = true;
            var index = this.findTabIndex();
            if (this.selected) {
                this.selected = false;
                this.accordion.onClose.emit({ originalEvent: event, index: index });
            } else {
                if (!this.accordion.multiple) {
                    for (var i = 0; i < this.accordion.tabs.length; i++) {
                        this.accordion.tabs[i].selected = false;
                        this.accordion.tabs[i].selectedChange.emit(false);
                    }
                }
                this.selected = true;
                this.accordion.onOpen.emit({ originalEvent: event, index: index });
            }
            this.selectedChange.emit(this.selected);
            //TODO: Use onDone of animate callback instead with RC6
            setTimeout(function () {
                _this.animating = false;
            }, 400);
            event.preventDefault();
        };
        AccordionTab.prototype.findTabIndex = function () {
            var index = -1;
            for (var i = 0; i < this.accordion.tabs.length; i++) {
                if (this.accordion.tabs[i] == this) {
                    index = i;
                    break;
                }
            }
            return index;
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], AccordionTab.prototype, "header", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], AccordionTab.prototype, "selected", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], AccordionTab.prototype, "disabled", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], AccordionTab.prototype, "selectedChange", void 0);
        __decorate([core_1.ContentChild(shared_1.Header), __metadata('design:type', Object)], AccordionTab.prototype, "headerFacet", void 0);
        AccordionTab = __decorate([core_1.Component({
            selector: 'p-accordionTab',
            template: "\n        <div class=\"ui-accordion-header ui-state-default ui-corner-all\" [ngClass]=\"{'ui-state-active': selected,'ui-state-hover':hover&&!disabled,'ui-state-disabled':disabled}\">\n            <span class=\"fa fa-fw\" [ngClass]=\"{'fa-caret-down': selected, 'fa-caret-right': !selected}\"></span>\n            <a href=\"#\" *ngIf=\"!headerFacet\" role=\"tab\" [attr.aria-expanded]=\"selected\" [attr.aria-selected]=\"selected\"\n                (click)=\"toggle($event)\" (mouseenter)=\"hover = true\" (mouseleave)=\"hover=false\">{{header}}</a>\n            <a href=\"#\" *ngIf=\"headerFacet\" role=\"tab\" [attr.aria-expanded]=\"selected\" [attr.aria-selected]=\"selected\"\n                (click)=\"toggle($event)\" (mouseenter)=\"hover = true\" (mouseleave)=\"hover=false\">\n                <ng-content select=\"header\"></ng-content>\n            </a>\n        </div>\n        <div class=\"ui-accordion-content-wrapper\" [@tabContent]=\"selected ? 'visible' : 'hidden'\" \n            [ngClass]=\"{'ui-accordion-content-wrapper-overflown': !selected||animating}\" role=\"tabpanel\" [attr.aria-hidden]=\"!selected\">\n            <div class=\"ui-accordion-content ui-widget-content\">\n                <ng-content></ng-content>\n            </div>\n        </div>\n    ",
            animations: [core_1.trigger('tabContent', [core_1.state('hidden', core_1.style({
                height: '0px'
            })), core_1.state('visible', core_1.style({
                height: '*'
            })), core_1.transition('visible => hidden', core_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')), core_1.transition('hidden => visible', core_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))])]
        }), __metadata('design:paramtypes', [Accordion])], AccordionTab);
        return AccordionTab;
    }();
    exports.AccordionTab = AccordionTab;
    var AccordionModule = function () {
        function AccordionModule() {}
        AccordionModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Accordion, AccordionTab],
            declarations: [Accordion, AccordionTab]
        }), __metadata('design:paramtypes', [])], AccordionModule);
        return AccordionModule;
    }();
    exports.AccordionModule = AccordionModule;
    

    return module.exports;
});
$__System.registerDynamic("22", ["3", "9", "24", "25", "21", "26", "23"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var inputtext_1 = $__require("24");
    var button_1 = $__require("25");
    var shared_1 = $__require("21");
    var domhandler_1 = $__require("26");
    var forms_1 = $__require("23");
    exports.AUTOCOMPLETE_VALUE_ACCESSOR = {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return AutoComplete;
        }),
        multi: true
    };
    var AutoComplete = function () {
        function AutoComplete(el, domHandler, differs, renderer) {
            this.el = el;
            this.domHandler = domHandler;
            this.renderer = renderer;
            this.minLength = 3;
            this.delay = 300;
            this.completeMethod = new core_1.EventEmitter();
            this.onSelect = new core_1.EventEmitter();
            this.onUnselect = new core_1.EventEmitter();
            this.onDropdownClick = new core_1.EventEmitter();
            this.scrollHeight = '200px';
            this.onModelChange = function () {};
            this.onModelTouched = function () {};
            this.panelVisible = false;
            this.differ = differs.find([]).create(null);
        }
        AutoComplete.prototype.ngDoCheck = function () {
            var changes = this.differ.diff(this.suggestions);
            if (changes && this.panel) {
                if (this.suggestions && this.suggestions.length) {
                    this.show();
                    this.suggestionsUpdated = true;
                } else {
                    this.hide();
                }
            }
        };
        AutoComplete.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.input = this.domHandler.findSingle(this.el.nativeElement, 'input');
            this.panel = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-autocomplete-panel');
            if (this.multiple) {
                this.multipleContainer = this.domHandler.findSingle(this.el.nativeElement, 'ul.ui-autocomplete-multiple-container');
            }
            this.documentClickListener = this.renderer.listenGlobal('body', 'click', function () {
                _this.hide();
            });
        };
        AutoComplete.prototype.ngAfterViewChecked = function () {
            if (this.suggestionsUpdated) {
                this.align();
                this.suggestionsUpdated = false;
            }
            if (this.highlightOptionChanged) {
                var listItem = this.domHandler.findSingle(this.panel, 'li.ui-state-highlight');
                if (listItem) {
                    this.domHandler.scrollInView(this.panel, listItem);
                }
                this.highlightOptionChanged = false;
            }
        };
        AutoComplete.prototype.writeValue = function (value) {
            this.value = value;
        };
        AutoComplete.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        AutoComplete.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        AutoComplete.prototype.setDisabledState = function (val) {
            this.disabled = val;
        };
        AutoComplete.prototype.onInput = function (event) {
            var _this = this;
            var value = event.target.value;
            if (!this.multiple) {
                this.value = value;
                this.onModelChange(value);
            }
            if (value.length === 0) {
                this.hide();
            }
            if (value.length >= this.minLength) {
                //Cancel the search request if user types within the timeout
                if (this.timeout) {
                    clearTimeout(this.timeout);
                }
                this.timeout = setTimeout(function () {
                    _this.search(event, value);
                }, this.delay);
            } else {
                this.suggestions = null;
            }
        };
        AutoComplete.prototype.search = function (event, query) {
            //allow empty string but not undefined or null
            if (query === undefined || query === null) {
                return;
            }
            this.completeMethod.emit({
                originalEvent: event,
                query: query
            });
        };
        AutoComplete.prototype.selectItem = function (option) {
            if (this.multiple) {
                this.input.value = '';
                this.value = this.value || [];
                if (!this.isSelected(option)) {
                    this.value.push(option);
                    this.onModelChange(this.value);
                }
            } else {
                this.input.value = this.field ? this.resolveFieldData(option) : option;
                this.value = option;
                this.onModelChange(this.value);
            }
            this.onSelect.emit(option);
            this.input.focus();
        };
        AutoComplete.prototype.show = function () {
            if (!this.panelVisible) {
                this.panelVisible = true;
                this.panel.style.zIndex = ++domhandler_1.DomHandler.zindex;
                this.domHandler.fadeIn(this.panel, 200);
            }
        };
        AutoComplete.prototype.align = function () {
            if (this.multiple) this.domHandler.relativePosition(this.panel, this.multipleContainer);else this.domHandler.relativePosition(this.panel, this.input);
        };
        AutoComplete.prototype.hide = function () {
            this.panelVisible = false;
        };
        AutoComplete.prototype.handleDropdownClick = function (event) {
            this.onDropdownClick.emit({
                originalEvent: event,
                query: this.input.value
            });
        };
        AutoComplete.prototype.removeItem = function (item) {
            var itemIndex = this.domHandler.index(item);
            var removedValue = this.value.splice(itemIndex, 1)[0];
            this.onUnselect.emit(removedValue);
            this.onModelChange(this.value);
        };
        AutoComplete.prototype.resolveFieldData = function (data) {
            if (data && this.field) {
                if (this.field.indexOf('.') == -1) {
                    return data[this.field];
                } else {
                    var fields = this.field.split('.');
                    var value = data;
                    for (var i = 0, len = fields.length; i < len; ++i) {
                        value = value[fields[i]];
                    }
                    return value;
                }
            } else {
                return null;
            }
        };
        AutoComplete.prototype.onKeydown = function (event) {
            if (this.panelVisible) {
                var highlightItemIndex = this.findOptionIndex(this.highlightOption);
                switch (event.which) {
                    //down
                    case 40:
                        if (highlightItemIndex != -1) {
                            var nextItemIndex = highlightItemIndex + 1;
                            if (nextItemIndex != this.suggestions.length) {
                                this.highlightOption = this.suggestions[nextItemIndex];
                                this.highlightOptionChanged = true;
                            }
                        } else {
                            this.highlightOption = this.suggestions[0];
                        }
                        event.preventDefault();
                        break;
                    //up
                    case 38:
                        if (highlightItemIndex > 0) {
                            var prevItemIndex = highlightItemIndex - 1;
                            this.highlightOption = this.suggestions[prevItemIndex];
                            this.highlightOptionChanged = true;
                        }
                        event.preventDefault();
                        break;
                    //enter
                    case 13:
                        if (this.highlightOption) {
                            this.selectItem(this.highlightOption);
                            this.hide();
                        }
                        event.preventDefault();
                        break;
                    //escape
                    case 27:
                        this.hide();
                        event.preventDefault();
                        break;
                    //tab
                    case 9:
                        if (this.highlightOption) {
                            this.selectItem(this.highlightOption);
                        }
                        this.hide();
                        break;
                }
            }
            if (this.multiple) {
                switch (event.which) {
                    //backspace
                    case 8:
                        if (this.value && this.value.length && !this.input.value) {
                            var removedValue = this.value.pop();
                            this.onUnselect.emit(removedValue);
                            this.onModelChange(this.value);
                        }
                        break;
                }
            }
        };
        AutoComplete.prototype.isSelected = function (val) {
            var selected = false;
            if (this.value && this.value.length) {
                for (var i = 0; i < this.value.length; i++) {
                    if (this.domHandler.equals(this.value[i], val)) {
                        selected = true;
                        break;
                    }
                }
            }
            return selected;
        };
        AutoComplete.prototype.findOptionIndex = function (option) {
            var index = -1;
            if (this.suggestions) {
                for (var i = 0; i < this.suggestions.length; i++) {
                    if (this.domHandler.equals(option, this.suggestions[i])) {
                        index = i;
                        break;
                    }
                }
            }
            return index;
        };
        AutoComplete.prototype.ngOnDestroy = function () {
            if (this.documentClickListener) {
                this.documentClickListener();
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Number)], AutoComplete.prototype, "minLength", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], AutoComplete.prototype, "delay", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], AutoComplete.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], AutoComplete.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], AutoComplete.prototype, "inputStyle", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], AutoComplete.prototype, "inputStyleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], AutoComplete.prototype, "placeholder", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], AutoComplete.prototype, "readonly", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], AutoComplete.prototype, "disabled", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], AutoComplete.prototype, "maxlength", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], AutoComplete.prototype, "size", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Array)], AutoComplete.prototype, "suggestions", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], AutoComplete.prototype, "completeMethod", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], AutoComplete.prototype, "onSelect", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], AutoComplete.prototype, "onUnselect", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], AutoComplete.prototype, "onDropdownClick", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], AutoComplete.prototype, "field", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], AutoComplete.prototype, "scrollHeight", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], AutoComplete.prototype, "dropdown", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], AutoComplete.prototype, "multiple", void 0);
        __decorate([core_1.ContentChild(core_1.TemplateRef), __metadata('design:type', core_1.TemplateRef)], AutoComplete.prototype, "itemTemplate", void 0);
        AutoComplete = __decorate([core_1.Component({
            selector: 'p-autoComplete',
            template: "\n        <span [ngClass]=\"{'ui-autocomplete ui-widget':true,'ui-autocomplete-dd':dropdown,'ui-autocomplete-multiple':multiple}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <input *ngIf=\"!multiple\" #in pInputText type=\"text\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" \n            [value]=\"value ? (field ? resolveFieldData(value)||value : value) : null\" (input)=\"onInput($event)\" (keydown)=\"onKeydown($event)\" (blur)=\"onModelTouched()\"\n            [attr.placeholder]=\"placeholder\" [attr.size]=\"size\" [attr.maxlength]=\"maxlength\" [attr.readonly]=\"readonly\" [disabled]=\"disabled\"\n            [ngClass]=\"{'ui-autocomplete-input':true,'ui-autocomplete-dd-input':dropdown}\"\n            ><ul *ngIf=\"multiple\" class=\"ui-autocomplete-multiple-container ui-widget ui-inputtext ui-state-default ui-corner-all\" (click)=\"multiIn.focus()\">\n                <li #token *ngFor=\"let val of value\" class=\"ui-autocomplete-token ui-state-highlight ui-corner-all\">\n                    <span class=\"ui-autocomplete-token-icon fa fa-fw fa-close\" (click)=\"removeItem(token)\"></span>\n                    <span class=\"ui-autocomplete-token-label\">{{field ? val[field] : val}}</span>\n                </li>\n                <li class=\"ui-autocomplete-input-token\">\n                    <input #multiIn type=\"text\" pInputText (input)=\"onInput($event)\" (keydown)=\"onKeydown($event)\" (blur)=\"onModelTouched()\">\n                </li>\n            </ul\n            ><button type=\"button\" pButton icon=\"fa-fw fa-caret-down\" class=\"ui-autocomplete-dropdown\" [disabled]=\"disabled\"\n                (click)=\"handleDropdownClick($event)\" *ngIf=\"dropdown\"></button>\n            <div class=\"ui-autocomplete-panel ui-widget-content ui-corner-all ui-shadow\" [style.display]=\"panelVisible ? 'block' : 'none'\" [style.width]=\"'100%'\" [style.max-height]=\"scrollHeight\">\n                <ul class=\"ui-autocomplete-items ui-autocomplete-list ui-widget-content ui-widget ui-corner-all ui-helper-reset\">\n                    <li *ngFor=\"let option of suggestions\" [ngClass]=\"{'ui-autocomplete-list-item ui-corner-all':true,'ui-state-highlight':(highlightOption==option)}\"\n                        (mouseenter)=\"highlightOption=option\" (mouseleave)=\"highlightOption=null\" (click)=\"selectItem(option)\">\n                        <span *ngIf=\"!itemTemplate\">{{field ? option[field] : option}}</span>\n                        <template *ngIf=\"itemTemplate\" [pTemplateWrapper]=\"itemTemplate\" [item]=\"option\"></template>\n                    </li>\n                </ul>\n            </div>\n        </span>\n    ",
            providers: [domhandler_1.DomHandler, exports.AUTOCOMPLETE_VALUE_ACCESSOR]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.IterableDiffers, core_1.Renderer])], AutoComplete);
        return AutoComplete;
    }();
    exports.AutoComplete = AutoComplete;
    var AutoCompleteModule = function () {
        function AutoCompleteModule() {}
        AutoCompleteModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule, inputtext_1.InputTextModule, button_1.ButtonModule, shared_1.SharedModule],
            exports: [AutoComplete, shared_1.SharedModule],
            declarations: [AutoComplete]
        }), __metadata('design:paramtypes', [])], AutoCompleteModule);
        return AutoCompleteModule;
    }();
    exports.AutoCompleteModule = AutoCompleteModule;
    

    return module.exports;
});
$__System.registerDynamic("27", ["3", "9", "d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var router_1 = $__require("d");
    var Breadcrumb = function () {
        function Breadcrumb(router) {
            this.router = router;
        }
        Breadcrumb.prototype.itemClick = function (event, item) {
            if (item.disabled) {
                event.preventDefault();
                return;
            }
            if (!item.url || item.routerLink) {
                event.preventDefault();
            }
            if (item.command) {
                if (!item.eventEmitter) {
                    item.eventEmitter = new core_1.EventEmitter();
                    item.eventEmitter.subscribe(item.command);
                }
                item.eventEmitter.emit({
                    originalEvent: event,
                    item: item
                });
            }
            if (item.routerLink) {
                this.router.navigate(item.routerLink);
            }
        };
        Breadcrumb.prototype.ngOnDestroy = function () {
            if (this.model) {
                for (var _i = 0, _a = this.model; _i < _a.length; _i++) {
                    var item = _a[_i];
                    if (item.eventEmitter) {
                        item.eventEmitter.unsubscribe();
                    }
                }
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], Breadcrumb.prototype, "model", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Breadcrumb.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Breadcrumb.prototype, "styleClass", void 0);
        Breadcrumb = __decorate([core_1.Component({
            selector: 'p-breadcrumb',
            template: "\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"'ui-breadcrumb ui-widget ui-widget-header ui-helper-clearfix ui-corner-all'\">\n            <ul>\n                <li class=\"fa fa-home\"></li>\n                <template ngFor let-item let-end=\"last\" [ngForOf]=\"model\">\n                    <li role=\"menuitem\">\n                        <a [href]=\"item.url||'#'\" class=\"ui-menuitem-link\" (click)=\"itemClick($event, item)\" [ngClass]=\"{'ui-state-disabled':item.disabled}\">\n                            <span class=\"ui-menuitem-text\">{{item.label}}</span>\n                        </a>\n                    </li>\n                    <li class=\"ui-breadcrumb-chevron fa fa-chevron-right\" *ngIf=\"!end\"></li>\n                </template>\n            </ul>\n        </div>\n    "
        }), __metadata('design:paramtypes', [router_1.Router])], Breadcrumb);
        return Breadcrumb;
    }();
    exports.Breadcrumb = Breadcrumb;
    var BreadcrumbModule = function () {
        function BreadcrumbModule() {}
        BreadcrumbModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Breadcrumb],
            declarations: [Breadcrumb]
        }), __metadata('design:paramtypes', [])], BreadcrumbModule);
        return BreadcrumbModule;
    }();
    exports.BreadcrumbModule = BreadcrumbModule;
    

    return module.exports;
});
$__System.registerDynamic("28", ["3", "9", "25", "23"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var button_1 = $__require("25");
    var forms_1 = $__require("23");
    exports.CALENDAR_VALUE_ACCESSOR = {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return Calendar;
        }),
        multi: true
    };
    var Calendar = function () {
        function Calendar(el, zone) {
            this.el = el;
            this.zone = zone;
            this.inline = false;
            this.stepHour = 1;
            this.stepMinute = 1;
            this.stepSecond = 1;
            this.hourMin = 0;
            this.hourMax = 23;
            this.minuteMin = 0;
            this.minuteMax = 59;
            this.secondMin = 0;
            this.secondMax = 59;
            this.hourGrid = 0;
            this.minuteGrid = 0;
            this.secondGrid = 0;
            this.icon = 'fa-calendar';
            this.onBlur = new core_1.EventEmitter();
            this.onSelect = new core_1.EventEmitter();
            this.onModelChange = function () {};
            this.onModelTouched = function () {};
            this.initialized = false;
        }
        Calendar.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.calendarElement = this.inline ? jQuery(this.el.nativeElement.children[0]) : jQuery(this.el.nativeElement.children[0].children[0]);
            var options = {
                showAnim: this.showAnim,
                dateFormat: this.dateFormat,
                showButtonPanel: this.showButtonPanel,
                changeMonth: this.monthNavigator,
                changeYear: this.yearNavigator,
                numberOfMonths: this.numberOfMonths,
                showWeek: this.showWeek,
                showOtherMonths: this.showOtherMonths,
                selectOtherMonths: this.selectOtherMonths,
                defaultDate: this.defaultDate,
                minDate: this.minDate,
                maxDate: this.maxDate,
                yearRange: this.yearRange,
                onSelect: function (dateText) {
                    _this.zone.run(function () {
                        _this.value = dateText;
                        _this.onModelChange(_this.value);
                        _this.onSelect.emit(_this.value);
                    });
                }
            };
            if (this.locale) {
                for (var prop in this.locale) {
                    options[prop] = this.locale[prop];
                }
            }
            if (this.timeFormat || this.timeOnly) {
                options['timeFormat'] = this.timeFormat;
                options['timeOnly'] = this.timeOnly;
                options['stepHour'] = this.stepHour;
                options['stepMinute'] = this.stepMinute;
                options['stepSecond'] = this.stepSecond;
                options['hourMin'] = this.hourMin;
                options['hourMax'] = this.hourMax;
                options['minuteMin'] = this.minuteMin;
                options['minuteMax'] = this.minuteMax;
                options['secondMin'] = this.secondMin;
                options['secondMax'] = this.secondMax;
                options['hourGrid'] = this.hourGrid;
                options['minuteGrid'] = this.minuteGrid;
                options['secondGrid'] = this.secondGrid;
                options['controlType'] = this.timeControlType;
                options['oneLine'] = this.horizontalTimeControls;
                options['minTime'] = this.minTime;
                options['maxTime'] = this.maxTime;
                options['timezoneList'] = this.timezoneList;
                this.calendarElement.datetimepicker(options);
            } else this.calendarElement.datepicker(options);
            this.initialized = true;
        };
        Calendar.prototype.onInput = function (event) {
            this.onModelChange(event.target.value);
        };
        Calendar.prototype.handleBlur = function (event) {
            this.value = event.target.value;
            this.onModelTouched();
            this.focused = false;
            this.onBlur.emit(event);
        };
        Calendar.prototype.writeValue = function (value) {
            this.value = value;
        };
        Calendar.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        Calendar.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        Calendar.prototype.setDisabledState = function (val) {
            this.disabled = val;
        };
        Calendar.prototype.ngOnChanges = function (changes) {
            if (this.initialized) {
                for (var key in changes) {
                    this.calendarElement.datepicker('option', key, changes[key].currentValue);
                }
            }
        };
        Calendar.prototype.ngOnDestroy = function () {
            this.calendarElement.datepicker('destroy');
            this.calendarElement = null;
            this.initialized = false;
        };
        Calendar.prototype.onButtonClick = function (event, input) {
            input.focus();
        };
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Calendar.prototype, "readonlyInput", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Calendar.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Calendar.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Calendar.prototype, "inputStyle", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Calendar.prototype, "inputStyleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Calendar.prototype, "placeholder", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Calendar.prototype, "inline", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Calendar.prototype, "showAnim", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Calendar.prototype, "dateFormat", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Calendar.prototype, "showButtonPanel", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Calendar.prototype, "monthNavigator", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Calendar.prototype, "yearNavigator", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Calendar.prototype, "numberOfMonths", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Calendar.prototype, "showWeek", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Calendar.prototype, "showOtherMonths", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Calendar.prototype, "selectOtherMonths", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Calendar.prototype, "defaultDate", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Calendar.prototype, "minDate", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Calendar.prototype, "maxDate", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Calendar.prototype, "disabled", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Calendar.prototype, "showIcon", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Calendar.prototype, "timeFormat", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Calendar.prototype, "timeOnly", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Calendar.prototype, "stepHour", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Calendar.prototype, "stepMinute", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Calendar.prototype, "stepSecond", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Calendar.prototype, "hourMin", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Calendar.prototype, "hourMax", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Calendar.prototype, "minuteMin", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Calendar.prototype, "minuteMax", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Calendar.prototype, "secondMin", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Calendar.prototype, "secondMax", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Calendar.prototype, "hourGrid", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Calendar.prototype, "minuteGrid", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Calendar.prototype, "secondGrid", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Calendar.prototype, "timeControlType", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Calendar.prototype, "horizontalTimeControls", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Calendar.prototype, "minTime", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Calendar.prototype, "maxTime", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Array)], Calendar.prototype, "timezoneList", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Calendar.prototype, "locale", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Calendar.prototype, "icon", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Calendar.prototype, "yearRange", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Calendar.prototype, "onBlur", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Calendar.prototype, "onSelect", void 0);
        Calendar = __decorate([core_1.Component({
            selector: 'p-calendar',
            template: "\n        <span [ngStyle]=\"style\" [class]=\"styleClass\" [ngClass]=\"'ui-calendar'\" *ngIf=\"!inline\">\n        <input #in type=\"text\" [attr.placeholder]=\"placeholder\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\"\n                [value]=\"value||''\" (input)=\"onInput($event)\" [readonly]=\"readonlyInput\"\n                [disabled]=\"disabled\" (mouseenter)=\"hovered=true\" (mouseleave)=\"hovered=false\" (focus)=\"focused=true\" (blur)=\"handleBlur($event)\"\n                [ngClass]=\"{'ui-inputtext ui-widget ui-state-default': true, 'ui-corner-all': !showIcon, 'ui-corner-left': showIcon,\n                    'ui-state-hover':hovered,'ui-state-focus':focused,'ui-state-disabled':disabled}\"\n        ><button type=\"button\" [icon]=\"icon\" pButton *ngIf=\"showIcon\" (click)=\"onButtonClick($event,in)\" \n                [ngClass]=\"{'ui-datepicker-trigger':true,'ui-state-disabled':disabled}\" [disabled]=\"disabled\"></button></span>\n        <div *ngIf=\"inline\"></div>\n    ",
            providers: [exports.CALENDAR_VALUE_ACCESSOR]
        }), __metadata('design:paramtypes', [core_1.ElementRef, core_1.NgZone])], Calendar);
        return Calendar;
    }();
    exports.Calendar = Calendar;
    var CalendarModule = function () {
        function CalendarModule() {}
        CalendarModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule, button_1.ButtonModule],
            exports: [Calendar],
            declarations: [Calendar]
        }), __metadata('design:paramtypes', [])], CalendarModule);
        return CalendarModule;
    }();
    exports.CalendarModule = CalendarModule;
    

    return module.exports;
});
$__System.registerDynamic("29", ["3", "26", "21", "9"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var domhandler_1 = $__require("26");
    var shared_1 = $__require("21");
    var common_1 = $__require("9");
    var Carousel = function () {
        function Carousel(el, domHandler, differs, renderer) {
            this.el = el;
            this.domHandler = domHandler;
            this.renderer = renderer;
            this.numVisible = 3;
            this.firstVisible = 0;
            this.circular = false;
            this.breakpoint = 560;
            this.responsive = true;
            this.autoplayInterval = 0;
            this.effectDuration = '1s';
            this.easing = 'ease-out';
            this.pageLinks = 3;
            this.left = 0;
            this.differ = differs.find([]).create(null);
        }
        Carousel.prototype.ngDoCheck = function () {
            var changes = this.differ.diff(this.value);
            if (changes) {
                if (this.value && this.value.length) {
                    if (this.value.length && this.firstVisible >= this.value.length) {
                        this.setPage(this.totalPages - 1);
                    }
                } else {
                    this.setPage(0);
                }
                this.valuesChanged = true;
                if (this.autoplayInterval) {
                    this.stopAutoplay();
                }
                this.updateMobileDropdown();
                this.updateLinks();
                this.updateDropdown();
            }
        };
        Carousel.prototype.ngAfterViewChecked = function () {
            if (this.valuesChanged) {
                this.render();
                this.valuesChanged = false;
            }
        };
        Carousel.prototype.ngOnInit = function () {
            if (window.innerWidth <= this.breakpoint) {
                this.shrinked = true;
                this.columns = 1;
            } else {
                this.shrinked = false;
                this.columns = this.numVisible;
            }
            this.page = Math.floor(this.firstVisible / this.columns);
        };
        Carousel.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.container = this.el.nativeElement.children[0];
            this.viewport = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-carousel-viewport');
            this.itemsContainer = this.domHandler.findSingle(this.el.nativeElement, 'ul.ui-carousel-items');
            if (this.responsive) {
                this.documentResponsiveListener = this.renderer.listenGlobal('window', 'resize', function (event) {
                    _this.updateState();
                });
            }
            if (this.value && this.value.length) {
                this.render();
            }
        };
        Carousel.prototype.updateLinks = function () {
            this.anchorPageLinks = [];
            for (var i = 0; i < this.totalPages; i++) {
                this.anchorPageLinks.push(i);
            }
        };
        Carousel.prototype.updateDropdown = function () {
            this.selectDropdownOptions = [];
            for (var i = 0; i < this.totalPages; i++) {
                this.selectDropdownOptions.push(i);
            }
        };
        Carousel.prototype.updateMobileDropdown = function () {
            this.mobileDropdownOptions = [];
            for (var i = 0; i < this.value.length; i++) {
                this.mobileDropdownOptions.push(i);
            }
        };
        Carousel.prototype.render = function () {
            this.items = this.domHandler.find(this.itemsContainer, 'li');
            this.calculateItemWidths();
            if (!this.responsive) {
                this.container.style.width = this.domHandler.width(this.container) + 'px';
            }
            if (this.autoplayInterval) {
                this.circular = true;
                this.startAutoplay();
            }
        };
        Carousel.prototype.calculateItemWidths = function () {
            var firstItem = this.items && this.items.length ? this.items[0] : null;
            if (firstItem) {
                for (var i = 0; i < this.items.length; i++) {
                    this.items[i].style.width = (this.domHandler.innerWidth(this.viewport) - this.domHandler.getHorizontalMargin(firstItem) * this.columns) / this.columns + 'px';
                }
            }
        };
        Carousel.prototype.onNextNav = function () {
            var lastPage = this.page === this.totalPages - 1;
            if (!lastPage) this.setPage(this.page + 1);else if (this.circular) this.setPage(0);
        };
        Carousel.prototype.onPrevNav = function () {
            if (this.page !== 0) this.setPage(this.page - 1);else if (this.circular) this.setPage(this.totalPages - 1);
        };
        Carousel.prototype.setPageWithLink = function (event, p) {
            this.setPage(p);
            event.preventDefault();
        };
        Carousel.prototype.setPage = function (p, enforce) {
            if (p !== this.page || enforce) {
                this.page = p;
                this.left = -1 * (this.domHandler.innerWidth(this.viewport) * this.page);
                this.firstVisible = this.page * this.columns;
            }
        };
        Carousel.prototype.onDropdownChange = function (val) {
            this.setPage(parseInt(val));
        };
        Object.defineProperty(Carousel.prototype, "displayPageLinks", {
            get: function () {
                return this.totalPages <= this.pageLinks && !this.shrinked;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Carousel.prototype, "displayPageDropdown", {
            get: function () {
                return this.totalPages > this.pageLinks && !this.shrinked;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Carousel.prototype, "totalPages", {
            get: function () {
                return this.value && this.value.length ? Math.ceil(this.value.length / this.columns) : 0;
            },
            enumerable: true,
            configurable: true
        });
        Carousel.prototype.routerDisplay = function () {
            var win = window;
            if (win.innerWidth <= this.breakpoint) return true;else return false;
        };
        Carousel.prototype.updateState = function () {
            var win = window;
            if (win.innerWidth <= this.breakpoint) {
                this.shrinked = true;
                this.columns = 1;
            } else if (this.shrinked) {
                this.shrinked = false;
                this.columns = this.numVisible;
                this.updateLinks();
                this.updateDropdown();
            }
            this.calculateItemWidths();
            this.setPage(Math.floor(this.firstVisible / this.columns), true);
        };
        Carousel.prototype.startAutoplay = function () {
            var _this = this;
            this.interval = setInterval(function () {
                if (_this.page === _this.totalPages - 1) _this.setPage(0);else _this.setPage(_this.page + 1);
            }, this.autoplayInterval);
        };
        Carousel.prototype.stopAutoplay = function () {
            clearInterval(this.interval);
        };
        Carousel.prototype.ngOnDestroy = function () {
            if (this.responsive) {
                this.documentResponsiveListener();
            }
            if (this.autoplayInterval) {
                this.stopAutoplay();
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], Carousel.prototype, "value", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Carousel.prototype, "numVisible", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Carousel.prototype, "firstVisible", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Carousel.prototype, "headerText", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Carousel.prototype, "circular", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Carousel.prototype, "breakpoint", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Carousel.prototype, "responsive", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Carousel.prototype, "autoplayInterval", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Carousel.prototype, "effectDuration", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Carousel.prototype, "easing", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Carousel.prototype, "pageLinks", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Carousel.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Carousel.prototype, "styleClass", void 0);
        __decorate([core_1.ContentChild(core_1.TemplateRef), __metadata('design:type', core_1.TemplateRef)], Carousel.prototype, "itemTemplate", void 0);
        Carousel = __decorate([core_1.Component({
            selector: 'p-carousel',
            template: "\n        <div [ngClass]=\"{'ui-carousel ui-widget ui-widget-content ui-corner-all':true}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-carousel-header ui-widget-header\">\n                <div class=\"ui-carousel-header-title\">{{headerText}}</div>\n                <span class=\"ui-carousel-button ui-carousel-next-button fa fa-arrow-circle-right\" (click)=\"onNextNav()\" \n                        [ngClass]=\"{'ui-state-disabled':(page === (totalPages-1)) && !circular}\"></span>\n                <span class=\"ui-carousel-button ui-carousel-prev-button fa fa-arrow-circle-left\" (click)=\"onPrevNav()\" \n                        [ngClass]=\"{'ui-state-disabled':(page === 0 && !circular)}\"></span>\n                <div *ngIf=\"displayPageLinks\" class=\"ui-carousel-page-links\">\n                    <a href=\"#\" (click)=\"setPageWithLink($event,i)\" class=\"ui-carousel-page-link fa fa-circle-o\" *ngFor=\"let links of anchorPageLinks;let i=index\" [ngClass]=\"{'fa-dot-circle-o':page===i}\"></a>\n                </div>\n                <select *ngIf=\"displayPageDropdown\" class=\"ui-carousel-dropdown ui-widget ui-state-default ui-corner-left\" [value]=\"page\" (change)=\"onDropdownChange($event.target.value)\">\n                    <option *ngFor=\"let option of selectDropdownOptions\" [value]=\"option\" [selected]=\"value == option\">{{option+1}}</option>\n                </select>\n                <select *ngIf=\"responsive\" class=\"ui-carousel-mobiledropdown ui-widget ui-state-default ui-corner-left\" [value]=\"page\" (change)=\"onDropdownChange($event.target.value)\"\n                    [style.display]=\"shrinked ? 'block' : 'none'\">\n                    <option *ngFor=\"let option of mobileDropdownOptions\" [value]=\"option\" [selected]=\"value == option\">{{option+1}}</option>\n                </select>\n            </div>\n            <div class=\"ui-carousel-viewport\">\n                <ul class=\"ui-carousel-items\" [style.left.px]=\"left\" [style.transitionProperty]=\"'left'\" \n                            [style.transitionDuration]=\"effectDuration\" [style.transitionTimingFunction]=\"easing\">\n                    <li *ngFor=\"let item of value\" class=\"ui-carousel-item ui-widget-content ui-corner-all\">\n                        <template [pTemplateWrapper]=\"itemTemplate\" [item]=\"item\"></template>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.IterableDiffers, core_1.Renderer])], Carousel);
        return Carousel;
    }();
    exports.Carousel = Carousel;
    var CarouselModule = function () {
        function CarouselModule() {}
        CarouselModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule, shared_1.SharedModule],
            exports: [Carousel, shared_1.SharedModule],
            declarations: [Carousel]
        }), __metadata('design:paramtypes', [])], CarouselModule);
        return CarouselModule;
    }();
    exports.CarouselModule = CarouselModule;
    

    return module.exports;
});
$__System.registerDynamic("2a", ["3", "9"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var CodeHighlighter = function () {
        function CodeHighlighter(el) {
            this.el = el;
        }
        CodeHighlighter.prototype.ngOnInit = function () {
            Prism.highlightElement(this.el.nativeElement);
        };
        CodeHighlighter = __decorate([core_1.Directive({
            selector: '[pCode]'
        }), __metadata('design:paramtypes', [core_1.ElementRef])], CodeHighlighter);
        return CodeHighlighter;
    }();
    exports.CodeHighlighter = CodeHighlighter;
    var CodeHighlighterModule = function () {
        function CodeHighlighterModule() {}
        CodeHighlighterModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [CodeHighlighter],
            declarations: [CodeHighlighter]
        }), __metadata('design:paramtypes', [])], CodeHighlighterModule);
        return CodeHighlighterModule;
    }();
    exports.CodeHighlighterModule = CodeHighlighterModule;
    

    return module.exports;
});
$__System.registerDynamic("2b", ["3", "9", "26", "d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var router_1 = $__require("d");
    var ContextMenuSub = function () {
        function ContextMenuSub(domHandler, router) {
            this.domHandler = domHandler;
            this.router = router;
        }
        ContextMenuSub.prototype.onItemMouseEnter = function (event, item, menuitem) {
            if (menuitem.disabled) {
                return;
            }
            this.activeItem = item;
            this.activeLink = item.children[0];
            var nextElement = item.children[0].nextElementSibling;
            if (nextElement) {
                var sublist = nextElement.children[0];
                sublist.style.zIndex = ++domhandler_1.DomHandler.zindex;
                sublist.style.top = '0px';
                sublist.style.left = this.domHandler.getOuterWidth(item.children[0]) + 'px';
            }
        };
        ContextMenuSub.prototype.onItemMouseLeave = function (event, link) {
            this.activeItem = null;
            this.activeLink = null;
        };
        ContextMenuSub.prototype.itemClick = function (event, item) {
            if (item.disabled) {
                event.preventDefault();
                return;
            }
            if (!item.url || item.routerLink) {
                event.preventDefault();
            }
            if (item.command) {
                if (!item.eventEmitter) {
                    item.eventEmitter = new core_1.EventEmitter();
                    item.eventEmitter.subscribe(item.command);
                }
                item.eventEmitter.emit({
                    originalEvent: event,
                    item: item
                });
            }
            if (item.routerLink) {
                this.router.navigate(item.routerLink);
            }
        };
        ContextMenuSub.prototype.listClick = function (event) {
            this.activeItem = null;
            this.activeLink = null;
        };
        __decorate([core_1.Input(), __metadata('design:type', Object)], ContextMenuSub.prototype, "item", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], ContextMenuSub.prototype, "root", void 0);
        ContextMenuSub = __decorate([core_1.Component({
            selector: 'p-contextMenuSub',
            template: "\n        <ul [ngClass]=\"{'ui-helper-reset':root, 'ui-widget-content ui-corner-all ui-helper-clearfix ui-menu-child ui-shadow':!root}\" class=\"ui-menu-list\"\n            (click)=\"listClick($event)\">\n            <template ngFor let-child [ngForOf]=\"(root ? item : item.items)\">\n                <li #item [ngClass]=\"{'ui-menuitem ui-widget ui-corner-all':true,'ui-menu-parent':child.items,'ui-menuitem-active':item==activeItem}\"\n                    (mouseenter)=\"onItemMouseEnter($event,item,child)\" (mouseleave)=\"onItemMouseLeave($event,item)\">\n                    <a #link [href]=\"child.url||'#'\" class=\"ui-menuitem-link ui-corner-all\" \n                        [ngClass]=\"{'ui-state-hover':link==activeLink&&!child.disabled,'ui-state-disabled':child.disabled}\" (click)=\"itemClick($event, child)\">\n                        <span class=\"ui-submenu-icon fa fa-fw fa-caret-right\" *ngIf=\"child.items\"></span>\n                        <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                    </a>\n                    <p-contextMenuSub class=\"ui-submenu\" [item]=\"child\" *ngIf=\"child.items\"></p-contextMenuSub>\n                </li>\n            </template>\n        </ul>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [domhandler_1.DomHandler, router_1.Router])], ContextMenuSub);
        return ContextMenuSub;
    }();
    exports.ContextMenuSub = ContextMenuSub;
    var ContextMenu = function () {
        function ContextMenu(el, domHandler, renderer) {
            this.el = el;
            this.domHandler = domHandler;
            this.renderer = renderer;
        }
        ContextMenu.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.container = this.el.nativeElement.children[0];
            this.documentClickListener = this.renderer.listenGlobal('body', 'click', function () {
                _this.hide();
            });
            if (this.global) {
                this.documentRightClickListener = this.renderer.listenGlobal('body', 'contextmenu', function (event) {
                    _this.show(event);
                    event.preventDefault();
                });
            }
        };
        ContextMenu.prototype.toggle = function (event) {
            if (this.container.offsetParent) this.hide();else this.show(event);
        };
        ContextMenu.prototype.show = function (event) {
            this.left = event.pageX;
            this.top = event.pageY;
            this.visible = true;
            this.domHandler.fadeIn(this.container, 250);
            event.preventDefault();
        };
        ContextMenu.prototype.hide = function () {
            this.visible = false;
        };
        ContextMenu.prototype.unsubscribe = function (item) {
            if (item.eventEmitter) {
                item.eventEmitter.unsubscribe();
            }
            if (item.items) {
                for (var _i = 0, _a = item.items; _i < _a.length; _i++) {
                    var childItem = _a[_i];
                    this.unsubscribe(childItem);
                }
            }
        };
        ContextMenu.prototype.ngOnDestroy = function () {
            this.documentClickListener();
            if (this.global) {
                this.documentRightClickListener();
            }
            if (this.model) {
                for (var _i = 0, _a = this.model; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.unsubscribe(item);
                }
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], ContextMenu.prototype, "model", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], ContextMenu.prototype, "global", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], ContextMenu.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], ContextMenu.prototype, "styleClass", void 0);
        ContextMenu = __decorate([core_1.Component({
            selector: 'p-contextMenu',
            template: "\n        <div [ngClass]=\"'ui-contextmenu ui-menu ui-widget ui-widget-content ui-corner-all ui-helper-clearfix ui-menu-dynamic ui-shadow'\" \n            [class]=\"styleClass\" [ngStyle]=\"style\" [style.display]=\"visible ? 'block' : 'none'\" [style.left.px]=\"left\" [style.top.px]=\"top\">\n            <p-contextMenuSub [item]=\"model\" root=\"root\"></p-contextMenuSub>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer])], ContextMenu);
        return ContextMenu;
    }();
    exports.ContextMenu = ContextMenu;
    var ContextMenuModule = function () {
        function ContextMenuModule() {}
        ContextMenuModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [ContextMenu],
            declarations: [ContextMenu, ContextMenuSub]
        }), __metadata('design:paramtypes', [])], ContextMenuModule);
        return ContextMenuModule;
    }();
    exports.ContextMenuModule = ContextMenuModule;
    

    return module.exports;
});
$__System.registerDynamic("2c", ["3", "9"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var UIChart = function () {
        function UIChart(el, differs) {
            this.el = el;
            this.onDataSelect = new core_1.EventEmitter();
            this.differ = differs.find([]).create(null);
        }
        UIChart.prototype.ngAfterViewInit = function () {
            this.initChart();
            this.initialized = true;
        };
        UIChart.prototype.ngDoCheck = function () {
            var changes = this.differ.diff(this.data.datasets);
            if (changes && this.initialized) {
                if (this.chart) {
                    this.chart.destroy();
                }
                this.initChart();
            }
        };
        UIChart.prototype.onCanvasClick = function (event) {
            if (this.chart) {
                var element = this.chart.getElementAtEvent(event);
                var dataset = this.chart.getDatasetAtEvent(event);
                if (element && element[0] && dataset) {
                    this.onDataSelect.emit({ originalEvent: event, element: element[0], dataset: dataset });
                }
            }
        };
        UIChart.prototype.initChart = function () {
            this.chart = new Chart(this.el.nativeElement.children[0].children[0], {
                type: this.type,
                data: this.data,
                options: this.options
            });
        };
        UIChart.prototype.getCanvas = function () {
            return this.el.nativeElement.children[0].children[0];
        };
        UIChart.prototype.getBase64Image = function () {
            return this.chart.toBase64Image();
        };
        UIChart.prototype.ngOnDestroy = function () {
            if (this.chart) {
                this.chart.destroy();
                this.initialized = false;
                this.chart = null;
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], UIChart.prototype, "type", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], UIChart.prototype, "data", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], UIChart.prototype, "options", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], UIChart.prototype, "width", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], UIChart.prototype, "height", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], UIChart.prototype, "onDataSelect", void 0);
        UIChart = __decorate([core_1.Component({
            selector: 'p-chart',
            template: "\n        <div>\n            <canvas [attr.width]=\"width\" [attr.height]=\"height\" (click)=\"onCanvasClick($event)\"></canvas>\n        </div>\n    "
        }), __metadata('design:paramtypes', [core_1.ElementRef, core_1.IterableDiffers])], UIChart);
        return UIChart;
    }();
    exports.UIChart = UIChart;
    var ChartModule = function () {
        function ChartModule() {}
        ChartModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [UIChart],
            declarations: [UIChart]
        }), __metadata('design:paramtypes', [])], ChartModule);
        return ChartModule;
    }();
    exports.ChartModule = ChartModule;
    

    return module.exports;
});
$__System.registerDynamic("2d", ["3", "9", "23"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var forms_1 = $__require("23");
    exports.CHECKBOX_VALUE_ACCESSOR = {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return Checkbox;
        }),
        multi: true
    };
    var Checkbox = function () {
        function Checkbox() {
            this.onChange = new core_1.EventEmitter();
            this.onModelChange = function () {};
            this.onModelTouched = function () {};
            this.focused = false;
            this.checked = false;
        }
        Checkbox.prototype.onClick = function (event, checkbox, focus) {
            event.preventDefault();
            if (this.disabled) {
                return;
            }
            this.checked = !this.checked;
            this.updateModel();
            if (focus) {
                checkbox.focus();
            }
        };
        Checkbox.prototype.updateModel = function () {
            if (!this.binary) {
                if (this.checked) this.addValue(this.value);else this.removeValue(this.value);
                this.onModelChange(this.model);
            } else {
                this.onModelChange(this.checked);
            }
            this.onChange.emit(this.checked);
        };
        Checkbox.prototype.handleChange = function (event) {
            this.checked = event.target.checked;
            this.updateModel();
        };
        Checkbox.prototype.isChecked = function () {
            if (!this.binary) return this.findValueIndex(this.value) !== -1;else return this.model;
        };
        Checkbox.prototype.removeValue = function (value) {
            var index = this.findValueIndex(value);
            if (index >= 0) {
                this.model.splice(index, 1);
            }
        };
        Checkbox.prototype.addValue = function (value) {
            this.model.push(value);
        };
        Checkbox.prototype.onFocus = function (event) {
            this.focused = true;
        };
        Checkbox.prototype.onBlur = function (event) {
            this.focused = false;
            this.onModelTouched();
        };
        Checkbox.prototype.findValueIndex = function (value) {
            var index = -1;
            if (this.model) {
                for (var i = 0; i < this.model.length; i++) {
                    if (this.model[i] == value) {
                        index = i;
                        break;
                    }
                }
            }
            return index;
        };
        Checkbox.prototype.writeValue = function (model) {
            this.model = model;
            this.checked = this.isChecked();
        };
        Checkbox.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        Checkbox.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        Checkbox.prototype.setDisabledState = function (val) {
            this.disabled = val;
        };
        __decorate([core_1.Input(), __metadata('design:type', Object)], Checkbox.prototype, "value", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Checkbox.prototype, "name", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Checkbox.prototype, "disabled", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Checkbox.prototype, "binary", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Checkbox.prototype, "label", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Checkbox.prototype, "onChange", void 0);
        Checkbox = __decorate([core_1.Component({
            selector: 'p-checkbox',
            template: "\n        <div class=\"ui-chkbox ui-widget\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #cb type=\"checkbox\" [name]=\"name\" [value]=\"value\" [checked]=\"checked\" (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\"\n                [ngClass]=\"{'ui-state-focus':focused}\" (change)=\"handleChange($event)\">\n            </div>\n            <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" (click)=\"onClick($event,cb,true)\"\n                        (mouseover)=\"hover=true\" (mouseout)=\"hover=false\" \n                        [ngClass]=\"{'ui-state-hover':hover&&!disabled,'ui-state-active':checked,'ui-state-disabled':disabled,'ui-state-focus':focused}\">\n                <span class=\"ui-chkbox-icon ui-c\" [ngClass]=\"{'fa fa-fw fa-check':checked}\"></span>\n            </div>\n        </div>\n        <label class=\"ui-chkbox-label\" (click)=\"onClick($event,cb,true)\" *ngIf=\"label\">{{label}}</label>\n    ",
            providers: [exports.CHECKBOX_VALUE_ACCESSOR]
        }), __metadata('design:paramtypes', [])], Checkbox);
        return Checkbox;
    }();
    exports.Checkbox = Checkbox;
    var CheckboxModule = function () {
        function CheckboxModule() {}
        CheckboxModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Checkbox],
            declarations: [Checkbox]
        }), __metadata('design:paramtypes', [])], CheckboxModule);
        return CheckboxModule;
    }();
    exports.CheckboxModule = CheckboxModule;
    

    return module.exports;
});
$__System.registerDynamic("2e", ["3", "9", "21", "2f"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var shared_1 = $__require("21");
    var shared_2 = $__require("21");
    var paginator_1 = $__require("2f");
    var DataGrid = function () {
        function DataGrid(el, differs) {
            this.el = el;
            this.pageLinks = 5;
            this.onLazyLoad = new core_1.EventEmitter();
            this.paginatorPosition = 'bottom';
            this.first = 0;
            this.page = 0;
            this.differ = differs.find([]).create(null);
        }
        DataGrid.prototype.ngAfterViewInit = function () {
            if (this.lazy) {
                this.onLazyLoad.emit({
                    first: this.first,
                    rows: this.rows
                });
            }
        };
        DataGrid.prototype.ngDoCheck = function () {
            var changes = this.differ.diff(this.value);
            if (changes) {
                if (this.paginator) {
                    this.updatePaginator();
                }
                this.updateDataToRender(this.value);
            }
        };
        DataGrid.prototype.updatePaginator = function () {
            //total records
            this.totalRecords = this.lazy ? this.totalRecords : this.value ? this.value.length : 0;
            //first
            if (this.totalRecords && this.first >= this.totalRecords) {
                var numberOfPages = Math.ceil(this.totalRecords / this.rows);
                this.first = Math.max((numberOfPages - 1) * this.rows, 0);
            }
        };
        DataGrid.prototype.paginate = function (event) {
            this.first = event.first;
            this.rows = event.rows;
            if (this.lazy) {
                this.onLazyLoad.emit(this.createLazyLoadMetadata());
            } else {
                this.updateDataToRender(this.value);
            }
        };
        DataGrid.prototype.updateDataToRender = function (datasource) {
            if (this.paginator && datasource) {
                this.dataToRender = [];
                var startIndex = this.lazy ? 0 : this.first;
                for (var i = startIndex; i < startIndex + this.rows; i++) {
                    if (i >= datasource.length) {
                        break;
                    }
                    this.dataToRender.push(datasource[i]);
                }
            } else {
                this.dataToRender = datasource;
            }
        };
        DataGrid.prototype.isEmpty = function () {
            return !this.dataToRender || this.dataToRender.length == 0;
        };
        DataGrid.prototype.createLazyLoadMetadata = function () {
            return {
                first: this.first,
                rows: this.rows
            };
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], DataGrid.prototype, "value", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], DataGrid.prototype, "paginator", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], DataGrid.prototype, "rows", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], DataGrid.prototype, "totalRecords", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], DataGrid.prototype, "pageLinks", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Array)], DataGrid.prototype, "rowsPerPageOptions", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], DataGrid.prototype, "lazy", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataGrid.prototype, "onLazyLoad", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], DataGrid.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], DataGrid.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], DataGrid.prototype, "paginatorPosition", void 0);
        __decorate([core_1.ContentChild(shared_1.Header), __metadata('design:type', Object)], DataGrid.prototype, "header", void 0);
        __decorate([core_1.ContentChild(shared_2.Footer), __metadata('design:type', Object)], DataGrid.prototype, "footer", void 0);
        __decorate([core_1.ContentChild(core_1.TemplateRef), __metadata('design:type', core_1.TemplateRef)], DataGrid.prototype, "itemTemplate", void 0);
        DataGrid = __decorate([core_1.Component({
            selector: 'p-dataGrid',
            template: "\n        <div [ngClass]=\"'ui-datagrid ui-widget'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-datagrid-header ui-widget-header ui-corner-top\" *ngIf=\"header\">\n                <ng-content select=\"header\"></ng-content>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" \n                (onPageChange)=\"paginate($event)\" styleClass=\"ui-paginator-bottom\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && paginatorPosition!='bottom' || paginatorPosition =='both'\"></p-paginator>\n            <div class=\"ui-datagrid-content ui-widget-content\">\n                <div class=\"ui-g\">\n                    <template ngFor [ngForOf]=\"dataToRender\" [ngForTemplate]=\"itemTemplate\"></template>\n                </div>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" \n                (onPageChange)=\"paginate($event)\" styleClass=\"ui-paginator-bottom\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && paginatorPosition!='top' || paginatorPosition =='both'\"></p-paginator>\n            <div class=\"ui-datagrid-footer ui-widget-header ui-corner-top\" *ngIf=\"footer\">\n                <ng-content select=\"footer\"></ng-content>\n            </div>\n        </div>\n    "
        }), __metadata('design:paramtypes', [core_1.ElementRef, core_1.IterableDiffers])], DataGrid);
        return DataGrid;
    }();
    exports.DataGrid = DataGrid;
    var DataGridModule = function () {
        function DataGridModule() {}
        DataGridModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule, paginator_1.PaginatorModule],
            exports: [DataGrid],
            declarations: [DataGrid]
        }), __metadata('design:paramtypes', [])], DataGridModule);
        return DataGridModule;
    }();
    exports.DataGridModule = DataGridModule;
    

    return module.exports;
});
$__System.registerDynamic("30", ["3", "9", "21", "2f"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var shared_1 = $__require("21");
    var shared_2 = $__require("21");
    var shared_3 = $__require("21");
    var paginator_1 = $__require("2f");
    var DataList = function () {
        function DataList(el, differs) {
            this.el = el;
            this.pageLinks = 5;
            this.onLazyLoad = new core_1.EventEmitter();
            this.paginatorPosition = 'bottom';
            this.first = 0;
            this.page = 0;
            this.differ = differs.find([]).create(null);
        }
        DataList.prototype.ngAfterViewInit = function () {
            if (this.lazy) {
                this.onLazyLoad.emit({
                    first: this.first,
                    rows: this.rows
                });
            }
        };
        DataList.prototype.ngDoCheck = function () {
            var changes = this.differ.diff(this.value);
            if (changes) {
                if (this.paginator) {
                    this.updatePaginator();
                }
                this.updateDataToRender(this.value);
            }
        };
        DataList.prototype.updatePaginator = function () {
            //total records
            this.totalRecords = this.lazy ? this.totalRecords : this.value ? this.value.length : 0;
            //first
            if (this.totalRecords && this.first >= this.totalRecords) {
                var numberOfPages = Math.ceil(this.totalRecords / this.rows);
                this.first = Math.max((numberOfPages - 1) * this.rows, 0);
            }
        };
        DataList.prototype.paginate = function (event) {
            this.first = event.first;
            this.rows = event.rows;
            if (this.lazy) {
                this.onLazyLoad.emit(this.createLazyLoadMetadata());
            } else {
                this.updateDataToRender(this.value);
            }
        };
        DataList.prototype.updateDataToRender = function (datasource) {
            if (this.paginator && datasource) {
                this.dataToRender = [];
                var startIndex = this.lazy ? 0 : this.first;
                for (var i = startIndex; i < startIndex + this.rows; i++) {
                    if (i >= datasource.length) {
                        break;
                    }
                    this.dataToRender.push(datasource[i]);
                }
            } else {
                this.dataToRender = datasource;
            }
        };
        DataList.prototype.isEmpty = function () {
            return !this.dataToRender || this.dataToRender.length == 0;
        };
        DataList.prototype.createLazyLoadMetadata = function () {
            return {
                first: this.first,
                rows: this.rows
            };
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], DataList.prototype, "value", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], DataList.prototype, "paginator", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], DataList.prototype, "rows", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], DataList.prototype, "totalRecords", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], DataList.prototype, "pageLinks", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Array)], DataList.prototype, "rowsPerPageOptions", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], DataList.prototype, "lazy", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataList.prototype, "onLazyLoad", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], DataList.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], DataList.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], DataList.prototype, "paginatorPosition", void 0);
        __decorate([core_1.ContentChild(shared_1.Header), __metadata('design:type', Object)], DataList.prototype, "header", void 0);
        __decorate([core_1.ContentChild(shared_2.Footer), __metadata('design:type', Object)], DataList.prototype, "footer", void 0);
        __decorate([core_1.ContentChild(core_1.TemplateRef), __metadata('design:type', core_1.TemplateRef)], DataList.prototype, "itemTemplate", void 0);
        DataList = __decorate([core_1.Component({
            selector: 'p-dataList',
            template: "\n        <div [ngClass]=\"'ui-datalist ui-widget'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-datalist-header ui-widget-header ui-corner-top\" *ngIf=\"header\">\n                <ng-content select=\"header\"></ng-content>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" \n            (onPageChange)=\"paginate($event)\" styleClass=\"ui-paginator-bottom\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator  && paginatorPosition!='bottom' || paginatorPosition =='both'\"></p-paginator>\n            <div class=\"ui-datalist-content ui-widget-content\">\n                <ul class=\"ui-datalist-data\">\n                    <li *ngFor=\"let item of dataToRender\">\n                        <template [pTemplateWrapper]=\"itemTemplate\" [item]=\"item\"></template>\n                    </li>\n                </ul>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" \n            (onPageChange)=\"paginate($event)\" styleClass=\"ui-paginator-bottom\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator  && paginatorPosition!='top' || paginatorPosition =='both'\"></p-paginator>\n            <div class=\"ui-datalist-footer ui-widget-header ui-corner-bottom\" *ngIf=\"footer\">\n                <ng-content select=\"footer\"></ng-content>\n            </div>\n        </div>\n    "
        }), __metadata('design:paramtypes', [core_1.ElementRef, core_1.IterableDiffers])], DataList);
        return DataList;
    }();
    exports.DataList = DataList;
    var DataListModule = function () {
        function DataListModule() {}
        DataListModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule, shared_3.SharedModule, paginator_1.PaginatorModule],
            exports: [DataList, shared_3.SharedModule],
            declarations: [DataList]
        }), __metadata('design:paramtypes', [])], DataListModule);
        return DataListModule;
    }();
    exports.DataListModule = DataListModule;
    

    return module.exports;
});
$__System.registerDynamic("31", ["3", "9", "21", "26"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var shared_1 = $__require("21");
    var shared_2 = $__require("21");
    var shared_3 = $__require("21");
    var domhandler_1 = $__require("26");
    var DataScroller = function () {
        function DataScroller(el, differs, renderer, domHandler) {
            this.el = el;
            this.renderer = renderer;
            this.domHandler = domHandler;
            this.onLazyLoad = new core_1.EventEmitter();
            this.buffer = 0.9;
            this.dataToRender = [];
            this.first = 0;
            this.differ = differs.find([]).create(null);
        }
        DataScroller.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this.lazy) {
                this.load();
            }
            if (this.loader) {
                this.scrollFunction = this.renderer.listen(this.loader, 'click', function () {
                    _this.load();
                });
            } else {
                this.bindScrollListener();
            }
        };
        DataScroller.prototype.ngDoCheck = function () {
            var changes = this.differ.diff(this.value);
            if (changes) {
                if (this.lazy) this.dataToRender = this.value;else this.load();
            }
        };
        DataScroller.prototype.load = function () {
            if (this.lazy) {
                this.onLazyLoad.emit({
                    first: this.first,
                    rows: this.rows
                });
            } else {
                for (var i = this.first; i < this.first + this.rows; i++) {
                    if (i >= this.value.length) {
                        break;
                    }
                    this.dataToRender.push(this.value[i]);
                }
            }
            this.first = this.first + this.rows;
        };
        DataScroller.prototype.isEmpty = function () {
            return !this.dataToRender || this.dataToRender.length == 0;
        };
        DataScroller.prototype.createLazyLoadMetadata = function () {
            return {
                first: this.first,
                rows: this.rows
            };
        };
        DataScroller.prototype.bindScrollListener = function () {
            var _this = this;
            if (this.inline) {
                this.contentElement = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-datascroller-content');
                this.scrollFunction = this.renderer.listen(this.contentElement, 'scroll', function () {
                    var scrollTop = _this.contentElement.scrollTop;
                    var scrollHeight = _this.contentElement.scrollHeight;
                    var viewportHeight = _this.contentElement.clientHeight;
                    if (scrollTop >= scrollHeight * _this.buffer - viewportHeight) {
                        _this.load();
                    }
                });
            } else {
                this.scrollFunction = this.renderer.listenGlobal('window', 'scroll', function () {
                    var docBody = document.body;
                    var docElement = document.documentElement;
                    var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                    var winHeight = docElement.clientHeight;
                    var docHeight = Math.max(docBody.scrollHeight, docBody.offsetHeight, winHeight, docElement.scrollHeight, docElement.offsetHeight);
                    if (scrollTop >= docHeight * _this.buffer - winHeight) {
                        _this.load();
                    }
                });
            }
        };
        DataScroller.prototype.ngOnDestroy = function () {
            //unbind
            if (this.scrollFunction) {
                this.scrollFunction();
                this.contentElement = null;
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], DataScroller.prototype, "value", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], DataScroller.prototype, "rows", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], DataScroller.prototype, "lazy", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataScroller.prototype, "onLazyLoad", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], DataScroller.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], DataScroller.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], DataScroller.prototype, "buffer", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], DataScroller.prototype, "inline", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], DataScroller.prototype, "scrollHeight", void 0);
        __decorate([core_1.ContentChild(shared_1.Header), __metadata('design:type', Object)], DataScroller.prototype, "header", void 0);
        __decorate([core_1.ContentChild(shared_2.Footer), __metadata('design:type', Object)], DataScroller.prototype, "footer", void 0);
        __decorate([core_1.ContentChild(core_1.TemplateRef), __metadata('design:type', core_1.TemplateRef)], DataScroller.prototype, "itemTemplate", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], DataScroller.prototype, "loader", void 0);
        DataScroller = __decorate([core_1.Component({
            selector: 'p-dataScroller',
            template: "\n    <div [ngClass]=\"{'ui-datascroller ui-widget': true, 'ui-datascroller-inline': inline}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n        <div class=\"ui-datascroller-header ui-widget-header ui-corner-top\" *ngIf=\"header\">\n            <ng-content select=\"header\"></ng-content>\n        </div>\n        <div class=\"ui-datascroller-content ui-widget-content\" [ngStyle]=\"{'max-height': scrollHeight}\">\n            <ul class=\"ui-datascroller-list\">\n                <li *ngFor=\"let item of dataToRender\">\n                    <template [pTemplateWrapper]=\"itemTemplate\" [item]=\"item\"></template>\n                </li>\n            </ul>\n        </div>\n        <div class=\"ui-datascroller-footer ui-widget-header ui-corner-bottom\" *ngIf=\"footer\">\n            <ng-content select=\"footer\"></ng-content>\n        </div>\n    </div>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, core_1.IterableDiffers, core_1.Renderer, domhandler_1.DomHandler])], DataScroller);
        return DataScroller;
    }();
    exports.DataScroller = DataScroller;
    var DataScrollerModule = function () {
        function DataScrollerModule() {}
        DataScrollerModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule, shared_3.SharedModule],
            exports: [DataScroller, shared_3.SharedModule],
            declarations: [DataScroller]
        }), __metadata('design:paramtypes', [])], DataScrollerModule);
        return DataScrollerModule;
    }();
    exports.DataScrollerModule = DataScrollerModule;
    

    return module.exports;
});
$__System.registerDynamic("32", ["3", "9", "23", "21", "2f", "24", "26"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var forms_1 = $__require("23");
    var shared_1 = $__require("21");
    var paginator_1 = $__require("2f");
    var inputtext_1 = $__require("24");
    var shared_2 = $__require("21");
    var domhandler_1 = $__require("26");
    var DTRadioButton = function () {
        function DTRadioButton() {
            this.onClick = new core_1.EventEmitter();
        }
        DTRadioButton.prototype.handleClick = function (event) {
            this.onClick.emit(event);
        };
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], DTRadioButton.prototype, "checked", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DTRadioButton.prototype, "onClick", void 0);
        DTRadioButton = __decorate([core_1.Component({
            selector: 'p-dtRadioButton',
            template: "\n        <div class=\"ui-radiobutton ui-widget\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input type=\"radio\" [checked]=\"checked\">\n            </div>\n            <div class=\"ui-radiobutton-box ui-widget ui-radiobutton-relative ui-state-default\" (click)=\"handleClick($event)\"\n                        (mouseenter)=\"hover=true\" (mouseleave)=\"hover=false\"\n                        [ngClass]=\"{'ui-state-hover':hover,'ui-state-active':checked}\">\n                <span class=\"ui-radiobutton-icon\" [ngClass]=\"{'fa fa-fw fa-circle':checked}\"></span>\n            </div>\n        </div>\n    "
        }), __metadata('design:paramtypes', [])], DTRadioButton);
        return DTRadioButton;
    }();
    exports.DTRadioButton = DTRadioButton;
    var DTCheckbox = function () {
        function DTCheckbox() {
            this.onChange = new core_1.EventEmitter();
        }
        DTCheckbox.prototype.handleClick = function (event) {
            if (!this.disabled) {
                this.onChange.emit({ originalEvent: event, checked: !this.checked });
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], DTCheckbox.prototype, "checked", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], DTCheckbox.prototype, "disabled", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DTCheckbox.prototype, "onChange", void 0);
        DTCheckbox = __decorate([core_1.Component({
            selector: 'p-dtCheckbox',
            template: "\n        <div class=\"ui-chkbox ui-widget\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\">\n            </div>\n            <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" (click)=\"handleClick($event)\"\n                        (mouseover)=\"hover=true\" (mouseout)=\"hover=false\" \n                        [ngClass]=\"{'ui-state-hover':hover&&!disabled,'ui-state-active':checked&&!disabled,'ui-state-disabled':disabled}\">\n                <span class=\"ui-chkbox-icon ui-c\" [ngClass]=\"{'fa fa-fw fa-check':checked}\"></span>\n            </div>\n        </div>\n    "
        }), __metadata('design:paramtypes', [])], DTCheckbox);
        return DTCheckbox;
    }();
    exports.DTCheckbox = DTCheckbox;
    var RowExpansionLoader = function () {
        function RowExpansionLoader(viewContainer) {
            this.viewContainer = viewContainer;
        }
        RowExpansionLoader.prototype.ngOnInit = function () {
            var view = this.viewContainer.createEmbeddedView(this.template, {
                '\$implicit': this.rowData
            });
        };
        __decorate([core_1.Input(), __metadata('design:type', core_1.TemplateRef)], RowExpansionLoader.prototype, "template", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], RowExpansionLoader.prototype, "rowData", void 0);
        RowExpansionLoader = __decorate([core_1.Component({
            selector: 'p-rowExpansionLoader',
            template: ""
        }), __metadata('design:paramtypes', [core_1.ViewContainerRef])], RowExpansionLoader);
        return RowExpansionLoader;
    }();
    exports.RowExpansionLoader = RowExpansionLoader;
    var DataTable = function () {
        function DataTable(el, domHandler, differs, renderer, changeDetector) {
            this.el = el;
            this.domHandler = domHandler;
            this.renderer = renderer;
            this.changeDetector = changeDetector;
            this.pageLinks = 5;
            this.selectionChange = new core_1.EventEmitter();
            this.onRowClick = new core_1.EventEmitter();
            this.onRowSelect = new core_1.EventEmitter();
            this.onRowUnselect = new core_1.EventEmitter();
            this.onRowDblclick = new core_1.EventEmitter();
            this.onHeaderCheckboxToggle = new core_1.EventEmitter();
            this.onContextMenuSelect = new core_1.EventEmitter();
            this.filterDelay = 300;
            this.onLazyLoad = new core_1.EventEmitter();
            this.columnResizeMode = 'fit';
            this.onColResize = new core_1.EventEmitter();
            this.onColReorder = new core_1.EventEmitter();
            this.sortMode = 'single';
            this.sortOrder = 1;
            this.csvSeparator = ',';
            this.emptyMessage = 'No records found';
            this.paginatorPosition = 'bottom';
            this.onEditInit = new core_1.EventEmitter();
            this.onEditComplete = new core_1.EventEmitter();
            this.onEdit = new core_1.EventEmitter();
            this.onEditCancel = new core_1.EventEmitter();
            this.onPage = new core_1.EventEmitter();
            this.onSort = new core_1.EventEmitter();
            this.onFilter = new core_1.EventEmitter();
            this.tabindex = 1;
            this.onRowExpand = new core_1.EventEmitter();
            this.onRowCollapse = new core_1.EventEmitter();
            this.first = 0;
            this.page = 0;
            this.filters = {};
            this.columnsUpdated = false;
            this.filterConstraints = {
                startsWith: function (value, filter) {
                    if (filter === undefined || filter === null || filter.trim() === '') {
                        return true;
                    }
                    if (value === undefined || value === null) {
                        return false;
                    }
                    var filterValue = filter.toLowerCase();
                    return value.toString().toLowerCase().slice(0, filterValue.length) === filterValue;
                },
                contains: function (value, filter) {
                    if (filter === undefined || filter === null || filter.trim() === '') {
                        return true;
                    }
                    if (value === undefined || value === null) {
                        return false;
                    }
                    return value.toString().toLowerCase().indexOf(filter.toLowerCase()) !== -1;
                },
                endsWith: function (value, filter) {
                    if (filter === undefined || filter === null || filter.trim() === '') {
                        return true;
                    }
                    if (value === undefined || value === null) {
                        return false;
                    }
                    var filterValue = filter.toLowerCase();
                    return value.indexOf(filterValue, value.length - filterValue.length) !== -1;
                }
            };
            this.differ = differs.find([]).create(null);
        }
        DataTable.prototype.ngOnInit = function () {
            if (this.lazy) {
                this.onLazyLoad.emit({
                    first: this.first,
                    rows: this.rows,
                    sortField: this.sortField,
                    sortOrder: this.sortOrder,
                    filters: null,
                    multiSortMeta: this.multiSortMeta
                });
            }
        };
        DataTable.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.initColumns();
            this.columnsSubscription = this.cols.changes.subscribe(function (_) {
                _this.initColumns();
                _this.changeDetector.markForCheck();
            });
        };
        DataTable.prototype.ngAfterViewChecked = function () {
            if (this.columnsUpdated) {
                if (this.resizableColumns) {
                    this.initResizableColumns();
                }
                if (this.reorderableColumns) {
                    this.initColumnReordering();
                }
                if (this.scrollable) {
                    this.initScrolling();
                }
                this.columnsUpdated = false;
            }
        };
        DataTable.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this.globalFilter) {
                this.globalFilterFunction = this.renderer.listen(this.globalFilter, 'keyup', function () {
                    _this.filterTimeout = setTimeout(function () {
                        _this.filter();
                        _this.filterTimeout = null;
                    }, _this.filterDelay);
                });
            }
        };
        DataTable.prototype.ngDoCheck = function () {
            var changes = this.differ.diff(this.value);
            if (changes) {
                if (this.paginator) {
                    this.updatePaginator();
                }
                if (this.stopSortPropagation) {
                    this.stopSortPropagation = false;
                } else if (!this.lazy && (this.sortField || this.multiSortMeta)) {
                    if (this.sortMode == 'single') this.sortSingle();else if (this.sortMode == 'multiple') this.sortMultiple();
                }
                this.updateDataToRender(this.filteredValue || this.value);
            }
        };
        DataTable.prototype.initColumns = function () {
            this.columns = this.cols.toArray();
            this.columnsUpdated = true;
        };
        DataTable.prototype.resolveFieldData = function (data, field) {
            if (data && field) {
                if (field.indexOf('.') == -1) {
                    return data[field];
                } else {
                    var fields = field.split('.');
                    var value = data;
                    for (var i = 0, len = fields.length; i < len; ++i) {
                        value = value[fields[i]];
                    }
                    return value;
                }
            } else {
                return null;
            }
        };
        DataTable.prototype.updatePaginator = function () {
            //total records
            this.totalRecords = this.lazy ? this.totalRecords : this.value ? this.value.length : 0;
            //first
            if (this.totalRecords && this.first >= this.totalRecords) {
                var numberOfPages = Math.ceil(this.totalRecords / this.rows);
                this.first = Math.max((numberOfPages - 1) * this.rows, 0);
            }
        };
        DataTable.prototype.paginate = function (event) {
            this.first = event.first;
            this.rows = event.rows;
            if (this.lazy) this.onLazyLoad.emit(this.createLazyLoadMetadata());else this.updateDataToRender(this.filteredValue || this.value);
            this.onPage.emit({
                first: this.first,
                rows: this.rows
            });
        };
        DataTable.prototype.updateDataToRender = function (datasource) {
            if (this.paginator && datasource) {
                this.dataToRender = [];
                var startIndex = this.lazy ? 0 : this.first;
                for (var i = startIndex; i < startIndex + this.rows; i++) {
                    if (i >= datasource.length) {
                        break;
                    }
                    this.dataToRender.push(datasource[i]);
                }
            } else {
                this.dataToRender = datasource;
            }
        };
        DataTable.prototype.onHeaderKeydown = function (event, column) {
            if (event.keyCode == 13) {
                this.sort(event, column);
                event.preventDefault();
            }
        };
        DataTable.prototype.sort = function (event, column) {
            if (!column.sortable) {
                return;
            }
            var targetNode = event.target.nodeName;
            if (targetNode == 'TH' || targetNode == 'SPAN' && !this.domHandler.hasClass(event.target, 'ui-c')) {
                this.sortOrder = this.sortField === column.field ? this.sortOrder * -1 : 1;
                this.sortField = column.field;
                this.sortColumn = column;
                var metaKey = event.metaKey || event.ctrlKey;
                if (this.lazy) {
                    this.onLazyLoad.emit(this.createLazyLoadMetadata());
                } else {
                    if (this.sortMode == 'multiple') {
                        if (!this.multiSortMeta || !metaKey) {
                            this.multiSortMeta = [];
                        }
                        this.addSortMeta({ field: this.sortField, order: this.sortOrder });
                        this.sortMultiple();
                    } else {
                        this.sortSingle();
                    }
                }
                this.onSort.emit({
                    field: this.sortField,
                    order: this.sortOrder,
                    multisortmeta: this.multiSortMeta
                });
            }
        };
        DataTable.prototype.sortSingle = function () {
            var _this = this;
            if (this.value) {
                if (this.sortColumn && this.sortColumn.sortable === 'custom') {
                    this.sortColumn.sortFunction.emit({
                        field: this.sortField,
                        order: this.sortOrder
                    });
                } else {
                    this.value.sort(function (data1, data2) {
                        var value1 = _this.resolveFieldData(data1, _this.sortField);
                        var value2 = _this.resolveFieldData(data2, _this.sortField);
                        var result = null;
                        if (value1 instanceof String && value2 instanceof String) result = value1.localeCompare(value2);else result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;
                        return _this.sortOrder * result;
                    });
                }
                this.first = 0;
                if (this.hasFilter()) {
                    this.filter();
                }
            }
            //prevent resort at ngDoCheck
            this.stopSortPropagation = true;
        };
        DataTable.prototype.sortMultiple = function () {
            var _this = this;
            if (this.value) {
                this.value.sort(function (data1, data2) {
                    return _this.multisortField(data1, data2, _this.multiSortMeta, 0);
                });
                if (this.hasFilter()) {
                    this.filter();
                }
            }
            //prevent resort at ngDoCheck
            this.stopSortPropagation = true;
        };
        DataTable.prototype.multisortField = function (data1, data2, multiSortMeta, index) {
            var value1 = this.resolveFieldData(data1, multiSortMeta[index].field);
            var value2 = this.resolveFieldData(data2, multiSortMeta[index].field);
            var result = null;
            if (typeof value1 == 'string' || value1 instanceof String) {
                if (value1.localeCompare && value1 != value2) {
                    return multiSortMeta[index].order * value1.localeCompare(value2);
                }
            } else {
                result = value1 < value2 ? -1 : 1;
            }
            if (value1 == value2) {
                return multiSortMeta.length - 1 > index ? this.multisortField(data1, data2, multiSortMeta, index + 1) : 0;
            }
            return multiSortMeta[index].order * result;
        };
        DataTable.prototype.addSortMeta = function (meta) {
            var index = -1;
            for (var i = 0; i < this.multiSortMeta.length; i++) {
                if (this.multiSortMeta[i].field === meta.field) {
                    index = i;
                    break;
                }
            }
            if (index >= 0) this.multiSortMeta[index] = meta;else this.multiSortMeta.push(meta);
        };
        DataTable.prototype.isSorted = function (column) {
            if (this.sortMode === 'single') {
                return this.sortField && column.field === this.sortField;
            } else if (this.sortMode === 'multiple') {
                var sorted = false;
                if (this.multiSortMeta) {
                    for (var i = 0; i < this.multiSortMeta.length; i++) {
                        if (this.multiSortMeta[i].field == column.field) {
                            sorted = true;
                            break;
                        }
                    }
                }
                return sorted;
            }
        };
        DataTable.prototype.getSortOrder = function (column) {
            var order = 0;
            if (this.sortMode === 'single') {
                if (this.sortField && column.field === this.sortField) {
                    order = this.sortOrder;
                }
            } else if (this.sortMode === 'multiple') {
                if (this.multiSortMeta) {
                    for (var i = 0; i < this.multiSortMeta.length; i++) {
                        if (this.multiSortMeta[i].field == column.field) {
                            order = this.multiSortMeta[i].order;
                            break;
                        }
                    }
                }
            }
            return order;
        };
        DataTable.prototype.handleRowClick = function (event, rowData) {
            var targetNode = event.target.nodeName;
            if (targetNode == 'TD' || targetNode == 'SPAN' && !this.domHandler.hasClass(event.target, 'ui-c')) {
                this.onRowClick.next({ originalEvent: event, data: rowData });
                if (!this.selectionMode) {
                    return;
                }
                if (this.isSelected(rowData)) {
                    if (this.isSingleSelectionMode()) {
                        this.selection = null;
                        this.selectionChange.emit(null);
                    } else {
                        this.selection.splice(this.findIndexInSelection(rowData), 1);
                        this.selectionChange.emit(this.selection);
                    }
                    this.onRowUnselect.emit({ originalEvent: event, data: rowData, type: 'row' });
                } else {
                    if (this.isSingleSelectionMode()) {
                        this.selection = rowData;
                        this.selectionChange.emit(rowData);
                    } else if (this.isMultipleSelectionMode()) {
                        this.selection = this.selection || [];
                        this.selection.push(rowData);
                        this.selectionChange.emit(this.selection);
                    }
                    this.onRowSelect.emit({ originalEvent: event, data: rowData, type: 'row' });
                }
            }
        };
        DataTable.prototype.selectRowWithRadio = function (rowData) {
            if (this.selection != rowData) {
                this.selection = rowData;
                this.selectionChange.emit(this.selection);
                this.onRowSelect.emit({ originalEvent: event, data: rowData, type: 'radiobutton' });
            }
        };
        DataTable.prototype.toggleRowWithCheckbox = function (event, rowData) {
            var selectionIndex = this.findIndexInSelection(rowData);
            this.selection = this.selection || [];
            if (selectionIndex != -1) {
                this.selection.splice(selectionIndex, 1);
                this.onRowUnselect.emit({ originalEvent: event, data: rowData, type: 'checkbox' });
            } else {
                this.selection.push(rowData);
                this.onRowSelect.emit({ originalEvent: event, data: rowData, type: 'checkbox' });
            }
            this.selectionChange.emit(this.selection);
        };
        DataTable.prototype.toggleRowsWithCheckbox = function (event) {
            if (event.checked) this.selection = this.dataToRender.slice(0);else this.selection = [];
            this.selectionChange.emit(this.selection);
            this.onHeaderCheckboxToggle.emit({ originalEvent: event, checked: event.checked });
        };
        DataTable.prototype.onRowRightClick = function (event, rowData) {
            if (this.contextMenu) {
                var selectionIndex = this.findIndexInSelection(rowData);
                var selected = selectionIndex != -1;
                if (!selected) {
                    if (this.isSingleSelectionMode()) {
                        this.selection = rowData;
                        this.selectionChange.emit(rowData);
                    } else if (this.isMultipleSelectionMode()) {
                        this.selection = [];
                        this.selection.push(rowData);
                        this.selectionChange.emit(this.selection);
                    }
                }
                this.contextMenu.show(event);
                this.onContextMenuSelect.emit({ originalEvent: event, data: rowData });
            }
        };
        DataTable.prototype.rowDblclick = function (event, rowData) {
            this.onRowDblclick.emit({ originalEvent: event, data: rowData });
        };
        DataTable.prototype.isSingleSelectionMode = function () {
            return this.selectionMode === 'single';
        };
        DataTable.prototype.isMultipleSelectionMode = function () {
            return this.selectionMode === 'multiple';
        };
        DataTable.prototype.findIndexInSelection = function (rowData) {
            var index = -1;
            if (this.selection) {
                for (var i = 0; i < this.selection.length; i++) {
                    if (this.domHandler.equals(rowData, this.selection[i])) {
                        index = i;
                        break;
                    }
                }
            }
            return index;
        };
        DataTable.prototype.isSelected = function (rowData) {
            return rowData && this.domHandler.equals(rowData, this.selection) || this.findIndexInSelection(rowData) != -1;
        };
        Object.defineProperty(DataTable.prototype, "allSelected", {
            get: function () {
                var val = true;
                if (this.dataToRender && this.selection && this.dataToRender.length == this.selection.length) {
                    for (var _i = 0, _a = this.dataToRender; _i < _a.length; _i++) {
                        var data = _a[_i];
                        if (!this.isSelected(data)) {
                            val = false;
                            break;
                        }
                    }
                } else {
                    val = false;
                }
                return val;
            },
            enumerable: true,
            configurable: true
        });
        DataTable.prototype.onFilterKeyup = function (value, field, matchMode) {
            var _this = this;
            if (this.filterTimeout) {
                clearTimeout(this.filterTimeout);
            }
            this.filterTimeout = setTimeout(function () {
                _this.filters[field] = { value: value, matchMode: matchMode };
                _this.filter();
                _this.filterTimeout = null;
            }, this.filterDelay);
        };
        DataTable.prototype.filter = function () {
            this.first = 0;
            if (this.lazy) {
                this.onLazyLoad.emit(this.createLazyLoadMetadata());
            } else {
                this.filteredValue = [];
                for (var i = 0; i < this.value.length; i++) {
                    var localMatch = true;
                    var globalMatch = false;
                    for (var j = 0; j < this.columns.length; j++) {
                        var col = this.columns[j],
                            filterMeta = this.filters[col.field];
                        //local
                        if (filterMeta) {
                            var filterValue = filterMeta.value,
                                filterField = col.field,
                                filterMatchMode = filterMeta.matchMode || 'startsWith',
                                dataFieldValue = this.resolveFieldData(this.value[i], filterField);
                            var filterConstraint = this.filterConstraints[filterMatchMode];
                            if (!filterConstraint(dataFieldValue, filterValue)) {
                                localMatch = false;
                            }
                            if (!localMatch) {
                                break;
                            }
                        }
                        //global
                        if (this.globalFilter && !globalMatch) {
                            globalMatch = this.filterConstraints['contains'](this.resolveFieldData(this.value[i], col.field), this.globalFilter.value);
                        }
                    }
                    var matches = localMatch;
                    if (this.globalFilter) {
                        matches = localMatch && globalMatch;
                    }
                    if (matches) {
                        this.filteredValue.push(this.value[i]);
                    }
                }
                if (this.filteredValue.length === this.value.length) {
                    this.filteredValue = null;
                }
                if (this.paginator) {
                    this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;
                }
                this.updateDataToRender(this.filteredValue || this.value);
            }
            this.onFilter.emit({
                filters: this.filters
            });
        };
        DataTable.prototype.hasFilter = function () {
            var empty = true;
            for (var prop in this.filters) {
                if (this.filters.hasOwnProperty(prop)) {
                    empty = false;
                    break;
                }
            }
            return !empty;
        };
        DataTable.prototype.onFilterInputClick = function (event) {
            event.stopPropagation();
        };
        DataTable.prototype.switchCellToEditMode = function (element, column, rowData) {
            if (!this.selectionMode && this.editable && column.editable) {
                this.onEditInit.emit({ column: column, data: rowData });
                var cell = this.findCell(element);
                if (!this.domHandler.hasClass(cell, 'ui-cell-editing')) {
                    this.domHandler.addClass(cell, 'ui-cell-editing');
                    this.domHandler.addClass(cell, 'ui-state-highlight');
                    var editor = cell.querySelector('.ui-cell-editor').focus();
                }
            }
        };
        DataTable.prototype.switchCellToViewMode = function (element, column, rowData, complete) {
            if (this.editable) {
                if (this.preventBlurOnEdit) {
                    this.preventBlurOnEdit = false;
                } else {
                    if (complete) this.onEditComplete.emit({ column: column, data: rowData });else this.onEditCancel.emit({ column: column, data: rowData });
                    var cell = this.findCell(element);
                    this.domHandler.removeClass(cell, 'ui-cell-editing');
                    this.domHandler.removeClass(cell, 'ui-state-highlight');
                }
            }
        };
        DataTable.prototype.onCellEditorKeydown = function (event, column, rowData) {
            if (this.editable) {
                this.onEdit.emit({ originalEvent: event, column: column, data: rowData });
                //enter
                if (event.keyCode == 13) {
                    this.switchCellToViewMode(event.target, column, rowData, true);
                    this.preventBlurOnEdit = true;
                }
                //escape
                if (event.keyCode == 27) {
                    this.switchCellToViewMode(event.target, column, rowData, false);
                    this.preventBlurOnEdit = true;
                }
            }
        };
        DataTable.prototype.findCell = function (element) {
            var cell = element;
            while (cell.tagName != 'TD') {
                cell = cell.parentElement;
            }
            return cell;
        };
        DataTable.prototype.initResizableColumns = function () {
            var _this = this;
            this.tbody = this.domHandler.findSingle(this.el.nativeElement, 'tbody.ui-datatable-data');
            this.resizerHelper = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-column-resizer-helper');
            this.fixColumnWidths();
            this.documentColumnResizeListener = this.renderer.listenGlobal('body', 'mousemove', function (event) {
                if (_this.columnResizing) {
                    _this.onColumnResize(event);
                }
            });
            this.documentColumnResizeEndListener = this.renderer.listenGlobal('body', 'mouseup', function (event) {
                if (_this.columnResizing) {
                    _this.columnResizing = false;
                    _this.onColumnResizeEnd(event);
                }
            });
        };
        DataTable.prototype.initColumnResize = function (event) {
            this.resizeColumn = event.target.parentElement;
            this.columnResizing = true;
            this.lastPageX = event.pageX;
        };
        DataTable.prototype.onColumnResize = function (event) {
            var container = this.el.nativeElement.children[0];
            this.domHandler.addClass(container, 'ui-unselectable-text');
            this.resizerHelper.style.height = container.offsetHeight - 4 + 'px';
            this.resizerHelper.style.top = container.offsetTop + 'px';
            if (event.pageX > container.offsetLeft && event.pageX < container.offsetLeft + container.offsetWidth) {
                this.resizerHelper.style.left = event.pageX + 'px';
            }
            this.resizerHelper.style.display = 'block';
        };
        DataTable.prototype.onColumnResizeEnd = function (event) {
            var delta = this.resizerHelper.offsetLeft - this.lastPageX;
            var columnWidth = this.resizeColumn.offsetWidth;
            var newColumnWidth = columnWidth + delta;
            var minWidth = this.resizeColumn.style.minWidth || 15;
            if (columnWidth + delta > parseInt(minWidth)) {
                if (this.columnResizeMode === 'fit') {
                    var nextColumn = this.resizeColumn.nextElementSibling;
                    var nextColumnWidth = nextColumn.offsetWidth - delta;
                    if (newColumnWidth > 15 && nextColumnWidth > 15) {
                        this.resizeColumn.style.width = newColumnWidth + 'px';
                        if (nextColumn) {
                            nextColumn.style.width = nextColumnWidth + 'px';
                        }
                    }
                } else if (this.columnResizeMode === 'expand') {
                    this.tbody.parentElement.style.width = this.tbody.parentElement.offsetWidth + delta + 'px';
                    this.resizeColumn.style.width = newColumnWidth + 'px';
                }
                this.onColResize.emit({
                    element: this.resizeColumn,
                    delta: delta
                });
            }
            this.resizerHelper.style.display = 'none';
            this.resizeColumn = null;
            this.domHandler.removeClass(this.el.nativeElement.children[0], 'ui-unselectable-text');
        };
        DataTable.prototype.fixColumnWidths = function () {
            var columns = this.domHandler.find(this.el.nativeElement, 'th.ui-resizable-column');
            for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
                var col = columns_1[_i];
                col.style.width = 'auto';
            }
            for (var _a = 0, columns_2 = columns; _a < columns_2.length; _a++) {
                var col = columns_2[_a];
                col.style.width = col.offsetWidth + 'px';
            }
        };
        DataTable.prototype.onColumnDragStart = function (event) {
            this.draggedColumn = this.findParentHeader(event.target);
            event.dataTransfer.setData('a', 'b'); // Firefox requires this to make dragging possible
        };
        DataTable.prototype.onColumnDragover = function (event) {
            if (this.reorderableColumns && this.draggedColumn) {
                event.preventDefault();
                var dropHeader = this.findParentHeader(event.target);
                if (this.draggedColumn != dropHeader) {
                    var targetPosition = dropHeader.getBoundingClientRect();
                    var targetLeft = targetPosition.left + document.body.scrollLeft;
                    var targetTop = targetPosition.top + document.body.scrollTop;
                    var columnCenter = targetLeft + dropHeader.offsetWidth / 2;
                    this.reorderIndicatorUp.style.top = targetTop - 16 + 'px';
                    this.reorderIndicatorDown.style.top = targetTop + dropHeader.offsetHeight + 'px';
                    if (event.pageX > columnCenter) {
                        this.reorderIndicatorUp.style.left = targetLeft + dropHeader.offsetWidth - 8 + 'px';
                        this.reorderIndicatorDown.style.left = targetLeft + dropHeader.offsetWidth - 8 + 'px';
                    } else {
                        this.reorderIndicatorUp.style.left = targetLeft - 8 + 'px';
                        this.reorderIndicatorDown.style.left = targetLeft - 8 + 'px';
                    }
                    this.reorderIndicatorUp.style.display = 'block';
                    this.reorderIndicatorDown.style.display = 'block';
                } else {
                    event.dataTransfer.dropEffect = 'none';
                }
            }
        };
        DataTable.prototype.onColumnDragleave = function (event) {
            if (this.reorderableColumns && this.draggedColumn) {
                event.preventDefault();
                this.reorderIndicatorUp.style.display = 'none';
                this.reorderIndicatorDown.style.display = 'none';
            }
        };
        DataTable.prototype.onColumnDrop = function (event) {
            event.preventDefault();
            var dragIndex = this.domHandler.index(this.draggedColumn);
            var dropIndex = this.domHandler.index(this.findParentHeader(event.target));
            if (dragIndex != dropIndex) {
                this.columns.splice(dropIndex, 0, this.columns.splice(dragIndex, 1)[0]);
                this.onColReorder.emit({
                    dragIndex: dragIndex,
                    dropIndex: dropIndex,
                    columns: this.columns
                });
            }
            this.reorderIndicatorUp.style.display = 'none';
            this.reorderIndicatorDown.style.display = 'none';
            this.draggedColumn = null;
        };
        DataTable.prototype.initColumnReordering = function () {
            this.reorderIndicatorUp = this.domHandler.findSingle(this.el.nativeElement.children[0], 'span.ui-datatable-reorder-indicator-up');
            this.reorderIndicatorDown = this.domHandler.findSingle(this.el.nativeElement.children[0], 'span.ui-datatable-reorder-indicator-down');
        };
        DataTable.prototype.findParentHeader = function (element) {
            if (element.nodeName == 'TH') {
                return element;
            } else {
                var parent_1 = element.parentElement;
                while (parent_1.nodeName != 'TH') {
                    parent_1 = parent_1.parentElement;
                }
                return parent_1;
            }
        };
        DataTable.prototype.initScrolling = function () {
            var _this = this;
            this.scrollHeader = this.domHandler.findSingle(this.el.nativeElement, '.ui-datatable-scrollable-header');
            this.scrollHeaderBox = this.domHandler.findSingle(this.el.nativeElement, '.ui-datatable-scrollable-header-box');
            this.scrollBody = this.domHandler.findSingle(this.el.nativeElement, '.ui-datatable-scrollable-body');
            this.percentageScrollHeight = this.scrollHeight && this.scrollHeight.indexOf('%') !== -1;
            if (this.scrollHeight) {
                if (this.percentageScrollHeight) this.scrollBody.style.maxHeight = this.domHandler.getOuterHeight(this.el.nativeElement.parentElement) * (parseInt(this.scrollHeight) / 100) + 'px';else this.scrollBody.style.maxHeight = this.scrollHeight;
                this.scrollHeaderBox.style.marginRight = this.calculateScrollbarWidth() + 'px';
            }
            this.bodyScrollListener = this.renderer.listen(this.scrollBody, 'scroll', function () {
                _this.scrollHeaderBox.style.marginLeft = -1 * _this.scrollBody.scrollLeft + 'px';
            });
            this.headerScrollListener = this.renderer.listen(this.scrollHeader, 'scroll', function () {
                _this.scrollHeader.scrollLeft = 0;
            });
            if (this.percentageScrollHeight) {
                this.resizeScrollListener = this.renderer.listenGlobal('window', 'resize', function () {
                    _this.scrollBody.style.maxHeight = _this.domHandler.getOuterHeight(_this.el.nativeElement.parentElement) * (parseInt(_this.scrollHeight) / 100) + 'px';
                });
            }
        };
        DataTable.prototype.calculateScrollbarWidth = function () {
            var scrollDiv = document.createElement("div");
            scrollDiv.className = "ui-scrollbar-measure";
            document.body.appendChild(scrollDiv);
            var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
            document.body.removeChild(scrollDiv);
            return scrollbarWidth;
        };
        DataTable.prototype.hasFooter = function () {
            if (this.footerRows) {
                return true;
            } else {
                if (this.columns) {
                    for (var i = 0; i < this.columns.length; i++) {
                        if (this.columns[i].footer) {
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        DataTable.prototype.isEmpty = function () {
            return !this.dataToRender || this.dataToRender.length == 0;
        };
        DataTable.prototype.createLazyLoadMetadata = function () {
            return {
                first: this.first,
                rows: this.rows,
                sortField: this.sortField,
                sortOrder: this.sortOrder,
                filters: this.filters,
                multiSortMeta: this.multiSortMeta
            };
        };
        DataTable.prototype.toggleRow = function (row) {
            if (!this.expandedRows) {
                this.expandedRows = [];
            }
            var expandedRowIndex = this.findExpandedRowIndex(row);
            if (expandedRowIndex != -1) {
                this.expandedRows.splice(expandedRowIndex, 1);
                this.onRowCollapse.emit(row);
            } else {
                this.expandedRows.push(row);
                this.onRowExpand.emit(row);
            }
        };
        DataTable.prototype.findExpandedRowIndex = function (row) {
            var index = -1;
            if (this.expandedRows) {
                for (var i = 0; i < this.expandedRows.length; i++) {
                    if (this.expandedRows[i] == row) {
                        index = i;
                        break;
                    }
                }
            }
            return index;
        };
        DataTable.prototype.isRowExpanded = function (row) {
            return this.findExpandedRowIndex(row) != -1;
        };
        DataTable.prototype.reset = function () {
            this.sortField = null;
            this.sortOrder = 1;
            this.filteredValue = null;
            this.filters = {};
            if (this.paginator) {
                this.paginate({
                    first: 0,
                    rows: this.rows
                });
            } else {
                this.updateDataToRender(this.value);
            }
        };
        DataTable.prototype.visibleColumns = function () {
            return this.columns.filter(function (c) {
                return !c.hidden;
            });
        };
        DataTable.prototype.exportCSV = function () {
            var _this = this;
            var data = this.value,
                csv = "data:text/csv;charset=utf-8,";
            //headers
            for (var i = 0; i < this.columns.length; i++) {
                if (this.columns[i].field) {
                    csv += this.columns[i].field;
                    if (i < this.columns.length - 1) {
                        csv += this.csvSeparator;
                    }
                }
            }
            //body        
            this.value.forEach(function (record, i) {
                csv += '\n';
                for (var i_1 = 0; i_1 < _this.columns.length; i_1++) {
                    if (_this.columns[i_1].field) {
                        csv += _this.resolveFieldData(record, _this.columns[i_1].field);
                        if (i_1 < _this.columns.length - 1) {
                            csv += _this.csvSeparator;
                        }
                    }
                }
            });
            window.open(encodeURI(csv));
        };
        DataTable.prototype.ngOnDestroy = function () {
            //remove event listener
            if (this.globalFilterFunction) {
                this.globalFilterFunction();
            }
            if (this.scrollable) {
                this.bodyScrollListener();
                this.headerScrollListener();
                if (this.percentageScrollHeight) {
                    this.resizeScrollListener();
                }
            }
            if (this.resizableColumns) {
                this.documentColumnResizeListener();
                this.documentColumnResizeEndListener();
            }
            if (this.columnsSubscription) {
                this.columnsSubscription.unsubscribe();
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], DataTable.prototype, "value", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], DataTable.prototype, "paginator", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], DataTable.prototype, "rows", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], DataTable.prototype, "totalRecords", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], DataTable.prototype, "pageLinks", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Array)], DataTable.prototype, "rowsPerPageOptions", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], DataTable.prototype, "responsive", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], DataTable.prototype, "stacked", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], DataTable.prototype, "selectionMode", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], DataTable.prototype, "selection", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "selectionChange", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], DataTable.prototype, "editable", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "onRowClick", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "onRowSelect", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "onRowUnselect", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "onRowDblclick", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "onHeaderCheckboxToggle", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "onContextMenuSelect", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], DataTable.prototype, "filterDelay", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], DataTable.prototype, "lazy", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "onLazyLoad", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], DataTable.prototype, "resizableColumns", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], DataTable.prototype, "columnResizeMode", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "onColResize", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], DataTable.prototype, "reorderableColumns", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "onColReorder", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], DataTable.prototype, "scrollable", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], DataTable.prototype, "scrollHeight", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], DataTable.prototype, "scrollWidth", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], DataTable.prototype, "headerRows", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], DataTable.prototype, "footerRows", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], DataTable.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], DataTable.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], DataTable.prototype, "globalFilter", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], DataTable.prototype, "sortMode", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], DataTable.prototype, "sortField", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], DataTable.prototype, "sortOrder", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Array)], DataTable.prototype, "multiSortMeta", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], DataTable.prototype, "contextMenu", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], DataTable.prototype, "csvSeparator", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], DataTable.prototype, "emptyMessage", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], DataTable.prototype, "paginatorPosition", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Array)], DataTable.prototype, "expandedRows", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "onEditInit", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "onEditComplete", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "onEdit", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "onEditCancel", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "onPage", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "onSort", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "onFilter", void 0);
        __decorate([core_1.ContentChild(shared_2.Header), __metadata('design:type', Object)], DataTable.prototype, "header", void 0);
        __decorate([core_1.ContentChild(shared_2.Footer), __metadata('design:type', Object)], DataTable.prototype, "footer", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], DataTable.prototype, "expandableRows", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], DataTable.prototype, "tabindex", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "onRowExpand", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], DataTable.prototype, "onRowCollapse", void 0);
        __decorate([core_1.ContentChild(core_1.TemplateRef), __metadata('design:type', core_1.TemplateRef)], DataTable.prototype, "rowExpansionTemplate", void 0);
        __decorate([core_1.ContentChildren(shared_2.Column), __metadata('design:type', core_1.QueryList)], DataTable.prototype, "cols", void 0);
        DataTable = __decorate([core_1.Component({
            selector: 'p-dataTable',
            template: "\n        <div [ngStyle]=\"style\" [class]=\"styleClass\" \n            [ngClass]=\"{'ui-datatable ui-widget':true,'ui-datatable-reflow':responsive,'ui-datatable-stacked':stacked,'ui-datatable-resizable':resizableColumns,'ui-datatable-scrollable':scrollable}\">\n            <div class=\"ui-datatable-header ui-widget-header\" *ngIf=\"header\" [ngStyle]=\"{'width': scrollWidth}\">\n                <ng-content select=\"header\"></ng-content>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-bottom\"\n                (onPageChange)=\"paginate($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && paginatorPosition!='bottom' || paginatorPosition =='both'\"></p-paginator>\n            <div class=\"ui-datatable-tablewrapper\" *ngIf=\"!scrollable\">\n                <table>\n                    <thead>\n                        <tr *ngIf=\"!headerRows\" class=\"ui-state-default\">\n                            <th #headerCell *ngFor=\"let col of columns;let lastCol = last\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\" [style.display]=\"col.hidden ? 'none' : 'table-cell'\"\n                                (click)=\"sort($event,col)\" (mouseenter)=\"hoveredHeader = $event.target\" (mouseleave)=\"hoveredHeader = null\"\n                                [ngClass]=\"{'ui-state-default ui-unselectable-text':true, 'ui-state-hover': headerCell === hoveredHeader && col.sortable,'ui-state-focus': headerCell === focusedHeader && col.sortable,\n                                'ui-sortable-column': col.sortable,'ui-state-active': isSorted(col), 'ui-resizable-column': resizableColumns,'ui-selection-column':col.selectionMode}\" \n                                [draggable]=\"reorderableColumns\" (dragstart)=\"onColumnDragStart($event)\" (dragover)=\"onColumnDragover($event)\" (dragleave)=\"onColumnDragleave($event)\" (drop)=\"onColumnDrop($event)\"\n                                [tabindex]=\"col.sortable ? tabindex : -1\" (focus)=\"focusedHeader=$event.target\" (blur)=\"focusedHeader=null\" (keydown)=\"onHeaderKeydown($event,col)\">\n                                <span class=\"ui-column-resizer\" *ngIf=\"resizableColumns && ((columnResizeMode == 'fit' && !lastCol) || columnResizeMode == 'expand')\" (mousedown)=\"initColumnResize($event)\"></span>\n                                <span class=\"ui-column-title\" *ngIf=\"!col.selectionMode&&!col.headerTemplate\">{{col.header}}</span>\n                                <span class=\"ui-column-title\" *ngIf=\"col.headerTemplate\">\n                                    <p-columnHeaderTemplateLoader [column]=\"col\"></p-columnHeaderTemplateLoader>\n                                </span>\n                                <span class=\"ui-sortable-column-icon fa fa-fw fa-sort\" *ngIf=\"col.sortable\"\n                                     [ngClass]=\"{'fa-sort-desc': (getSortOrder(col) == -1),'fa-sort-asc': (getSortOrder(col) == 1)}\"></span>\n                                <input type=\"text\" pInputText class=\"ui-column-filter\" *ngIf=\"col.filter\" [value]=\"filters[col.field] ? filters[col.field].value : ''\" (click)=\"onFilterInputClick($event)\" (keyup)=\"onFilterKeyup($event.target.value, col.field, col.filterMatchMode)\"/>\n                                <p-dtCheckbox *ngIf=\"col.selectionMode=='multiple'\" (onChange)=\"toggleRowsWithCheckbox($event)\" [checked]=\"allSelected\" [disabled]=\"isEmpty()\"></p-dtCheckbox>\n                            </th>\n                        </tr>\n                        <tr *ngFor=\"let headerRow of headerRows\" class=\"ui-state-default\">\n                            <th #headerCell *ngFor=\"let col of headerRow.columns\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\" [attr.colspan]=\"col.colspan\" [attr.rowspan]=\"col.rowspan\"\n                                (click)=\"sort($event,col)\" (mouseenter)=\"hoveredHeader = $event.target\" (mouseleave)=\"hoveredHeader = null\" [style.display]=\"col.hidden ? 'none' : 'table-cell'\"\n                                [ngClass]=\"{'ui-state-default ui-unselectable-text':true, 'ui-state-hover': headerCell === hoveredHeader && col.sortable,\n                                'ui-sortable-column': col.sortable,'ui-state-active': isSorted(col), 'ui-resizable-column': resizableColumns}\"\n                                [tabindex]=\"col.sortable ? tabindex : -1\" (focus)=\"focusedHeader=$event.target\" (blur)=\"focusedHeader=null\" (keydown)=\"onHeaderKeydown($event,col)\">\n                                <span class=\"ui-column-resizer\" *ngIf=\"resizableColumns && ((columnResizeMode == 'fit' && !lastCol) || columnResizeMode == 'expand')\" (mousedown)=\"initColumnResize($event)\"></span>\n                                <span class=\"ui-column-title\">{{col.header}}</span>\n                                <span class=\"ui-sortable-column-icon fa fa-fw fa-sort\" *ngIf=\"col.sortable\"\n                                     [ngClass]=\"{'fa-sort-desc': (getSortOrder(col) == -1),'fa-sort-asc': (getSortOrder(col) == 1)}\"></span>\n                                <input type=\"text\" pInputText class=\"ui-column-filter\" *ngIf=\"col.filter\" [value]=\"filters[col.field] ? filters[col.field].value : ''\" (click)=\"onFilterInputClick($event)\" (keyup)=\"onFilterKeyup($event.target.value, col.field, col.filterMatchMode)\"/>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tfoot *ngIf=\"hasFooter()\">\n                        <tr *ngIf=\"!footerRows\">\n                            <th *ngFor=\"let col of columns\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\" [ngClass]=\"{'ui-state-default':true}\" [style.display]=\"col.hidden ? 'none' : 'table-cell'\">\n                                <span class=\"ui-column-footer\" *ngIf=\"!col.footerTemplate\">{{col.footer}}</span>\n                                <span class=\"ui-column-footer\" *ngIf=\"col.footerTemplate\">\n                                    <p-columnFooterTemplateLoader [column]=\"col\"></p-columnFooterTemplateLoader>\n                                </span>\n                            </th>\n                        </tr>\n                        <tr *ngFor=\"let footerRow of footerRows\">\n                            <th *ngFor=\"let col of footerRow.columns\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\"\n                                [attr.colspan]=\"col.colspan\" [attr.rowspan]=\"col.rowspan\" [style.display]=\"col.hidden ? 'none' : 'table-cell'\"\n                                [ngClass]=\"{'ui-state-default':true}\">{{col.footer}}</th>\n                        </tr>\n                    </tfoot>\n                    <tbody class=\"ui-datatable-data ui-widget-content\">\n                        <template ngFor let-rowData [ngForOf]=\"dataToRender\" let-even=\"even\" let-odd=\"odd\" let-rowIndex=\"index\">\n                            <tr #rowElement class=\"ui-widget-content\" (mouseenter)=\"hoveredRow = $event.target\" (mouseleave)=\"hoveredRow = null\"\n                                    (click)=\"handleRowClick($event, rowData)\" (dblclick)=\"rowDblclick($event,rowData)\" (contextmenu)=\"onRowRightClick($event,rowData)\"\n                                    [ngClass]=\"{'ui-datatable-even':even,'ui-datatable-odd':odd,'ui-state-hover': (selectionMode && rowElement == hoveredRow), 'ui-state-highlight': isSelected(rowData)}\">\n                                <td *ngFor=\"let col of columns\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\" [style.display]=\"col.hidden ? 'none' : 'table-cell'\"\n                                    [ngClass]=\"{'ui-editable-column':col.editable,'ui-selection-column':col.selectionMode}\" (click)=\"switchCellToEditMode($event.target,col,rowData)\">\n                                    <span class=\"ui-column-title\" *ngIf=\"responsive\">{{col.header}}</span>\n                                    <span class=\"ui-cell-data\" *ngIf=\"!col.bodyTemplate && !col.expander && !col.selectionMode\">{{resolveFieldData(rowData,col.field)}}</span>\n                                    <span class=\"ui-cell-data\" *ngIf=\"col.bodyTemplate\">\n                                        <p-columnBodyTemplateLoader [column]=\"col\" [rowData]=\"rowData\" [rowIndex]=\"rowIndex + first\"></p-columnBodyTemplateLoader>\n                                    </span>\n                                    <input type=\"text\" class=\"ui-cell-editor ui-state-highlight\" *ngIf=\"col.editable\" [(ngModel)]=\"rowData[col.field]\"\n                                            (blur)=\"switchCellToViewMode($event.target,col,rowData,true)\" (keydown)=\"onCellEditorKeydown($event, col, rowData)\"/>\n                                    <div class=\"ui-row-toggler fa fa-fw ui-c\" [ngClass]=\"{'fa-chevron-circle-down':isRowExpanded(rowData), 'fa-chevron-circle-right': !isRowExpanded(rowData)}\"\n                                        *ngIf=\"col.expander\" (click)=\"toggleRow(rowData)\"></div>\n                                    <p-dtRadioButton *ngIf=\"col.selectionMode=='single'\" (onClick)=\"selectRowWithRadio(rowData)\" [checked]=\"isSelected(rowData)\"></p-dtRadioButton>\n                                    <p-dtCheckbox *ngIf=\"col.selectionMode=='multiple'\" (onChange)=\"toggleRowWithCheckbox($event,rowData)\" [checked]=\"isSelected(rowData)\"></p-dtCheckbox>\n                                </td>\n                            </tr>\n                            <tr *ngIf=\"expandableRows && isRowExpanded(rowData)\">\n                                <td [attr.colspan]=\"visibleColumns().length\">\n                                    <p-rowExpansionLoader [rowData]=\"rowData\" [template]=\"rowExpansionTemplate\"></p-rowExpansionLoader>\n                                </td>\n                            </tr>\n                        </template>\n                        \n                        <tr *ngIf=\"isEmpty()\" class=\"ui-widget-content\">\n                            <td [attr.colspan]=\"visibleColumns().length\">{{emptyMessage}}</td>\n                        </tr>\n                    </tbody>\n                </table>\n                <div class=\"ui-column-resizer-helper ui-state-highlight\" style=\"display:none\"></div>\n                <span class=\"fa fa-arrow-down ui-datatable-reorder-indicator-up\" style=\"position: absolute; display: none;\"></span>\n                <span class=\"fa fa-arrow-up ui-datatable-reorder-indicator-down\" style=\"position: absolute; display: none;\"></span>\n            </div>\n            <div class=\"ui-widget-header ui-datatable-scrollable-header\" *ngIf=\"scrollable\" [ngStyle]=\"{'width': scrollWidth}\">\n                <div class=\"ui-datatable-scrollable-header-box\">\n                    <table>\n                        <thead>\n                            <tr>\n                                <th #headerCell *ngFor=\"let col of columns\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\" [style.display]=\"col.hidden ? 'none' : 'table-cell'\"\n                                    (click)=\"sort($event,col)\" (mouseenter)=\"hoveredHeader = $event.target\" (mouseleave)=\"hoveredHeader = null\"\n                                    [ngClass]=\"{'ui-state-default ui-unselectable-text':true, 'ui-state-hover': headerCell === hoveredHeader && col.sortable,\n                                    'ui-sortable-column': col.sortable,'ui-state-active': isSorted(col), 'ui-resizable-column': resizableColumns}\"\n                                    [tabindex]=\"col.sortable ? tabindex : -1\" (focus)=\"focusedHeader=$event.target\" (blur)=\"focusedHeader=null\" (keydown)=\"onHeaderKeydown($event,col)\">\n                                    <span class=\"ui-column-resizer\" *ngIf=\"resizableColumns && ((columnResizeMode == 'fit' && !lastCol) || columnResizeMode == 'expand')\"></span>\n                                    <span class=\"ui-column-title\">{{col.header}}</span>\n                                    <span class=\"ui-sortable-column-icon fa fa-fw fa-sort\" *ngIf=\"col.sortable\"\n                                         [ngClass]=\"{'fa-sort-desc': (col.field === sortField) && (sortOrder == -1),'fa-sort-asc': (col.field === sortField) && (sortOrder == 1)}\"></span>\n                                    <input type=\"text\" pInputText class=\"ui-column-filter\" *ngIf=\"col.filter\" (click)=\"onFilterInputClick($event)\" (keyup)=\"onFilterKeyup($event.target.value, col.field, col.filterMatchMode)\"/>\n                                </th>\n                            </tr>\n                        </thead>\n                    </table>\n                </div>\n            </div>\n            <div class=\"ui-datatable-scrollable-body\" *ngIf=\"scrollable\" [ngStyle]=\"{'width': scrollWidth}\">\n                <table>\n                    <tbody class=\"ui-datatable-data ui-widget-content\">\n                    <template ngFor let-rowData [ngForOf]=\"dataToRender\" let-even=\"even\" let-odd=\"odd\" let-rowIndex=\"index\">\n                        <tr #rowElement class=\"ui-widget-content\" (mouseenter)=\"hoveredRow = $event.target\" (mouseleave)=\"hoveredRow = null\"\n                                (click)=\"handleRowClick($event, rowData)\" (dblclick)=\"rowDblclick($event,rowData)\" (contextmenu)=\"onRowRightClick($event,rowData)\"\n                                [ngClass]=\"{'ui-datatable-even':even,'ui-datatable-odd':odd,'ui-state-hover': (selectionMode && rowElement == hoveredRow), 'ui-state-highlight': isSelected(rowData)}\">\n                            <td *ngFor=\"let col of columns\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\" [style.display]=\"col.hidden ? 'none' : 'table-cell'\"\n                                [ngClass]=\"{'ui-editable-column':col.editable}\" (click)=\"switchCellToEditMode($event.target,col,rowData)\">\n                                <span class=\"ui-column-title\" *ngIf=\"responsive\">{{col.header}}</span>\n                                <span class=\"ui-cell-data\" *ngIf=\"!col.bodyTemplate\">{{resolveFieldData(rowData,col.field)}}</span>\n                                <span class=\"ui-cell-data\" *ngIf=\"col.bodyTemplate\">\n                                    <p-columnBodyTemplateLoader [column]=\"col\" [rowData]=\"rowData\" [rowIndex]=\"rowIndex + first\"></p-columnBodyTemplateLoader>\n                                </span>\n                                <input type=\"text\" class=\"ui-cell-editor ui-state-highlight\" *ngIf=\"col.editable\" [(ngModel)]=\"rowData[col.field]\"\n                                        (blur)=\"switchCellToViewMode($event.target,col,rowData,true)\" (keydown)=\"onCellEditorKeydown($event, col, rowData)\"/>\n                                <div class=\"ui-row-toggler fa fa-fw ui-c\" [ngClass]=\"{'fa-chevron-circle-down':isRowExpanded(rowData), 'fa-chevron-circle-right': !isRowExpanded(rowData)}\"\n                                    *ngIf=\"col.expander\" (click)=\"toggleRow(rowData)\"></div>\n                            </td>\n                        </tr>\n                        <tr *ngIf=\"expandableRows && isRowExpanded(rowData)\">\n                            <td [attr.colspan]=\"visibleColumns().length\">\n                                <p-rowExpansionLoader [rowData]=\"rowData\" [template]=\"rowExpansionTemplate\"></p-rowExpansionLoader>\n                            </td>\n                        </tr>\n                    </template>\n                    </tbody>\n                </table>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-bottom\"\n                (onPageChange)=\"paginate($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && paginatorPosition!='top' || paginatorPosition =='both'\"></p-paginator>\n            <div class=\"ui-datatable-footer ui-widget-header\" *ngIf=\"footer\">\n                <ng-content select=\"footer\"></ng-content>\n            </div>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.IterableDiffers, core_1.Renderer, core_1.ChangeDetectorRef])], DataTable);
        return DataTable;
    }();
    exports.DataTable = DataTable;
    var DataTableModule = function () {
        function DataTableModule() {}
        DataTableModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule, shared_1.SharedModule, paginator_1.PaginatorModule, forms_1.FormsModule, inputtext_1.InputTextModule],
            exports: [DataTable, shared_1.SharedModule],
            declarations: [DataTable, DTRadioButton, DTCheckbox, RowExpansionLoader]
        }), __metadata('design:paramtypes', [])], DataTableModule);
        return DataTableModule;
    }();
    exports.DataTableModule = DataTableModule;
    

    return module.exports;
});
$__System.registerDynamic("33", ["3", "34"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var Subject_1 = $__require("34");
    var ConfirmationService = function () {
        function ConfirmationService() {
            this.requireConfirmationSource = new Subject_1.Subject();
            this.acceptConfirmationSource = new Subject_1.Subject();
            this.requireConfirmation$ = this.requireConfirmationSource.asObservable();
            this.accept = this.acceptConfirmationSource.asObservable();
        }
        ConfirmationService.prototype.confirm = function (confirmation) {
            this.requireConfirmationSource.next(confirmation);
            return this;
        };
        ConfirmationService.prototype.onAccept = function () {
            this.acceptConfirmationSource.next();
        };
        ConfirmationService = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [])], ConfirmationService);
        return ConfirmationService;
    }();
    exports.ConfirmationService = ConfirmationService;
    

    return module.exports;
});
$__System.registerDynamic("35", ["3", "9", "26", "21", "25", "33"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var shared_1 = $__require("21");
    var button_1 = $__require("25");
    var api_1 = $__require("33");
    var ConfirmDialog = function () {
        function ConfirmDialog(el, domHandler, renderer, confirmationService) {
            var _this = this;
            this.el = el;
            this.domHandler = domHandler;
            this.renderer = renderer;
            this.confirmationService = confirmationService;
            this.acceptIcon = 'fa-check';
            this.acceptLabel = 'Yes';
            this.acceptVisible = true;
            this.rejectIcon = 'fa-close';
            this.rejectLabel = 'No';
            this.rejectVisible = true;
            this.closeOnEscape = true;
            this.closable = true;
            this.responsive = true;
            this.subscription = confirmationService.requireConfirmation$.subscribe(function (confirmation) {
                _this.confirmation = confirmation;
                _this.message = _this.confirmation.message || _this.message;
                _this.icon = _this.confirmation.icon || _this.icon;
                _this.header = _this.confirmation.header || _this.header;
                _this.rejectVisible = _this.confirmation.rejectVisible === false ? false : _this.rejectVisible;
                _this.acceptVisible = _this.confirmation.acceptVisible === false ? false : _this.acceptVisible;
                if (_this.confirmation.accept) {
                    _this.confirmation.acceptEvent = new core_1.EventEmitter();
                    _this.confirmation.acceptEvent.subscribe(_this.confirmation.accept);
                }
                if (_this.confirmation.reject) {
                    _this.confirmation.rejectEvent = new core_1.EventEmitter();
                    _this.confirmation.rejectEvent.subscribe(_this.confirmation.reject);
                }
                _this.visible = true;
            });
        }
        Object.defineProperty(ConfirmDialog.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (val) {
                this._visible = val;
                if (this._visible) {
                    if (!this.positionInitialized) {
                        this.center();
                        this.positionInitialized = true;
                    }
                    this.el.nativeElement.children[0].style.zIndex = ++domhandler_1.DomHandler.zindex;
                }
                if (this._visible) this.enableModality();else this.disableModality();
            },
            enumerable: true,
            configurable: true
        });
        ConfirmDialog.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.contentContainer = this.domHandler.findSingle(this.el.nativeElement, '.ui-dialog-content');
            if (this.responsive) {
                this.documentResponsiveListener = this.renderer.listenGlobal('window', 'resize', function (event) {
                    _this.center();
                });
            }
            if (this.closeOnEscape && this.closable) {
                this.documentEscapeListener = this.renderer.listenGlobal('body', 'keydown', function (event) {
                    if (event.which == 27) {
                        if (_this.el.nativeElement.children[0].style.zIndex == domhandler_1.DomHandler.zindex) {
                            _this.hide(event);
                        }
                    }
                });
            }
            if (this.appendTo) {
                if (this.appendTo === 'body') document.body.appendChild(this.el.nativeElement);else this.appendTo.appendChild(this.el.nativeElement);
            }
        };
        ConfirmDialog.prototype.center = function () {
            var container = this.el.nativeElement.children[0];
            var elementWidth = this.domHandler.getOuterWidth(container);
            var elementHeight = this.domHandler.getOuterHeight(container);
            if (elementWidth == 0 && elementHeight == 0) {
                container.style.visibility = 'hidden';
                container.style.display = 'block';
                elementWidth = this.domHandler.getOuterWidth(container);
                elementHeight = this.domHandler.getOuterHeight(container);
                container.style.display = 'none';
                container.style.visibility = 'visible';
            }
            var viewport = this.domHandler.getViewport();
            var x = (viewport.width - elementWidth) / 2;
            var y = (viewport.height - elementHeight) / 2;
            container.style.left = x + 'px';
            container.style.top = y + 'px';
        };
        ConfirmDialog.prototype.enableModality = function () {
            if (!this.mask) {
                this.mask = document.createElement('div');
                this.mask.style.zIndex = this.el.nativeElement.children[0].style.zIndex - 1;
                this.domHandler.addMultipleClasses(this.mask, 'ui-widget-overlay ui-dialog-mask');
                document.body.appendChild(this.mask);
            }
        };
        ConfirmDialog.prototype.disableModality = function () {
            if (this.mask) {
                document.body.removeChild(this.mask);
                this.mask = null;
            }
        };
        ConfirmDialog.prototype.hide = function (event) {
            this.visible = false;
            if (event) {
                event.preventDefault();
            }
        };
        ConfirmDialog.prototype.moveOnTop = function () {
            this.el.nativeElement.children[0].style.zIndex = ++domhandler_1.DomHandler.zindex;
        };
        ConfirmDialog.prototype.ngOnDestroy = function () {
            this.disableModality();
            if (this.responsive) {
                this.documentResponsiveListener();
            }
            if (this.closeOnEscape && this.closable) {
                this.documentEscapeListener();
            }
            if (this.appendTo && this.appendTo === 'body') {
                document.body.removeChild(this.el.nativeElement);
            }
            this.subscription.unsubscribe();
        };
        ConfirmDialog.prototype.accept = function () {
            if (this.confirmation.acceptEvent) {
                this.confirmation.acceptEvent.emit();
            }
            this.hide();
            this.confirmation = null;
        };
        ConfirmDialog.prototype.reject = function () {
            if (this.confirmation.rejectEvent) {
                this.confirmation.rejectEvent.emit();
            }
            this.hide();
            this.confirmation = null;
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], ConfirmDialog.prototype, "header", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], ConfirmDialog.prototype, "icon", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], ConfirmDialog.prototype, "message", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], ConfirmDialog.prototype, "acceptIcon", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], ConfirmDialog.prototype, "acceptLabel", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], ConfirmDialog.prototype, "acceptVisible", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], ConfirmDialog.prototype, "rejectIcon", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], ConfirmDialog.prototype, "rejectLabel", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], ConfirmDialog.prototype, "rejectVisible", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], ConfirmDialog.prototype, "width", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], ConfirmDialog.prototype, "height", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], ConfirmDialog.prototype, "closeOnEscape", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], ConfirmDialog.prototype, "rtl", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], ConfirmDialog.prototype, "closable", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], ConfirmDialog.prototype, "responsive", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], ConfirmDialog.prototype, "appendTo", void 0);
        __decorate([core_1.ContentChild(shared_1.Footer), __metadata('design:type', Object)], ConfirmDialog.prototype, "footer", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], ConfirmDialog.prototype, "visible", null);
        ConfirmDialog = __decorate([core_1.Component({
            selector: 'p-confirmDialog',
            template: "\n        <div [ngClass]=\"{'ui-dialog ui-confirmdialog ui-widget ui-widget-content ui-corner-all ui-shadow':true,'ui-dialog-rtl':rtl}\" \n            [style.display]=\"visible ? 'block' : 'none'\" [style.width.px]=\"width\" [style.height.px]=\"height\" (mousedown)=\"moveOnTop()\" [@dialogState]=\"visible ? 'visible' : 'hidden'\">\n            <div class=\"ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top\">\n                <span class=\"ui-dialog-title\" *ngIf=\"header\">{{header}}</span>\n                <a [ngClass]=\"{'ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all':true,'ui-state-hover':hoverCloseIcon}\" href=\"#\" role=\"button\" *ngIf=\"closable\" \n                    (click)=\"hide($event)\" (mouseenter)=\"hoverCloseIcon=true\" (mouseleave)=\"hoverCloseIcon=false\">\n                    <span class=\"fa fa-fw fa-close\"></span>\n                </a>\n            </div>\n            <div class=\"ui-dialog-content ui-widget-content\">\n                <i [class]=\"icon\"></i>\n                <span class=\"ui-confirmdialog-message\">{{message}}</span>\n            </div>\n            <div class=\"ui-dialog-buttonpane ui-widget-content ui-helper-clearfix\" *ngIf=\"footer\">\n                <ng-content select=\"footer\"></ng-content>\n            </div>\n            <div class=\"ui-dialog-buttonpane ui-widget-content ui-helper-clearfix\" *ngIf=\"!footer\">\n                <button type=\"button\" pButton [icon]=\"rejectIcon\" [label]=\"rejectLabel\" (click)=\"reject()\" *ngIf=\"rejectVisible\"></button>\n                <button type=\"button\" pButton [icon]=\"acceptIcon\" [label]=\"acceptLabel\" (click)=\"accept()\" *ngIf=\"acceptVisible\"></button>\n            </div>\n        </div>\n    ",
            animations: [core_1.trigger('dialogState', [core_1.state('hidden', core_1.style({
                opacity: 0
            })), core_1.state('visible', core_1.style({
                opacity: 1
            })), core_1.transition('visible => hidden', core_1.animate('400ms ease-in')), core_1.transition('hidden => visible', core_1.animate('400ms ease-out'))])],
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer, api_1.ConfirmationService])], ConfirmDialog);
        return ConfirmDialog;
    }();
    exports.ConfirmDialog = ConfirmDialog;
    var ConfirmDialogModule = function () {
        function ConfirmDialogModule() {}
        ConfirmDialogModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule, button_1.ButtonModule],
            exports: [ConfirmDialog, button_1.ButtonModule],
            declarations: [ConfirmDialog]
        }), __metadata('design:paramtypes', [])], ConfirmDialogModule);
        return ConfirmDialogModule;
    }();
    exports.ConfirmDialogModule = ConfirmDialogModule;
    

    return module.exports;
});
$__System.registerDynamic("36", ["3", "9", "26", "21"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var shared_1 = $__require("21");
    var Dialog = function () {
        function Dialog(el, domHandler, renderer) {
            this.el = el;
            this.domHandler = domHandler;
            this.renderer = renderer;
            this.draggable = true;
            this.resizable = true;
            this.minWidth = 150;
            this.minHeight = 150;
            this.closeOnEscape = true;
            this.closable = true;
            this.onBeforeShow = new core_1.EventEmitter();
            this.onAfterShow = new core_1.EventEmitter();
            this.onBeforeHide = new core_1.EventEmitter();
            this.onAfterHide = new core_1.EventEmitter();
            this.visibleChange = new core_1.EventEmitter();
        }
        Object.defineProperty(Dialog.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (val) {
                this._visible = val;
                if (this._visible) {
                    this.onBeforeShow.emit({});
                    if (!this.positionInitialized) {
                        this.center();
                        this.positionInitialized = true;
                    }
                    this.el.nativeElement.children[0].style.zIndex = ++domhandler_1.DomHandler.zindex;
                    this.shown = true;
                }
                if (this.modal) {
                    if (this._visible) this.enableModality();else this.disableModality();
                }
            },
            enumerable: true,
            configurable: true
        });
        Dialog.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.contentContainer = this.domHandler.findSingle(this.el.nativeElement, '.ui-dialog-content');
            if (this.draggable) {
                this.documentDragListener = this.renderer.listenGlobal('body', 'mousemove', function (event) {
                    _this.onDrag(event);
                });
            }
            if (this.resizable) {
                this.documentResizeListener = this.renderer.listenGlobal('body', 'mousemove', function (event) {
                    _this.onResize(event);
                });
                this.documentResizeEndListener = this.renderer.listenGlobal('body', 'mouseup', function (event) {
                    if (_this.resizing) {
                        _this.resizing = false;
                    }
                });
            }
            if (this.responsive) {
                this.documentResponsiveListener = this.renderer.listenGlobal('window', 'resize', function (event) {
                    _this.center();
                });
            }
            if (this.closeOnEscape && this.closable) {
                this.documentEscapeListener = this.renderer.listenGlobal('body', 'keydown', function (event) {
                    if (event.which == 27) {
                        if (_this.el.nativeElement.children[0].style.zIndex == domhandler_1.DomHandler.zindex) {
                            _this.hide(event);
                        }
                    }
                });
            }
            if (this.appendTo) {
                if (this.appendTo === 'body') document.body.appendChild(this.el.nativeElement);else this.appendTo.appendChild(this.el.nativeElement);
            }
        };
        Dialog.prototype.ngAfterViewChecked = function () {
            if (this.shown) {
                this.onAfterShow.emit({});
                this.shown = false;
            }
        };
        Dialog.prototype.center = function () {
            var container = this.el.nativeElement.children[0];
            var elementWidth = this.domHandler.getOuterWidth(container);
            var elementHeight = this.domHandler.getOuterHeight(container);
            if (elementWidth == 0 && elementHeight == 0) {
                container.style.visibility = 'hidden';
                container.style.display = 'block';
                elementWidth = this.domHandler.getOuterWidth(container);
                elementHeight = this.domHandler.getOuterHeight(container);
                container.style.display = 'none';
                container.style.visibility = 'visible';
            }
            var viewport = this.domHandler.getViewport();
            var x = (viewport.width - elementWidth) / 2;
            var y = (viewport.height - elementHeight) / 2;
            container.style.left = x + 'px';
            container.style.top = y + 'px';
        };
        Dialog.prototype.enableModality = function () {
            if (!this.mask) {
                this.mask = document.createElement('div');
                this.mask.style.zIndex = this.el.nativeElement.children[0].style.zIndex - 1;
                this.domHandler.addMultipleClasses(this.mask, 'ui-widget-overlay ui-dialog-mask');
                document.body.appendChild(this.mask);
            }
        };
        Dialog.prototype.disableModality = function () {
            if (this.mask) {
                document.body.removeChild(this.mask);
                this.mask = null;
            }
        };
        Dialog.prototype.hide = function (event) {
            this.onBeforeHide.emit(event);
            this.visibleChange.emit(false);
            this.onAfterHide.emit(event);
            event.preventDefault();
        };
        Dialog.prototype.moveOnTop = function () {
            this.el.nativeElement.children[0].style.zIndex = ++domhandler_1.DomHandler.zindex;
        };
        Dialog.prototype.initDrag = function (event) {
            if (this.draggable) {
                this.dragging = true;
                this.lastPageX = event.pageX;
                this.lastPageY = event.pageY;
            }
        };
        Dialog.prototype.onDrag = function (event) {
            if (this.dragging) {
                var container = this.el.nativeElement.children[0];
                var deltaX = event.pageX - this.lastPageX;
                var deltaY = event.pageY - this.lastPageY;
                var leftPos = parseInt(container.style.left);
                var topPos = parseInt(container.style.top);
                container.style.left = leftPos + deltaX + 'px';
                container.style.top = topPos + deltaY + 'px';
                this.lastPageX = event.pageX;
                this.lastPageY = event.pageY;
            }
        };
        Dialog.prototype.endDrag = function (event) {
            if (this.draggable) {
                this.dragging = false;
            }
        };
        Dialog.prototype.initResize = function (event) {
            if (this.resizable) {
                this.resizing = true;
                this.lastPageX = event.pageX;
                this.lastPageY = event.pageY;
            }
        };
        Dialog.prototype.onResize = function (event) {
            if (this.resizing) {
                var container = this.el.nativeElement.children[0];
                var deltaX = event.pageX - this.lastPageX;
                var deltaY = event.pageY - this.lastPageY;
                var containerWidth = this.domHandler.getOuterWidth(container);
                var contentHeight = this.domHandler.getHeight(this.contentContainer);
                var newWidth = containerWidth + deltaX;
                var newHeight = contentHeight + deltaY;
                if (newWidth > this.minWidth) container.style.width = newWidth + 'px';
                if (newHeight > this.minHeight) this.contentContainer.style.height = newHeight + 'px';
                this.lastPageX = event.pageX;
                this.lastPageY = event.pageY;
            }
        };
        Dialog.prototype.ngOnDestroy = function () {
            this.disableModality();
            if (this.documentDragListener) {
                this.documentDragListener();
            }
            if (this.resizable) {
                this.documentResizeListener();
                this.documentResizeEndListener();
            }
            if (this.responsive) {
                this.documentResponsiveListener();
            }
            if (this.closeOnEscape && this.closable) {
                this.documentEscapeListener();
            }
            if (this.appendTo && this.appendTo === 'body') {
                document.body.removeChild(this.el.nativeElement);
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], Dialog.prototype, "header", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Dialog.prototype, "draggable", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Dialog.prototype, "resizable", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Dialog.prototype, "minWidth", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Dialog.prototype, "minHeight", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Dialog.prototype, "width", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Dialog.prototype, "height", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Dialog.prototype, "contentHeight", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Dialog.prototype, "modal", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Dialog.prototype, "showEffect", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Dialog.prototype, "closeOnEscape", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Dialog.prototype, "rtl", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Dialog.prototype, "closable", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Dialog.prototype, "responsive", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Dialog.prototype, "appendTo", void 0);
        __decorate([core_1.ContentChild(shared_1.Header), __metadata('design:type', Object)], Dialog.prototype, "headerFacet", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Dialog.prototype, "onBeforeShow", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Dialog.prototype, "onAfterShow", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Dialog.prototype, "onBeforeHide", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Dialog.prototype, "onAfterHide", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Dialog.prototype, "visibleChange", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Dialog.prototype, "visible", null);
        Dialog = __decorate([core_1.Component({
            selector: 'p-dialog',
            template: "\n        <div [ngClass]=\"{'ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow':true,'ui-dialog-rtl':rtl,'ui-dialog-draggable':draggable}\" \n            [style.display]=\"visible ? 'block' : 'none'\" [style.width.px]=\"width\" [style.height.px]=\"height\" (mousedown)=\"moveOnTop()\" [@dialogState]=\"visible ? 'visible' : 'hidden'\">\n            <div class=\"ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top\"\n                (mousedown)=\"initDrag($event)\" (mouseup)=\"endDrag($event)\">\n                <span class=\"ui-dialog-title\" *ngIf=\"header\">{{header}}</span>\n                <span class=\"ui-dialog-title\" *ngIf=\"headerFacet\">\n                    <ng-content select=\"header\"></ng-content>\n                </span>\n                <a [ngClass]=\"{'ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all':true,'ui-state-hover':hoverCloseIcon}\" href=\"#\" role=\"button\" *ngIf=\"closable\" \n                    (click)=\"hide($event)\" (mouseenter)=\"hoverCloseIcon=true\" (mouseleave)=\"hoverCloseIcon=false\">\n                    <span class=\"fa fa-fw fa-close\"></span>\n                </a>\n            </div>\n            <div class=\"ui-dialog-content ui-widget-content\" [style.height.px]=\"contentHeight\">\n                <ng-content></ng-content>\n            </div>\n            <ng-content select=\"footer\"></ng-content>\n            <div *ngIf=\"resizable\" class=\"ui-resizable-handle ui-resizable-se ui-icon ui-icon-gripsmall-diagonal-se\" style=\"z-index: 90;\"\n                (mousedown)=\"initResize($event)\"></div>\n        </div>\n    ",
            animations: [core_1.trigger('dialogState', [core_1.state('hidden', core_1.style({
                opacity: 0
            })), core_1.state('visible', core_1.style({
                opacity: 1
            })), core_1.transition('visible => hidden', core_1.animate('400ms ease-in')), core_1.transition('hidden => visible', core_1.animate('400ms ease-out'))])],
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer])], Dialog);
        return Dialog;
    }();
    exports.Dialog = Dialog;
    var DialogModule = function () {
        function DialogModule() {}
        DialogModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Dialog],
            declarations: [Dialog]
        }), __metadata('design:paramtypes', [])], DialogModule);
        return DialogModule;
    }();
    exports.DialogModule = DialogModule;
    

    return module.exports;
});
$__System.registerDynamic("37", ["3", "9", "26"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var Draggable = function () {
        function Draggable(el, domHandler) {
            this.el = el;
            this.domHandler = domHandler;
            this.onDragStart = new core_1.EventEmitter();
            this.onDragEnd = new core_1.EventEmitter();
            this.onDrag = new core_1.EventEmitter();
        }
        Draggable.prototype.dragStart = function (event) {
            if (this.allowDrag()) {
                if (this.dragEffect) {
                    event.dataTransfer.effectAllowed = this.dragEffect;
                }
                event.dataTransfer.setData(this.scope, this.scope);
                this.onDragStart.emit(event);
            } else {
                event.preventDefault();
            }
        };
        Draggable.prototype.drag = function (event) {
            this.onDrag.emit(event);
        };
        Draggable.prototype.dragEnd = function (event) {
            this.onDragEnd.emit(event);
        };
        Draggable.prototype.mouseover = function (event) {
            this.handle = event.target;
        };
        Draggable.prototype.mouseleave = function (event) {
            this.handle = null;
        };
        Draggable.prototype.allowDrag = function () {
            if (this.dragHandle && this.handle) return this.domHandler.matches(this.handle, this.dragHandle);else return true;
        };
        __decorate([core_1.Input('pDraggable'), __metadata('design:type', String)], Draggable.prototype, "scope", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Draggable.prototype, "dragEffect", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Draggable.prototype, "dragHandle", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Draggable.prototype, "onDragStart", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Draggable.prototype, "onDragEnd", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Draggable.prototype, "onDrag", void 0);
        __decorate([core_1.HostListener('dragstart', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Draggable.prototype, "dragStart", null);
        __decorate([core_1.HostListener('drag', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Draggable.prototype, "drag", null);
        __decorate([core_1.HostListener('dragend', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Draggable.prototype, "dragEnd", null);
        __decorate([core_1.HostListener('mouseover', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Draggable.prototype, "mouseover", null);
        __decorate([core_1.HostListener('mouseleave', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Draggable.prototype, "mouseleave", null);
        Draggable = __decorate([core_1.Directive({
            selector: '[pDraggable]',
            host: {
                '[draggable]': 'true'
            },
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler])], Draggable);
        return Draggable;
    }();
    exports.Draggable = Draggable;
    var Droppable = function () {
        function Droppable(el, domHandler) {
            this.el = el;
            this.domHandler = domHandler;
            this.onDragEnter = new core_1.EventEmitter();
            this.onDragLeave = new core_1.EventEmitter();
            this.onDrop = new core_1.EventEmitter();
            this.onDragOver = new core_1.EventEmitter();
        }
        Droppable.prototype.drop = function (event) {
            event.preventDefault();
            this.onDrop.emit(event);
        };
        Droppable.prototype.dragEnter = function (event) {
            event.preventDefault();
            if (this.dropEffect) {
                event.dataTransfer.dropEffect = this.dropEffect;
            }
            this.onDragEnter.emit(event);
        };
        Droppable.prototype.dragLeave = function (event) {
            event.preventDefault();
            this.onDragLeave.emit(event);
        };
        Droppable.prototype.dragOver = function (event) {
            if (this.allowDrop(event)) {
                event.preventDefault();
                this.onDragOver.emit(event);
            }
        };
        Droppable.prototype.allowDrop = function (event) {
            var allow = false;
            var types = event.dataTransfer.types;
            if (types && types.length) {
                for (var i = 0; i < types.length; i++) {
                    if (types[i] == this.scope) {
                        allow = true;
                        break;
                    }
                }
            }
            return allow;
        };
        __decorate([core_1.Input('pDroppable'), __metadata('design:type', String)], Droppable.prototype, "scope", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Droppable.prototype, "dropEffect", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Droppable.prototype, "onDragEnter", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Droppable.prototype, "onDragLeave", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Droppable.prototype, "onDrop", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Droppable.prototype, "onDragOver", void 0);
        __decorate([core_1.HostListener('drop', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Droppable.prototype, "drop", null);
        __decorate([core_1.HostListener('dragenter', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Droppable.prototype, "dragEnter", null);
        __decorate([core_1.HostListener('dragleave', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Droppable.prototype, "dragLeave", null);
        __decorate([core_1.HostListener('dragover', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Droppable.prototype, "dragOver", null);
        Droppable = __decorate([core_1.Directive({
            selector: '[pDroppable]',
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler])], Droppable);
        return Droppable;
    }();
    exports.Droppable = Droppable;
    var DragDropModule = function () {
        function DragDropModule() {}
        DragDropModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Draggable, Droppable],
            declarations: [Draggable, Droppable]
        }), __metadata('design:paramtypes', [])], DragDropModule);
        return DragDropModule;
    }();
    exports.DragDropModule = DragDropModule;
    

    return module.exports;
});
$__System.registerDynamic("38", ["3", "9", "21", "26", "23"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var shared_1 = $__require("21");
    var domhandler_1 = $__require("26");
    var forms_1 = $__require("23");
    exports.DROPDOWN_VALUE_ACCESSOR = {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return Dropdown;
        }),
        multi: true
    };
    var Dropdown = function () {
        function Dropdown(el, domHandler, renderer, differs) {
            this.el = el;
            this.domHandler = domHandler;
            this.renderer = renderer;
            this.onChange = new core_1.EventEmitter();
            this.scrollHeight = '200px';
            this.autoWidth = true;
            this.onModelChange = function () {};
            this.onModelTouched = function () {};
            this.panelVisible = false;
            this.differ = differs.find([]).create(null);
        }
        Dropdown.prototype.ngOnInit = function () {
            var _this = this;
            this.optionsToDisplay = this.options;
            this.documentClickListener = this.renderer.listenGlobal('body', 'click', function () {
                if (!_this.selfClick && !_this.itemClick) {
                    _this.panelVisible = false;
                }
                _this.selfClick = false;
                _this.itemClick = false;
            });
        };
        Dropdown.prototype.ngDoCheck = function () {
            var changes = this.differ.diff(this.options);
            if (changes && this.initialized) {
                this.optionsToDisplay = this.options;
                this.updateSelectedOption(this.value);
                this.optionsChanged = true;
            }
        };
        Dropdown.prototype.ngAfterViewInit = function () {
            this.container = this.el.nativeElement.children[0];
            this.panel = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-dropdown-panel');
            this.itemsWrapper = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-dropdown-items-wrapper');
            this.updateDimensions();
            this.initialized = true;
            if (this.appendTo) {
                if (this.appendTo === 'body') document.body.appendChild(this.container);else this.appendTo.appendChild(this.container);
            }
        };
        Object.defineProperty(Dropdown.prototype, "label", {
            get: function () {
                return this.selectedOption ? this.selectedOption.label : null;
            },
            enumerable: true,
            configurable: true
        });
        Dropdown.prototype.onItemClick = function (event, option) {
            this.itemClick = true;
            this.selectItem(event, option);
            this.hide();
        };
        Dropdown.prototype.selectItem = function (event, option) {
            this.selectedOption = option;
            this.value = option.value;
            this.onModelChange(this.value);
            this.onChange.emit({
                originalEvent: event,
                value: this.value
            });
        };
        Dropdown.prototype.ngAfterViewChecked = function () {
            if (this.optionsChanged) {
                this.domHandler.relativePosition(this.panel, this.container);
                this.optionsChanged = false;
            }
            if (this.selectedOptionUpdated && this.itemsWrapper) {
                var selectedItem = this.domHandler.findSingle(this.panel, 'li.ui-state-highlight');
                if (selectedItem) {
                    this.domHandler.scrollInView(this.itemsWrapper, this.domHandler.findSingle(this.panel, 'li.ui-state-highlight'));
                }
                this.selectedOptionUpdated = false;
            }
        };
        Dropdown.prototype.writeValue = function (value) {
            this.value = value;
            this.updateSelectedOption(value);
        };
        Dropdown.prototype.updateSelectedOption = function (val) {
            this.selectedOption = this.findOption(val, this.optionsToDisplay);
            if (!this.selectedOption && this.optionsToDisplay && this.optionsToDisplay.length && !this.editable) {
                this.selectedOption = this.optionsToDisplay[0];
            }
            this.selectedOptionUpdated = true;
        };
        Dropdown.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        Dropdown.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        Dropdown.prototype.setDisabledState = function (val) {
            this.disabled = val;
        };
        Dropdown.prototype.updateDimensions = function () {
            if (this.autoWidth) {
                var select = this.domHandler.findSingle(this.el.nativeElement, 'select');
                if (!this.style || !this.style['width'] && !this.style['min-width']) {
                    this.el.nativeElement.children[0].style.width = select.offsetWidth + 30 + 'px';
                }
            }
        };
        Dropdown.prototype.onMouseenter = function (event) {
            this.hover = true;
        };
        Dropdown.prototype.onMouseleave = function (event) {
            this.hover = false;
        };
        Dropdown.prototype.onMouseclick = function (event, input) {
            if (this.disabled) {
                return;
            }
            this.selfClick = true;
            if (!this.itemClick) {
                input.focus();
                if (this.panelVisible) this.hide();else {
                    this.show(this.panel, this.container);
                }
            }
        };
        Dropdown.prototype.onInputClick = function (event) {
            this.itemClick = true;
        };
        Dropdown.prototype.onInputChange = function (event) {
            this.value = event.target.value;
            this.updateSelectedOption(this.value);
            this.onModelChange(this.value);
            this.onChange.emit({
                originalEvent: event,
                value: this.value
            });
        };
        Dropdown.prototype.show = function (panel, container) {
            if (this.options && this.options.length) {
                this.panelVisible = true;
                panel.style.zIndex = ++domhandler_1.DomHandler.zindex;
                this.domHandler.relativePosition(panel, container);
                this.domHandler.fadeIn(panel, 250);
            }
        };
        Dropdown.prototype.hide = function () {
            this.panelVisible = false;
        };
        Dropdown.prototype.onFocus = function (event) {
            this.focus = true;
        };
        Dropdown.prototype.onBlur = function (event) {
            this.focus = false;
            this.onModelTouched();
        };
        Dropdown.prototype.onKeydown = function (event) {
            var selectedItemIndex = this.findOptionIndex(this.selectedOption.value, this.optionsToDisplay);
            switch (event.which) {
                //down
                case 40:
                    if (!this.panelVisible && event.altKey) {
                        this.show(this.panel, this.container);
                    } else {
                        if (selectedItemIndex != -1) {
                            var nextItemIndex = selectedItemIndex + 1;
                            if (nextItemIndex != this.optionsToDisplay.length) {
                                this.selectedOption = this.optionsToDisplay[nextItemIndex];
                                this.selectedOptionUpdated = true;
                                this.selectItem(event, this.selectedOption);
                            }
                        } else {
                            this.selectedOption = this.optionsToDisplay[0];
                        }
                    }
                    event.preventDefault();
                    break;
                //up
                case 38:
                    if (selectedItemIndex > 0) {
                        var prevItemIndex = selectedItemIndex - 1;
                        this.selectedOption = this.optionsToDisplay[prevItemIndex];
                        this.selectedOptionUpdated = true;
                        this.selectItem(event, this.selectedOption);
                    }
                    event.preventDefault();
                    break;
                //enter
                case 13:
                    this.hide();
                    event.preventDefault();
                    break;
                //escape and tab
                case 27:
                case 9:
                    this.panelVisible = false;
                    break;
            }
        };
        Dropdown.prototype.findListItem = function (element) {
            if (element.nodeName == 'LI') {
                return element;
            } else {
                var parent_1 = element.parentElement;
                while (parent_1.nodeName != 'LI') {
                    parent_1 = parent_1.parentElement;
                }
                return parent_1;
            }
        };
        Dropdown.prototype.findOptionIndex = function (val, opts) {
            var index = -1;
            if (opts) {
                for (var i = 0; i < opts.length; i++) {
                    if (val == null && opts[i].value == null || this.domHandler.equals(val, opts[i].value)) {
                        index = i;
                        break;
                    }
                }
            }
            return index;
        };
        Dropdown.prototype.findOption = function (val, opts) {
            var index = this.findOptionIndex(val, opts);
            return index != -1 ? opts[index] : null;
        };
        Dropdown.prototype.onFilter = function (event) {
            if (this.options && this.options.length) {
                var val = event.target.value.toLowerCase();
                this.optionsToDisplay = [];
                for (var i = 0; i < this.options.length; i++) {
                    var option = this.options[i];
                    if (option.label.toLowerCase().startsWith(val)) {
                        this.optionsToDisplay.push(option);
                    }
                }
                this.optionsChanged = true;
            }
        };
        Dropdown.prototype.applyFocus = function () {
            if (this.editable) this.domHandler.findSingle(this.el.nativeElement, '.ui-dropdown-label.ui-inputtext').focus();else this.domHandler.findSingle(this.el.nativeElement, 'input[readonly]').focus();
        };
        Dropdown.prototype.ngOnDestroy = function () {
            this.documentClickListener();
            this.initialized = false;
            if (this.appendTo) {
                this.el.nativeElement.appendChild(this.container);
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], Dropdown.prototype, "options", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Dropdown.prototype, "onChange", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Dropdown.prototype, "scrollHeight", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Dropdown.prototype, "filter", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Dropdown.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Dropdown.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Dropdown.prototype, "disabled", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Dropdown.prototype, "autoWidth", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Dropdown.prototype, "required", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Dropdown.prototype, "editable", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Dropdown.prototype, "appendTo", void 0);
        __decorate([core_1.ContentChild(core_1.TemplateRef), __metadata('design:type', core_1.TemplateRef)], Dropdown.prototype, "itemTemplate", void 0);
        Dropdown = __decorate([core_1.Component({
            selector: 'p-dropdown',
            template: "\n         <div [ngClass]=\"{'ui-dropdown ui-widget ui-state-default ui-corner-all ui-helper-clearfix':true,\n            'ui-state-hover':hover&&!disabled,'ui-state-focus':focus,'ui-state-disabled':disabled,'ui-dropdown-open':panelVisible}\" \n            (mouseenter)=\"onMouseenter($event)\" (mouseleave)=\"onMouseleave($event)\" (click)=\"onMouseclick($event,in)\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <select [required]=\"required\" tabindex=\"-1\">\n                    <option *ngFor=\"let option of options\" [value]=\"option.value\" [selected]=\"selectedOption == option\">{{option.label}}</option>\n                </select>\n            </div>\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #in type=\"text\" readonly (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\" (keydown)=\"onKeydown($event)\">\n            </div>\n            <label [ngClass]=\"{'ui-dropdown-label ui-inputtext ui-corner-all':true,'ui-dropdown-label-empty':!label}\" *ngIf=\"!editable\">{{label||'empty'}}</label>\n            <input type=\"text\" class=\"ui-dropdown-label ui-inputtext ui-corner-all\" *ngIf=\"editable\" [value]=\"label\"\n                        (click)=\"onInputClick($event)\" (input)=\"onInputChange($event)\" (focus)=\"hide()\">\n            <div class=\"ui-dropdown-trigger ui-state-default ui-corner-right\" [ngClass]=\"{'ui-state-hover':hover&&!disabled,'ui-state-focus':focus}\">\n                <span class=\"fa fa-fw fa-caret-down ui-c\"></span>\n            </div>\n            <div class=\"ui-dropdown-panel ui-widget-content ui-corner-all ui-helper-hidden ui-shadow\" \n                [style.display]=\"panelVisible ? 'block' : 'none'\">\n                <div *ngIf=\"filter\" class=\"ui-dropdown-filter-container\" (input)=\"onFilter($event)\" (click)=\"$event.stopPropagation()\">\n                    <input type=\"text\" autocomplete=\"off\" class=\"ui-dropdown-filter ui-inputtext ui-widget ui-state-default ui-corner-all\">\n                    <span class=\"fa fa-search\"></span>\n                </div>\n                <div class=\"ui-dropdown-items-wrapper\" [style.max-height]=\"scrollHeight||'auto'\">\n                    <ul class=\"ui-dropdown-items ui-dropdown-list ui-widget-content ui-widget ui-corner-all ui-helper-reset\">\n                        <li #item *ngFor=\"let option of optionsToDisplay;let i=index\" \n                            [ngClass]=\"{'ui-dropdown-item ui-corner-all':true, 'ui-state-hover':hoveredItem == item,'ui-state-highlight':(selectedOption == option)}\"\n                            (click)=\"onItemClick($event, option)\" (mouseenter)=\"hoveredItem=item\" (mouseleave)=\"hoveredItem=null\">\n                            <span *ngIf=\"!itemTemplate\">{{option.label}}</span>\n                            <template [pTemplateWrapper]=\"itemTemplate\" [item]=\"option\" *ngIf=\"itemTemplate\"></template>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler, exports.DROPDOWN_VALUE_ACCESSOR]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer, core_1.IterableDiffers])], Dropdown);
        return Dropdown;
    }();
    exports.Dropdown = Dropdown;
    var DropdownModule = function () {
        function DropdownModule() {}
        DropdownModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule, shared_1.SharedModule],
            exports: [Dropdown, shared_1.SharedModule],
            declarations: [Dropdown]
        }), __metadata('design:paramtypes', [])], DropdownModule);
        return DropdownModule;
    }();
    exports.DropdownModule = DropdownModule;
    

    return module.exports;
});
$__System.registerDynamic("39", ["3", "9", "21", "26", "23"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var shared_1 = $__require("21");
    var domhandler_1 = $__require("26");
    var forms_1 = $__require("23");
    exports.EDITOR_VALUE_ACCESSOR = {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return Editor;
        }),
        multi: true
    };
    var Editor = function () {
        function Editor(el, domHandler) {
            this.el = el;
            this.domHandler = domHandler;
            this.onTextChange = new core_1.EventEmitter();
            this.onSelectionChange = new core_1.EventEmitter();
            this.onModelChange = function () {};
            this.onModelTouched = function () {};
        }
        Editor.prototype.ngAfterViewInit = function () {
            var _this = this;
            var editorElement = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-editor-content');
            var toolbarElement = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-editor-toolbar');
            this.quill = new Quill(editorElement, {
                modules: {
                    toolbar: toolbarElement
                },
                placeholder: this.placeholder,
                readOnly: this.readOnly,
                theme: 'snow',
                formats: this.formats
            });
            if (this.value) {
                this.quill.pasteHTML(this.value);
            }
            this.quill.on('text-change', function (delta, source) {
                var html = editorElement.children[0].innerHTML;
                var text = _this.quill.getText();
                if (html == '<p><br></p>') {
                    html = null;
                }
                _this.onTextChange.emit({
                    htmlValue: html,
                    textValue: text,
                    delta: delta,
                    source: source
                });
                _this.onModelChange(html);
            });
            this.quill.on('selection-change', function (range, oldRange, source) {
                _this.onSelectionChange.emit({
                    range: range,
                    oldRange: oldRange,
                    source: source
                });
            });
        };
        Editor.prototype.writeValue = function (value) {
            this.value = value;
            if (this.quill) {
                if (value) this.quill.pasteHTML(value);else this.quill.setText('');
            }
        };
        Editor.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        Editor.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Editor.prototype, "onTextChange", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Editor.prototype, "onSelectionChange", void 0);
        __decorate([core_1.ContentChild(shared_1.Header), __metadata('design:type', Object)], Editor.prototype, "toolbar", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Editor.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Editor.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Editor.prototype, "placeholder", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Editor.prototype, "readOnly", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Array)], Editor.prototype, "formats", void 0);
        Editor = __decorate([core_1.Component({
            selector: 'p-editor',
            template: "\n        <div [ngClass]=\"'ui-widget ui-editor-container ui-corner-all'\" [class]=\"styleClass\">\n            <div class=\"ui-editor-toolbar ui-widget-header ui-corner-top\" *ngIf=\"toolbar\">\n                <ng-content select=\"header\"></ng-content>\n            </div>\n            <div class=\"ui-editor-toolbar ui-widget-header ui-corner-top\" *ngIf=\"!toolbar\">\n                <span class=\"ql-formats\">\n                    <select class=\"ql-header\">\n                      <option value=\"1\">Heading</option>\n                      <option value=\"2\">Subheading</option>\n                      <option selected>Normal</option>\n                    </select>\n                    <select class=\"ql-font\">\n                      <option selected>Sans Serif</option>\n                      <option value=\"serif\">Serif</option>\n                      <option value=\"monospace\">Monospace</option>\n                    </select>\n                </span>\n                <span class=\"ql-formats\">\n                    <button class=\"ql-bold\"></button>\n                    <button class=\"ql-italic\"></button>\n                    <button class=\"ql-underline\"></button>\n                </span>\n                <span class=\"ql-formats\">\n                    <select class=\"ql-color\"></select>\n                    <select class=\"ql-background\"></select>\n                </span>\n                <span class=\"ql-formats\">\n                    <button class=\"ql-list\" value=\"ordered\"></button>\n                    <button class=\"ql-list\" value=\"bullet\"></button>\n                    <select class=\"ql-align\">\n                        <option selected></option>\n                        <option value=\"center\"></option>\n                        <option value=\"right\"></option>\n                        <option value=\"justify\"></option>\n                    </select>\n                </span>\n                <span class=\"ql-formats\">\n                    <button class=\"ql-link\"></button>\n                    <button class=\"ql-image\"></button>\n                    <button class=\"ql-code-block\"></button>\n                </span>\n                <span class=\"ql-formats\">\n                    <button class=\"ql-clean\"></button>\n                </span>\n            </div>\n            <div class=\"ui-editor-content\" [ngStyle]=\"style\"></div>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler, exports.EDITOR_VALUE_ACCESSOR]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler])], Editor);
        return Editor;
    }();
    exports.Editor = Editor;
    var EditorModule = function () {
        function EditorModule() {}
        EditorModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Editor],
            declarations: [Editor]
        }), __metadata('design:paramtypes', [])], EditorModule);
        return EditorModule;
    }();
    exports.EditorModule = EditorModule;
    

    return module.exports;
});
$__System.registerDynamic("3a", ["3", "9"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var Fieldset = function () {
        function Fieldset() {
            this.collapsed = false;
            this.onBeforeToggle = new core_1.EventEmitter();
            this.onAfterToggle = new core_1.EventEmitter();
        }
        Fieldset.prototype.onLegendMouseenter = function (event) {
            if (this.toggleable) {
                this.hover = true;
            }
        };
        Fieldset.prototype.onLegendMouseleave = function (event) {
            if (this.toggleable) {
                this.hover = false;
            }
        };
        Fieldset.prototype.toggle = function (event) {
            var _this = this;
            if (this.toggleable) {
                this.animating = true;
                this.onBeforeToggle.emit({ originalEvent: event, collapsed: this.collapsed });
                if (this.collapsed) this.expand(event);else this.collapse(event);
                this.onAfterToggle.emit({ originalEvent: event, collapsed: this.collapsed });
                //TODO: Use onDone of animate callback instead with RC6
                setTimeout(function () {
                    _this.animating = false;
                }, 400);
            }
        };
        Fieldset.prototype.expand = function (event) {
            this.collapsed = false;
        };
        Fieldset.prototype.collapse = function (event) {
            this.collapsed = true;
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], Fieldset.prototype, "legend", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Fieldset.prototype, "toggleable", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Fieldset.prototype, "collapsed", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Fieldset.prototype, "onBeforeToggle", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Fieldset.prototype, "onAfterToggle", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Fieldset.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Fieldset.prototype, "styleClass", void 0);
        Fieldset = __decorate([core_1.Component({
            selector: 'p-fieldset',
            template: "\n        <fieldset [ngClass]=\"{'ui-fieldset ui-widget ui-widget-content ui-corner-all': true, 'ui-fieldset-toggleable': toggleable}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <legend class=\"ui-fieldset-legend ui-corner-all ui-state-default ui-unselectable-text\" \n                (mouseenter)=\"onLegendMouseenter($event)\" (mouseleave)=\"onLegendMouseleave($event)\" (click)=\"toggle($event)\" [ngClass]=\"{'ui-state-hover':hover}\">\n                <span *ngIf=\"toggleable\" class=\"ui-fieldset-toggler fa fa-w\" [ngClass]=\"{'fa-minus': !collapsed,'fa-plus':collapsed}\"></span>\n                {{legend}}\n            </legend>\n            <div class=\"ui-fieldset-content-wrapper\" [@fieldsetContent]=\"collapsed ? 'hidden' : 'visible'\" \n                        [ngClass]=\"{'ui-fieldset-content-wrapper-overflown': collapsed||animating}\">\n                <div class=\"ui-fieldset-content\">\n                    <ng-content></ng-content>\n                </div>\n            </div>\n        </fieldset>\n    ",
            animations: [core_1.trigger('fieldsetContent', [core_1.state('hidden', core_1.style({
                height: '0px'
            })), core_1.state('visible', core_1.style({
                height: '*'
            })), core_1.transition('visible => hidden', core_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')), core_1.transition('hidden => visible', core_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))])]
        }), __metadata('design:paramtypes', [])], Fieldset);
        return Fieldset;
    }();
    exports.Fieldset = Fieldset;
    var FieldsetModule = function () {
        function FieldsetModule() {}
        FieldsetModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Fieldset],
            declarations: [Fieldset]
        }), __metadata('design:paramtypes', [])], FieldsetModule);
        return FieldsetModule;
    }();
    exports.FieldsetModule = FieldsetModule;
    

    return module.exports;
});
$__System.registerDynamic("3b", ["3", "9", "5", "25", "3c", "3d", "21"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var platform_browser_1 = $__require("5");
    var button_1 = $__require("25");
    var messages_1 = $__require("3c");
    var progressbar_1 = $__require("3d");
    var shared_1 = $__require("21");
    var FileUpload = function () {
        function FileUpload(sanitizer) {
            this.sanitizer = sanitizer;
            this.invalidFileSizeMessageSummary = '{0}: Invalid file size, ';
            this.invalidFileSizeMessageDetail = 'maximum upload size is {0}.';
            this.previewWidth = 50;
            this.onBeforeUpload = new core_1.EventEmitter();
            this.onUpload = new core_1.EventEmitter();
            this.onError = new core_1.EventEmitter();
            this.onClear = new core_1.EventEmitter();
            this.onSelect = new core_1.EventEmitter();
            this.progress = 0;
        }
        FileUpload.prototype.ngOnInit = function () {
            this.files = [];
        };
        FileUpload.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.templates.forEach(function (item) {
                switch (item.type) {
                    case 'file':
                        _this.fileTemplate = item.template;
                        break;
                    case 'content':
                        _this.contentTemplate = item.template;
                        break;
                    default:
                        _this.fileTemplate = item.template;
                        break;
                }
            });
        };
        FileUpload.prototype.onChooseClick = function (event, fileInput) {
            fileInput.value = null;
            fileInput.click();
        };
        FileUpload.prototype.onFileSelect = function (event) {
            this.msgs = [];
            var files = event.dataTransfer ? event.dataTransfer.files : event.target.files;
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                if (this.validate(file)) {
                    if (this.isImage(file)) {
                        file.objectURL = this.sanitizer.bypassSecurityTrustUrl(window.URL.createObjectURL(files[i]));
                    }
                    this.files.push(files[i]);
                }
            }
            this.onSelect.emit({ originalEvent: event, files: files });
            if (this.files && this.auto) {
                this.upload();
            }
        };
        FileUpload.prototype.validate = function (file) {
            if (this.maxFileSize && file.size > this.maxFileSize) {
                this.msgs.push({
                    severity: 'error',
                    summary: this.invalidFileSizeMessageSummary.replace('{0}', file.name),
                    detail: this.invalidFileSizeMessageDetail.replace('{0}', this.formatSize(this.maxFileSize))
                });
                return false;
            }
            return true;
        };
        FileUpload.prototype.isImage = function (file) {
            return (/^image\//.test(file.type)
            );
        };
        FileUpload.prototype.onImageLoad = function (img) {
            window.URL.revokeObjectURL(img.src);
        };
        FileUpload.prototype.upload = function () {
            var _this = this;
            this.msgs = [];
            var xhr = new XMLHttpRequest(),
                formData = new FormData();
            for (var i = 0; i < this.files.length; i++) {
                formData.append(this.name, this.files[i], this.files[i].name);
            }
            xhr.upload.addEventListener('progress', function (e) {
                if (e.lengthComputable) {
                    _this.progress = Math.round(e.loaded * 100 / e.total);
                }
            }, false);
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    _this.progress = 0;
                    if (xhr.status == 200) _this.onUpload.emit({ xhr: xhr, files: _this.files });else _this.onError.emit({ xhr: xhr, files: _this.files });
                    _this.clear();
                }
            };
            xhr.open('POST', this.url, true);
            this.onBeforeUpload.emit({
                'xhr': xhr,
                'formData': formData
            });
            xhr.send(formData);
        };
        FileUpload.prototype.clear = function () {
            this.files = [];
            this.onClear.emit();
        };
        FileUpload.prototype.remove = function (index) {
            this.files.splice(index, 1);
        };
        FileUpload.prototype.hasFiles = function () {
            return this.files && this.files.length > 0;
        };
        FileUpload.prototype.onDragEnter = function (e) {
            if (!this.disabled) {
                e.stopPropagation();
                e.preventDefault();
            }
        };
        FileUpload.prototype.onDragOver = function (e) {
            if (!this.disabled) {
                this.dragHighlight = true;
                e.stopPropagation();
                e.preventDefault();
            }
        };
        FileUpload.prototype.onDragLeave = function (e) {
            if (!this.disabled) {
                this.dragHighlight = false;
            }
        };
        FileUpload.prototype.onDrop = function (e) {
            if (!this.disabled) {
                this.dragHighlight = false;
                e.stopPropagation();
                e.preventDefault();
                this.onFileSelect(e);
            }
        };
        FileUpload.prototype.formatSize = function (bytes) {
            if (bytes == 0) {
                return '0 B';
            }
            var k = 1000,
                dm = 3,
                sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
                i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], FileUpload.prototype, "name", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], FileUpload.prototype, "url", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], FileUpload.prototype, "multiple", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], FileUpload.prototype, "accept", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], FileUpload.prototype, "disabled", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], FileUpload.prototype, "auto", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], FileUpload.prototype, "maxFileSize", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], FileUpload.prototype, "invalidFileSizeMessageSummary", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], FileUpload.prototype, "invalidFileSizeMessageDetail", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], FileUpload.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], FileUpload.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], FileUpload.prototype, "previewWidth", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], FileUpload.prototype, "onBeforeUpload", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], FileUpload.prototype, "onUpload", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], FileUpload.prototype, "onError", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], FileUpload.prototype, "onClear", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], FileUpload.prototype, "onSelect", void 0);
        __decorate([core_1.ContentChildren(shared_1.PrimeTemplate), __metadata('design:type', core_1.QueryList)], FileUpload.prototype, "templates", void 0);
        FileUpload = __decorate([core_1.Component({
            selector: 'p-fileUpload',
            template: "\n        <div [ngClass]=\"'ui-fileupload ui-widget'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-fileupload-buttonbar ui-widget-header ui-corner-top\">\n                <button type=\"button\" label=\"Choose\" icon=\"fa-plus\" pButton class=\"ui-fileupload-choose\" (click)=\"onChooseClick($event, fileinput)\" [disabled]=\"disabled\"> \n                    <input #fileinput type=\"file\" (change)=\"onFileSelect($event)\" [multiple]=\"multiple\" [accept]=\"accept\" [disabled]=\"disabled\">\n                </button>\n\n                <button type=\"button\" label=\"Upload\" icon=\"fa-upload\" pButton (click)=\"upload()\" [disabled]=\"!hasFiles()\"></button>\n                <button type=\"button\" label=\"Cancel\" icon=\"fa-close\" pButton (click)=\"clear()\" [disabled]=\"!hasFiles()\"></button>\n            </div>\n            <div [ngClass]=\"{'ui-fileupload-content ui-widget-content ui-corner-bottom':true,'ui-fileupload-highlight':dragHighlight}\" \n                (dragenter)=\"onDragEnter($event)\" (dragover)=\"onDragOver($event)\" (dragleave)=\"onDragLeave($event)\" (drop)=\"onDrop($event)\">\n                <p-progressBar [value]=\"progress\" [showValue]=\"false\" *ngIf=\"hasFiles()\"></p-progressBar>\n                \n                <p-messages [value]=\"msgs\"></p-messages>\n                \n                <div class=\"ui-fileupload-files\" *ngIf=\"hasFiles()\">\n                    <div *ngIf=\"!fileTemplate\">\n                        <div class=\"ui-fileupload-row\" *ngFor=\"let file of files\">\n                            <div><img [src]=\"file.objectURL\" *ngIf=\"isImage(file)\" [width]=\"previewWidth\" /></div>\n                            <div>{{file.name}}</div>\n                            <div>{{formatSize(file.size)}}</div>\n                            <div><button type=\"button\" icon=\"fa-close\" pButton (click)=\"remove(i)\"></button></div>\n                        </div>\n                    </div>\n                    <div *ngIf=\"fileTemplate\">\n                        <template ngFor [ngForOf]=\"files\" [ngForTemplate]=\"fileTemplate\"></template>\n                    </div>\n                </div>\n                \n                <p-templateLoader [template]=\"contentTemplate\"></p-templateLoader>\n            </div>\n        </div>\n    "
        }), __metadata('design:paramtypes', [platform_browser_1.DomSanitizer])], FileUpload);
        return FileUpload;
    }();
    exports.FileUpload = FileUpload;
    var FileUploadModule = function () {
        function FileUploadModule() {}
        FileUploadModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule, shared_1.SharedModule, button_1.ButtonModule, progressbar_1.ProgressBarModule, messages_1.MessagesModule],
            exports: [FileUpload, shared_1.SharedModule, button_1.ButtonModule, progressbar_1.ProgressBarModule, messages_1.MessagesModule],
            declarations: [FileUpload]
        }), __metadata('design:paramtypes', [])], FileUploadModule);
        return FileUploadModule;
    }();
    exports.FileUploadModule = FileUploadModule;
    

    return module.exports;
});
$__System.registerDynamic("3e", ["3", "9", "26"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var Galleria = function () {
        function Galleria(el, domHandler, differs) {
            this.el = el;
            this.domHandler = domHandler;
            this.panelWidth = 600;
            this.panelHeight = 400;
            this.frameWidth = 60;
            this.frameHeight = 40;
            this.activeIndex = 0;
            this.showFilmstrip = true;
            this.autoPlay = true;
            this.transitionInterval = 4000;
            this.showCaption = true;
            this.onImageClicked = new core_1.EventEmitter();
            this.stripLeft = 0;
            this.differ = differs.find([]).create(null);
        }
        Galleria.prototype.ngAfterViewChecked = function () {
            if (this.imagesChanged) {
                this.stopSlideshow();
                this.render();
                this.imagesChanged = false;
            }
        };
        Galleria.prototype.ngDoCheck = function () {
            var changes = this.differ.diff(this.images);
            if (changes && this.initialized) {
                this.activeIndex = 0;
                this.imagesChanged = true;
            }
        };
        Galleria.prototype.ngAfterViewInit = function () {
            this.container = this.el.nativeElement.children[0];
            this.panelWrapper = this.domHandler.findSingle(this.el.nativeElement, 'ul.ui-galleria-panel-wrapper');
            this.initialized = true;
            if (this.showFilmstrip) {
                this.stripWrapper = this.domHandler.findSingle(this.container, 'div.ui-galleria-filmstrip-wrapper');
                this.strip = this.domHandler.findSingle(this.stripWrapper, 'ul.ui-galleria-filmstrip');
            }
            if (this.images && this.images.length) {
                this.render();
            }
        };
        Galleria.prototype.render = function () {
            this.panels = this.domHandler.find(this.panelWrapper, 'li.ui-galleria-panel');
            if (this.showFilmstrip) {
                this.frames = this.domHandler.find(this.strip, 'li.ui-galleria-frame');
                this.stripWrapper.style.width = this.domHandler.width(this.panelWrapper) - 50 + 'px';
                this.stripWrapper.style.height = this.frameHeight + 'px';
            }
            if (this.showCaption) {
                this.caption = this.domHandler.findSingle(this.container, 'div.ui-galleria-caption');
                this.caption.style.bottom = this.showFilmstrip ? this.domHandler.getOuterHeight(this.stripWrapper, true) + 'px' : 0 + 'px';
                this.caption.style.width = this.domHandler.width(this.panelWrapper) + 'px';
            }
            if (this.autoPlay) {
                this.startSlideshow();
            }
            this.container.style.visibility = 'visible';
        };
        Galleria.prototype.startSlideshow = function () {
            var _this = this;
            this.interval = setInterval(function () {
                _this.next();
            }, this.transitionInterval);
            this.slideshowActive = true;
        };
        Galleria.prototype.stopSlideshow = function () {
            if (this.interval) {
                clearInterval(this.interval);
            }
            this.slideshowActive = false;
        };
        Galleria.prototype.clickNavRight = function () {
            if (this.slideshowActive) {
                this.stopSlideshow();
            }
            this.next();
        };
        Galleria.prototype.clickNavLeft = function () {
            if (this.slideshowActive) {
                this.stopSlideshow();
            }
            this.prev();
        };
        Galleria.prototype.frameClick = function (frame) {
            if (this.slideshowActive) {
                this.stopSlideshow();
            }
            this.select(this.domHandler.index(frame), false);
        };
        Galleria.prototype.prev = function () {
            if (this.activeIndex !== 0) {
                this.select(this.activeIndex - 1, true);
            }
        };
        Galleria.prototype.next = function () {
            if (this.activeIndex !== this.panels.length - 1) {
                this.select(this.activeIndex + 1, true);
            } else {
                this.select(0, false);
                this.stripLeft = 0;
            }
        };
        Galleria.prototype.select = function (index, reposition) {
            if (index !== this.activeIndex) {
                var oldPanel = this.panels[this.activeIndex],
                    newPanel = this.panels[index];
                this.domHandler.fadeIn(newPanel, 500);
                if (this.showFilmstrip) {
                    var oldFrame = this.frames[this.activeIndex],
                        newFrame = this.frames[index];
                    if (reposition === undefined || reposition === true) {
                        var frameLeft = newFrame.offsetLeft,
                            stepFactor = this.frameWidth + parseInt(getComputedStyle(newFrame)['margin-right'], 10),
                            stripLeft = this.strip.offsetLeft,
                            frameViewportLeft = frameLeft + stripLeft,
                            frameViewportRight = frameViewportLeft + this.frameWidth;
                        if (frameViewportRight > this.domHandler.width(this.stripWrapper)) this.stripLeft -= stepFactor;else if (frameViewportLeft < 0) this.stripLeft += stepFactor;
                    }
                }
                this.activeIndex = index;
            }
        };
        Galleria.prototype.clickImage = function (event, image, i) {
            this.onImageClicked.emit({ originalEvent: event, image: image, index: i });
        };
        Galleria.prototype.ngOnDestroy = function () {
            this.stopSlideshow();
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], Galleria.prototype, "images", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Galleria.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Galleria.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Galleria.prototype, "panelWidth", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Galleria.prototype, "panelHeight", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Galleria.prototype, "frameWidth", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Galleria.prototype, "frameHeight", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Galleria.prototype, "activeIndex", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Galleria.prototype, "showFilmstrip", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Galleria.prototype, "autoPlay", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Galleria.prototype, "transitionInterval", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Galleria.prototype, "showCaption", void 0);
        __decorate([core_1.Output(), __metadata('design:type', Object)], Galleria.prototype, "onImageClicked", void 0);
        Galleria = __decorate([core_1.Component({
            selector: 'p-galleria',
            template: "\n        <div [ngClass]=\"{'ui-galleria ui-widget ui-widget-content ui-corner-all':true}\" [ngStyle]=\"style\" [class]=\"styleClass\" [style.width.px]=\"panelWidth\">\n            <ul class=\"ui-galleria-panel-wrapper\" [style.width.px]=\"panelWidth\" [style.height.px]=\"panelHeight\">\n                <li *ngFor=\"let image of images;let i=index\" class=\"ui-galleria-panel\" [ngClass]=\"{'ui-helper-hidden':i!=activeIndex}\"\n                    [style.width.px]=\"panelWidth\" [style.height.px]=\"panelHeight\" (click)=\"clickImage($event,image,i)\">\n                    <img class=\"ui-panel-images\" [src]=\"image.source\" [alt]=\"image.alt\" [title]=\"image.title\"/>\n                </li>\n            </ul>\n            <div [ngClass]=\"{'ui-galleria-filmstrip-wrapper':true}\" *ngIf=\"showFilmstrip\">\n                <ul class=\"ui-galleria-filmstrip\" style=\"transition:left 1s\" [style.left.px]=\"stripLeft\">\n                    <li #frame *ngFor=\"let image of images;let i=index\" [ngClass]=\"{'ui-galleria-frame-active':i==activeIndex}\" class=\"ui-galleria-frame\" (click)=\"frameClick(frame)\"\n                        [style.width.px]=\"frameWidth\" [style.height.px]=\"frameHeight\" [style.transition]=\"'opacity 0.75s ease'\">\n                        <div class=\"ui-galleria-frame-content\">\n                            <img [src]=\"image.source\" [alt]=\"image.alt\" [title]=\"image.title\" class=\"ui-galleria-frame-image\"\n                                [style.width.px]=\"frameWidth\" [style.height.px]=\"frameHeight\">\n                        </div>\n                    </li>\n                </ul>\n            </div>\n            <div class=\"ui-galleria-nav-prev fa fa-fw fa-chevron-circle-left\" (click)=\"clickNavLeft()\" [style.bottom.px]=\"frameHeight/2\" *ngIf=\"activeIndex !== 0\"></div>\n            <div class=\"ui-galleria-nav-next fa fa-fw fa-chevron-circle-right\" (click)=\"clickNavRight()\" [style.bottom.px]=\"frameHeight/2\"></div>\n            <div class=\"ui-galleria-caption\" *ngIf=\"showCaption&&images\" style=\"display:block\">\n                <h4>{{images[activeIndex]?.title}}</h4><p>{{images[activeIndex]?.alt}}</p>\n            </div>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.IterableDiffers])], Galleria);
        return Galleria;
    }();
    exports.Galleria = Galleria;
    var GalleriaModule = function () {
        function GalleriaModule() {}
        GalleriaModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Galleria],
            declarations: [Galleria]
        }), __metadata('design:paramtypes', [])], GalleriaModule);
        return GalleriaModule;
    }();
    exports.GalleriaModule = GalleriaModule;
    

    return module.exports;
});
$__System.registerDynamic("3f", ["3", "9"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var GMap = function () {
        function GMap(el, differs, cd, zone) {
            this.el = el;
            this.cd = cd;
            this.zone = zone;
            this.onMapClick = new core_1.EventEmitter();
            this.onOverlayClick = new core_1.EventEmitter();
            this.onOverlayDragStart = new core_1.EventEmitter();
            this.onOverlayDrag = new core_1.EventEmitter();
            this.onOverlayDragEnd = new core_1.EventEmitter();
            this.differ = differs.find([]).create(null);
        }
        GMap.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.map = new google.maps.Map(this.el.nativeElement.children[0], this.options);
            if (this.overlays) {
                for (var _i = 0, _a = this.overlays; _i < _a.length; _i++) {
                    var overlay = _a[_i];
                    overlay.setMap(this.map);
                    this.bindOverlayEvents(overlay);
                }
            }
            this.map.addListener('click', function (event) {
                _this.zone.run(function () {
                    _this.onMapClick.emit(event);
                });
            });
        };
        GMap.prototype.bindOverlayEvents = function (overlay) {
            var _this = this;
            overlay.addListener('click', function (event) {
                _this.zone.run(function () {
                    _this.onOverlayClick.emit({
                        originalEvent: event,
                        'overlay': overlay,
                        map: _this.map
                    });
                });
            });
            if (overlay.getDraggable()) {
                this.bindDragEvents(overlay);
            }
        };
        GMap.prototype.ngDoCheck = function () {
            var _this = this;
            var changes = this.differ.diff(this.overlays);
            if (changes && this.map) {
                changes.forEachRemovedItem(function (record) {
                    record.item.setMap(null);
                });
                changes.forEachAddedItem(function (record) {
                    record.item.setMap(_this.map);
                    record.item.addListener('click', function (event) {
                        _this.zone.run(function () {
                            _this.onOverlayClick.emit({
                                originalEvent: event,
                                overlay: record.item,
                                map: _this.map
                            });
                        });
                    });
                    if (record.item.getDraggable()) {
                        _this.bindDragEvents(record.item);
                    }
                });
            }
        };
        GMap.prototype.bindDragEvents = function (overlay) {
            var _this = this;
            overlay.addListener('dragstart', function (event) {
                _this.zone.run(function () {
                    _this.onOverlayDragStart.emit({
                        originalEvent: event,
                        overlay: overlay,
                        map: _this.map
                    });
                });
            });
            overlay.addListener('drag', function (event) {
                _this.zone.run(function () {
                    _this.onOverlayDrag.emit({
                        originalEvent: event,
                        overlay: overlay,
                        map: _this.map
                    });
                });
            });
            overlay.addListener('dragend', function (event) {
                _this.zone.run(function () {
                    _this.onOverlayDragEnd.emit({
                        originalEvent: event,
                        overlay: overlay,
                        map: _this.map
                    });
                });
            });
        };
        GMap.prototype.getMap = function () {
            return this.map;
        };
        __decorate([core_1.Input(), __metadata('design:type', Object)], GMap.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], GMap.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], GMap.prototype, "options", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Array)], GMap.prototype, "overlays", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], GMap.prototype, "onMapClick", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], GMap.prototype, "onOverlayClick", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], GMap.prototype, "onOverlayDragStart", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], GMap.prototype, "onOverlayDrag", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], GMap.prototype, "onOverlayDragEnd", void 0);
        GMap = __decorate([core_1.Component({
            selector: 'p-gmap',
            template: "<div [ngStyle]=\"style\" [class]=\"styleClass\"></div>"
        }), __metadata('design:paramtypes', [core_1.ElementRef, core_1.IterableDiffers, core_1.ChangeDetectorRef, core_1.NgZone])], GMap);
        return GMap;
    }();
    exports.GMap = GMap;
    var GMapModule = function () {
        function GMapModule() {}
        GMapModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [GMap],
            declarations: [GMap]
        }), __metadata('design:paramtypes', [])], GMapModule);
        return GMapModule;
    }();
    exports.GMapModule = GMapModule;
    

    return module.exports;
});
$__System.registerDynamic("40", ["3", "9", "26"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var Growl = function () {
        function Growl(el, domHandler, differs) {
            this.el = el;
            this.domHandler = domHandler;
            this.sticky = false;
            this.life = 3000;
            this.differ = differs.find([]).create(null);
            this.zIndex = domhandler_1.DomHandler.zindex;
        }
        Growl.prototype.ngAfterViewInit = function () {
            this.container = this.el.nativeElement.children[0];
        };
        Growl.prototype.ngDoCheck = function () {
            var _this = this;
            var changes = this.differ.diff(this.value);
            if (changes) {
                if (this.stopDoCheckPropagation) {
                    this.stopDoCheckPropagation = false;
                } else if (this.value && this.value.length) {
                    this.zIndex = ++domhandler_1.DomHandler.zindex;
                    this.domHandler.fadeIn(this.container, 250);
                    if (!this.sticky) {
                        if (this.timeout) {
                            clearTimeout(this.timeout);
                        }
                        this.timeout = setTimeout(function () {
                            _this.removeAll();
                        }, this.life);
                    }
                }
            }
        };
        Growl.prototype.remove = function (msg, msgel) {
            var _this = this;
            this.stopDoCheckPropagation = true;
            this.domHandler.fadeOut(msgel, 250);
            setTimeout(function () {
                _this.value.splice(_this.findMessageIndex(msg), 1);
            }, 250);
        };
        Growl.prototype.removeAll = function () {
            var _this = this;
            if (this.value && this.value.length) {
                this.stopDoCheckPropagation = true;
                this.domHandler.fadeOut(this.container, 250);
                setTimeout(function () {
                    _this.value.splice(0, _this.value.length);
                }, 250);
            }
        };
        Growl.prototype.findMessageIndex = function (msg) {
            var index = -1;
            if (this.value && this.value.length) {
                for (var i = 0; i < this.value.length; i++) {
                    if (this.value[i] == msg) {
                        index = i;
                        break;
                    }
                }
            }
            return index;
        };
        Growl.prototype.ngOnDestroy = function () {
            if (!this.sticky) {
                clearTimeout(this.timeout);
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Growl.prototype, "sticky", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Growl.prototype, "life", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Array)], Growl.prototype, "value", void 0);
        Growl = __decorate([core_1.Component({
            selector: 'p-growl',
            template: "\n        <div class=\"ui-growl ui-widget\" [style.zIndex]=\"zIndex\">\n            <div #msgel *ngFor=\"let msg of value\" class=\"ui-growl-item-container ui-state-highlight ui-corner-all ui-shadow\" aria-live=\"polite\"\n                [ngClass]=\"{'ui-growl-message-info':msg.severity == 'info','ui-growl-message-warn':msg.severity == 'warn',\n                    'ui-growl-message-error':msg.severity == 'error','ui-growl-message-success':msg.severity == 'success'}\">\n                <div class=\"ui-growl-item\">\n                     <div class=\"ui-growl-icon-close fa fa-close\" (click)=\"remove(msg,msgel)\"></div>\n                     <span class=\"ui-growl-image fa fa-2x ui-growl-image-info\"\n                        [ngClass]=\"{'fa-info-circle':msg.severity == 'info','fa-warning':msg.severity == 'warn',\n                                'fa-close':msg.severity == 'error','fa-check':msg.severity == 'success'}\"></span>\n                     <div class=\"ui-growl-message\">\n                        <span class=\"ui-growl-title\">{{msg.summary}}</span>\n                        <p>{{msg.detail}}</p>\n                     </div>\n                     <div style=\"clear: both;\"></div>\n                </div>\n            </div>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.IterableDiffers])], Growl);
        return Growl;
    }();
    exports.Growl = Growl;
    var GrowlModule = function () {
        function GrowlModule() {}
        GrowlModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Growl],
            declarations: [Growl]
        }), __metadata('design:paramtypes', [])], GrowlModule);
        return GrowlModule;
    }();
    exports.GrowlModule = GrowlModule;
    

    return module.exports;
});
$__System.registerDynamic("41", ["3", "9", "26", "24", "23"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    /*
        Port of jQuery MaskedInput by DigitalBush as a Native Angular2 Component in Typescript without jQuery
        https://github.com/digitalBush/jquery.maskedinput/
        
        Copyright (c) 2007-2014 Josh Bush (digitalbush.com)
    
        Permission is hereby granted, free of charge, to any person
        obtaining a copy of this software and associated documentation
        files (the "Software"), to deal in the Software without
        restriction, including without limitation the rights to use,
        copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the
        Software is furnished to do so, subject to the following
        conditions:
    
        The above copyright notice and this permission notice shall be
        included in all copies or substantial portions of the Software.
    
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
        EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
        OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
        NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
        HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
        WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
        FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
        OTHER DEALINGS IN THE SOFTWARE.
    */
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var inputtext_1 = $__require("24");
    var forms_1 = $__require("23");
    exports.INPUTMASK_VALUE_ACCESSOR = {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return InputMask;
        }),
        multi: true
    };
    var InputMask = function () {
        function InputMask(el, domHandler) {
            this.el = el;
            this.domHandler = domHandler;
            this.slotChar = '_';
            this.autoClear = true;
            this.onComplete = new core_1.EventEmitter();
            this.onModelChange = function () {};
            this.onModelTouched = function () {};
        }
        InputMask.prototype.ngAfterViewInit = function () {
            this.input = this.el.nativeElement.children[0];
            this.tests = [];
            this.partialPosition = this.mask.length;
            this.len = this.mask.length;
            this.firstNonMaskPos = null;
            this.defs = {
                '9': '[0-9]',
                'a': '[A-Za-z]',
                '*': '[A-Za-z0-9]'
            };
            var ua = this.domHandler.getUserAgent();
            this.androidChrome = /chrome/i.test(ua) && /android/i.test(ua);
            var maskTokens = this.mask.split('');
            for (var i = 0; i < maskTokens.length; i++) {
                var c = maskTokens[i];
                if (c == '?') {
                    this.len--;
                    this.partialPosition = i;
                } else if (this.defs[c]) {
                    this.tests.push(new RegExp(this.defs[c]));
                    if (this.firstNonMaskPos === null) {
                        this.firstNonMaskPos = this.tests.length - 1;
                    }
                    if (i < this.partialPosition) {
                        this.lastRequiredNonMaskPos = this.tests.length - 1;
                    }
                } else {
                    this.tests.push(null);
                }
            }
            this.buffer = [];
            for (var i = 0; i < maskTokens.length; i++) {
                var c = maskTokens[i];
                if (c != '?') {
                    if (this.defs[c]) this.buffer.push(this.getPlaceholder(i));else this.buffer.push(c);
                }
            }
            this.defaultBuffer = this.buffer.join('');
            this.focusText = this.input.value;
            this.checkVal(); //Perform initial check for existing values
        };
        InputMask.prototype.writeValue = function (value) {
            this.value = value;
            if (this.input) {
                if (this.value == undefined || this.value == null) {
                    this.input.value = '';
                }
                this.checkVal();
            }
        };
        InputMask.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        InputMask.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        InputMask.prototype.setDisabledState = function (val) {
            this.disabled = val;
        };
        InputMask.prototype.caret = function (first, last) {
            var range, begin, end;
            if (!this.input.offsetParent || this.input !== document.activeElement) {
                return;
            }
            if (typeof first == 'number') {
                begin = first;
                end = typeof last === 'number' ? last : begin;
                if (this.input.setSelectionRange) {
                    this.input.setSelectionRange(begin, end);
                } else if (this.input['createTextRange']) {
                    range = this.input['createTextRange']();
                    range.collapse(true);
                    range.moveEnd('character', end);
                    range.moveStart('character', begin);
                    range.select();
                }
            } else {
                if (this.input.setSelectionRange) {
                    begin = this.input.selectionStart;
                    end = this.input.selectionEnd;
                } else if (document['selection'] && document['selection'].createRange) {
                    range = document['selection'].createRange();
                    begin = 0 - range.duplicate().moveStart('character', -100000);
                    end = begin + range.text.length;
                }
                return { begin: begin, end: end };
            }
        };
        InputMask.prototype.tryFireCompleted = function () {
            for (var i = this.firstNonMaskPos; i <= this.lastRequiredNonMaskPos; i++) {
                if (this.tests[i] && this.buffer[i] === this.getPlaceholder(i)) {
                    return;
                }
            }
            this.onComplete.emit();
        };
        InputMask.prototype.getPlaceholder = function (i) {
            if (i < this.slotChar.length) {
                return this.slotChar.charAt(i);
            }
            return this.slotChar.charAt(0);
        };
        InputMask.prototype.seekNext = function (pos) {
            while (++pos < this.len && !this.tests[pos]);
            return pos;
        };
        InputMask.prototype.seekPrev = function (pos) {
            while (--pos >= 0 && !this.tests[pos]);
            return pos;
        };
        InputMask.prototype.shiftL = function (begin, end) {
            var i, j;
            if (begin < 0) {
                return;
            }
            for (i = begin, j = this.seekNext(end); i < this.len; i++) {
                if (this.tests[i]) {
                    if (j < this.len && this.tests[i].test(this.buffer[j])) {
                        this.buffer[i] = this.buffer[j];
                        this.buffer[j] = this.getPlaceholder(j);
                    } else {
                        break;
                    }
                    j = this.seekNext(j);
                }
            }
            this.writeBuffer();
            this.caret(Math.max(this.firstNonMaskPos, begin));
        };
        InputMask.prototype.shiftR = function (pos) {
            var i, c, j, t;
            for (i = pos, c = this.getPlaceholder(pos); i < this.len; i++) {
                if (this.tests[i]) {
                    j = this.seekNext(i);
                    t = this.buffer[i];
                    this.buffer[i] = c;
                    if (j < this.len && this.tests[j].test(t)) {
                        c = t;
                    } else {
                        break;
                    }
                }
            }
        };
        InputMask.prototype.handleAndroidInput = function (e) {
            var curVal = this.input.value;
            var pos = this.caret();
            if (this.oldVal && this.oldVal.length && this.oldVal.length > curVal.length) {
                // a deletion or backspace happened
                this.checkVal(true);
                while (pos.begin > 0 && !this.tests[pos.begin - 1]) pos.begin--;
                if (pos.begin === 0) {
                    while (pos.begin < this.firstNonMaskPos && !this.tests[pos.begin]) pos.begin++;
                }
                this.caret(pos.begin, pos.begin);
            } else {
                var pos2 = this.checkVal(true);
                while (pos.begin < this.len && !this.tests[pos.begin]) pos.begin++;
                this.caret(pos.begin, pos.begin);
            }
            this.tryFireCompleted();
        };
        InputMask.prototype.onBlur = function (e) {
            this.onModelTouched();
            this.checkVal();
            this.updateModel(e);
            if (this.input.value != this.focusText) {
                var event_1 = document.createEvent('HTMLEvents');
                event_1.initEvent('change', true, false);
                this.input.dispatchEvent(event_1);
            }
        };
        InputMask.prototype.onKeyDown = function (e) {
            if (this.readonly) {
                return;
            }
            var k = e.which || e.keyCode,
                pos,
                begin,
                end;
            var iPhone = /iphone/i.test(this.domHandler.getUserAgent());
            this.oldVal = this.input.value;
            //backspace, delete, and escape get special treatment
            if (k === 8 || k === 46 || iPhone && k === 127) {
                pos = this.caret();
                begin = pos.begin;
                end = pos.end;
                if (end - begin === 0) {
                    begin = k !== 46 ? this.seekPrev(begin) : end = this.seekNext(begin - 1);
                    end = k === 46 ? this.seekNext(end) : end;
                }
                this.clearBuffer(begin, end);
                this.shiftL(begin, end - 1);
                this.updateModel(e);
                e.preventDefault();
            } else if (k === 13) {
                this.onBlur(e);
                this.updateModel(e);
            } else if (k === 27) {
                this.input.value = this.focusText;
                this.caret(0, this.checkVal());
                this.updateModel(e);
                e.preventDefault();
            }
        };
        InputMask.prototype.onKeyPress = function (e) {
            if (this.readonly) {
                return;
            }
            var k = e.which || e.keyCode,
                pos = this.caret(),
                p,
                c,
                next;
            if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {
                return;
            } else if (k && k !== 13) {
                if (pos.end - pos.begin !== 0) {
                    this.clearBuffer(pos.begin, pos.end);
                    this.shiftL(pos.begin, pos.end - 1);
                }
                p = this.seekNext(pos.begin - 1);
                if (p < this.len) {
                    c = String.fromCharCode(k);
                    if (this.tests[p].test(c)) {
                        this.shiftR(p);
                        this.buffer[p] = c;
                        this.writeBuffer();
                        next = this.seekNext(p);
                        if (/android/i.test(this.domHandler.getUserAgent())) {
                            //Path for CSP Violation on FireFox OS 1.1
                            var proxy = function () {
                                this.caret.bind(this, next)();
                            };
                            setTimeout(proxy, 0);
                        } else {
                            this.caret(next);
                        }
                        if (pos.begin <= this.lastRequiredNonMaskPos) {
                            this.tryFireCompleted();
                        }
                    }
                }
                e.preventDefault();
            }
            this.updateModel(e);
        };
        InputMask.prototype.clearBuffer = function (start, end) {
            var i;
            for (i = start; i < end && i < this.len; i++) {
                if (this.tests[i]) {
                    this.buffer[i] = this.getPlaceholder(i);
                }
            }
        };
        InputMask.prototype.writeBuffer = function () {
            this.input.value = this.buffer.join('');
        };
        InputMask.prototype.checkVal = function (allow) {
            //try to place characters where they belong
            var test = this.input.value,
                lastMatch = -1,
                i,
                c,
                pos;
            for (i = 0, pos = 0; i < this.len; i++) {
                if (this.tests[i]) {
                    this.buffer[i] = this.getPlaceholder(i);
                    while (pos++ < test.length) {
                        c = test.charAt(pos - 1);
                        if (this.tests[i].test(c)) {
                            this.buffer[i] = c;
                            lastMatch = i;
                            break;
                        }
                    }
                    if (pos > test.length) {
                        this.clearBuffer(i + 1, this.len);
                        break;
                    }
                } else {
                    if (this.buffer[i] === test.charAt(pos)) {
                        pos++;
                    }
                    if (i < this.partialPosition) {
                        lastMatch = i;
                    }
                }
            }
            if (allow) {
                this.writeBuffer();
            } else if (lastMatch + 1 < this.partialPosition) {
                if (this.autoClear || this.buffer.join('') === this.defaultBuffer) {
                    // Invalid value. Remove it and replace it with the
                    // mask, which is the default behavior.
                    if (this.input.value) this.input.value = '';
                    this.clearBuffer(0, this.len);
                } else {
                    // Invalid value, but we opt to show the value to the
                    // user and allow them to correct their mistake.
                    this.writeBuffer();
                }
            } else {
                this.writeBuffer();
                this.input.value = this.input.value.substring(0, lastMatch + 1);
            }
            return this.partialPosition ? i : this.firstNonMaskPos;
        };
        InputMask.prototype.onFocus = function (event) {
            var _this = this;
            if (this.readonly) {
                return;
            }
            clearTimeout(this.caretTimeoutId);
            var pos;
            this.focusText = this.input.value;
            pos = this.checkVal();
            this.caretTimeoutId = setTimeout(function () {
                if (_this.input !== document.activeElement) {
                    return;
                }
                _this.writeBuffer();
                if (pos == _this.mask.replace("?", "").length) {
                    _this.caret(0, pos);
                } else {
                    _this.caret(pos);
                }
            }, 10);
        };
        InputMask.prototype.onInput = function (event) {
            if (this.androidChrome) this.handleAndroidInput(event);else this.handleInputChange(event);
        };
        InputMask.prototype.handleInputChange = function (event) {
            if (this.readonly) {
                return;
            }
            setTimeout(function () {
                var pos = this.checkVal(true);
                this.caret(pos);
                this.tryFireCompleted();
            }, 0);
        };
        InputMask.prototype.getUnmaskedValue = function () {
            var unmaskedBuffer = [];
            for (var i = 0; i < this.buffer.length; i++) {
                var c = this.buffer[i];
                if (this.tests[i] && c != this.getPlaceholder(i)) {
                    unmaskedBuffer.push(c);
                }
            }
            return unmaskedBuffer.join('');
        };
        InputMask.prototype.updateModel = function (e) {
            this.onModelChange(this.unmask ? this.getUnmaskedValue() : e.target.value);
        };
        InputMask.prototype.ngOnDestroy = function () {};
        __decorate([core_1.Input(), __metadata('design:type', String)], InputMask.prototype, "mask", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], InputMask.prototype, "slotChar", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], InputMask.prototype, "autoClear", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], InputMask.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], InputMask.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], InputMask.prototype, "placeholder", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], InputMask.prototype, "size", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], InputMask.prototype, "maxlength", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], InputMask.prototype, "tabindex", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], InputMask.prototype, "disabled", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], InputMask.prototype, "readonly", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], InputMask.prototype, "unmask", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], InputMask.prototype, "name", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], InputMask.prototype, "onComplete", void 0);
        InputMask = __decorate([core_1.Component({
            selector: 'p-inputMask',
            template: "<input pInputText type=\"text\" [name]=\"name\" [value]=\"value||''\" [ngStyle]=\"style\" [ngClass]=\"styleClass\" [placeholder]=\"placeholder\"\n        [attr.size]=\"size\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [disabled]=\"disabled\" [readonly]=\"readonly\"\n        (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\" (keydown)=\"onKeyDown($event)\" (keypress)=\"onKeyPress($event)\"\n        (input)=\"onInput($event)\" (paste)=\"handleInputChange($event)\">",
            providers: [exports.INPUTMASK_VALUE_ACCESSOR, domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler])], InputMask);
        return InputMask;
    }();
    exports.InputMask = InputMask;
    var InputMaskModule = function () {
        function InputMaskModule() {}
        InputMaskModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule, inputtext_1.InputTextModule],
            exports: [InputMask],
            declarations: [InputMask]
        }), __metadata('design:paramtypes', [])], InputMaskModule);
        return InputMaskModule;
    }();
    exports.InputMaskModule = InputMaskModule;
    

    return module.exports;
});
$__System.registerDynamic("42", ["3", "9", "23", "26"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var forms_1 = $__require("23");
    var domhandler_1 = $__require("26");
    exports.INPUTSWITCH_VALUE_ACCESSOR = {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return InputSwitch;
        }),
        multi: true
    };
    var InputSwitch = function () {
        function InputSwitch(el, domHandler) {
            this.el = el;
            this.domHandler = domHandler;
            this.onLabel = 'On';
            this.offLabel = 'Off';
            this.onChange = new core_1.EventEmitter();
            this.checked = false;
            this.focused = false;
            this.onModelChange = function () {};
            this.onModelTouched = function () {};
            this.initialized = false;
        }
        InputSwitch.prototype.ngAfterViewInit = function () {
            this.container = this.el.nativeElement.children[0];
            this.handle = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-inputswitch-handle');
            this.onContainer = this.domHandler.findSingle(this.container, 'div.ui-inputswitch-on');
            this.offContainer = this.domHandler.findSingle(this.container, 'div.ui-inputswitch-off');
            this.onLabelChild = this.domHandler.findSingle(this.onContainer, 'span.ui-inputswitch-onlabel');
            this.offLabelChild = this.domHandler.findSingle(this.offContainer, 'span.ui-inputswitch-offlabel');
        };
        InputSwitch.prototype.ngAfterViewChecked = function () {
            if (this.container.offsetParent && !this.initialized) {
                this.render();
            }
        };
        InputSwitch.prototype.render = function () {
            var onContainerWidth = this.domHandler.width(this.onContainer),
                offContainerWidth = this.domHandler.width(this.offContainer),
                spanPadding = this.domHandler.innerWidth(this.offLabelChild) - this.domHandler.width(this.offLabelChild),
                handleMargins = this.domHandler.getOuterWidth(this.handle) - this.domHandler.innerWidth(this.handle);
            var containerWidth = onContainerWidth > offContainerWidth ? onContainerWidth : offContainerWidth,
                handleWidth = containerWidth;
            this.handle.style.width = handleWidth + 'px';
            handleWidth = this.domHandler.width(this.handle);
            containerWidth = containerWidth + handleWidth + 6;
            var labelWidth = containerWidth - handleWidth - spanPadding - handleMargins;
            this.container.style.width = containerWidth + 'px';
            this.onLabelChild.style.width = labelWidth + 'px';
            this.offLabelChild.style.width = labelWidth + 'px';
            //position
            this.offContainer.style.width = this.domHandler.width(this.container) - 5 + 'px';
            this.offset = this.domHandler.width(this.container) - this.domHandler.getOuterWidth(this.handle);
            //default value
            if (this.checked) {
                this.handle.style.left = this.offset + 'px';
                this.onContainer.style.width = this.offset + 'px';
                this.offLabelChild.style.marginRight = -this.offset + 'px';
            } else {
                this.onContainer.style.width = 0 + 'px';
                this.onLabelChild.style.marginLeft = -this.offset + 'px';
            }
            this.initialized = true;
        };
        InputSwitch.prototype.toggle = function (event, checkbox) {
            if (!this.disabled) {
                if (this.checked) {
                    this.checked = false;
                    this.uncheckUI();
                } else {
                    this.checked = true;
                    this.checkUI();
                }
                this.onModelChange(this.checked);
                this.onChange.emit({
                    originalEvent: event,
                    checked: this.checked
                });
                checkbox.focus();
            }
        };
        InputSwitch.prototype.checkUI = function () {
            this.onContainer.style.width = this.offset + 'px';
            this.onLabelChild.style.marginLeft = 0 + 'px';
            this.offLabelChild.style.marginRight = -this.offset + 'px';
            this.handle.style.left = this.offset + 'px';
        };
        InputSwitch.prototype.uncheckUI = function () {
            this.onContainer.style.width = 0 + 'px';
            this.onLabelChild.style.marginLeft = -this.offset + 'px';
            this.offLabelChild.style.marginRight = 0 + 'px';
            this.handle.style.left = 0 + 'px';
        };
        InputSwitch.prototype.onFocus = function (event) {
            this.focused = true;
        };
        InputSwitch.prototype.onBlur = function (event) {
            this.focused = false;
            this.onModelTouched();
        };
        InputSwitch.prototype.writeValue = function (checked) {
            this.checked = checked;
            if (this.initialized) {
                if (this.checked === true) this.checkUI();else this.uncheckUI();
            }
        };
        InputSwitch.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        InputSwitch.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        InputSwitch.prototype.setDisabledState = function (val) {
            this.disabled = val;
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], InputSwitch.prototype, "onLabel", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], InputSwitch.prototype, "offLabel", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], InputSwitch.prototype, "disabled", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], InputSwitch.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], InputSwitch.prototype, "styleClass", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], InputSwitch.prototype, "onChange", void 0);
        InputSwitch = __decorate([core_1.Component({
            selector: 'p-inputSwitch',
            template: "\n        <div [ngClass]=\"{'ui-inputswitch ui-widget ui-widget-content ui-corner-all': true,\n            'ui-state-disabled': disabled,'ui-inputswitch-checked':checked}\" (click)=\"toggle($event, in)\"\n            [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-inputswitch-off\">\n                <span class=\"ui-inputswitch-offlabel\">{{offLabel}}</span>\n            </div>\n            <div class=\"ui-inputswitch-on\">\n                <span class=\"ui-inputswitch-onlabel\">{{onLabel}}</span>\n            </div>\n            <div [ngClass]=\"{'ui-inputswitch-handle ui-state-default':true, 'ui-state-focus':focused}\"></div>\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #in type=\"checkbox\" (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\" readonly=\"readonly\"/>\n            </div>\n        </div>\n    ",
            providers: [exports.INPUTSWITCH_VALUE_ACCESSOR, domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler])], InputSwitch);
        return InputSwitch;
    }();
    exports.InputSwitch = InputSwitch;
    var InputSwitchModule = function () {
        function InputSwitchModule() {}
        InputSwitchModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [InputSwitch],
            declarations: [InputSwitch]
        }), __metadata('design:paramtypes', [])], InputSwitchModule);
        return InputSwitchModule;
    }();
    exports.InputSwitchModule = InputSwitchModule;
    

    return module.exports;
});
$__System.registerDynamic("43", ["3", "9"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var InputTextarea = function () {
        function InputTextarea(el) {
            this.el = el;
        }
        InputTextarea.prototype.ngOnInit = function () {
            this.rowsDefault = this.rows;
            this.colsDefault = this.cols;
        };
        InputTextarea.prototype.onMouseover = function (e) {
            this.hover = true;
        };
        InputTextarea.prototype.onMouseout = function (e) {
            this.hover = false;
        };
        InputTextarea.prototype.onFocus = function (e) {
            this.focus = true;
            if (this.autoResize) {
                this.resize();
            }
        };
        InputTextarea.prototype.onBlur = function (e) {
            this.focus = false;
            if (this.autoResize) {
                this.resize();
            }
        };
        InputTextarea.prototype.isDisabled = function () {
            return this.el.nativeElement.disabled;
        };
        InputTextarea.prototype.onKeyup = function (e) {
            if (this.autoResize) {
                this.resize();
            }
        };
        InputTextarea.prototype.resize = function () {
            var linesCount = 0,
                lines = this.el.nativeElement.value.split('\n');
            for (var i = lines.length - 1; i >= 0; --i) {
                linesCount += Math.floor(lines[i].length / this.colsDefault + 1);
            }
            this.rows = linesCount >= this.rowsDefault ? linesCount + 1 : this.rowsDefault;
        };
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], InputTextarea.prototype, "autoResize", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], InputTextarea.prototype, "rows", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], InputTextarea.prototype, "cols", void 0);
        __decorate([core_1.HostListener('mouseover', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], InputTextarea.prototype, "onMouseover", null);
        __decorate([core_1.HostListener('mouseout', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], InputTextarea.prototype, "onMouseout", null);
        __decorate([core_1.HostListener('focus', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], InputTextarea.prototype, "onFocus", null);
        __decorate([core_1.HostListener('blur', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], InputTextarea.prototype, "onBlur", null);
        __decorate([core_1.HostListener('keyup', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], InputTextarea.prototype, "onKeyup", null);
        InputTextarea = __decorate([core_1.Directive({
            selector: '[pInputTextarea]',
            host: {
                '[class.ui-inputtext]': 'true',
                '[class.ui-corner-all]': 'true',
                '[class.ui-state-default]': 'true',
                '[class.ui-widget]': 'true',
                '[class.ui-state-hover]': 'hover',
                '[class.ui-state-focus]': 'focus',
                '[class.ui-state-disabled]': 'isDisabled()',
                '[attr.rows]': 'rows',
                '[attr.cols]': 'cols'
            }
        }), __metadata('design:paramtypes', [core_1.ElementRef])], InputTextarea);
        return InputTextarea;
    }();
    exports.InputTextarea = InputTextarea;
    var InputTextareaModule = function () {
        function InputTextareaModule() {}
        InputTextareaModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [InputTextarea],
            declarations: [InputTextarea]
        }), __metadata('design:paramtypes', [])], InputTextareaModule);
        return InputTextareaModule;
    }();
    exports.InputTextareaModule = InputTextareaModule;
    

    return module.exports;
});
$__System.registerDynamic("44", ["3", "9", "26"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var Lightbox = function () {
        function Lightbox(el, domHandler, renderer) {
            this.el = el;
            this.domHandler = domHandler;
            this.renderer = renderer;
            this.type = 'image';
            this.effectDuration = '500ms';
        }
        Lightbox.prototype.onImageClick = function (event, image, i, content) {
            this.index = i;
            this.loading = true;
            content.style.width = 32 + 'px';
            content.style.height = 32 + 'px';
            this.show();
            this.displayImage(image);
            this.preventDocumentClickListener = true;
            event.preventDefault();
        };
        Lightbox.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.panel = this.domHandler.findSingle(this.el.nativeElement, '.ui-lightbox ');
            this.documentClickListener = this.renderer.listenGlobal('body', 'click', function (event) {
                if (!_this.preventDocumentClickListener && _this.visible) {
                    _this.hide(event);
                }
                _this.preventDocumentClickListener = false;
            });
        };
        Lightbox.prototype.onLinkClick = function (event, content) {
            this.show();
            this.preventDocumentClickListener = true;
            event.preventDefault();
        };
        Lightbox.prototype.displayImage = function (image) {
            var _this = this;
            setTimeout(function () {
                _this.currentImage = image;
                _this.captionText = image.title;
            }, 1000);
        };
        Lightbox.prototype.show = function () {
            this.mask = document.createElement('div');
            this.mask.style.zIndex = ++domhandler_1.DomHandler.zindex;
            this.domHandler.addMultipleClasses(this.mask, 'ui-widget-overlay ui-dialog-mask');
            document.body.appendChild(this.mask);
            this.zindex = ++domhandler_1.DomHandler.zindex;
            this.center();
            this.visible = true;
        };
        Lightbox.prototype.hide = function (event) {
            this.captionText = null;
            this.index = null;
            this.currentImage = null;
            this.visible = false;
            this.panel.style.left = 'auto';
            this.panel.style.top = 'auto';
            if (this.mask) {
                document.body.removeChild(this.mask);
                this.mask = null;
            }
            event.preventDefault();
        };
        Lightbox.prototype.center = function () {
            var elementWidth = this.domHandler.getOuterWidth(this.panel);
            var elementHeight = this.domHandler.getOuterHeight(this.panel);
            if (elementWidth == 0 && elementHeight == 0) {
                this.panel.style.visibility = 'hidden';
                this.panel.style.display = 'block';
                elementWidth = this.domHandler.getOuterWidth(this.panel);
                elementHeight = this.domHandler.getOuterHeight(this.panel);
                this.panel.style.display = 'none';
                this.panel.style.visibility = 'visible';
            }
            var viewport = this.domHandler.getViewport();
            var x = (viewport.width - elementWidth) / 2;
            var y = (viewport.height - elementHeight) / 2;
            this.panel.style.left = x + 'px';
            this.panel.style.top = y + 'px';
        };
        Lightbox.prototype.onImageLoad = function (event, content) {
            var _this = this;
            var image = event.target;
            image.style.visibility = 'hidden';
            image.style.display = 'block';
            var imageWidth = this.domHandler.getOuterWidth(image);
            var imageHeight = this.domHandler.getOuterHeight(image);
            image.style.display = 'none';
            image.style.visibility = 'visible';
            content.style.width = imageWidth + 'px';
            content.style.height = imageHeight + 'px';
            this.panel.style.left = parseInt(this.panel.style.left) + (this.domHandler.getOuterWidth(this.panel) - imageWidth) / 2 + 'px';
            this.panel.style.top = parseInt(this.panel.style.top) + (this.domHandler.getOuterHeight(this.panel) - imageHeight) / 2 + 'px';
            setTimeout(function () {
                _this.domHandler.fadeIn(image, 500);
                image.style.display = 'block';
                //this.captionText = this.currentImage.title;
                _this.loading = false;
            }, parseInt(this.effectDuration));
        };
        Lightbox.prototype.prev = function (placeholder) {
            this.captionText = null;
            this.loading = true;
            placeholder.style.display = 'none';
            if (this.index > 0) {
                this.displayImage(this.images[--this.index]);
            }
        };
        Lightbox.prototype.next = function (placeholder) {
            this.captionText = null;
            this.loading = true;
            placeholder.style.display = 'none';
            if (this.index <= this.images.length - 1) {
                this.displayImage(this.images[++this.index]);
            }
        };
        Object.defineProperty(Lightbox.prototype, "leftVisible", {
            get: function () {
                return this.images && this.images.length && this.index != 0 && !this.loading;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Lightbox.prototype, "rightVisible", {
            get: function () {
                return this.images && this.images.length && this.index < this.images.length - 1 && !this.loading;
            },
            enumerable: true,
            configurable: true
        });
        Lightbox.prototype.ngOnDestroy = function () {
            this.documentClickListener();
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], Lightbox.prototype, "images", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Lightbox.prototype, "type", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Lightbox.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Lightbox.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Lightbox.prototype, "easing", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Lightbox.prototype, "effectDuration", void 0);
        Lightbox = __decorate([core_1.Component({
            selector: 'p-lightbox',
            template: "\n        <div [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"(type == 'image')\">\n            <a *ngFor=\"let image of images; let i = index;\" [href]=\"image.source\" (click)=\"onImageClick($event,image,i,content)\">\n                <img [src]=\"image.thumbnail\" [title]=\"image.title\" [alt]=\"image.alt\">\n            </a>\n        </div>\n        <span [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"(type == 'content')\" (click)=\"onLinkClick($event,content)\">\n            <ng-content select=\"a\"></ng-content>\n        </span>\n        <div class=\"ui-lightbox ui-widget ui-helper-hidden ui-corner-all ui-shadow\" [style.display]=\"visible ? 'block' : 'none'\" [style.zIndex]=\"zindex\"\n            [style.transitionProperty]=\"'all'\" [style.transitionDuration]=\"effectDuration\" [style.transitionTimingFunction]=\"easing\" (click)=\"preventDocumentClickListener=true\">\n           <div class=\"ui-lightbox-content-wrapper\">\n              <a class=\"ui-state-default ui-lightbox-nav-left ui-corner-right\" [style.zIndex]=\"zindex + 1\" (click)=\"prev(img)\"\n                [ngClass]=\"{'ui-helper-hidden':!leftVisible}\"><span class=\"fa fa-fw fa-caret-left\"></span></a>\n              <div #content class=\"ui-lightbox-content ui-corner-all\" #content [ngClass]=\"{'ui-lightbox-loading': loading}\" \n                [style.transitionProperty]=\"'width,height'\" [style.transitionDuration]=\"effectDuration\" [style.transitionTimingFunction]=\"easing\">\n                <img #img [src]=\"currentImage ? currentImage.source||'' : ''\" (load)=\"onImageLoad($event,content)\" style=\"display:none\">\n                <ng-content></ng-content>\n              </div>\n              <a class=\"ui-state-default ui-lightbox-nav-right ui-corner-left ui-helper-hidden\" [style.zIndex]=\"zindex + 1\" (click)=\"next(img)\"\n                [ngClass]=\"{'ui-helper-hidden':!rightVisible}\"><span class=\"fa fa-fw fa-caret-right\"></span></a>\n           </div>\n           <div class=\"ui-lightbox-caption ui-widget-header\" [style.display]=\"captionText ? 'block' : 'none'\">\n              <span class=\"ui-lightbox-caption-text\">{{captionText}}</span><a class=\"ui-lightbox-close ui-corner-all\" href=\"#\" (click)=\"hide($event)\"><span class=\"fa fa-fw fa-close\"></span></a>\n              <div style=\"clear:both\"></div>\n           </div>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer])], Lightbox);
        return Lightbox;
    }();
    exports.Lightbox = Lightbox;
    var LightboxModule = function () {
        function LightboxModule() {}
        LightboxModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Lightbox],
            declarations: [Lightbox]
        }), __metadata('design:paramtypes', [])], LightboxModule);
        return LightboxModule;
    }();
    exports.LightboxModule = LightboxModule;
    

    return module.exports;
});
$__System.registerDynamic("45", ["3", "9", "21", "26", "23"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var shared_1 = $__require("21");
    var domhandler_1 = $__require("26");
    var forms_1 = $__require("23");
    exports.LISTBOX_VALUE_ACCESSOR = {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return Listbox;
        }),
        multi: true
    };
    var Listbox = function () {
        function Listbox(el, domHandler) {
            this.el = el;
            this.domHandler = domHandler;
            this.onChange = new core_1.EventEmitter();
            this.onDblClick = new core_1.EventEmitter();
            this.onModelChange = function () {};
            this.onModelTouched = function () {};
        }
        Listbox.prototype.writeValue = function (value) {
            this.value = value;
        };
        Listbox.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        Listbox.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        Listbox.prototype.setDisabledState = function (val) {
            this.disabled = val;
        };
        Listbox.prototype.onOptionClick = function (event, option) {
            var metaKey = event.metaKey || event.ctrlKey;
            var selected = this.isSelected(option);
            if (this.multiple) this.onOptionClickMultiple(event, option);else this.onOptionClickSingle(event, option);
        };
        Listbox.prototype.onOptionClickSingle = function (event, option) {
            var metaKey = event.metaKey || event.ctrlKey;
            var selected = this.isSelected(option);
            var valueChanged = false;
            if (selected) {
                if (metaKey) {
                    this.value = null;
                    valueChanged = true;
                }
            } else {
                this.value = option.value;
                valueChanged = true;
            }
            if (valueChanged) {
                this.onModelChange(this.value);
                this.onChange.emit(event);
            }
        };
        Listbox.prototype.onOptionClickMultiple = function (event, option) {
            var metaKey = event.metaKey || event.ctrlKey;
            var selected = this.isSelected(option);
            var valueChanged = false;
            if (selected) {
                if (metaKey) {
                    this.value.splice(this.findIndex(option), 1);
                } else {
                    this.value = [];
                    this.value.push(option.value);
                }
                valueChanged = true;
            } else {
                this.value = metaKey ? this.value || [] : [];
                this.value.push(option.value);
                valueChanged = true;
            }
            if (valueChanged) {
                this.onModelChange(this.value);
                this.onChange.emit(event);
            }
        };
        Listbox.prototype.isSelected = function (option) {
            var selected = false;
            if (this.multiple) {
                if (this.value) {
                    for (var i = 0; i < this.value.length; i++) {
                        if (this.value[i] === option.value) {
                            selected = true;
                            break;
                        }
                    }
                }
            } else {
                selected = this.value == option.value;
            }
            return selected;
        };
        Listbox.prototype.findIndex = function (option) {
            var index = -1;
            if (this.value) {
                for (var i = 0; i < this.value.length; i++) {
                    if (this.domHandler.equals(option.value, this.value[i])) {
                        index = i;
                        break;
                    }
                }
            }
            return index;
        };
        Listbox.prototype.onDoubleClick = function (event, option) {
            this.onDblClick.emit({
                originalEvent: event,
                value: option
            });
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], Listbox.prototype, "options", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Listbox.prototype, "multiple", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Listbox.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Listbox.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Listbox.prototype, "disabled", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Listbox.prototype, "onChange", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Listbox.prototype, "onDblClick", void 0);
        __decorate([core_1.ContentChild(core_1.TemplateRef), __metadata('design:type', core_1.TemplateRef)], Listbox.prototype, "itemTemplate", void 0);
        Listbox = __decorate([core_1.Component({
            selector: 'p-listbox',
            template: "\n        <div [ngClass]=\"{'ui-listbox ui-inputtext ui-widget ui-widget-content ui-corner-all':true,'ui-state-disabled':disabled}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <ul class=\"ui-listbox-list\">\n                <li #item *ngFor=\"let option of options\"\n                    [ngClass]=\"{'ui-listbox-item ui-corner-all':true,'ui-state-hover':(hoveredItem==item),'ui-state-highlight':isSelected(option)}\"\n                    (mouseenter)=\"hoveredItem=item\" (mouseleave)=\"hoveredItem=null\" (click)=\"onOptionClick($event,option)\" (dblclick)=\"onDoubleClick($event,option)\">\n                    <span *ngIf=\"!itemTemplate\">{{option.label}}</span>\n                    <template *ngIf=\"itemTemplate\" [pTemplateWrapper]=\"itemTemplate\" [item]=\"option\"></template>\n                </li>\n            </ul>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler, exports.LISTBOX_VALUE_ACCESSOR]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler])], Listbox);
        return Listbox;
    }();
    exports.Listbox = Listbox;
    var ListboxModule = function () {
        function ListboxModule() {}
        ListboxModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule, shared_1.SharedModule],
            exports: [Listbox, shared_1.SharedModule],
            declarations: [Listbox]
        }), __metadata('design:paramtypes', [])], ListboxModule);
        return ListboxModule;
    }();
    exports.ListboxModule = ListboxModule;
    

    return module.exports;
});
$__System.registerDynamic("46", ["3", "9", "26", "d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var router_1 = $__require("d");
    var MegaMenu = function () {
        function MegaMenu(el, domHandler, renderer, router) {
            this.el = el;
            this.domHandler = domHandler;
            this.renderer = renderer;
            this.router = router;
            this.orientation = 'horizontal';
        }
        MegaMenu.prototype.onItemMouseEnter = function (event, item, menuitem) {
            if (menuitem.disabled) {
                return;
            }
            this.activeItem = item;
            this.activeLink = item.children[0];
            var submenu = item.children[0].nextElementSibling;
            if (submenu) {
                submenu.style.zIndex = ++domhandler_1.DomHandler.zindex;
                if (this.orientation === 'horizontal') {
                    submenu.style.top = this.domHandler.getOuterHeight(item.children[0]) + 'px';
                    submenu.style.left = '0px';
                } else if (this.orientation === 'vertical') {
                    submenu.style.top = '0px';
                    submenu.style.left = this.domHandler.getOuterWidth(item.children[0]) + 'px';
                }
            }
        };
        MegaMenu.prototype.onItemMouseLeave = function (event, link) {
            this.activeItem = null;
            this.activeLink = null;
        };
        MegaMenu.prototype.itemClick = function (event, item) {
            if (item.disabled) {
                event.preventDefault();
                return;
            }
            if (!item.url || item.routerLink) {
                event.preventDefault();
            }
            if (item.command) {
                if (!item.eventEmitter) {
                    item.eventEmitter = new core_1.EventEmitter();
                    item.eventEmitter.subscribe(item.command);
                }
                item.eventEmitter.emit({
                    originalEvent: event,
                    item: item
                });
            }
            if (item.routerLink) {
                this.router.navigate(item.routerLink);
            }
            this.activeItem = null;
            this.activeLink = null;
        };
        MegaMenu.prototype.unsubscribe = function (item) {
            if (item.eventEmitter) {
                item.eventEmitter.unsubscribe();
            }
            if (item.items) {
                for (var _i = 0, _a = item.items; _i < _a.length; _i++) {
                    var childItem = _a[_i];
                    this.unsubscribe(childItem);
                }
            }
        };
        MegaMenu.prototype.ngOnDestroy = function () {
            if (this.model) {
                for (var _i = 0, _a = this.model; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.unsubscribe(item);
                }
            }
        };
        MegaMenu.prototype.getColumnClass = function (menuitem) {
            var length = menuitem.items ? menuitem.items.length : 0;
            var columnClass;
            switch (length) {
                case 2:
                    columnClass = 'ui-grid-col-6';
                    break;
                case 3:
                    columnClass = 'ui-grid-col-4';
                    break;
                case 4:
                    columnClass = 'ui-grid-col-3';
                    break;
                case 6:
                    columnClass = 'ui-grid-col-2';
                    break;
                default:
                    columnClass = 'ui-grid-col-12';
                    break;
            }
            return columnClass;
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], MegaMenu.prototype, "model", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], MegaMenu.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], MegaMenu.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], MegaMenu.prototype, "orientation", void 0);
        MegaMenu = __decorate([core_1.Component({
            selector: 'p-megaMenu',
            template: "\n        <div [class]=\"styleClass\" [ngStyle]=\"style\"\n            [ngClass]=\"{'ui-menu ui-menubar ui-megamenu ui-widget ui-widget-content ui-corner-all ui-helper-clearfix':true,'ui-megamenu-vertical': orientation == 'vertical'}\">\n            <ul class=\"ui-menu-list ui-helper-reset\">\n                <template ngFor let-category [ngForOf]=\"model\">\n                    <li #item [ngClass]=\"{'ui-menuitem ui-widget ui-corner-all':true,'ui-menu-parent':category.items,'ui-menuitem-active':item==activeItem}\"\n                        (mouseenter)=\"onItemMouseEnter($event, item, category)\" (mouseleave)=\"onItemMouseLeave($event, item)\">\n                        <a #link class=\"ui-menuitem-link ui-corner-all ui-submenu-link\" [ngClass]=\"{'ui-state-hover':link==activeLink&&!category.disabled,'ui-state-disabled':category.disabled}\">\n                            <span class=\"ui-submenu-icon fa fa-fw\" [ngClass]=\"{'fa-caret-down':orientation=='horizontal','fa-caret-right':orientation=='vertical'}\"></span>\n                            <span class=\"ui-menuitem-icon fa fa-fw\" [ngClass]=\"category.icon\"></span>\n                            {{category.label}}\n                        </a>\n                        <div class=\"ui-megamenu-panel ui-widget-content ui-menu-list ui-corner-all ui-helper-clearfix ui-menu-child ui-shadow\">\n                            <div class=\"ui-grid\">\n                                <div class=\"ui-grid-row\">\n                                    <template ngFor let-column [ngForOf]=\"category.items\">\n                                        <div [class]=\"getColumnClass(category)\">\n                                            <template ngFor let-submenu [ngForOf]=\"column\">\n                                                <ul class=\"ui-menu-list ui-helper-reset\">\n                                                    <li class=\"ui-widget-header ui-corner-all\"><h3>{{submenu.label}}</h3></li>\n                                                    <li *ngFor=\"let item of submenu.items\" class=\"ui-menuitem ui-widget ui-corner-all\">\n                                                        <a #link [href]=\"item.url||'#'\" class=\"ui-menuitem-link ui-corner-all\" \n                                                            [ngClass]=\"{'ui-state-hover':link==hoveredItem&&!item.disabled,'ui-state-disabled':item.disabled}\"\n                                                            (mouseenter)=\"hoveredItem=$event.target\" (mouseleave)=\"hoveredItem=null\" (click)=\"itemClick($event, item)\">\n                                                            <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"item.icon\" [ngClass]=\"item.icon\"></span>\n                                                            <span class=\"ui-menuitem-text\">{{item.label}}</span>\n                                                        </a>\n                                                    </li>\n                                                </ul>\n                                            </template>\n                                        </div>\n                                    </template>\n                                </div>\n                            </div>\n                        </div>\n                    </li>\n                </template>\n            </ul>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer, router_1.Router])], MegaMenu);
        return MegaMenu;
    }();
    exports.MegaMenu = MegaMenu;
    var MegaMenuModule = function () {
        function MegaMenuModule() {}
        MegaMenuModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [MegaMenu],
            declarations: [MegaMenu]
        }), __metadata('design:paramtypes', [])], MegaMenuModule);
        return MegaMenuModule;
    }();
    exports.MegaMenuModule = MegaMenuModule;
    

    return module.exports;
});
$__System.registerDynamic("47", ["3", "9", "26", "d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var router_1 = $__require("d");
    var Menu = function () {
        function Menu(el, domHandler, renderer, router) {
            this.el = el;
            this.domHandler = domHandler;
            this.renderer = renderer;
            this.router = router;
        }
        Menu.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.container = this.el.nativeElement.children[0];
            if (this.popup) {
                if (this.appendTo) {
                    if (this.appendTo === 'body') document.body.appendChild(this.el.nativeElement);else this.appendTo.appendChild(this.el.nativeElement);
                }
                this.documentClickListener = this.renderer.listenGlobal('body', 'click', function () {
                    if (!_this.preventDocumentDefault) {
                        _this.hide();
                    }
                    _this.preventDocumentDefault = false;
                });
            }
        };
        Menu.prototype.toggle = function (event) {
            if (this.container.offsetParent) this.hide();else this.show(event);
            this.preventDocumentDefault = true;
        };
        Menu.prototype.show = function (event) {
            var target = event.target;
            if (target.parentElement.nodeName == 'BUTTON') {
                target = target.parentElement;
            }
            this.container.style.display = 'block';
            this.domHandler.absolutePosition(this.container, target);
            this.domHandler.fadeIn(this.container, 250);
        };
        Menu.prototype.hide = function () {
            this.container.style.display = 'none';
        };
        Menu.prototype.itemClick = function (event, item) {
            if (item.disabled) {
                event.preventDefault();
                return;
            }
            if (!item.url || item.routerLink) {
                event.preventDefault();
            }
            if (item.command) {
                if (!item.eventEmitter) {
                    item.eventEmitter = new core_1.EventEmitter();
                    item.eventEmitter.subscribe(item.command);
                }
                item.eventEmitter.emit({
                    originalEvent: event,
                    item: item
                });
            }
            if (this.popup) {
                this.hide();
            }
            if (item.routerLink) {
                this.router.navigate(item.routerLink);
            }
        };
        Menu.prototype.ngOnDestroy = function () {
            if (this.popup) {
                this.documentClickListener();
                if (this.appendTo && this.appendTo === 'body') {
                    document.body.removeChild(this.el.nativeElement);
                }
            }
            if (this.model) {
                for (var _i = 0, _a = this.model; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.unsubscribe(item);
                }
            }
        };
        Menu.prototype.hasSubMenu = function () {
            if (this.model) {
                for (var _i = 0, _a = this.model; _i < _a.length; _i++) {
                    var item = _a[_i];
                    if (item.items) {
                        return true;
                    }
                }
            }
            return false;
        };
        Menu.prototype.unsubscribe = function (item) {
            if (item.eventEmitter) {
                item.eventEmitter.unsubscribe();
            }
            if (item.items) {
                for (var _i = 0, _a = item.items; _i < _a.length; _i++) {
                    var childItem = _a[_i];
                    this.unsubscribe(childItem);
                }
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], Menu.prototype, "model", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Menu.prototype, "popup", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Menu.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Menu.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Menu.prototype, "appendTo", void 0);
        Menu = __decorate([core_1.Component({
            selector: 'p-menu',
            template: "\n        <div [ngClass]=\"{'ui-menu ui-widget ui-widget-content ui-corner-all ui-helper-clearfix':true,'ui-menu-dynamic ui-shadow':popup}\" \n            [class]=\"styleClass\" [ngStyle]=\"style\" (click)=\"preventDocumentDefault=true\">\n            <ul class=\"ui-menu-list ui-helper-reset\">\n                <template ngFor let-submenu [ngForOf]=\"model\" *ngIf=\"hasSubMenu()\">\n                    <li class=\"ui-widget-header ui-corner-all\"><h3>{{submenu.label}}</h3></li>\n                    <li *ngFor=\"let item of submenu.items\" class=\"ui-menuitem ui-widget ui-corner-all\">\n                        <a #link [href]=\"item.url||'#'\" class=\"ui-menuitem-link ui-corner-all\" \n                            [ngClass]=\"{'ui-state-hover':link==hoveredItem&&!item.disabled,'ui-state-disabled':item.disabled}\"\n                            (mouseenter)=\"hoveredItem=$event.target\" (mouseleave)=\"hoveredItem=null\" (click)=\"itemClick($event, item)\">\n                            <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"item.icon\" [ngClass]=\"item.icon\"></span>\n                            <span class=\"ui-menuitem-text\">{{item.label}}</span>\n                        </a>\n                    </li>\n                </template>\n                <template ngFor let-item [ngForOf]=\"model\" *ngIf=\"!hasSubMenu()\">\n                    <li class=\"ui-menuitem ui-widget ui-corner-all\">\n                        <a #link [href]=\"item.url||'#'\" class=\"ui-menuitem-link ui-corner-all\" \n                            [ngClass]=\"{'ui-state-hover':link==hoveredItem&&!item.disabled,'ui-state-disabled':item.disabled}\"\n                            (mouseenter)=\"hoveredItem=$event.target\" (mouseleave)=\"hoveredItem=null\" (click)=\"itemClick($event, item)\">\n                            <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"item.icon\" [ngClass]=\"item.icon\"></span>\n                            <span class=\"ui-menuitem-text\">{{item.label}}</span>\n                        </a>\n                    </li>\n                </template>\n            </ul>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer, router_1.Router])], Menu);
        return Menu;
    }();
    exports.Menu = Menu;
    var MenuModule = function () {
        function MenuModule() {}
        MenuModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Menu],
            declarations: [Menu]
        }), __metadata('design:paramtypes', [])], MenuModule);
        return MenuModule;
    }();
    exports.MenuModule = MenuModule;
    

    return module.exports;
});
$__System.registerDynamic("48", ["3", "9", "26", "d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var router_1 = $__require("d");
    var MenubarSub = function () {
        function MenubarSub(domHandler, router) {
            this.domHandler = domHandler;
            this.router = router;
        }
        MenubarSub.prototype.onItemMouseEnter = function (event, item, menuitem) {
            if (menuitem.disabled) {
                return;
            }
            this.activeItem = item;
            this.activeLink = item.children[0];
            var nextElement = item.children[0].nextElementSibling;
            if (nextElement) {
                var sublist = nextElement.children[0];
                sublist.style.zIndex = ++domhandler_1.DomHandler.zindex;
                if (this.root) {
                    sublist.style.top = this.domHandler.getOuterHeight(item.children[0]) + 'px';
                    sublist.style.left = '0px';
                } else {
                    sublist.style.top = '0px';
                    sublist.style.left = this.domHandler.getOuterWidth(item.children[0]) + 'px';
                }
            }
        };
        MenubarSub.prototype.onItemMouseLeave = function (event, link) {
            this.activeItem = null;
            this.activeLink = null;
        };
        MenubarSub.prototype.itemClick = function (event, item) {
            if (item.disabled) {
                event.preventDefault();
                return;
            }
            if (!item.url || item.routerLink) {
                event.preventDefault();
            }
            if (item.command) {
                if (!item.eventEmitter) {
                    item.eventEmitter = new core_1.EventEmitter();
                    item.eventEmitter.subscribe(item.command);
                }
                item.eventEmitter.emit({
                    originalEvent: event,
                    item: item
                });
            }
            if (item.routerLink) {
                this.router.navigate(item.routerLink);
            }
            this.activeItem = null;
            this.activeLink = null;
        };
        MenubarSub.prototype.listClick = function (event) {
            this.activeItem = null;
            this.activeLink = null;
        };
        __decorate([core_1.Input(), __metadata('design:type', Object)], MenubarSub.prototype, "item", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], MenubarSub.prototype, "root", void 0);
        MenubarSub = __decorate([core_1.Component({
            selector: 'p-menubarSub',
            template: "\n        <ul [ngClass]=\"{'ui-helper-reset':root, 'ui-widget-content ui-corner-all ui-helper-clearfix ui-menu-child ui-shadow':!root}\" class=\"ui-menu-list\"\n            (click)=\"listClick($event)\">\n            <template ngFor let-child [ngForOf]=\"(root ? item : item.items)\">\n                <li #item [ngClass]=\"{'ui-menuitem ui-widget ui-corner-all':true,'ui-menu-parent':child.items,'ui-menuitem-active':item==activeItem}\"\n                    (mouseenter)=\"onItemMouseEnter($event,item,child)\" (mouseleave)=\"onItemMouseLeave($event,item)\">\n                    <a #link [href]=\"child.url||'#'\" class=\"ui-menuitem-link ui-corner-all\" \n                        [ngClass]=\"{'ui-state-hover':link==activeLink&&!child.disabled,'ui-state-disabled':child.disabled}\" (click)=\"itemClick($event, child)\">\n                        <span class=\"ui-submenu-icon fa fa-fw\" *ngIf=\"child.items\" [ngClass]=\"{'fa-caret-down':root,'fa-caret-right':!root}\"></span>\n                        <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                    </a>\n                    <p-menubarSub class=\"ui-submenu\" [item]=\"child\" *ngIf=\"child.items\"></p-menubarSub>\n                </li>\n            </template>\n        </ul>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [domhandler_1.DomHandler, router_1.Router])], MenubarSub);
        return MenubarSub;
    }();
    exports.MenubarSub = MenubarSub;
    var Menubar = function () {
        function Menubar(el, domHandler, renderer) {
            this.el = el;
            this.domHandler = domHandler;
            this.renderer = renderer;
        }
        Menubar.prototype.unsubscribe = function (item) {
            if (item.eventEmitter) {
                item.eventEmitter.unsubscribe();
            }
            if (item.items) {
                for (var _i = 0, _a = item.items; _i < _a.length; _i++) {
                    var childItem = _a[_i];
                    this.unsubscribe(childItem);
                }
            }
        };
        Menubar.prototype.ngOnDestroy = function () {
            if (this.model) {
                for (var _i = 0, _a = this.model; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.unsubscribe(item);
                }
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], Menubar.prototype, "model", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Menubar.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Menubar.prototype, "styleClass", void 0);
        Menubar = __decorate([core_1.Component({
            selector: 'p-menubar',
            template: "\n        <div [ngClass]=\"{'ui-menubar ui-menu ui-widget ui-widget-content ui-corner-all ui-helper-clearfix':true}\" \n            [class]=\"styleClass\" [ngStyle]=\"style\">\n            <p-menubarSub [item]=\"model\" root=\"root\"></p-menubarSub>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer])], Menubar);
        return Menubar;
    }();
    exports.Menubar = Menubar;
    var MenubarModule = function () {
        function MenubarModule() {}
        MenubarModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Menubar],
            declarations: [Menubar, MenubarSub]
        }), __metadata('design:paramtypes', [])], MenubarModule);
        return MenubarModule;
    }();
    exports.MenubarModule = MenubarModule;
    

    return module.exports;
});
$__System.registerDynamic("3c", ["3", "9"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var Messages = function () {
        function Messages() {
            this.closable = true;
        }
        Messages.prototype.hasMessages = function () {
            return this.value && this.value.length > 0;
        };
        Messages.prototype.getSeverityClass = function () {
            return this.value[0].severity;
        };
        Messages.prototype.clear = function (event) {
            this.value.splice(0, this.value.length);
            event.preventDefault();
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], Messages.prototype, "value", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Messages.prototype, "closable", void 0);
        Messages = __decorate([core_1.Component({
            selector: 'p-messages',
            template: "\n        <div *ngIf=\"hasMessages()\" class=\"ui-messages ui-widget ui-corner-all\" style=\"display:block\"\n                    [ngClass]=\"{'ui-messages-info':(value[0].severity === 'info'),\n                    'ui-messages-warn':(value[0].severity === 'warn'),\n                    'ui-messages-error':(value[0].severity === 'error'),\n                    'ui-messages-success':(value[0].severity === 'success')}\">\n            <a href=\"#\" class=\"ui-messages-close\" (click)=\"clear($event)\" *ngIf=\"closable\">\n                <i class=\"fa fa-close\"></i>\n            </a>\n            <span class=\"ui-messages-icon fa fa-2x fa-info-circle\"></span>\n            <ul>\n                <li *ngFor=\"let msg of value\">\n                    <span class=\"ui-messages-summary\">{{msg.summary}}</span>\n                    <span class=\"ui-messages-detail\">{{msg.detail}}</span>\n                </li>\n            </ul>\n        </div>\n    "
        }), __metadata('design:paramtypes', [])], Messages);
        return Messages;
    }();
    exports.Messages = Messages;
    var MessagesModule = function () {
        function MessagesModule() {}
        MessagesModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Messages],
            declarations: [Messages]
        }), __metadata('design:paramtypes', [])], MessagesModule);
        return MessagesModule;
    }();
    exports.MessagesModule = MessagesModule;
    

    return module.exports;
});
$__System.registerDynamic("49", ["3", "9", "26", "23"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var forms_1 = $__require("23");
    exports.MULTISELECT_VALUE_ACCESSOR = {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return MultiSelect;
        }),
        multi: true
    };
    var MultiSelect = function () {
        function MultiSelect(el, domHandler, renderer, differs) {
            this.el = el;
            this.domHandler = domHandler;
            this.renderer = renderer;
            this.onChange = new core_1.EventEmitter();
            this.scrollHeight = '200px';
            this.defaultLabel = 'Choose';
            this.onModelChange = function () {};
            this.onModelTouched = function () {};
            this.differ = differs.find([]).create(null);
        }
        MultiSelect.prototype.ngOnInit = function () {
            var _this = this;
            this.updateLabel();
            this.documentClickListener = this.renderer.listenGlobal('body', 'click', function () {
                if (!_this.selfClick && _this.overlayVisible) {
                    _this.hide();
                }
                _this.selfClick = false;
                _this.panelClick = false;
            });
        };
        MultiSelect.prototype.ngAfterViewInit = function () {
            this.container = this.el.nativeElement.children[0];
            this.panel = this.domHandler.findSingle(this.el.nativeElement, 'div.ui-multiselect-panel');
            if (this.overlayVisible) {
                this.show();
            }
        };
        MultiSelect.prototype.ngAfterViewChecked = function () {
            if (this.filtered) {
                this.domHandler.relativePosition(this.panel, this.container);
                this.filtered = false;
            }
        };
        MultiSelect.prototype.ngDoCheck = function () {
            var changes = this.differ.diff(this.value);
            if (changes) {
                this.updateLabel();
            }
        };
        MultiSelect.prototype.writeValue = function (value) {
            this.value = value;
        };
        MultiSelect.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        MultiSelect.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        MultiSelect.prototype.setDisabledState = function (val) {
            this.disabled = val;
        };
        MultiSelect.prototype.onItemClick = function (event, value) {
            var selectionIndex = this.findSelectionIndex(value);
            if (selectionIndex != -1) {
                this.value.splice(selectionIndex, 1);
            } else {
                this.value = this.value || [];
                this.value.push(value);
            }
            this.onModelChange(this.value);
            this.onChange.emit({ originalEvent: event, value: this.value });
        };
        MultiSelect.prototype.isSelected = function (value) {
            return this.findSelectionIndex(value) != -1;
        };
        MultiSelect.prototype.findSelectionIndex = function (val) {
            var index = -1;
            if (this.value) {
                for (var i = 0; i < this.value.length; i++) {
                    if (this.value[i] == val) {
                        index = i;
                        break;
                    }
                }
            }
            return index;
        };
        MultiSelect.prototype.toggleAll = function (event, checkbox) {
            if (checkbox.checked) {
                this.value = [];
            } else {
                var opts = this.getVisibleOptions();
                if (opts) {
                    this.value = [];
                    for (var i = 0; i < opts.length; i++) {
                        this.value.push(opts[i].value);
                    }
                }
            }
            checkbox.checked = !checkbox.checked;
            this.onModelChange(this.value);
            this.onChange.emit({ originalEvent: event, value: this.value });
        };
        MultiSelect.prototype.isAllChecked = function () {
            if (this.filterValue && this.filterValue.trim().length) return this.value && this.visibleOptions && this.value.length == this.visibleOptions.length;else return this.value && this.options && this.value.length == this.options.length;
        };
        MultiSelect.prototype.show = function () {
            this.overlayVisible = true;
            this.panel.style.zIndex = ++domhandler_1.DomHandler.zindex;
            this.domHandler.relativePosition(this.panel, this.container);
            this.domHandler.fadeIn(this.panel, 250);
        };
        MultiSelect.prototype.hide = function () {
            this.overlayVisible = false;
        };
        MultiSelect.prototype.close = function (event) {
            this.hide();
            event.preventDefault();
        };
        MultiSelect.prototype.onMouseenter = function (event) {
            if (!this.disabled) {
                this.hover = true;
            }
        };
        MultiSelect.prototype.onMouseleave = function (event) {
            this.hover = false;
        };
        MultiSelect.prototype.onMouseclick = function (event, input) {
            if (this.disabled) {
                return;
            }
            if (!this.panelClick) {
                if (this.overlayVisible) {
                    this.hide();
                } else {
                    input.focus();
                    this.show();
                }
            }
            this.selfClick = true;
        };
        MultiSelect.prototype.onFocus = function (event) {
            this.focus = true;
        };
        MultiSelect.prototype.onBlur = function (event) {
            this.focus = false;
            this.onModelTouched();
        };
        MultiSelect.prototype.updateLabel = function () {
            if (this.value && this.value.length) {
                var label = '';
                for (var i = 0; i < this.value.length; i++) {
                    if (i != 0) {
                        label = label + ',';
                    }
                    label = label + this.findLabelByValue(this.value[i]);
                }
                this.valuesAsString = label;
            } else {
                this.valuesAsString = this.defaultLabel;
            }
        };
        MultiSelect.prototype.findLabelByValue = function (val) {
            var label = null;
            for (var i = 0; i < this.options.length; i++) {
                var option = this.options[i];
                if (option.value == val) {
                    label = option.label;
                    break;
                }
            }
            return label;
        };
        MultiSelect.prototype.onFilter = function (event) {
            this.filterValue = event.target.value.trim().toLowerCase();
            this.visibleOptions = [];
            for (var i = 0; i < this.options.length; i++) {
                var option = this.options[i];
                if (option.label.toLowerCase().startsWith(this.filterValue.toLowerCase())) {
                    this.visibleOptions.push(option);
                }
            }
            this.filtered = true;
        };
        MultiSelect.prototype.isItemVisible = function (option) {
            if (this.filterValue && this.filterValue.trim().length) {
                for (var i = 0; i < this.visibleOptions.length; i++) {
                    if (this.visibleOptions[i].value == option.value) {
                        return true;
                    }
                }
            } else {
                return true;
            }
        };
        MultiSelect.prototype.getVisibleOptions = function () {
            if (this.filterValue && this.filterValue.trim().length) {
                var items = [];
                for (var i = 0; i < this.options.length; i++) {
                    var option = this.options[i];
                    if (option.label.toLowerCase().startsWith(this.filterValue.toLowerCase())) {
                        items.push(option);
                    }
                }
                return items;
            } else {
                return this.options;
            }
        };
        MultiSelect.prototype.ngOnDestroy = function () {
            this.documentClickListener();
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], MultiSelect.prototype, "options", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], MultiSelect.prototype, "onChange", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], MultiSelect.prototype, "scrollHeight", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], MultiSelect.prototype, "defaultLabel", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], MultiSelect.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], MultiSelect.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], MultiSelect.prototype, "disabled", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], MultiSelect.prototype, "overlayVisible", void 0);
        MultiSelect = __decorate([core_1.Component({
            selector: 'p-multiSelect',
            template: "\n        <div [ngClass]=\"{'ui-multiselect ui-widget ui-state-default ui-corner-all':true,'ui-state-focus': focus,'ui-state-disabled': disabled}\" [ngStyle]=\"style\" [class]=\"styleClass\"\n            (mouseenter)=\"onMouseenter($event)\" (mouseleave)=\"onMouseleave($event)\" (click)=\"onMouseclick($event,in)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #in type=\"text\" readonly=\"readonly\" (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\">\n            </div>\n            <div class=\"ui-multiselect-label-container\" [title]=\"valuesAsString\">\n                <label [ngClass]=\"{'ui-multiselect-label ui-corner-all':true,'ui-state-hover':hover,'ui-state-focus':focus}\">{{valuesAsString}}</label>\n            </div>\n            <div [ngClass]=\"{'ui-multiselect-trigger ui-state-default ui-corner-right':true,'ui-state-hover':hover,'ui-state-focus':focus}\">\n                <span class=\"fa fa-fw fa-caret-down ui-c\"></span>\n            </div>\n            <div class=\"ui-multiselect-panel ui-widget ui-widget-content ui-corner-all ui-shadow\" [style.display]=\"overlayVisible ? 'block' : 'none'\" (click)=\"panelClick=true\">\n                <div class=\"ui-widget-header ui-corner-all ui-multiselect-header ui-helper-clearfix\">\n                    <div class=\"ui-chkbox ui-widget\">\n                        <div class=\"ui-helper-hidden-accessible\">\n                            <input #cb type=\"checkbox\" readonly=\"readonly\" [checked]=\"isAllChecked()\">\n                        </div>\n                        <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" [ngClass]=\"{'ui-state-hover':hoverToggleAll}\"\n                            (mouseenter)=\"hoverToggleAll=true\" (mouseleave)=\"hoverToggleAll=false\" (click)=\"toggleAll($event,cb)\">\n                            <span class=\"ui-chkbox-icon ui-c\" [ngClass]=\"{'fa fa-fw fa-check':isAllChecked()}\"></span>\n                        </div>\n                    </div>\n                    <div class=\"ui-multiselect-filter-container\">\n                        <input type=\"text\" role=\"textbox\" (input)=\"onFilter($event)\"\n                                    class=\"ui-inputtext ui-widget ui-state-default ui-corner-all\">\n                        <span class=\"fa fa-fw fa-search\"></span>\n                    </div>\n                    <a class=\"ui-multiselect-close ui-corner-all\" href=\"#\" (click)=\"close($event)\">\n                        <span class=\"fa fa-close\"></span>\n                    </a>\n                </div>\n                <div class=\"ui-multiselect-items-wrapper\">\n                    <ul class=\"ui-multiselect-items ui-multiselect-list ui-widget-content ui-widget ui-corner-all ui-helper-reset\" [style.max-height]=\"scrollHeight||'auto'\">\n                        <li #item *ngFor=\"let option of options\" class=\"ui-multiselect-item ui-corner-all\" (click)=\"onItemClick($event,option.value)\" \n                            [style.display]=\"isItemVisible(option) ? 'block' : 'none'\"\n                            [ngClass]=\"{'ui-state-highlight':isSelected(option.value),'ui-state-hover':hoveredItem==item}\" (mouseenter)=\"hoveredItem=item\" (mouseleave)=\"hoveredItem=null\">\n                            <div class=\"ui-chkbox ui-widget\">\n                                <div class=\"ui-helper-hidden-accessible\">\n                                    <input type=\"checkbox\" readonly=\"readonly\" [checked]=\"isSelected(option.value)\">\n                                </div>\n                                <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" [ngClass]=\"{'ui-state-active':isSelected(option.value)}\">\n                                    <span class=\"ui-chkbox-icon ui-c\" [ngClass]=\"{'fa fa-fw fa-check':isSelected(option.value)}\"></span>\n                                </div>\n                            </div>\n                            <label>{{option.label}}</label>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler, exports.MULTISELECT_VALUE_ACCESSOR]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer, core_1.IterableDiffers])], MultiSelect);
        return MultiSelect;
    }();
    exports.MultiSelect = MultiSelect;
    var MultiSelectModule = function () {
        function MultiSelectModule() {}
        MultiSelectModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [MultiSelect],
            declarations: [MultiSelect]
        }), __metadata('design:paramtypes', [])], MultiSelectModule);
        return MultiSelectModule;
    }();
    exports.MultiSelectModule = MultiSelectModule;
    

    return module.exports;
});
$__System.registerDynamic("4a", ["3", "9", "25", "21", "26"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var button_1 = $__require("25");
    var shared_1 = $__require("21");
    var domhandler_1 = $__require("26");
    var OrderList = function () {
        function OrderList(el, domHandler) {
            this.el = el;
            this.domHandler = domHandler;
            this.onReorder = new core_1.EventEmitter();
        }
        OrderList.prototype.ngAfterViewInit = function () {
            this.listContainer = this.domHandler.findSingle(this.el.nativeElement, 'ul.ui-orderlist-list');
        };
        OrderList.prototype.ngAfterViewChecked = function () {
            if (this.movedUp || this.movedDown) {
                var listItems = this.domHandler.find(this.listContainer, 'li.ui-state-highlight');
                var listItem = void 0;
                if (this.movedUp) listItem = listItems[0];else listItem = listItems[listItems.length - 1];
                this.domHandler.scrollInView(this.listContainer, listItem);
                this.movedUp = false;
                this.movedDown = false;
            }
        };
        OrderList.prototype.onItemClick = function (event, item) {
            var metaKey = event.metaKey || event.ctrlKey;
            var index = this.findIndexInList(item, this.selectedItems);
            var selected = index != -1;
            if (selected && metaKey) {
                this.selectedItems.splice(index, 1);
            } else {
                this.selectedItems = metaKey ? this.selectedItems || [] : [];
                this.selectedItems.push(item);
            }
        };
        OrderList.prototype.isSelected = function (item) {
            return this.findIndexInList(item, this.selectedItems) != -1;
        };
        OrderList.prototype.findIndexInList = function (item, list) {
            var index = -1;
            if (list) {
                for (var i = 0; i < list.length; i++) {
                    if (list[i] == item) {
                        index = i;
                        break;
                    }
                }
            }
            return index;
        };
        OrderList.prototype.moveUp = function (event, listElement) {
            if (this.selectedItems) {
                for (var i = 0; i < this.selectedItems.length; i++) {
                    var selectedItem = this.selectedItems[i];
                    var selectedItemIndex = this.findIndexInList(selectedItem, this.value);
                    if (selectedItemIndex != 0) {
                        var movedItem = this.value[selectedItemIndex];
                        var temp = this.value[selectedItemIndex - 1];
                        this.value[selectedItemIndex - 1] = movedItem;
                        this.value[selectedItemIndex] = temp;
                    } else {
                        break;
                    }
                }
                this.movedUp = true;
                this.onReorder.emit(event);
            }
        };
        OrderList.prototype.moveTop = function (event, listElement) {
            if (this.selectedItems) {
                for (var i = 0; i < this.selectedItems.length; i++) {
                    var selectedItem = this.selectedItems[i];
                    var selectedItemIndex = this.findIndexInList(selectedItem, this.value);
                    if (selectedItemIndex != 0) {
                        var movedItem = this.value.splice(selectedItemIndex, 1)[0];
                        this.value.unshift(movedItem);
                        listElement.scrollTop = 0;
                    } else {
                        break;
                    }
                }
                this.onReorder.emit(event);
                listElement.scrollTop = 0;
            }
        };
        OrderList.prototype.moveDown = function (event, listElement) {
            if (this.selectedItems) {
                for (var i = this.selectedItems.length - 1; i >= 0; i--) {
                    var selectedItem = this.selectedItems[i];
                    var selectedItemIndex = this.findIndexInList(selectedItem, this.value);
                    if (selectedItemIndex != this.value.length - 1) {
                        var movedItem = this.value[selectedItemIndex];
                        var temp = this.value[selectedItemIndex + 1];
                        this.value[selectedItemIndex + 1] = movedItem;
                        this.value[selectedItemIndex] = temp;
                    } else {
                        break;
                    }
                }
                this.movedDown = true;
                this.onReorder.emit(event);
            }
        };
        OrderList.prototype.moveBottom = function (event, listElement) {
            if (this.selectedItems) {
                for (var i = this.selectedItems.length - 1; i >= 0; i--) {
                    var selectedItem = this.selectedItems[i];
                    var selectedItemIndex = this.findIndexInList(selectedItem, this.value);
                    if (selectedItemIndex != this.value.length - 1) {
                        var movedItem = this.value.splice(selectedItemIndex, 1)[0];
                        this.value.push(movedItem);
                    } else {
                        break;
                    }
                }
                this.onReorder.emit(event);
                listElement.scrollTop = listElement.scrollHeight;
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], OrderList.prototype, "value", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], OrderList.prototype, "header", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], OrderList.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], OrderList.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], OrderList.prototype, "listStyle", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], OrderList.prototype, "responsive", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], OrderList.prototype, "onReorder", void 0);
        __decorate([core_1.ContentChild(core_1.TemplateRef), __metadata('design:type', core_1.TemplateRef)], OrderList.prototype, "itemTemplate", void 0);
        OrderList = __decorate([core_1.Component({
            selector: 'p-orderList',
            template: "\n        <div [ngClass]=\"{'ui-orderlist ui-grid ui-widget':true,'ui-grid-responsive':responsive}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-grid-row\">\n                <div class=\"ui-orderlist-controls ui-grid-col-2\">\n                    <button type=\"button\" pButton icon=\"fa-angle-up\" (click)=\"moveUp($event,listelement)\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-double-up\" (click)=\"moveTop($event,listelement)\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-down\" (click)=\"moveDown($event,listelement)\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-double-down\" (click)=\"moveBottom($event,listelement)\"></button>\n                </div>\n                <div class=\"ui-grid-col-10\">\n                    <div class=\"ui-orderlist-caption ui-widget-header ui-corner-top\" *ngIf=\"header\">{{header}}</div>\n                    <ul #listelement class=\"ui-widget-content ui-orderlist-list ui-corner-bottom\" [ngStyle]=\"listStyle\">\n                        <li *ngFor=\"let item of value\" \n                            [ngClass]=\"{'ui-orderlist-item':true,'ui-state-hover':(hoveredItem==item),'ui-state-highlight':isSelected(item)}\"\n                            (mouseenter)=\"hoveredItem=item\" (mouseleave)=\"hoveredItem=null\" (click)=\"onItemClick($event,item)\">\n                            <template [pTemplateWrapper]=\"itemTemplate\" [item]=\"item\"></template>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler])], OrderList);
        return OrderList;
    }();
    exports.OrderList = OrderList;
    var OrderListModule = function () {
        function OrderListModule() {}
        OrderListModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule, button_1.ButtonModule, shared_1.SharedModule],
            exports: [OrderList, shared_1.SharedModule],
            declarations: [OrderList]
        }), __metadata('design:paramtypes', [])], OrderListModule);
        return OrderListModule;
    }();
    exports.OrderListModule = OrderListModule;
    

    return module.exports;
});
$__System.registerDynamic("4b", ["3", "9", "26"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var OverlayPanel = function () {
        function OverlayPanel(el, domHandler, renderer) {
            this.el = el;
            this.domHandler = domHandler;
            this.renderer = renderer;
            this.dismissable = true;
            this.onBeforeShow = new core_1.EventEmitter();
            this.onAfterShow = new core_1.EventEmitter();
            this.onBeforeHide = new core_1.EventEmitter();
            this.onAfterHide = new core_1.EventEmitter();
            this.visible = false;
        }
        OverlayPanel.prototype.ngOnInit = function () {
            var _this = this;
            if (this.dismissable) {
                this.documentClickListener = this.renderer.listenGlobal('body', 'click', function () {
                    if (!_this.selfClick && !_this.targetEvent) {
                        _this.hide();
                    }
                    _this.selfClick = false;
                    _this.targetEvent = false;
                });
            }
        };
        OverlayPanel.prototype.ngAfterViewInit = function () {
            this.container = this.el.nativeElement.children[0];
            if (this.appendTo) {
                if (this.appendTo === 'body') document.body.appendChild(this.container);else this.appendTo.appendChild(this.container);
            }
        };
        OverlayPanel.prototype.toggle = function (event, target) {
            var currentTarget = target || event.currentTarget || event.target;
            if (!this.target || this.target == currentTarget) {
                if (this.visible) this.hide();else this.show(event, target);
            } else {
                this.show(event, target);
            }
            if (this.dismissable) {
                this.targetEvent = true;
            }
            this.target = currentTarget;
        };
        OverlayPanel.prototype.show = function (event, target) {
            if (this.dismissable) {
                this.targetEvent = true;
            }
            this.onBeforeShow.emit(null);
            var elementTarget = target || event.currentTarget || event.target;
            this.container.style.zIndex = ++domhandler_1.DomHandler.zindex;
            if (this.visible) {
                this.domHandler.absolutePosition(this.container, elementTarget);
            } else {
                this.visible = true;
                this.domHandler.absolutePosition(this.container, elementTarget);
                this.domHandler.fadeIn(this.container, 250);
            }
            this.onAfterShow.emit(null);
        };
        OverlayPanel.prototype.hide = function () {
            if (this.visible) {
                this.onBeforeHide.emit(null);
                this.visible = false;
                this.onAfterHide.emit(null);
            }
        };
        OverlayPanel.prototype.onPanelClick = function () {
            if (this.dismissable) {
                this.selfClick = true;
            }
        };
        OverlayPanel.prototype.onCloseClick = function (event) {
            this.hide();
            if (this.dismissable) {
                this.selfClick = true;
            }
            event.preventDefault();
        };
        OverlayPanel.prototype.ngOnDestroy = function () {
            if (this.documentClickListener) {
                this.documentClickListener();
            }
            if (this.appendTo) {
                this.el.nativeElement.appendChild(this.container);
            }
            this.target = null;
        };
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], OverlayPanel.prototype, "dismissable", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], OverlayPanel.prototype, "showCloseIcon", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], OverlayPanel.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], OverlayPanel.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], OverlayPanel.prototype, "appendTo", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], OverlayPanel.prototype, "onBeforeShow", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], OverlayPanel.prototype, "onAfterShow", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], OverlayPanel.prototype, "onBeforeHide", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], OverlayPanel.prototype, "onAfterHide", void 0);
        OverlayPanel = __decorate([core_1.Component({
            selector: 'p-overlayPanel',
            template: "\n        <div [ngClass]=\"'ui-overlaypanel ui-widget ui-widget-content ui-corner-all ui-shadow'\" [ngStyle]=\"style\" [class]=\"styleClass\"\n            [style.display]=\"visible ? 'block' : 'none'\" (click)=\"onPanelClick()\">\n            <div class=\"ui-overlaypanel-content\">\n                <ng-content></ng-content>\n            </div>\n            <a href=\"#\" *ngIf=\"showCloseIcon\" class=\"ui-overlaypanel-close ui-state-default\" [ngClass]=\"{'ui-state-hover':hoverCloseIcon}\"\n                (mouseenter)=\"hoverCloseIcon=true\" (mouseleave)=\"hoverCloseIcon=false\" (click)=\"onCloseClick($event)\"><span class=\"fa fa-fw fa-close\"></span></a>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer])], OverlayPanel);
        return OverlayPanel;
    }();
    exports.OverlayPanel = OverlayPanel;
    var OverlayPanelModule = function () {
        function OverlayPanelModule() {}
        OverlayPanelModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [OverlayPanel],
            declarations: [OverlayPanel]
        }), __metadata('design:paramtypes', [])], OverlayPanelModule);
        return OverlayPanelModule;
    }();
    exports.OverlayPanelModule = OverlayPanelModule;
    

    return module.exports;
});
$__System.registerDynamic("2f", ["3", "9"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var Paginator = function () {
        function Paginator() {
            this.rows = 0;
            this.pageLinkSize = 5;
            this.onPageChange = new core_1.EventEmitter();
            this._totalRecords = 0;
            this._first = 0;
        }
        Object.defineProperty(Paginator.prototype, "totalRecords", {
            get: function () {
                return this._totalRecords;
            },
            set: function (val) {
                this._totalRecords = val;
                this.updatePageLinks();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paginator.prototype, "first", {
            get: function () {
                return this._first;
            },
            set: function (val) {
                this._first = val;
                this.updatePageLinks();
            },
            enumerable: true,
            configurable: true
        });
        Paginator.prototype.isFirstPage = function () {
            return this.getPage() === 0;
        };
        Paginator.prototype.isLastPage = function () {
            return this.getPage() === this.getPageCount() - 1;
        };
        Paginator.prototype.getPageCount = function () {
            return Math.ceil(this.totalRecords / this.rows) || 1;
        };
        Paginator.prototype.calculatePageLinkBoundaries = function () {
            var numberOfPages = this.getPageCount(),
                visiblePages = Math.min(this.pageLinkSize, numberOfPages);
            //calculate range, keep current in middle if necessary
            var start = Math.max(0, Math.ceil(this.getPage() - visiblePages / 2)),
                end = Math.min(numberOfPages - 1, start + visiblePages - 1);
            //check when approaching to last page
            var delta = this.pageLinkSize - (end - start + 1);
            start = Math.max(0, start - delta);
            return [start, end];
        };
        Paginator.prototype.updatePageLinks = function () {
            this.pageLinks = [];
            var boundaries = this.calculatePageLinkBoundaries(),
                start = boundaries[0],
                end = boundaries[1];
            for (var i = start; i <= end; i++) {
                this.pageLinks.push(i + 1);
            }
        };
        Paginator.prototype.changePage = function (p, event) {
            var pc = this.getPageCount();
            if (p >= 0 && p < pc) {
                this.first = this.rows * p;
                var state = {
                    page: p,
                    first: this.first,
                    rows: this.rows,
                    pageCount: pc
                };
                this.updatePageLinks();
                this.onPageChange.emit(state);
            }
            if (event) {
                event.preventDefault();
            }
        };
        Paginator.prototype.getPage = function () {
            return Math.floor(this.first / this.rows);
        };
        Paginator.prototype.changePageToFirst = function (event) {
            this.changePage(0, event);
        };
        Paginator.prototype.changePageToPrev = function (event) {
            this.changePage(this.getPage() - 1, event);
        };
        Paginator.prototype.changePageToNext = function (event) {
            this.changePage(this.getPage() + 1, event);
        };
        Paginator.prototype.changePageToLast = function (event) {
            this.changePage(this.getPageCount() - 1, event);
        };
        Paginator.prototype.onRppChange = function (event) {
            this.rows = this.rowsPerPageOptions[event.target.selectedIndex];
            this.changePageToFirst(event);
        };
        __decorate([core_1.Input(), __metadata('design:type', Number)], Paginator.prototype, "rows", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Paginator.prototype, "pageLinkSize", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Paginator.prototype, "onPageChange", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Paginator.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Paginator.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Array)], Paginator.prototype, "rowsPerPageOptions", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Paginator.prototype, "totalRecords", null);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Paginator.prototype, "first", null);
        Paginator = __decorate([core_1.Component({
            selector: 'p-paginator',
            template: "\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"{'ui-paginator ui-widget-header ui-unselectable-text':true}\">\n            <a href=\"#\" #firstlink class=\"ui-paginator-first ui-paginator-element ui-state-default ui-corner-all\" (mouseenter)=\"hoveredItem = $event.target\" (mouseleave)=\"hoveredItem = null\"\n                        (click)=\"changePageToFirst($event)\" [ngClass]=\"{'ui-state-disabled':isFirstPage(),'ui-state-hover':(firstlink === hoveredItem && !isFirstPage())}\" [tabindex]=\"isFirstPage() ? -1 : null\">\n                <span class=\"fa fa-step-backward\"></span>\n            </a>\n            <a href=\"#\" #prevlink class=\"ui-paginator-prev ui-paginator-element ui-state-default ui-corner-all\" (mouseenter)=\"hoveredItem = $event.target\" (mouseleave)=\"hoveredItem = null\"\n                    (click)=\"changePageToPrev($event)\" [ngClass]=\"{'ui-state-disabled':isFirstPage(),'ui-state-hover':(prevlink === hoveredItem && !isFirstPage())}\" [tabindex]=\"isFirstPage() ? -1 : null\">\n                <span class=\"fa fa-backward\"></span>\n            </a>\n            <span class=\"ui-paginator-pages\">\n                <a href=\"#\" #plink *ngFor=\"let pageLink of pageLinks\" class=\"ui-paginator-page ui-paginator-element ui-state-default ui-corner-all\"\n                    (mouseenter)=\"hoveredItem = $event.target\" (mouseleave)=\"hoveredItem = null\" (click)=\"changePage(pageLink - 1, $event)\"\n                    [ngClass]=\"{'ui-state-hover':(plink === hoveredItem), 'ui-state-active': (pageLink-1 == getPage())}\">{{pageLink}}</a>\n            </span>\n            <a href=\"#\" #nextlink class=\"ui-paginator-next ui-paginator-element ui-state-default ui-corner-all\" (mouseenter)=\"hoveredItem = $event.target\" (mouseleave)=\"hoveredItem = null\"\n                    (click)=\"changePageToNext($event)\" [ngClass]=\"{'ui-state-disabled':isLastPage(),'ui-state-hover':(nextlink === hoveredItem  && !isLastPage())}\" [tabindex]=\"isLastPage() ? -1 : null\">\n                <span class=\"fa fa-forward\"></span>\n            </a>\n            <a href=\"#\" #lastlink class=\"ui-paginator-last ui-paginator-element ui-state-default ui-corner-all\" (mouseenter)=\"hoveredItem = $event.target\" (mouseleave)=\"hoveredItem = null\"\n                    (click)=\"changePageToLast($event)\" [ngClass]=\"{'ui-state-disabled':isLastPage(),'ui-state-hover':(lastlink === hoveredItem  && !isLastPage())}\" [tabindex]=\"isLastPage() ? -1 : null\">\n                <span class=\"fa fa-step-forward\"></span>\n            </a>\n            <select class=\"ui-paginator-rpp-options ui-widget ui-state-default\" *ngIf=\"rowsPerPageOptions\" (change)=\"onRppChange($event)\">\n                <option *ngFor=\"let opt of rowsPerPageOptions\" [value]=\"opt\" [selected]=\"rows == opt\">{{opt}}</option>\n            </select>\n        </div>\n    "
        }), __metadata('design:paramtypes', [])], Paginator);
        return Paginator;
    }();
    exports.Paginator = Paginator;
    var PaginatorModule = function () {
        function PaginatorModule() {}
        PaginatorModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Paginator],
            declarations: [Paginator]
        }), __metadata('design:paramtypes', [])], PaginatorModule);
        return PaginatorModule;
    }();
    exports.PaginatorModule = PaginatorModule;
    

    return module.exports;
});
$__System.registerDynamic("4c", ["3", "9"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var Panel = function () {
        function Panel() {
            this.collapsed = false;
            this.collapsedChange = new core_1.EventEmitter();
            this.onBeforeToggle = new core_1.EventEmitter();
            this.onAfterToggle = new core_1.EventEmitter();
        }
        Panel.prototype.toggle = function (event) {
            var _this = this;
            this.animating = true;
            this.onBeforeToggle.emit({ originalEvent: event, collapsed: this.collapsed });
            if (this.toggleable) {
                if (this.collapsed) this.expand(event);else this.collapse(event);
            }
            this.onAfterToggle.emit({ originalEvent: event, collapsed: this.collapsed });
            //TODO: Use onDone of animate callback instead with RC6
            setTimeout(function () {
                _this.animating = false;
            }, 400);
            event.preventDefault();
        };
        Panel.prototype.expand = function (event) {
            this.collapsed = false;
            this.collapsedChange.emit(this.collapsed);
        };
        Panel.prototype.collapse = function (event) {
            this.collapsed = true;
            this.collapsedChange.emit(this.collapsed);
        };
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Panel.prototype, "toggleable", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Panel.prototype, "header", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Panel.prototype, "collapsed", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Panel.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Panel.prototype, "styleClass", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Panel.prototype, "collapsedChange", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Panel.prototype, "onBeforeToggle", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Panel.prototype, "onAfterToggle", void 0);
        Panel = __decorate([core_1.Component({
            selector: 'p-panel',
            template: "\n        <div [ngClass]=\"'ui-panel ui-widget ui-widget-content ui-corner-all'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-panel-titlebar ui-widget-header ui-helper-clearfix ui-corner-all\">\n                <span class=\"ui-panel-title\" *ngIf=\"header\">{{header}}</span>\n                <ng-content select=\"header\"></ng-content>\n                <a *ngIf=\"toggleable\" class=\"ui-panel-titlebar-icon ui-panel-titlebar-toggler ui-corner-all ui-state-default\" href=\"#\"\n                    [ngClass]=\"{'ui-state-hover':hoverToggler}\" (mouseenter)=\"hoverToggler=true\" (mouseleave)=\"hoverToggler=false\" (click)=\"toggle($event)\">\n                    <span class=\"fa fa-fw\" [ngClass]=\"{'fa-minus': !collapsed,'fa-plus':collapsed}\"></span>\n                </a>\n            </div>\n            <div class=\"ui-panel-content-wrapper\" [@panelContent]=\"collapsed ? 'hidden' : 'visible'\" \n                [ngClass]=\"{'ui-panel-content-wrapper-overflown': collapsed||animating}\">\n                <div class=\"ui-panel-content ui-widget-content\">\n                    <ng-content></ng-content>\n                </div>\n            </div>\n        </div>\n    ",
            animations: [core_1.trigger('panelContent', [core_1.state('hidden', core_1.style({
                height: '0px'
            })), core_1.state('visible', core_1.style({
                height: '*'
            })), core_1.transition('visible => hidden', core_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')), core_1.transition('hidden => visible', core_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))])]
        }), __metadata('design:paramtypes', [])], Panel);
        return Panel;
    }();
    exports.Panel = Panel;
    var PanelModule = function () {
        function PanelModule() {}
        PanelModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Panel],
            declarations: [Panel]
        }), __metadata('design:paramtypes', [])], PanelModule);
        return PanelModule;
    }();
    exports.PanelModule = PanelModule;
    

    return module.exports;
});
$__System.registerDynamic("4d", ["3", "9", "d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var router_1 = $__require("d");
    var BasePanelMenuItem = function () {
        function BasePanelMenuItem(router) {
            this.router = router;
        }
        BasePanelMenuItem.prototype.handleClick = function (event, item) {
            if (item.disabled) {
                event.preventDefault();
                return;
            }
            item.expanded = !item.expanded;
            event.preventDefault();
            if (!item.url || item.routerLink) {
                event.preventDefault();
            }
            if (item.command) {
                if (!item.eventEmitter) {
                    item.eventEmitter = new core_1.EventEmitter();
                    item.eventEmitter.subscribe(item.command);
                }
                item.eventEmitter.emit({
                    originalEvent: event,
                    item: item
                });
            }
            if (item.routerLink) {
                this.router.navigate(item.routerLink);
            }
        };
        return BasePanelMenuItem;
    }();
    exports.BasePanelMenuItem = BasePanelMenuItem;
    var PanelMenuSub = function (_super) {
        __extends(PanelMenuSub, _super);
        function PanelMenuSub(router) {
            _super.call(this, router);
        }
        __decorate([core_1.Input(), __metadata('design:type', Object)], PanelMenuSub.prototype, "item", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], PanelMenuSub.prototype, "expanded", void 0);
        PanelMenuSub = __decorate([core_1.Component({
            selector: 'p-panelMenuSub',
            template: "\n        <ul class=\"ui-menu-list ui-helper-reset\" [style.display]=\"expanded ? 'block' : 'none'\">\n            <li *ngFor=\"let child of item.items\" class=\"ui-menuitem ui-corner-all\" [ngClass]=\"{'ui-menu-parent':child.items}\">\n                <a #link [href]=\"child.url||'#'\" class=\"ui-menuitem-link ui-corner-all\" \n                    [ngClass]=\"{'ui-menuitem-link-hasicon':child.icon&&child.items,'ui-state-hover':(hoveredLink==link&&!child.disabled),'ui-state-disabled':child.disabled}\" \n                    (click)=\"handleClick($event,child)\"\n                    (mouseenter)=\"hoveredLink=link\" (mouseleave)=\"hoveredLink=null\">\n                    <span class=\"ui-panelmenu-icon fa fa-fw\" [ngClass]=\"{'fa-caret-right':!child.expanded,'fa-caret-down':child.expanded}\" *ngIf=\"child.items\"></span>\n                    <span class=\"ui-menuitem-icon fa fa-fw\" [ngClass]=\"child.icon\" *ngIf=\"child.icon\"></span>\n                    <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                </a>\n                <p-panelMenuSub [item]=\"child\" [expanded]=\"child.expanded\" *ngIf=\"child.items\"></p-panelMenuSub>\n            </li>\n        </ul>\n    "
        }), __metadata('design:paramtypes', [router_1.Router])], PanelMenuSub);
        return PanelMenuSub;
    }(BasePanelMenuItem);
    exports.PanelMenuSub = PanelMenuSub;
    var PanelMenu = function (_super) {
        __extends(PanelMenu, _super);
        function PanelMenu(router) {
            _super.call(this, router);
        }
        PanelMenu.prototype.unsubscribe = function (item) {
            if (item.eventEmitter) {
                item.eventEmitter.unsubscribe();
            }
            if (item.items) {
                for (var _i = 0, _a = item.items; _i < _a.length; _i++) {
                    var childItem = _a[_i];
                    this.unsubscribe(childItem);
                }
            }
        };
        PanelMenu.prototype.ngOnDestroy = function () {
            if (this.model) {
                for (var _i = 0, _a = this.model; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.unsubscribe(item);
                }
            }
        };
        PanelMenu.prototype.handleClick = function (event, item) {
            var _this = this;
            this.animating = true;
            _super.prototype.handleClick.call(this, event, item);
            //TODO: Use onDone of animate callback instead with RC6
            setTimeout(function () {
                _this.animating = false;
            }, 400);
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], PanelMenu.prototype, "model", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], PanelMenu.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], PanelMenu.prototype, "styleClass", void 0);
        PanelMenu = __decorate([core_1.Component({
            selector: 'p-panelMenu',
            template: "\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"'ui-panelmenu ui-widget'\">\n            <div *ngFor=\"let item of model;let f=first;let l=last;\" class=\"ui-panelmenu-panel\">\n                <div tabindex=\"0\" [ngClass]=\"{'ui-widget ui-panelmenu-header ui-state-default':true,'ui-corner-top':f,'ui-corner-bottom':l&&!item.expanded,\n                    'ui-state-active':item.expanded,'ui-state-hover':(item == hoveredItem && !item.disabled),'ui-state-disabled':item.disabled}\">\n                    <a [href]=\"item.url||'#'\" [ngClass]=\"{'ui-panelmenu-headerlink-hasicon':item.icon}\"\n                        (mouseenter)=\"hoveredItem=item\" (mouseleave)=\"hoveredItem=null\" (click)=\"handleClick($event,item)\">\n                        <span class=\"ui-panelmenu-icon fa fa-fw\" [ngClass]=\"{'fa-caret-right':!item.expanded,'fa-caret-down':item.expanded}\"></span>\n                        <span class=\"ui-menuitem-icon fa fa-fw\" [ngClass]=\"item.icon\" *ngIf=\"item.icon\"></span>\n                        <span>{{item.label}}</span>\n                    </a>\n                </div>\n                <div class=\"ui-panelmenu-content-wrapper\" [@rootItem]=\"item.expanded ? 'visible' : 'hidden'\" \n                    [ngClass]=\"{'ui-panelmenu-content-wrapper-overflown': !item.expanded||animating}\">\n                    <div class=\"ui-panelmenu-content ui-widget-content\">\n                        <p-panelMenuSub [item]=\"item\" [expanded]=\"true\"></p-panelMenuSub>\n                    </div>\n                </div>\n            </div>\n        </div>\n    ",
            animations: [core_1.trigger('rootItem', [core_1.state('hidden', core_1.style({
                height: '0px'
            })), core_1.state('visible', core_1.style({
                height: '*'
            })), core_1.transition('visible => hidden', core_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')), core_1.transition('hidden => visible', core_1.animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))])]
        }), __metadata('design:paramtypes', [router_1.Router])], PanelMenu);
        return PanelMenu;
    }(BasePanelMenuItem);
    exports.PanelMenu = PanelMenu;
    var PanelMenuModule = function () {
        function PanelMenuModule() {}
        PanelMenuModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [PanelMenu],
            declarations: [PanelMenu, PanelMenuSub]
        }), __metadata('design:paramtypes', [])], PanelMenuModule);
        return PanelMenuModule;
    }();
    exports.PanelMenuModule = PanelMenuModule;
    

    return module.exports;
});
$__System.registerDynamic("4e", ["3", "9", "26"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var Password = function () {
        function Password(el, domHandler) {
            this.el = el;
            this.domHandler = domHandler;
            this.promptLabel = 'Please enter a password';
            this.weakLabel = 'Weak';
            this.mediumLabel = 'Medium';
            this.strongLabel = 'Strong';
        }
        Password.prototype.ngAfterViewInit = function () {
            this.panel = document.createElement('div');
            this.panel.className = 'ui-password-panel ui-widget ui-state-highlight ui-corner-all ui-helper-hidden ui-password-panel-overlay';
            this.meter = document.createElement('div');
            this.meter.className = 'ui-password-meter';
            this.info = document.createElement('div');
            this.info.className = 'ui-password-info';
            this.info.textContent = this.promptLabel;
            this.panel.appendChild(this.meter);
            this.panel.appendChild(this.info);
            document.body.appendChild(this.panel);
        };
        Password.prototype.onMouseover = function (e) {
            this.hover = true;
        };
        Password.prototype.onMouseout = function (e) {
            this.hover = false;
        };
        Password.prototype.onFocus = function (e) {
            this.focus = true;
            this.domHandler.removeClass(this.panel, 'ui-helper-hidden');
            this.domHandler.absolutePosition(this.panel, this.el.nativeElement);
            this.domHandler.fadeIn(this.panel, 250);
        };
        Password.prototype.onBlur = function (e) {
            this.focus = false;
            this.domHandler.addClass(this.panel, 'ui-helper-hidden');
        };
        Password.prototype.onKeyup = function (e) {
            var value = e.target.value,
                label = null,
                meterPos = null;
            if (value.length === 0) {
                label = this.promptLabel;
                meterPos = '0px 0px';
            } else {
                var score = this.testStrength(value);
                if (score < 30) {
                    label = this.weakLabel;
                    meterPos = '0px -10px';
                } else if (score >= 30 && score < 80) {
                    label = this.mediumLabel;
                    meterPos = '0px -20px';
                } else if (score >= 80) {
                    label = this.strongLabel;
                    meterPos = '0px -30px';
                }
            }
            this.meter.style.backgroundPosition = meterPos;
            this.info.textContent = label;
        };
        Password.prototype.testStrength = function (str) {
            var grade = 0;
            var val;
            val = str.match('[0-9]');
            grade += this.normalize(val ? val.length : 1 / 4, 1) * 25;
            val = str.match('[a-zA-Z]');
            grade += this.normalize(val ? val.length : 1 / 2, 3) * 10;
            val = str.match('[!@#$%^&*?_~.,;=]');
            grade += this.normalize(val ? val.length : 1 / 6, 1) * 35;
            val = str.match('[A-Z]');
            grade += this.normalize(val ? val.length : 1 / 6, 1) * 30;
            grade *= str.length / 8;
            return grade > 100 ? 100 : grade;
        };
        Password.prototype.normalize = function (x, y) {
            var diff = x - y;
            if (diff <= 0) return x / y;else return 1 + 0.5 * (x / (x + y / 4));
        };
        Password.prototype.isDisabled = function () {
            return this.el.nativeElement.disabled;
        };
        Password.prototype.ngOnDestroy = function () {
            this.panel.removeChild(this.meter);
            this.panel.removeChild(this.info);
            document.body.removeChild(this.panel);
            this.panel = null;
            this.meter = null;
            this.info = null;
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], Password.prototype, "promptLabel", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Password.prototype, "weakLabel", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Password.prototype, "mediumLabel", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Password.prototype, "strongLabel", void 0);
        __decorate([core_1.HostListener('mouseover', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Password.prototype, "onMouseover", null);
        __decorate([core_1.HostListener('mouseout', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Password.prototype, "onMouseout", null);
        __decorate([core_1.HostListener('focus', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Password.prototype, "onFocus", null);
        __decorate([core_1.HostListener('blur', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Password.prototype, "onBlur", null);
        __decorate([core_1.HostListener('keyup', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Password.prototype, "onKeyup", null);
        Password = __decorate([core_1.Directive({
            selector: '[pPassword]',
            host: {
                '[class.ui-inputtext]': 'true',
                '[class.ui-corner-all]': 'true',
                '[class.ui-state-default]': 'true',
                '[class.ui-widget]': 'true',
                '[class.ui-state-hover]': 'hover',
                '[class.ui-state-focus]': 'focus',
                '[class.ui-state-disabled]': 'isDisabled()'
            },
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler])], Password);
        return Password;
    }();
    exports.Password = Password;
    var PasswordModule = function () {
        function PasswordModule() {}
        PasswordModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Password],
            declarations: [Password]
        }), __metadata('design:paramtypes', [])], PasswordModule);
        return PasswordModule;
    }();
    exports.PasswordModule = PasswordModule;
    

    return module.exports;
});
$__System.registerDynamic("25", ["3", "26", "9"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var domhandler_1 = $__require("26");
    var common_1 = $__require("9");
    var Button = function () {
        function Button(el, domHandler) {
            this.el = el;
            this.domHandler = domHandler;
            this.iconPos = 'left';
        }
        Button.prototype.ngAfterViewInit = function () {
            this.domHandler.addMultipleClasses(this.el.nativeElement, this.getStyleClass());
            if (this.icon) {
                var iconElement = document.createElement("span");
                var iconPosClass = this.iconPos == 'right' ? 'ui-button-icon-right' : 'ui-button-icon-left';
                iconElement.className = iconPosClass + ' ui-c fa fa-fw ' + this.icon;
                this.el.nativeElement.appendChild(iconElement);
            }
            var labelElement = document.createElement("span");
            labelElement.className = 'ui-button-text ui-c';
            labelElement.appendChild(document.createTextNode(this.label || 'ui-button'));
            this.el.nativeElement.appendChild(labelElement);
            this.initialized = true;
        };
        Button.prototype.onMouseenter = function (e) {
            this.hover = true;
        };
        Button.prototype.onMouseleave = function (e) {
            this.hover = false;
            this.active = false;
        };
        Button.prototype.onMouseDown = function (e) {
            this.active = true;
        };
        Button.prototype.onMouseUp = function (e) {
            this.active = false;
        };
        Button.prototype.onFocus = function (e) {
            this.focus = true;
        };
        Button.prototype.onBlur = function (e) {
            this.focus = false;
        };
        Button.prototype.isDisabled = function () {
            return this.el.nativeElement.disabled;
        };
        Button.prototype.getStyleClass = function () {
            var styleClass = 'ui-button ui-widget ui-state-default ui-corner-all';
            if (this.icon) {
                if (this.label != null && this.label != undefined) {
                    if (this.iconPos == 'left') styleClass = styleClass + ' ui-button-text-icon-left';else styleClass = styleClass + ' ui-button-text-icon-right';
                } else {
                    styleClass = styleClass + ' ui-button-icon-only';
                }
            } else {
                styleClass = styleClass + ' ui-button-text-only';
            }
            return styleClass;
        };
        Object.defineProperty(Button.prototype, "label", {
            get: function () {
                return this._label;
            },
            set: function (val) {
                this._label = val;
                if (this.initialized) {
                    this.domHandler.findSingle(this.el.nativeElement, '.ui-button-text').textContent = this._label;
                }
            },
            enumerable: true,
            configurable: true
        });
        Button.prototype.ngOnDestroy = function () {
            while (this.el.nativeElement.hasChildNodes()) {
                this.el.nativeElement.removeChild(this.el.nativeElement.lastChild);
            }
            this.initialized = false;
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], Button.prototype, "icon", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Button.prototype, "iconPos", void 0);
        __decorate([core_1.HostListener('mouseenter', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Button.prototype, "onMouseenter", null);
        __decorate([core_1.HostListener('mouseleave', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Button.prototype, "onMouseleave", null);
        __decorate([core_1.HostListener('mousedown', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Button.prototype, "onMouseDown", null);
        __decorate([core_1.HostListener('mouseup', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Button.prototype, "onMouseUp", null);
        __decorate([core_1.HostListener('focus', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Button.prototype, "onFocus", null);
        __decorate([core_1.HostListener('blur', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Button.prototype, "onBlur", null);
        __decorate([core_1.Input(), __metadata('design:type', String)], Button.prototype, "label", null);
        Button = __decorate([core_1.Directive({
            selector: '[pButton]',
            host: {
                '[class.ui-state-hover]': 'hover&&!isDisabled()',
                '[class.ui-state-focus]': 'focus',
                '[class.ui-state-active]': 'active',
                '[class.ui-state-disabled]': 'isDisabled()'
            },
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler])], Button);
        return Button;
    }();
    exports.Button = Button;
    var ButtonModule = function () {
        function ButtonModule() {}
        ButtonModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Button],
            declarations: [Button]
        }), __metadata('design:paramtypes', [])], ButtonModule);
        return ButtonModule;
    }();
    exports.ButtonModule = ButtonModule;
    

    return module.exports;
});
$__System.registerDynamic("4f", ["3", "9", "25", "21", "26"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var button_1 = $__require("25");
    var shared_1 = $__require("21");
    var domhandler_1 = $__require("26");
    var PickList = function () {
        function PickList(el, domHandler) {
            this.el = el;
            this.domHandler = domHandler;
        }
        PickList.prototype.ngAfterViewChecked = function () {
            if (this.movedUp || this.movedDown) {
                var listItems = this.domHandler.find(this.reorderedListElement, 'li.ui-state-highlight');
                var listItem = void 0;
                if (this.movedUp) listItem = listItems[0];else listItem = listItems[listItems.length - 1];
                this.domHandler.scrollInView(this.reorderedListElement, listItem);
                this.movedUp = false;
                this.movedDown = false;
                this.reorderedListElement = null;
            }
        };
        PickList.prototype.selectItem = function (event, item) {
            var metaKey = event.metaKey || event.ctrlKey;
            var index = this.findIndexInSelection(item);
            var selected = index != -1;
            if (selected && metaKey) {
                this.selectedItems.splice(index, 1);
            } else {
                this.selectedItems = metaKey ? this.selectedItems || [] : [];
                this.selectedItems.push(item);
            }
        };
        PickList.prototype.moveUp = function (listElement, list) {
            if (this.selectedItems) {
                for (var i = 0; i < this.selectedItems.length; i++) {
                    var selectedItem = this.selectedItems[i];
                    var selectedItemIndex = this.findIndexInList(selectedItem, list);
                    if (selectedItemIndex != 0) {
                        var movedItem = list[selectedItemIndex];
                        var temp = list[selectedItemIndex - 1];
                        list[selectedItemIndex - 1] = movedItem;
                        list[selectedItemIndex] = temp;
                    } else {
                        break;
                    }
                }
                this.movedUp = true;
                this.reorderedListElement = listElement;
            }
        };
        PickList.prototype.moveTop = function (listElement, list) {
            if (this.selectedItems) {
                for (var i = 0; i < this.selectedItems.length; i++) {
                    var selectedItem = this.selectedItems[i];
                    var selectedItemIndex = this.findIndexInList(selectedItem, list);
                    if (selectedItemIndex != 0) {
                        var movedItem = list.splice(selectedItemIndex, 1)[0];
                        list.unshift(movedItem);
                    } else {
                        break;
                    }
                }
                listElement.scrollTop = 0;
            }
        };
        PickList.prototype.moveDown = function (listElement, list) {
            if (this.selectedItems) {
                for (var i = this.selectedItems.length - 1; i >= 0; i--) {
                    var selectedItem = this.selectedItems[i];
                    var selectedItemIndex = this.findIndexInList(selectedItem, list);
                    if (selectedItemIndex != list.length - 1) {
                        var movedItem = list[selectedItemIndex];
                        var temp = list[selectedItemIndex + 1];
                        list[selectedItemIndex + 1] = movedItem;
                        list[selectedItemIndex] = temp;
                    } else {
                        break;
                    }
                }
                this.movedDown = true;
                this.reorderedListElement = listElement;
            }
        };
        PickList.prototype.moveBottom = function (listElement, list) {
            if (this.selectedItems) {
                for (var i = this.selectedItems.length - 1; i >= 0; i--) {
                    var selectedItem = this.selectedItems[i];
                    var selectedItemIndex = this.findIndexInList(selectedItem, list);
                    if (selectedItemIndex != list.length - 1) {
                        var movedItem = list.splice(selectedItemIndex, 1)[0];
                        list.push(movedItem);
                    } else {
                        break;
                    }
                }
                listElement.scrollTop = listElement.scrollHeight;
            }
        };
        PickList.prototype.moveRight = function (targetListElement) {
            if (this.selectedItems) {
                for (var i = 0; i < this.selectedItems.length; i++) {
                    var selectedItem = this.selectedItems[i];
                    if (this.findIndexInList(selectedItem, this.target) == -1) {
                        this.target.push(this.source.splice(this.findIndexInList(selectedItem, this.source), 1)[0]);
                    }
                }
                this.selectedItems = [];
            }
        };
        PickList.prototype.moveAllRight = function () {
            if (this.selectedItems) {
                for (var i = 0; i < this.source.length; i++) {
                    this.target.push(this.source[i]);
                }
                this.source.splice(0, this.source.length);
                this.selectedItems = [];
            }
        };
        PickList.prototype.moveLeft = function (sourceListElement) {
            if (this.selectedItems) {
                for (var i = 0; i < this.selectedItems.length; i++) {
                    var selectedItem = this.selectedItems[i];
                    if (this.findIndexInList(selectedItem, this.source) == -1) {
                        this.source.push(this.target.splice(this.findIndexInList(selectedItem, this.target), 1)[0]);
                    }
                }
                this.selectedItems = [];
            }
        };
        PickList.prototype.moveAllLeft = function () {
            if (this.selectedItems) {
                for (var i = 0; i < this.target.length; i++) {
                    this.source.push(this.target[i]);
                }
                this.target.splice(0, this.target.length);
                this.selectedItems = [];
            }
        };
        PickList.prototype.isSelected = function (item) {
            return this.findIndexInSelection(item) != -1;
        };
        PickList.prototype.findIndexInSelection = function (item) {
            return this.findIndexInList(item, this.selectedItems);
        };
        PickList.prototype.findIndexInList = function (item, list) {
            var index = -1;
            if (list) {
                for (var i = 0; i < list.length; i++) {
                    if (list[i] == item) {
                        index = i;
                        break;
                    }
                }
            }
            return index;
        };
        PickList.prototype.ngOnDestroy = function () {};
        __decorate([core_1.Input(), __metadata('design:type', Array)], PickList.prototype, "source", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Array)], PickList.prototype, "target", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], PickList.prototype, "sourceHeader", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], PickList.prototype, "targetHeader", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], PickList.prototype, "responsive", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], PickList.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], PickList.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], PickList.prototype, "sourceStyle", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], PickList.prototype, "targetStyle", void 0);
        __decorate([core_1.ContentChild(core_1.TemplateRef), __metadata('design:type', core_1.TemplateRef)], PickList.prototype, "itemTemplate", void 0);
        PickList = __decorate([core_1.Component({
            selector: 'p-pickList',
            template: "\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"{'ui-picklist ui-widget ui-helper-clearfix': true, 'ui-picklist-responsive': responsive}\">\n            <div class=\"ui-picklist-source-controls ui-picklist-buttons\">\n                <div class=\"ui-picklist-buttons-cell\">\n                    <button type=\"button\" pButton icon=\"fa-angle-up\" (click)=\"moveUp(sourcelist,source)\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-double-up\" (click)=\"moveTop(sourcelist,source)\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-down\" (click)=\"moveDown(sourcelist,source)\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-double-down\" (click)=\"moveBottom(sourcelist,source)\"></button>\n                </div>\n            </div>\n            <div class=\"ui-picklist-listwrapper ui-picklist-source-wrapper\">\n                <div class=\"ui-picklist-caption ui-widget-header ui-corner-tl ui-corner-tr\" *ngIf=\"sourceHeader\">{{sourceHeader}}</div>\n                <ul #sourcelist class=\"ui-widget-content ui-picklist-list ui-picklist-source ui-corner-bottom\" [ngStyle]=\"sourceStyle\">\n                    <li *ngFor=\"let item of source\" [ngClass]=\"{'ui-picklist-item':true,'ui-state-hover':(hoveredItem==item),'ui-state-highlight':isSelected(item)}\"\n                        (mouseenter)=\"hoveredItem=item\" (mouseleave)=\"hoveredItem=null\" (click)=\"selectItem($event,item)\">\n                        <template [pTemplateWrapper]=\"itemTemplate\" [item]=\"item\"></template>\n                    </li>\n                </ul>\n            </div>\n            <div class=\"ui-picklist-buttons\">\n                <div class=\"ui-picklist-buttons-cell\">\n                    <button type=\"button\" pButton icon=\"fa-angle-right\" (click)=\"moveRight(targetlist)\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-double-right\" (click)=\"moveAllRight()\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-left\" (click)=\"moveLeft(sourcelist)\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-double-left\" (click)=\"moveAllLeft()\"></button>\n                </div>\n            </div>\n            <div class=\"ui-picklist-listwrapper ui-picklist-target-wrapper\">\n                <div class=\"ui-picklist-caption ui-widget-header ui-corner-tl ui-corner-tr\" *ngIf=\"targetHeader\">{{targetHeader}}</div>\n                <ul #targetlist class=\"ui-widget-content ui-picklist-list ui-picklist-target ui-corner-bottom\" [ngStyle]=\"targetStyle\">\n                    <li *ngFor=\"let item of target\" [ngClass]=\"{'ui-picklist-item':true,'ui-state-hover':(hoveredItem==item),'ui-state-highlight':isSelected(item)}\"\n                        (mouseenter)=\"hoveredItem=item\" (mouseleave)=\"hoveredItem=null\" (click)=\"selectItem($event,item)\">\n                        <template [pTemplateWrapper]=\"itemTemplate\" [item]=\"item\"></template>\n                    </li>\n                </ul>\n            </div>\n            <div class=\"ui-picklist-target-controls ui-picklist-buttons\">\n                <div class=\"ui-picklist-buttons-cell\">\n                    <button type=\"button\" pButton icon=\"fa-angle-up\" (click)=\"moveUp(targetlist,target)\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-double-up\" (click)=\"moveTop(targetlist,target)\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-down\" (click)=\"moveDown(targetlist,target)\"></button>\n                    <button type=\"button\" pButton icon=\"fa-angle-double-down\" (click)=\"moveBottom(targetlist,target)\"></button>\n                </div>\n            </div>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler])], PickList);
        return PickList;
    }();
    exports.PickList = PickList;
    var PickListModule = function () {
        function PickListModule() {}
        PickListModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule, button_1.ButtonModule, shared_1.SharedModule],
            exports: [PickList, shared_1.SharedModule],
            declarations: [PickList]
        }), __metadata('design:paramtypes', [])], PickListModule);
        return PickListModule;
    }();
    exports.PickListModule = PickListModule;
    

    return module.exports;
});
$__System.registerDynamic("3d", ["3", "9"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var ProgressBar = function () {
        function ProgressBar() {
            this.showValue = true;
        }
        __decorate([core_1.Input(), __metadata('design:type', Object)], ProgressBar.prototype, "value", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], ProgressBar.prototype, "showValue", void 0);
        ProgressBar = __decorate([core_1.Component({
            selector: 'p-progressBar',
            template: "\n        <div class=\"ui-progressbar ui-widget ui-widget-content ui-corner-all\" role=\"progressbar\" aria-valuemin=\"0\" [attr.aria-valuenow]=\"value\" aria-valuemax=\"100\">\n            <div class=\"ui-progressbar-value ui-progressbar-value-animate ui-widget-header ui-corner-all\" [style.width]=\"value + '%'\" style=\"display:block\"></div>\n            <div class=\"ui-progressbar-label\" [style.display]=\"value ? 'block' : 'none'\" *ngIf=\"showValue\">{{value}}%</div>\n        </div>\n    "
        }), __metadata('design:paramtypes', [])], ProgressBar);
        return ProgressBar;
    }();
    exports.ProgressBar = ProgressBar;
    var ProgressBarModule = function () {
        function ProgressBarModule() {}
        ProgressBarModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [ProgressBar],
            declarations: [ProgressBar]
        }), __metadata('design:paramtypes', [])], ProgressBarModule);
        return ProgressBarModule;
    }();
    exports.ProgressBarModule = ProgressBarModule;
    

    return module.exports;
});
$__System.registerDynamic("50", ["3", "9", "23"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var forms_1 = $__require("23");
    exports.RADIO_VALUE_ACCESSOR = {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return RadioButton;
        }),
        multi: true
    };
    var RadioButton = function () {
        function RadioButton() {
            this.onClick = new core_1.EventEmitter();
            this.onModelChange = function () {};
            this.onModelTouched = function () {};
        }
        RadioButton.prototype.handleClick = function () {
            if (!this.disabled) {
                this.onClick.emit(null);
                this.select();
            }
        };
        RadioButton.prototype.select = function () {
            this.checked = true;
            this.onModelChange(this.value);
        };
        RadioButton.prototype.writeValue = function (model) {
            this.model = model;
            this.checked = this.model == this.value;
        };
        RadioButton.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        RadioButton.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        RadioButton.prototype.setDisabledState = function (val) {
            this.disabled = val;
        };
        RadioButton.prototype.onFocus = function (event) {
            this.focused = true;
        };
        RadioButton.prototype.onBlur = function (event) {
            this.focused = false;
            this.onModelTouched();
        };
        RadioButton.prototype.onChange = function (event) {
            this.select();
        };
        __decorate([core_1.Input(), __metadata('design:type', Object)], RadioButton.prototype, "value", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], RadioButton.prototype, "name", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], RadioButton.prototype, "disabled", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], RadioButton.prototype, "label", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], RadioButton.prototype, "onClick", void 0);
        RadioButton = __decorate([core_1.Component({
            selector: 'p-radioButton',
            template: "\n        <div class=\"ui-radiobutton ui-widget\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input type=\"radio\" [attr.name]=\"name\" [attr.value]=\"value\" [checked]=\"checked\" (change)=\"onChange($event,value)\"\n                    (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\">\n            </div>\n            <div (click)=\"handleClick()\" (mouseenter)=\"hover=true\" (mouseleave)=\"hover=false\"\n                [ngClass]=\"{'ui-radiobutton-box ui-widget ui-state-default':true,\n                'ui-state-hover':hover&&!disabled,'ui-state-active':checked,'ui-state-disabled':disabled,'ui-state-focus':focused}\">\n                <span class=\"ui-radiobutton-icon\" [ngClass]=\"{'fa fa-fw fa-circle':checked}\"></span>\n            </div>\n        </div>\n        <label class=\"ui-radiobutton-label\" (click)=\"select()\" *ngIf=\"label\">{{label}}</label>\n    ",
            providers: [exports.RADIO_VALUE_ACCESSOR]
        }), __metadata('design:paramtypes', [])], RadioButton);
        return RadioButton;
    }();
    exports.RadioButton = RadioButton;
    var RadioButtonModule = function () {
        function RadioButtonModule() {}
        RadioButtonModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [RadioButton],
            declarations: [RadioButton]
        }), __metadata('design:paramtypes', [])], RadioButtonModule);
        return RadioButtonModule;
    }();
    exports.RadioButtonModule = RadioButtonModule;
    

    return module.exports;
});
$__System.registerDynamic("51", ["3", "9", "23"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var forms_1 = $__require("23");
    exports.RATING_VALUE_ACCESSOR = {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return Rating;
        }),
        multi: true
    };
    var Rating = function () {
        function Rating() {
            this.stars = 5;
            this.cancel = true;
            this.onRate = new core_1.EventEmitter();
            this.onCancel = new core_1.EventEmitter();
            this.onModelChange = function () {};
            this.onModelTouched = function () {};
        }
        Rating.prototype.ngOnInit = function () {
            this.starsArray = [];
            for (var i = 0; i < this.stars; i++) {
                this.starsArray[i] = i;
            }
        };
        Rating.prototype.rate = function (event, i) {
            if (!this.readonly && !this.disabled) {
                this.value = i + 1;
                this.onModelChange(this.value);
                this.onModelTouched();
                this.onRate.emit({
                    originalEvent: event,
                    value: i + 1
                });
            }
        };
        Rating.prototype.clear = function (event) {
            if (!this.readonly && !this.disabled) {
                this.value = null;
                this.onModelChange(this.value);
                this.onModelTouched();
                this.onCancel.emit(event);
            }
        };
        Rating.prototype.writeValue = function (value) {
            this.value = value;
        };
        Rating.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        Rating.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        Rating.prototype.setDisabledState = function (val) {
            this.disabled = val;
        };
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Rating.prototype, "disabled", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Rating.prototype, "readonly", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Rating.prototype, "stars", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Rating.prototype, "cancel", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Rating.prototype, "onRate", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Rating.prototype, "onCancel", void 0);
        Rating = __decorate([core_1.Component({
            selector: 'p-rating',
            template: "\n        <div class=\"ui-rating\" [ngClass]=\"{'ui-state-disabled': disabled}\">\n            <div class=\"ui-rating-cancel\" *ngIf=\"cancel\" (click)=\"clear($event)\" [ngClass]=\"{'ui-rating-cancel-hover':hoverCancel}\"\n             (mouseenter)=\"hoverCancel=true\" (mouseleave)=\"hoverCancel=false\"><a></a></div>\n            <div class=\"ui-rating-star\" *ngFor=\"let star of starsArray;let i=index\" (click)=\"rate($event,i)\"\n             [ngClass]=\"{'ui-rating-star-on':(i < value)}\"><a></a></div>\n        </div>\n    ",
            providers: [exports.RATING_VALUE_ACCESSOR]
        }), __metadata('design:paramtypes', [])], Rating);
        return Rating;
    }();
    exports.Rating = Rating;
    var RatingModule = function () {
        function RatingModule() {}
        RatingModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Rating],
            declarations: [Rating]
        }), __metadata('design:paramtypes', [])], RatingModule);
        return RatingModule;
    }();
    exports.RatingModule = RatingModule;
    

    return module.exports;
});
$__System.registerDynamic("52", ["3", "9"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var Schedule = function () {
        function Schedule(el, differs) {
            this.el = el;
            this.aspectRatio = 1.35;
            this.defaultView = 'month';
            this.allDaySlot = true;
            this.allDayText = 'all-day';
            this.slotDuration = '00:30:00';
            this.scrollTime = '06:00:00';
            this.minTime = '00:00:00';
            this.maxTime = '24:00:00';
            this.slotEventOverlap = true;
            this.dragRevertDuration = 500;
            this.dragOpacity = .75;
            this.dragScroll = true;
            this.onDayClick = new core_1.EventEmitter();
            this.onEventClick = new core_1.EventEmitter();
            this.onEventMouseover = new core_1.EventEmitter();
            this.onEventMouseout = new core_1.EventEmitter();
            this.onEventDragStart = new core_1.EventEmitter();
            this.onEventDragStop = new core_1.EventEmitter();
            this.onEventDrop = new core_1.EventEmitter();
            this.onEventResizeStart = new core_1.EventEmitter();
            this.onEventResizeStop = new core_1.EventEmitter();
            this.onEventResize = new core_1.EventEmitter();
            this.viewRender = new core_1.EventEmitter();
            this.differ = differs.find([]).create(null);
            this.initialized = false;
        }
        Schedule.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.schedule = jQuery(this.el.nativeElement.children[0]);
            var options = {
                theme: true,
                header: this.header,
                isRTL: this.rtl,
                weekends: this.weekends,
                hiddenDays: this.hiddenDays,
                fixedWeekCount: this.fixedWeekCount,
                weekNumbers: this.weekNumbers,
                businessHours: this.businessHours,
                height: this.height,
                contentHeight: this.contentHeight,
                aspectRatio: this.aspectRatio,
                eventLimit: this.eventLimit,
                defaultDate: this.defaultDate,
                editable: this.editable,
                eventStartEditable: this.eventStartEditable,
                eventDurationEditable: this.eventDurationEditable,
                defaultView: this.defaultView,
                allDaySlot: this.allDaySlot,
                allDayText: this.allDayText,
                slotDuration: this.slotDuration,
                slotLabelInterval: this.slotLabelInterval,
                snapDuration: this.snapDuration,
                scrollTime: this.scrollTime,
                minTime: this.minTime,
                maxTime: this.maxTime,
                slotEventOverlap: this.slotEventOverlap,
                nowIndicator: this.nowIndicator,
                dragRevertDuration: this.dragRevertDuration,
                dragOpacity: this.dragOpacity,
                dragScroll: this.dragScroll,
                eventOverlap: this.eventOverlap,
                eventConstraint: this.eventConstraint,
                eventRender: this.eventRender,
                events: function (start, end, timezone, callback) {
                    callback(_this.events);
                },
                dayClick: function (date, jsEvent, view) {
                    _this.onDayClick.emit({
                        'date': date,
                        'jsEvent': jsEvent,
                        'view': view
                    });
                },
                eventClick: function (calEvent, jsEvent, view) {
                    _this.onEventClick.emit({
                        'calEvent': calEvent,
                        'jsEvent': jsEvent,
                        'view': view
                    });
                },
                eventMouseover: function (calEvent, jsEvent, view) {
                    _this.onEventMouseover.emit({
                        'calEvent': calEvent,
                        'jsEvent': jsEvent,
                        'view': view
                    });
                },
                eventMouseout: function (calEvent, jsEvent, view) {
                    _this.onEventMouseout.emit({
                        'calEvent': calEvent,
                        'jsEvent': jsEvent,
                        'view': view
                    });
                },
                eventDragStart: function (event, jsEvent, ui, view) {
                    _this.onEventDragStart.emit({
                        'event': event,
                        'jsEvent': jsEvent,
                        'view': view
                    });
                },
                eventDragStop: function (event, jsEvent, ui, view) {
                    _this.onEventDragStop.emit({
                        'event': event,
                        'jsEvent': jsEvent,
                        'view': view
                    });
                },
                eventDrop: function (event, delta, revertFunc, jsEvent, ui, view) {
                    _this.onEventDrop.emit({
                        'event': event,
                        'delta': delta,
                        'revertFunc': revertFunc,
                        'jsEvent': jsEvent,
                        'view': view
                    });
                },
                eventResizeStart: function (event, jsEvent, ui, view) {
                    _this.onEventResizeStart.emit({
                        'event': event,
                        'jsEvent': jsEvent,
                        'view': view
                    });
                },
                eventResizeStop: function (event, jsEvent, ui, view) {
                    _this.onEventResizeStop.emit({
                        'event': event,
                        'jsEvent': jsEvent,
                        'view': view
                    });
                },
                eventResize: function (event, delta, revertFunc, jsEvent, ui, view) {
                    _this.onEventResize.emit({
                        'event': event,
                        'delta': delta,
                        'revertFunc': revertFunc,
                        'jsEvent': jsEvent,
                        'view': view
                    });
                },
                viewRender: function (view, element) {
                    _this.viewRender.emit({
                        'view': view,
                        'element': element
                    });
                }
            };
            if (this.locale) {
                for (var prop in this.locale) {
                    options[prop] = this.locale[prop];
                }
            }
            this.schedule.fullCalendar(options);
            this.initialized = true;
        };
        Schedule.prototype.ngDoCheck = function () {
            var changes = this.differ.diff(this.events);
            if (this.schedule && changes) {
                this.schedule.fullCalendar('refetchEvents');
            }
        };
        Schedule.prototype.ngOnDestroy = function () {
            jQuery(this.el.nativeElement.children[0]).fullCalendar('destroy');
            this.initialized = false;
            this.schedule = null;
        };
        Schedule.prototype.gotoDate = function (date) {
            this.schedule.fullCalendar('gotoDate', date);
        };
        Schedule.prototype.prev = function () {
            this.schedule.fullCalendar('prev');
        };
        Schedule.prototype.next = function () {
            this.schedule.fullCalendar('next');
        };
        Schedule.prototype.prevYear = function () {
            this.schedule.fullCalendar('prevYear');
        };
        Schedule.prototype.nextYear = function () {
            this.schedule.fullCalendar('nextYear');
        };
        Schedule.prototype.today = function () {
            this.schedule.fullCalendar('today');
        };
        Schedule.prototype.incrementDate = function (duration) {
            this.schedule.fullCalendar('incrementDate', duration);
        };
        Schedule.prototype.getDate = function () {
            return this.schedule.fullCalendar('getDate');
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], Schedule.prototype, "events", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Schedule.prototype, "header", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Schedule.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Schedule.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Schedule.prototype, "rtl", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Schedule.prototype, "weekends", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Array)], Schedule.prototype, "hiddenDays", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Schedule.prototype, "fixedWeekCount", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Schedule.prototype, "weekNumbers", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Schedule.prototype, "businessHours", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Schedule.prototype, "height", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Schedule.prototype, "contentHeight", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Schedule.prototype, "aspectRatio", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Schedule.prototype, "eventLimit", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Schedule.prototype, "defaultDate", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Schedule.prototype, "editable", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Schedule.prototype, "eventStartEditable", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Schedule.prototype, "eventDurationEditable", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Schedule.prototype, "defaultView", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Schedule.prototype, "allDaySlot", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Schedule.prototype, "allDayText", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Schedule.prototype, "slotDuration", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Schedule.prototype, "slotLabelInterval", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Schedule.prototype, "snapDuration", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Schedule.prototype, "scrollTime", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Schedule.prototype, "minTime", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Schedule.prototype, "maxTime", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Schedule.prototype, "slotEventOverlap", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Schedule.prototype, "nowIndicator", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Schedule.prototype, "dragRevertDuration", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Schedule.prototype, "dragOpacity", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Schedule.prototype, "dragScroll", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Schedule.prototype, "eventOverlap", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Schedule.prototype, "eventConstraint", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Schedule.prototype, "locale", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Function)], Schedule.prototype, "eventRender", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Schedule.prototype, "onDayClick", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Schedule.prototype, "onEventClick", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Schedule.prototype, "onEventMouseover", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Schedule.prototype, "onEventMouseout", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Schedule.prototype, "onEventDragStart", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Schedule.prototype, "onEventDragStop", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Schedule.prototype, "onEventDrop", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Schedule.prototype, "onEventResizeStart", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Schedule.prototype, "onEventResizeStop", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Schedule.prototype, "onEventResize", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Schedule.prototype, "viewRender", void 0);
        Schedule = __decorate([core_1.Component({
            selector: 'p-schedule',
            template: "\n        <div [ngStyle]=\"style\" [class]=\"styleClass\"></div>\n    "
        }), __metadata('design:paramtypes', [core_1.ElementRef, core_1.IterableDiffers])], Schedule);
        return Schedule;
    }();
    exports.Schedule = Schedule;
    var ScheduleModule = function () {
        function ScheduleModule() {}
        ScheduleModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Schedule],
            declarations: [Schedule]
        }), __metadata('design:paramtypes', [])], ScheduleModule);
        return ScheduleModule;
    }();
    exports.ScheduleModule = ScheduleModule;
    

    return module.exports;
});
$__System.registerDynamic("53", ["3", "9", "23"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var forms_1 = $__require("23");
    exports.SELECTBUTTON_VALUE_ACCESSOR = {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return SelectButton;
        }),
        multi: true
    };
    var SelectButton = function () {
        function SelectButton() {
            this.onChange = new core_1.EventEmitter();
            this.onModelChange = function () {};
            this.onModelTouched = function () {};
        }
        SelectButton.prototype.writeValue = function (value) {
            this.value = value;
        };
        SelectButton.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        SelectButton.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        SelectButton.prototype.setDisabledState = function (val) {
            this.disabled = val;
        };
        SelectButton.prototype.onItemClick = function (event, option) {
            if (this.disabled) {
                return;
            }
            if (this.multiple) {
                var itemIndex = this.findItemIndex(option);
                if (itemIndex != -1) this.value.splice(itemIndex, 1);else this.value.push(option.value);
            } else {
                this.value = option.value;
            }
            this.onModelChange(this.value);
            this.onChange.emit({
                originalEvent: event,
                value: this.value
            });
        };
        SelectButton.prototype.isSelected = function (option) {
            if (this.multiple) return this.findItemIndex(option) != -1;else return option.value == this.value;
        };
        SelectButton.prototype.findItemIndex = function (option) {
            var index = -1;
            if (this.value) {
                for (var i = 0; i < this.value.length; i++) {
                    if (this.value[i] == option.value) {
                        index = i;
                        break;
                    }
                }
            }
            return index;
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], SelectButton.prototype, "options", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], SelectButton.prototype, "tabindex", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], SelectButton.prototype, "multiple", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], SelectButton.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SelectButton.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], SelectButton.prototype, "disabled", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], SelectButton.prototype, "onChange", void 0);
        SelectButton = __decorate([core_1.Component({
            selector: 'p-selectButton',
            template: "\n        <div [ngClass]=\"'ui-selectbutton ui-buttonset ui-widget ui-corner-all ui-buttonset-' + options.length\" (mouseleave)=\"hoveredItem=null\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div *ngFor=\"let option of options;\" class=\"ui-button ui-widget ui-state-default ui-button-text-only\"\n                [ngClass]=\"{'ui-state-hover': (hoveredItem==option)&&!disabled,'ui-state-active':isSelected(option), 'ui-state-disabled':disabled}\"\n                (mouseenter)=\"hoveredItem=option\" (click)=\"onItemClick($event,option)\">\n                <span class=\"ui-button-text ui-c\">{{option.label}}</span>\n            </div>\n        </div>\n    ",
            providers: [exports.SELECTBUTTON_VALUE_ACCESSOR]
        }), __metadata('design:paramtypes', [])], SelectButton);
        return SelectButton;
    }();
    exports.SelectButton = SelectButton;
    var SelectButtonModule = function () {
        function SelectButtonModule() {}
        SelectButtonModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [SelectButton],
            declarations: [SelectButton]
        }), __metadata('design:paramtypes', [])], SelectButtonModule);
        return SelectButtonModule;
    }();
    exports.SelectButtonModule = SelectButtonModule;
    

    return module.exports;
});
$__System.registerDynamic("54", ["3", "9", "26", "d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __param = this && this.__param || function (paramIndex, decorator) {
        return function (target, key) {
            decorator(target, key, paramIndex);
        };
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var router_1 = $__require("d");
    var SlideMenuSub = function () {
        function SlideMenuSub(slideMenu, router) {
            this.slideMenu = slideMenu;
            this.router = router;
            this.backLabel = 'Back';
            this.effectDuration = '1s';
            this.easing = 'ease-out';
        }
        SlideMenuSub.prototype.itemClick = function (event, item, listitem) {
            if (item.disabled) {
                event.preventDefault();
                return;
            }
            if (!item.url || item.routerLink) {
                event.preventDefault();
            }
            this.activeItem = listitem;
            if (item.command) {
                if (!item.eventEmitter && item.command) {
                    item.eventEmitter = new core_1.EventEmitter();
                    item.eventEmitter.subscribe(item.command);
                }
                item.eventEmitter.emit({
                    originalEvent: event,
                    item: item
                });
            }
            if (item.items) {
                this.slideMenu.left -= this.slideMenu.menuWidth;
            }
            if (item.routerLink) {
                this.router.navigate(item.routerLink);
            }
        };
        SlideMenuSub.prototype.ngOnDestroy = function () {
            this.hoveredLink = null;
            this.activeItem = null;
        };
        __decorate([core_1.Input(), __metadata('design:type', Object)], SlideMenuSub.prototype, "item", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], SlideMenuSub.prototype, "root", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SlideMenuSub.prototype, "backLabel", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SlideMenuSub.prototype, "menuWidth", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], SlideMenuSub.prototype, "effectDuration", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SlideMenuSub.prototype, "easing", void 0);
        SlideMenuSub = __decorate([core_1.Component({
            selector: 'p-slideMenuSub',
            template: "\n        <ul [ngClass]=\"{'ui-helper-reset ui-menu-rootlist':root, 'ui-widget-content ui-corner-all ui-helper-clearfix ui-menu-child':!root}\" class=\"ui-menu-list\"\n            [style.width.px]=\"menuWidth\" [style.left.px]=\"root ? slideMenu.left : slideMenu.menuWidth\" \n            [style.transitionProperty]=\"root ? 'left' : 'none'\" [style.transitionDuration]=\"effectDuration\" [style.transitionTimingFunction]=\"easing\">\n            <template ngFor let-child [ngForOf]=\"(root ? item : item.items)\">\n                <li #listitem [ngClass]=\"{'ui-menuitem ui-widget ui-corner-all':true,'ui-menu-parent':child.items,'ui-menuitem-active':listitem==activeItem}\">\n                    <a #link [href]=\"child.url||'#'\" class=\"ui-menuitem-link ui-corner-all\" \n                        [ngClass]=\"{'ui-state-hover':link==hoveredLink&&!child.disabled,'ui-menuitem-link-parent':child.items,'ui-state-disabled':child.disabled}\" \n                        (click)=\"itemClick($event, child, listitem)\" (mouseenter)=\"hoveredLink=link\" (mouseleave)=\"hoveredLink=null\">\n                        <span class=\"ui-submenu-icon fa fa-fw fa-caret-right\" *ngIf=\"child.items\"></span>\n                        <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                    </a>\n                    <p-slideMenuSub class=\"ui-submenu\" [item]=\"child\" [menuWidth]=\"menuWidth\" *ngIf=\"child.items\"></p-slideMenuSub>\n                </li>\n            </template>\n        </ul>\n    "
        }), __param(0, core_1.Inject(core_1.forwardRef(function () {
            return SlideMenu;
        }))), __metadata('design:paramtypes', [SlideMenu, router_1.Router])], SlideMenuSub);
        return SlideMenuSub;
    }();
    exports.SlideMenuSub = SlideMenuSub;
    var SlideMenu = function () {
        function SlideMenu(el, domHandler, renderer) {
            this.el = el;
            this.domHandler = domHandler;
            this.renderer = renderer;
            this.menuWidth = 180;
            this.viewportHeight = 175;
            this.effectDuration = '500ms';
            this.easing = 'ease-out';
            this.backLabel = 'Back';
            this.left = 0;
        }
        SlideMenu.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.container = this.el.nativeElement.children[0];
            if (this.popup) {
                this.documentClickListener = this.renderer.listenGlobal('body', 'click', function () {
                    if (!_this.preventDocumentDefault) {
                        _this.hide();
                    }
                    _this.preventDocumentDefault = false;
                });
            }
        };
        SlideMenu.prototype.toggle = function (event) {
            if (this.container.offsetParent) this.hide();else this.show(event);
            this.preventDocumentDefault = true;
        };
        SlideMenu.prototype.show = function (event) {
            this.container.style.display = 'block';
            this.domHandler.absolutePosition(this.container, event.target);
            this.domHandler.fadeIn(this.container, 250);
        };
        SlideMenu.prototype.hide = function () {
            this.container.style.display = 'none';
        };
        SlideMenu.prototype.unsubscribe = function (item) {
            if (item.eventEmitter) {
                item.eventEmitter.unsubscribe();
            }
            if (item.items) {
                for (var _i = 0, _a = item.items; _i < _a.length; _i++) {
                    var childItem = _a[_i];
                    this.unsubscribe(childItem);
                }
            }
        };
        SlideMenu.prototype.onClick = function (event) {
            this.preventDocumentDefault = true;
        };
        SlideMenu.prototype.goBack = function () {
            this.left += this.menuWidth;
        };
        SlideMenu.prototype.ngOnDestroy = function () {
            if (this.popup) {
                this.documentClickListener();
            }
            if (this.model) {
                for (var _i = 0, _a = this.model; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.unsubscribe(item);
                }
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], SlideMenu.prototype, "model", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], SlideMenu.prototype, "popup", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], SlideMenu.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SlideMenu.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], SlideMenu.prototype, "menuWidth", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], SlideMenu.prototype, "viewportHeight", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], SlideMenu.prototype, "effectDuration", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SlideMenu.prototype, "easing", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SlideMenu.prototype, "backLabel", void 0);
        SlideMenu = __decorate([core_1.Component({
            selector: 'p-slideMenu',
            template: "\n        <div [ngClass]=\"{'ui-menu ui-slidemenu ui-widget ui-widget-content ui-corner-all':true,'ui-menu-dynamic ui-shadow':popup}\" \n            [class]=\"styleClass\" [ngStyle]=\"style\" (click)=\"onClick($event)\">\n            <div class=\"ui-slidemenu-wrapper\" [style.height.px]=\"viewportHeight\">\n                <div class=\"ui-slidemenu-content\" [style.height.px]=\"viewportHeight - 30\">\n                    <p-slideMenuSub [item]=\"model\" root=\"root\" [menuWidth]=\"menuWidth\" [effectDuration]=\"effectDuration\" [easing]=\"easing\"></p-slideMenuSub>\n                </div>\n                <div class=\"ui-slidemenu-backward ui-widget-header ui-corner-all\" [style.display]=\"left ? 'block' : 'none'\" (click)=\"goBack()\">\n                    <span class=\"fa fa-fw fa-caret-left\"></span>{{backLabel}}\n                </div>\n            </div>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer])], SlideMenu);
        return SlideMenu;
    }();
    exports.SlideMenu = SlideMenu;
    var SlideMenuModule = function () {
        function SlideMenuModule() {}
        SlideMenuModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [SlideMenu],
            declarations: [SlideMenu, SlideMenuSub]
        }), __metadata('design:paramtypes', [])], SlideMenuModule);
        return SlideMenuModule;
    }();
    exports.SlideMenuModule = SlideMenuModule;
    

    return module.exports;
});
$__System.registerDynamic("55", ["3", "9", "26", "23"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var forms_1 = $__require("23");
    exports.SLIDER_VALUE_ACCESSOR = {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return Slider;
        }),
        multi: true
    };
    var Slider = function () {
        function Slider(el, domHandler, renderer) {
            this.el = el;
            this.domHandler = domHandler;
            this.renderer = renderer;
            this.min = 0;
            this.max = 100;
            this.orientation = 'horizontal';
            this.onChange = new core_1.EventEmitter();
            this.onSlideEnd = new core_1.EventEmitter();
            this.handleValues = [];
            this.onModelChange = function () {};
            this.onModelTouched = function () {};
        }
        Slider.prototype.onMouseDown = function (event, index) {
            this.dragging = true;
            this.updateDomData();
            this.sliderHandleClick = true;
            this.handleIndex = index;
        };
        Slider.prototype.onBarClick = function (event) {
            if (!this.sliderHandleClick) {
                this.updateDomData();
                this.handleChange(event);
            }
            this.sliderHandleClick = false;
        };
        Slider.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.dragListener = this.renderer.listenGlobal('body', 'mousemove', function (event) {
                if (_this.dragging) {
                    _this.handleChange(event);
                }
            });
            this.mouseupListener = this.renderer.listenGlobal('body', 'mouseup', function (event) {
                if (_this.dragging) {
                    _this.dragging = false;
                    _this.onSlideEnd.emit({ originalEvent: event });
                }
            });
        };
        Slider.prototype.handleChange = function (event) {
            var handleValue = this.calculateHandleValue(event);
            var newValue = this.getValueFromHandle(handleValue);
            if (this.range) {
                if (this.step) {
                    this.handleStepChange(newValue, this.values[this.handleIndex]);
                } else {
                    this.handleValues[this.handleIndex] = handleValue;
                    this.updateValue(newValue, event);
                }
            } else {
                if (this.step) {
                    this.handleStepChange(newValue, this.value);
                } else {
                    this.handleValue = handleValue;
                    this.updateValue(newValue, event);
                }
            }
        };
        Slider.prototype.handleStepChange = function (newValue, oldValue) {
            var diff = newValue - oldValue;
            if (diff < 0 && -1 * diff >= this.step / 2) {
                newValue = oldValue - this.step;
                this.updateValue(newValue);
                this.updateHandleValue();
            } else if (diff > 0 && diff >= this.step / 2) {
                newValue = oldValue + this.step;
                this.updateValue(newValue);
                this.updateHandleValue();
            }
        };
        Slider.prototype.writeValue = function (value) {
            if (this.range) this.values = value || [0, 0];else this.value = value || 0;
            this.updateHandleValue();
        };
        Slider.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        Slider.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        Slider.prototype.setDisabledState = function (val) {
            this.disabled = val;
        };
        Slider.prototype.updateDomData = function () {
            var rect = this.el.nativeElement.children[0].getBoundingClientRect();
            this.initX = rect.left + this.domHandler.getWindowScrollLeft();
            this.initY = rect.top + this.domHandler.getWindowScrollTop();
            this.barWidth = this.el.nativeElement.children[0].offsetWidth;
            this.barHeight = this.el.nativeElement.children[0].offsetHeight;
        };
        Slider.prototype.calculateHandleValue = function (event) {
            if (this.orientation === 'horizontal') return Math.floor((event.pageX - this.initX) * 100 / this.barWidth);else return Math.floor((this.initY + this.barHeight - event.pageY) * 100 / this.barHeight);
        };
        Slider.prototype.updateHandleValue = function () {
            if (this.range) {
                this.handleValues[0] = this.values[0] * 100 / (this.max - this.min);
                this.handleValues[1] = this.values[1] * 100 / (this.max - this.min);
            } else {
                this.handleValue = this.value * 100 / (this.max - this.min);
            }
        };
        Slider.prototype.updateValue = function (val, event) {
            if (this.range) {
                var value = val;
                if (this.handleIndex == 0) {
                    if (value < this.min) {
                        value = this.min;
                        this.handleValues[0] = 0;
                    } else if (value > this.values[1]) {
                        value = this.values[1];
                        this.handleValues[0] = this.values[1] * 100 / (this.max - this.min);
                    }
                } else {
                    if (value > this.max) {
                        value = this.max;
                        this.handleValues[1] = 100;
                    } else if (value < this.values[0]) {
                        value = this.values[0];
                        this.handleValues[1] = this.values[0] * 100 / (this.max - this.min);
                    }
                }
                this.values[this.handleIndex] = Math.floor(value);
                this.onModelChange(this.values);
                this.onChange.emit({ event: event, values: this.values });
            } else {
                if (val < this.min) {
                    val = this.min;
                    this.handleValue = 0;
                } else if (val > this.max) {
                    val = this.max;
                    this.handleValue = 100;
                }
                this.value = Math.floor(val);
                this.onModelChange(this.value);
                this.onChange.emit({ event: event, value: this.value });
            }
        };
        Slider.prototype.getValueFromHandle = function (handleValue) {
            return (this.max - this.min) * (handleValue / 100);
        };
        Slider.prototype.ngOnDestroy = function () {
            this.dragListener();
        };
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Slider.prototype, "animate", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Slider.prototype, "disabled", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Slider.prototype, "min", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Slider.prototype, "max", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Slider.prototype, "orientation", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Slider.prototype, "step", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Slider.prototype, "range", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Slider.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Slider.prototype, "styleClass", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Slider.prototype, "onChange", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Slider.prototype, "onSlideEnd", void 0);
        Slider = __decorate([core_1.Component({
            selector: 'p-slider',
            template: "\n        <div [ngStyle]=\"style\" [class]=\"styleClass\" [ngClass]=\"{'ui-slider ui-widget ui-widget-content ui-corner-all':true,\n            'ui-slider-horizontal':orientation == 'horizontal','ui-slider-vertical':orientation == 'vertical','ui-slider-animate':animate}\"\n            (click)=\"onBarClick($event)\">\n            <span *ngIf=\"!range\" class=\"ui-slider-handle ui-state-default ui-corner-all\" (mousedown)=\"onMouseDown($event)\" [style.transition]=\"dragging ? 'none': null\"\n                [ngStyle]=\"{'left': orientation == 'horizontal' ? handleValue + '%' : null,'bottom': orientation == 'vertical' ? handleValue + '%' : null}\"></span>\n            <span *ngIf=\"range\" class=\"ui-slider-range ui-widget-header ui-corner-all\" [ngStyle]=\"{'left':handleValues[0] + '%',width: (handleValues[1] - handleValues[0] + '%')}\"></span>\n            <span *ngIf=\"orientation=='vertical'\" class=\"ui-slider-range ui-slider-range-min ui-widget-header ui-corner-all\" [ngStyle]=\"{'height': handleValue + '%'}\"></span>\n            <span *ngIf=\"range\" (mousedown)=\"onMouseDown($event,0)\" [style.transition]=\"dragging ? 'none': null\" class=\"ui-slider-handle ui-state-default ui-corner-all\" [ngStyle]=\"{'left':handleValues[0] + '%'}\"></span>\n            <span *ngIf=\"range\" (mousedown)=\"onMouseDown($event,1)\" [style.transition]=\"dragging ? 'none': null\" class=\"ui-slider-handle ui-state-default ui-corner-all\" [ngStyle]=\"{'left':handleValues[1] + '%'}\"></span>\n        </div>\n    ",
            providers: [exports.SLIDER_VALUE_ACCESSOR, domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer])], Slider);
        return Slider;
    }();
    exports.Slider = Slider;
    var SliderModule = function () {
        function SliderModule() {}
        SliderModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Slider],
            declarations: [Slider]
        }), __metadata('design:paramtypes', [])], SliderModule);
        return SliderModule;
    }();
    exports.SliderModule = SliderModule;
    

    return module.exports;
});
$__System.registerDynamic("24", ["3", "9"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var InputText = function () {
        function InputText(el) {
            this.el = el;
        }
        InputText.prototype.onMouseover = function (e) {
            this.hover = true;
        };
        InputText.prototype.onMouseout = function (e) {
            this.hover = false;
        };
        InputText.prototype.onFocus = function (e) {
            this.focus = true;
        };
        InputText.prototype.onBlur = function (e) {
            this.focus = false;
        };
        Object.defineProperty(InputText.prototype, "disabled", {
            get: function () {
                return this.el.nativeElement.disabled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputText.prototype, "filled", {
            get: function () {
                return this.el.nativeElement.value && this.el.nativeElement.value.length;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([core_1.HostListener('mouseover', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], InputText.prototype, "onMouseover", null);
        __decorate([core_1.HostListener('mouseout', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], InputText.prototype, "onMouseout", null);
        __decorate([core_1.HostListener('focus', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], InputText.prototype, "onFocus", null);
        __decorate([core_1.HostListener('blur', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], InputText.prototype, "onBlur", null);
        InputText = __decorate([core_1.Directive({
            selector: '[pInputText]',
            host: {
                '[class.ui-inputtext]': 'true',
                '[class.ui-corner-all]': 'true',
                '[class.ui-state-default]': 'true',
                '[class.ui-widget]': 'true',
                '[class.ui-state-hover]': 'hover',
                '[class.ui-state-focus]': 'focus',
                '[class.ui-state-disabled]': 'disabled',
                '[class.ui-state-filled]': 'filled'
            }
        }), __metadata('design:paramtypes', [core_1.ElementRef])], InputText);
        return InputText;
    }();
    exports.InputText = InputText;
    var InputTextModule = function () {
        function InputTextModule() {}
        InputTextModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [InputText],
            declarations: [InputText]
        }), __metadata('design:paramtypes', [])], InputTextModule);
        return InputTextModule;
    }();
    exports.InputTextModule = InputTextModule;
    

    return module.exports;
});
$__System.registerDynamic("56", ["3", "9", "24", "26", "23"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var inputtext_1 = $__require("24");
    var domhandler_1 = $__require("26");
    var forms_1 = $__require("23");
    exports.SPINNER_VALUE_ACCESSOR = {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return Spinner;
        }),
        multi: true
    };
    var Spinner = function () {
        function Spinner(el, domHandler) {
            this.el = el;
            this.domHandler = domHandler;
            this.onChange = new core_1.EventEmitter();
            this.step = 1;
            this.onModelChange = function () {};
            this.onModelTouched = function () {};
        }
        Spinner.prototype.ngAfterViewInit = function () {
            if (Math.floor(this.step) === 0) {
                this.precision = this.step.toString().split(/[,]|[.]/)[1].length;
            }
            this.inputtext = this.domHandler.findSingle(this.el.nativeElement, 'input');
            if (this.value !== null && this.value !== undefined) {
                this.inputtext.value = this.value;
            }
        };
        Spinner.prototype.repeat = function (interval, dir, input) {
            var _this = this;
            var i = interval || 500;
            this.clearTimer();
            this.timer = setTimeout(function () {
                _this.repeat(40, dir, input);
            }, i);
            this.spin(dir, input);
        };
        Spinner.prototype.spin = function (dir, inputElement) {
            var step = this.step * dir;
            var currentValue = this.value || 0;
            var newValue = null;
            if (this.precision) this.value = parseFloat(this.toFixed(currentValue + step, this.precision));else this.value = currentValue + step;
            if (this.maxlength !== undefined && this.value.toString().length > this.maxlength) {
                this.value = currentValue;
            }
            if (this.min !== undefined && this.value < this.min) {
                this.value = this.min;
            }
            if (this.max !== undefined && this.value > this.max) {
                this.value = this.max;
            }
            inputElement.value = this.value;
            this.onModelChange(this.value);
        };
        Spinner.prototype.toFixed = function (value, precision) {
            var power = Math.pow(10, precision || 0);
            return String(Math.round(value * power) / power);
        };
        Spinner.prototype.onUpButtonMousedown = function (event, input) {
            if (!this.disabled) {
                input.focus();
                this.activeUp = true;
                this.repeat(null, 1, input);
                event.preventDefault();
            }
        };
        Spinner.prototype.onUpButtonMouseup = function (event) {
            if (!this.disabled) {
                this.activeUp = false;
                this.clearTimer();
            }
        };
        Spinner.prototype.onUpButtonMouseenter = function (event) {
            if (!this.disabled) {
                this.hoverUp = true;
            }
        };
        Spinner.prototype.onUpButtonMouseleave = function (event) {
            if (!this.disabled) {
                this.hoverUp = false;
                this.activeUp = false;
                this.clearTimer();
            }
        };
        Spinner.prototype.onDownButtonMousedown = function (event, input) {
            if (!this.disabled) {
                input.focus();
                this.activeDown = true;
                this.repeat(null, -1, input);
                event.preventDefault();
            }
        };
        Spinner.prototype.onDownButtonMouseup = function (event) {
            if (!this.disabled) {
                this.activeDown = false;
                this.clearTimer();
            }
        };
        Spinner.prototype.onDownButtonMouseenter = function (event) {
            if (!this.disabled) {
                this.hoverDown = true;
            }
        };
        Spinner.prototype.onDownButtonMouseleave = function (event) {
            if (!this.disabled) {
                this.hoverDown = false;
                this.activeDown = false;
                this.clearTimer();
            }
        };
        Spinner.prototype.onInputKeydown = function (event, inputElement) {
            if (event.which == 38) {
                this.spin(1, inputElement);
                event.preventDefault();
            } else if (event.which == 40) {
                this.spin(-1, inputElement);
                event.preventDefault();
            }
        };
        Spinner.prototype.onInput = function (event) {
            this.value = this.parseValue(event.target.value);
            this.onModelChange(this.value);
        };
        Spinner.prototype.onBlur = function (inputElement) {
            if (this.value !== undefined && this.value !== null) {
                inputElement.value = this.value;
            }
            this.onModelTouched();
        };
        Spinner.prototype.parseValue = function (val) {
            var value;
            if (val.trim() === '') {
                value = this.min !== undefined ? this.min : null;
            } else {
                if (this.precision) value = parseFloat(val);else value = parseInt(val);
                if (!isNaN(value)) {
                    if (this.max !== undefined && value > this.max) {
                        value = this.max;
                    }
                    if (this.min !== undefined && value < this.min) {
                        value = this.min;
                    }
                } else {
                    value = null;
                }
            }
            return value;
        };
        Spinner.prototype.handleChange = function (event) {
            this.onChange.emit(event);
        };
        Spinner.prototype.clearTimer = function () {
            if (this.timer) {
                clearInterval(this.timer);
            }
        };
        Spinner.prototype.writeValue = function (value) {
            this.value = value;
            if (this.inputtext && this.value !== null && this.value !== undefined) {
                this.inputtext.value = this.value;
            }
        };
        Spinner.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        Spinner.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        Spinner.prototype.setDisabledState = function (val) {
            this.disabled = val;
        };
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Spinner.prototype, "onChange", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Spinner.prototype, "step", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Spinner.prototype, "min", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Spinner.prototype, "max", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Spinner.prototype, "maxlength", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Spinner.prototype, "size", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Spinner.prototype, "disabled", void 0);
        Spinner = __decorate([core_1.Component({
            selector: 'p-spinner',
            template: "\n        <span class=\"ui-spinner ui-widget ui-corner-all\">\n            <input #in pInputText type=\"text\" class=\"ui-spinner-input\"\n            [attr.size]=\"size\" [attr.maxlength]=\"maxlength\" [attr.readonly]=\"readonly\" [attr.disabled]=\"disabled\"\n            (keydown)=\"onInputKeydown($event,in)\" (input)=\"onInput($event)\" (blur)=\"onBlur(in)\" (change)=\"handleChange($event)\">\n            <a class=\"ui-spinner-button ui-spinner-up ui-corner-tr ui-button ui-widget ui-state-default ui-button-text-only\"\n                [ngClass]=\"{'ui-state-hover':hoverUp,'ui-state-active':activeUp,'ui-state-disabled':disabled}\"\n                (mouseenter)=\"onUpButtonMouseenter($event)\" (mouseleave)=\"onUpButtonMouseleave($event)\" (mousedown)=\"onUpButtonMousedown($event,in)\" (mouseup)=\"onUpButtonMouseup($event)\">\n                <span class=\"ui-button-text\">\n                    <span class=\"fa fa-fw fa-caret-up\"></span>\n                </span>\n            </a>\n            <a class=\"ui-spinner-button ui-spinner-down ui-corner-br ui-button ui-widget ui-state-default ui-button-text-only\"\n                [ngClass]=\"{'ui-state-hover':hoverDown,'ui-state-active':activeDown,'ui-state-disabled':disabled}\"\n                (mouseenter)=\"onDownButtonMouseenter($event)\" (mouseleave)=\"onDownButtonMouseleave($event)\" (mousedown)=\"onDownButtonMousedown($event,in)\" (mouseup)=\"onDownButtonMouseup($event)\">\n                <span class=\"ui-button-text\">\n                    <span class=\"fa fa-fw fa-caret-down\"></span>\n                </span>\n            </a>\n        </span>\n    ",
            providers: [domhandler_1.DomHandler, exports.SPINNER_VALUE_ACCESSOR]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler])], Spinner);
        return Spinner;
    }();
    exports.Spinner = Spinner;
    var SpinnerModule = function () {
        function SpinnerModule() {}
        SpinnerModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule, inputtext_1.InputTextModule],
            exports: [Spinner],
            declarations: [Spinner]
        }), __metadata('design:paramtypes', [])], SpinnerModule);
        return SpinnerModule;
    }();
    exports.SpinnerModule = SpinnerModule;
    

    return module.exports;
});
$__System.registerDynamic("57", ["3", "9", "26", "d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var router_1 = $__require("d");
    var SplitButton = function () {
        function SplitButton(el, domHandler, renderer, router) {
            this.el = el;
            this.domHandler = domHandler;
            this.renderer = renderer;
            this.router = router;
            this.iconPos = 'left';
            this.onClick = new core_1.EventEmitter();
            this.menuVisible = false;
        }
        SplitButton.prototype.ngOnInit = function () {
            var _this = this;
            this.documentClickListener = this.renderer.listenGlobal('body', 'click', function () {
                _this.menuVisible = false;
            });
        };
        SplitButton.prototype.onDefaultButtonClick = function (event) {
            this.onClick.emit(event);
        };
        SplitButton.prototype.itemClick = function (event, item) {
            if (item.disabled) {
                event.preventDefault();
                return;
            }
            if (!item.url || item.routerLink) {
                event.preventDefault();
            }
            if (item.command) {
                if (!item.eventEmitter) {
                    item.eventEmitter = new core_1.EventEmitter();
                    item.eventEmitter.subscribe(item.command);
                }
                item.eventEmitter.emit(event);
            }
            this.menuVisible = false;
            if (item.routerLink) {
                this.router.navigate(item.routerLink);
            }
        };
        SplitButton.prototype.onDropdownClick = function (event, menu, container) {
            this.menuVisible = !this.menuVisible;
            this.domHandler.relativePosition(menu, container);
            this.domHandler.fadeIn(menu, 25);
            event.stopPropagation();
        };
        SplitButton.prototype.ngOnDestroy = function () {
            this.documentClickListener();
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], SplitButton.prototype, "model", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SplitButton.prototype, "icon", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SplitButton.prototype, "iconPos", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SplitButton.prototype, "label", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], SplitButton.prototype, "onClick", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], SplitButton.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SplitButton.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], SplitButton.prototype, "menuStyle", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], SplitButton.prototype, "menuStyleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], SplitButton.prototype, "disabled", void 0);
        SplitButton = __decorate([core_1.Component({
            selector: 'p-splitButton',
            template: "\n        <div #container [ngClass]=\"{'ui-splitbutton ui-buttonset ui-widget':true,'ui-state-disabled':disabled}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <button #defaultbtn type=\"button\" class=\"ui-button ui-widget ui-state-default ui-corner-left\"\n                [ngClass]=\"{'ui-button-text-only':(!icon&&label),'ui-button-icon-only':(icon&&!label),\n                'ui-button-text-icon-left':(icon&&label&&iconPos=='left'),'ui-button-text-icon-right':(icon&&label&&iconPos=='right'),\n                'ui-state-hover':hoverDefaultBtn&&!disabled,'ui-state-focus':focusDefaultBtn&&!disabled,'ui-state-active':activeDefaultBtn&&!disabled}\"\n                (mouseenter)=\"hoverDefaultBtn=true\" (mouseleave)=\"hoverDefaultBtn=false\" (focus)=\"focusDefaultBtn=true\" (blur)=\"focusDefaultBtn=false\"\n                (mousedown)=\"activeDefaultBtn=true\" (mouseup)=\"activeDefaultBtn=false\" (click)=\"onDefaultButtonClick($event)\"\n                [disabled]=\"disabled\">\n                <span [ngClass]=\"'ui-button-icon-left ui-c fa fa-fw'\" [class]=\"icon\"></span>\n                <span class=\"ui-button-text ui-c\">{{label}}</span>\n            </button>\n            <button class=\"ui-splitbutton-menubutton ui-button ui-widget ui-state-default ui-button-icon-only ui-corner-right\" type=\"button\"\n                [ngClass]=\"{'ui-state-hover':hoverDropdown&&!disabled,'ui-state-focus':focusDropdown&&!disabled,'ui-state-active':activeDropdown&&!disabled}\"\n                (mouseenter)=\"hoverDropdown=true\" (mouseleave)=\"hoverDropdown=false\" (focus)=\"focusDropdown=true\" (blur)=\"focusDropdown=false\"\n                (mousedown)=\"activeDropdown=true\" (mouseup)=\"activeDropdown=false\" (click)=\"onDropdownClick($event,menu,container)\"\n                [disabled]=\"disabled\">\n                <span class=\"ui-button-icon-left ui-c fa fa-fw fa-caret-down\"></span>\n                <span class=\"ui-button-text ui-c\">ui-button</span>\n            </button>\n            <div #menu [ngClass]=\"'ui-menu ui-menu-dynamic ui-widget ui-widget-content ui-corner-all ui-helper-clearfix ui-shadow'\" [style.display]=\"menuVisible ? 'block' : 'none'\"\n                    [ngStyle]=\"menuStyle\" [class]=\"menuStyleClass\">\n                <ul class=\"ui-menu-list ui-helper-reset\">\n                    <li class=\"ui-menuitem ui-widget ui-corner-all\" role=\"menuitem\" *ngFor=\"let item of model\"\n                        (mouseenter)=\"hoveredItem=item\" (mouseleave)=\"hoveredItem=null\">\n                        <a [href]=\"item.url||'#'\" \n                        [ngClass]=\"{'ui-menuitem-link ui-corner-all':true,'ui-state-hover':(hoveredItem==item&&!item.disabled),'ui-state-disabled':item.disabled}\" \n                        (click)=\"itemClick($event,item)\">\n                            <span [ngClass]=\"'ui-menuitem-icon fa fa-fw'\" [class]=\"item.icon\" *ngIf=\"item.icon\"></span>\n                            <span class=\"ui-menuitem-text\">{{item.label}}</span>\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer, router_1.Router])], SplitButton);
        return SplitButton;
    }();
    exports.SplitButton = SplitButton;
    var SplitButtonModule = function () {
        function SplitButtonModule() {}
        SplitButtonModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [SplitButton],
            declarations: [SplitButton]
        }), __metadata('design:paramtypes', [])], SplitButtonModule);
        return SplitButtonModule;
    }();
    exports.SplitButtonModule = SplitButtonModule;
    

    return module.exports;
});
$__System.registerDynamic("58", ["3", "9"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var TabPanel = function () {
        function TabPanel() {}
        __decorate([core_1.Input(), __metadata('design:type', String)], TabPanel.prototype, "header", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], TabPanel.prototype, "selected", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], TabPanel.prototype, "disabled", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], TabPanel.prototype, "closable", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], TabPanel.prototype, "headerStyle", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], TabPanel.prototype, "headerStyleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], TabPanel.prototype, "leftIcon", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], TabPanel.prototype, "rightIcon", void 0);
        TabPanel = __decorate([core_1.Component({
            selector: 'p-tabPanel',
            template: "\n        <div class=\"ui-tabview-panel ui-widget-content\" [style.display]=\"selected ? 'block' : 'none'\" \n            *ngIf=\"!closed\" role=\"tabpanel\" [attr.aria-hidden]=\"!selected\">\n            <ng-content></ng-content>\n        </div>\n    "
        }), __metadata('design:paramtypes', [])], TabPanel);
        return TabPanel;
    }();
    exports.TabPanel = TabPanel;
    var TabView = function () {
        function TabView(el) {
            this.el = el;
            this.orientation = 'top';
            this.onChange = new core_1.EventEmitter();
            this.onClose = new core_1.EventEmitter();
        }
        TabView.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.initTabs();
            this.tabPanels.changes.subscribe(function (_) {
                _this.initTabs();
            });
        };
        TabView.prototype.initTabs = function () {
            this.tabs = this.tabPanels.toArray();
            var selectedTab = this.findSelectedTab();
            if (!selectedTab && this.tabs.length) {
                this.tabs[0].selected = true;
            }
        };
        TabView.prototype.open = function (event, tab) {
            if (tab.disabled) {
                event.preventDefault();
                return;
            }
            if (!tab.selected) {
                var selectedTab = this.findSelectedTab();
                if (selectedTab) {
                    selectedTab.selected = false;
                }
                tab.selected = true;
                this.onChange.emit({ originalEvent: event, index: this.findTabIndex(tab) });
            }
            event.preventDefault();
        };
        TabView.prototype.close = function (event, tab) {
            if (tab.selected) {
                tab.selected = false;
                for (var i = 0; i < this.tabs.length; i++) {
                    var tabPanel = this.tabs[i];
                    if (!tabPanel.closed && !tab.disabled) {
                        tabPanel.selected = true;
                        break;
                    }
                }
            }
            tab.closed = true;
            this.onClose.emit({ originalEvent: event, index: this.findTabIndex(tab) });
            event.stopPropagation();
        };
        TabView.prototype.findSelectedTab = function () {
            for (var i = 0; i < this.tabs.length; i++) {
                if (this.tabs[i].selected) {
                    return this.tabs[i];
                }
            }
            return null;
        };
        TabView.prototype.findTabIndex = function (tab) {
            var index = -1;
            for (var i = 0; i < this.tabs.length; i++) {
                if (this.tabs[i] == tab) {
                    index = i;
                    break;
                }
            }
            return index;
        };
        TabView.prototype.getDefaultHeaderClass = function (tab) {
            var styleClass = 'ui-state-default ui-corner-' + this.orientation;
            if (tab.headerStyleClass) {
                styleClass = styleClass + " " + tab.headerStyleClass;
            }
            return styleClass;
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], TabView.prototype, "orientation", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], TabView.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], TabView.prototype, "styleClass", void 0);
        __decorate([core_1.ContentChildren(TabPanel), __metadata('design:type', core_1.QueryList)], TabView.prototype, "tabPanels", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], TabView.prototype, "onChange", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], TabView.prototype, "onClose", void 0);
        TabView = __decorate([core_1.Component({
            selector: 'p-tabView',
            template: "\n        <div [ngClass]=\"'ui-tabview ui-widget ui-widget-content ui-corner-all ui-tabview-' + orientation\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <ul class=\"ui-tabview-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\" role=\"tablist\">\n                <template ngFor let-tab [ngForOf]=\"tabs\">\n                    <li [class]=\"getDefaultHeaderClass(tab)\" [ngStyle]=\"tab.headerStyle\" role=\"tab\"\n                        [ngClass]=\"{'ui-tabview-selected ui-state-active': tab.selected, 'ui-state-hover': tab.hoverHeader&&!tab.disabled, 'ui-state-disabled': tab.disabled}\"\n                        (mouseenter)=\"tab.hoverHeader=true\" (mouseleave)=\"tab.hoverHeader=false\" (click)=\"open($event,tab)\" *ngIf=\"!tab.closed\"\n                        [attr.aria-expanded]=\"tab.selected\" [attr.aria-selected]=\"tab.selected\">\n                        <a href=\"#\">\n                            <span class=\"ui-tabview-left-icon fa\" [ngClass]=\"tab.leftIcon\" *ngIf=\"tab.leftIcon\"></span>\n                            {{tab.header}}\n                            <span class=\"ui-tabview-right-icon fa\" [ngClass]=\"tab.rightIcon\" *ngIf=\"tab.rightIcon\"></span>\n                        </a>\n                        <span *ngIf=\"tab.closable\" class=\"ui-tabview-close fa fa-close\" (click)=\"close($event,tab)\"></span>\n                    </li>\n                </template>\n            </ul>\n            <div class=\"ui-tabview-panels\">\n                <ng-content></ng-content>\n            </div>\n        </div>\n    "
        }), __metadata('design:paramtypes', [core_1.ElementRef])], TabView);
        return TabView;
    }();
    exports.TabView = TabView;
    var TabViewModule = function () {
        function TabViewModule() {}
        TabViewModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [TabView, TabPanel],
            declarations: [TabView, TabPanel]
        }), __metadata('design:paramtypes', [])], TabViewModule);
        return TabViewModule;
    }();
    exports.TabViewModule = TabViewModule;
    

    return module.exports;
});
$__System.registerDynamic("59", ["3", "9", "26", "d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var router_1 = $__require("d");
    var TabMenu = function () {
        function TabMenu(router) {
            this.router = router;
        }
        TabMenu.prototype.ngOnInit = function () {
            if (!this.activeItem && this.model && this.model.length) {
                this.activeItem = this.model[0];
            }
        };
        TabMenu.prototype.itemClick = function (event, item) {
            if (item.disabled) {
                event.preventDefault();
                return;
            }
            if (!item.url || item.routerLink) {
                event.preventDefault();
            }
            if (item.command) {
                if (!item.eventEmitter) {
                    item.eventEmitter = new core_1.EventEmitter();
                    item.eventEmitter.subscribe(item.command);
                }
                item.eventEmitter.emit({
                    originalEvent: event,
                    item: item
                });
            }
            if (item.routerLink) {
                this.router.navigate(item.routerLink);
            }
            this.activeItem = item;
        };
        TabMenu.prototype.ngOnDestroy = function () {
            if (this.model) {
                for (var _i = 0, _a = this.model; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.unsubscribe(item);
                }
            }
        };
        TabMenu.prototype.unsubscribe = function (item) {
            if (item.eventEmitter) {
                item.eventEmitter.unsubscribe();
            }
            if (item.items) {
                for (var _i = 0, _a = item.items; _i < _a.length; _i++) {
                    var childItem = _a[_i];
                    this.unsubscribe(childItem);
                }
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], TabMenu.prototype, "model", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], TabMenu.prototype, "activeItem", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], TabMenu.prototype, "popup", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], TabMenu.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], TabMenu.prototype, "styleClass", void 0);
        TabMenu = __decorate([core_1.Component({
            selector: 'p-tabMenu',
            template: "\n        <div [ngClass]=\"'ui-tabmenu ui-widget ui-widget-content ui-corner-all'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <ul class=\"ui-tabmenu-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\" role=\"tablist\">\n                <li *ngFor=\"let item of model\" \n                    [ngClass]=\"{'ui-tabmenuitem ui-state-default ui-corner-top':true,'ui-state-disabled':item.disabled,\n                        'ui-tabmenuitem-hasicon':item.icon,'ui-state-hover':hoveredItem==item,'ui-state-active':activeItem==item}\"\n                    (mouseenter)=\"hoveredItem=item&&!item.disabled\" (mouseleave)=\"hoveredItem=null\">\n                    <a [href]=\"item.url||'#'\" class=\"ui-menuitem-link ui-corner-all\" (click)=\"itemClick($event,item)\">\n                        <span class=\"ui-menuitem-icon fa\" [ngClass]=\"item.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{item.label}}</span>\n                    </a>\n                </li>\n            </ul>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [router_1.Router])], TabMenu);
        return TabMenu;
    }();
    exports.TabMenu = TabMenu;
    var TabMenuModule = function () {
        function TabMenuModule() {}
        TabMenuModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [TabMenu],
            declarations: [TabMenu]
        }), __metadata('design:paramtypes', [])], TabMenuModule);
        return TabMenuModule;
    }();
    exports.TabMenuModule = TabMenuModule;
    

    return module.exports;
});
$__System.registerDynamic("5a", ["3", "23", "9", "26"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var forms_1 = $__require("23");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var Terminal = function () {
        function Terminal(el, domHandler) {
            this.el = el;
            this.domHandler = domHandler;
            this.responseChange = new core_1.EventEmitter();
            this.handler = new core_1.EventEmitter();
            this.commands = [];
        }
        Terminal.prototype.ngAfterViewInit = function () {
            this.container = this.domHandler.find(this.el.nativeElement, '.ui-terminal')[0];
        };
        Terminal.prototype.ngAfterViewChecked = function () {
            if (this.commandProcessed) {
                this.container.scrollTop = this.container.scrollHeight;
                this.commandProcessed = false;
            }
        };
        Object.defineProperty(Terminal.prototype, "response", {
            set: function (value) {
                if (value) {
                    this.commands[this.commands.length - 1].response = value;
                    this.commandProcessed = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Terminal.prototype.handleCommand = function (event, container) {
            if (event.keyCode == 13) {
                this.commands.push({ text: this.command });
                this.handler.emit({ originalEvent: event, command: this.command });
                this.command = '';
            }
        };
        Terminal.prototype.focus = function (element) {
            element.focus();
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], Terminal.prototype, "welcomeMessage", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Terminal.prototype, "prompt", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Terminal.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Terminal.prototype, "styleClass", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Terminal.prototype, "responseChange", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Terminal.prototype, "handler", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String), __metadata('design:paramtypes', [String])], Terminal.prototype, "response", null);
        Terminal = __decorate([core_1.Component({
            selector: 'p-terminal',
            template: "\n        <div [ngClass]=\"'ui-terminal ui-widget ui-widget-content ui-corner-all'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"focus(in)\">\n            <div *ngIf=\"welcomeMessage\">{{welcomeMessage}}</div>\n            <div class=\"ui-terminal-content\">\n                <div *ngFor=\"let command of commands\">\n                    <span>{{prompt}}</span>\n                    <span class=\"ui-terminal-command\">{{command.text}}</span>\n                    <div>{{command.response}}</div>\n                </div>\n            </div>\n            <div>\n                <span class=\"ui-terminal-content-prompt\">{{prompt}}</span>\n                <input #in type=\"text\" [(ngModel)]=\"command\" class=\"ui-terminal-input\" autocomplete=\"off\" (keydown)=\"handleCommand($event,container)\" autofocus>\n            </div>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler])], Terminal);
        return Terminal;
    }();
    exports.Terminal = Terminal;
    var TerminalModule = function () {
        function TerminalModule() {}
        TerminalModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule, forms_1.FormsModule],
            exports: [Terminal],
            declarations: [Terminal]
        }), __metadata('design:paramtypes', [])], TerminalModule);
        return TerminalModule;
    }();
    exports.TerminalModule = TerminalModule;
    

    return module.exports;
});
$__System.registerDynamic("5b", ["3", "9", "26", "d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var common_2 = $__require("9");
    var router_1 = $__require("d");
    var TieredMenuSub = function () {
        function TieredMenuSub(domHandler, router, location) {
            this.domHandler = domHandler;
            this.router = router;
            this.location = location;
        }
        TieredMenuSub.prototype.onItemMouseEnter = function (event, item, menuitem) {
            if (menuitem.disabled) {
                return;
            }
            this.activeItem = item;
            this.activeLink = item.children[0];
            var nextElement = item.children[0].nextElementSibling;
            if (nextElement) {
                var sublist = nextElement.children[0];
                sublist.style.zIndex = ++domhandler_1.DomHandler.zindex;
                sublist.style.top = '0px';
                sublist.style.left = this.domHandler.getOuterWidth(item.children[0]) + 'px';
            }
        };
        TieredMenuSub.prototype.onItemMouseLeave = function (event, link) {
            this.activeItem = null;
            this.activeLink = null;
        };
        TieredMenuSub.prototype.itemClick = function (event, item) {
            if (item.disabled) {
                event.preventDefault();
                return true;
            }
            if (!item.url || item.routerLink) {
                event.preventDefault();
            }
            if (item.command) {
                if (!item.eventEmitter) {
                    item.eventEmitter = new core_1.EventEmitter();
                    item.eventEmitter.subscribe(item.command);
                }
                item.eventEmitter.emit({
                    originalEvent: event,
                    item: item
                });
            }
            if (item.routerLink) {
                this.router.navigate(item.routerLink);
            }
        };
        TieredMenuSub.prototype.listClick = function (event) {
            this.activeItem = null;
            this.activeLink = null;
        };
        __decorate([core_1.Input(), __metadata('design:type', Object)], TieredMenuSub.prototype, "item", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], TieredMenuSub.prototype, "root", void 0);
        TieredMenuSub = __decorate([core_1.Component({
            selector: 'p-tieredMenuSub',
            template: "\n        <ul [ngClass]=\"{'ui-helper-reset':root, 'ui-widget-content ui-corner-all ui-helper-clearfix ui-menu-child ui-shadow':!root}\" class=\"ui-menu-list\"\n            (click)=\"listClick($event)\">\n            <template ngFor let-child [ngForOf]=\"(root ? item : item.items)\">\n                <li #item [ngClass]=\"{'ui-menuitem ui-widget ui-corner-all':true,'ui-menu-parent':child.items,'ui-menuitem-active':item==activeItem}\"\n                    (mouseenter)=\"onItemMouseEnter($event, item, child)\" (mouseleave)=\"onItemMouseLeave($event, item)\">\n                    <a #link [href]=\"child.url||'#'\" class=\"ui-menuitem-link ui-corner-all\" \n                        [ngClass]=\"{'ui-state-hover':link==activeLink&&!child.disabled,'ui-state-disabled':child.disabled}\" (click)=\"itemClick($event, child)\">\n                        <span class=\"ui-submenu-icon fa fa-fw fa-caret-right\" *ngIf=\"child.items\"></span>\n                        <span class=\"ui-menuitem-icon fa fa-fw\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"ui-menuitem-text\">{{child.label}}</span>\n                    </a>\n                    <p-tieredMenuSub class=\"ui-submenu\" [item]=\"child\" *ngIf=\"child.items\"></p-tieredMenuSub>\n                </li>\n            </template>\n        </ul>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [domhandler_1.DomHandler, router_1.Router, common_2.Location])], TieredMenuSub);
        return TieredMenuSub;
    }();
    exports.TieredMenuSub = TieredMenuSub;
    var TieredMenu = function () {
        function TieredMenu(el, domHandler, renderer) {
            this.el = el;
            this.domHandler = domHandler;
            this.renderer = renderer;
        }
        TieredMenu.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.container = this.el.nativeElement.children[0];
            if (this.popup) {
                this.documentClickListener = this.renderer.listenGlobal('body', 'click', function () {
                    if (!_this.preventDocumentDefault) {
                        _this.hide();
                    }
                    _this.preventDocumentDefault = false;
                });
            }
        };
        TieredMenu.prototype.toggle = function (event) {
            if (this.container.offsetParent) this.hide();else this.show(event);
            this.preventDocumentDefault = true;
        };
        TieredMenu.prototype.show = function (event) {
            this.container.style.display = 'block';
            this.domHandler.absolutePosition(this.container, event.target);
            this.domHandler.fadeIn(this.container, 250);
        };
        TieredMenu.prototype.hide = function () {
            this.container.style.display = 'none';
        };
        TieredMenu.prototype.unsubscribe = function (item) {
            if (item.eventEmitter) {
                item.eventEmitter.unsubscribe();
            }
            if (item.items) {
                for (var _i = 0, _a = item.items; _i < _a.length; _i++) {
                    var childItem = _a[_i];
                    this.unsubscribe(childItem);
                }
            }
        };
        TieredMenu.prototype.ngOnDestroy = function () {
            if (this.popup) {
                this.documentClickListener();
            }
            if (this.model) {
                for (var _i = 0, _a = this.model; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.unsubscribe(item);
                }
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], TieredMenu.prototype, "model", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], TieredMenu.prototype, "popup", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], TieredMenu.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], TieredMenu.prototype, "styleClass", void 0);
        TieredMenu = __decorate([core_1.Component({
            selector: 'p-tieredMenu',
            template: "\n        <div [ngClass]=\"{'ui-tieredmenu ui-menu ui-widget ui-widget-content ui-corner-all ui-helper-clearfix':true,'ui-menu-dynamic ui-shadow':popup}\" \n            [class]=\"styleClass\" [ngStyle]=\"style\">\n            <p-tieredMenuSub [item]=\"model\" root=\"root\"></p-tieredMenuSub>\n        </div>\n    ",
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler, core_1.Renderer])], TieredMenu);
        return TieredMenu;
    }();
    exports.TieredMenu = TieredMenu;
    var TieredMenuModule = function () {
        function TieredMenuModule() {}
        TieredMenuModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [TieredMenu],
            declarations: [TieredMenu, TieredMenuSub]
        }), __metadata('design:paramtypes', [])], TieredMenuModule);
        return TieredMenuModule;
    }();
    exports.TieredMenuModule = TieredMenuModule;
    

    return module.exports;
});
$__System.registerDynamic("5c", ["3", "9", "23"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var forms_1 = $__require("23");
    exports.TOGGLEBUTTON_VALUE_ACCESSOR = {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return ToggleButton;
        }),
        multi: true
    };
    var ToggleButton = function () {
        function ToggleButton() {
            this.onLabel = 'Yes';
            this.offLabel = 'No';
            this.onChange = new core_1.EventEmitter();
            this.checked = false;
            this.onModelChange = function () {};
            this.onModelTouched = function () {};
        }
        ToggleButton.prototype.getIconClass = function () {
            var baseClass = 'ui-button-icon-left fa fa-fw';
            return baseClass + ' ' + (this.checked ? this.onIcon : this.offIcon);
        };
        ToggleButton.prototype.toggle = function (event) {
            if (!this.disabled) {
                this.checked = !this.checked;
                this.onModelChange(this.checked);
                this.onModelTouched();
                this.onChange.emit({
                    originalEvent: event,
                    checked: this.checked
                });
            }
        };
        ToggleButton.prototype.writeValue = function (value) {
            this.checked = value;
        };
        ToggleButton.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        ToggleButton.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        ToggleButton.prototype.setDisabledState = function (val) {
            this.disabled = val;
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], ToggleButton.prototype, "onLabel", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], ToggleButton.prototype, "offLabel", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], ToggleButton.prototype, "onIcon", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], ToggleButton.prototype, "offIcon", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], ToggleButton.prototype, "disabled", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], ToggleButton.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], ToggleButton.prototype, "styleClass", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], ToggleButton.prototype, "onChange", void 0);
        ToggleButton = __decorate([core_1.Component({
            selector: 'p-toggleButton',
            template: "\n        <div [ngClass]=\"{'ui-button ui-togglebutton ui-widget ui-state-default ui-corner-all': true, 'ui-button-text-only': (!onIcon&&!offIcon), 'ui-button-text-icon-left': (onIcon&&offIcon),\n                'ui-state-active': checked, 'ui-state-hover': hover&&!disabled, 'ui-state-disabled': disabled}\" [ngStyle]=\"style\" [class]=\"styleClass\" \n                (click)=\"toggle($event)\" (mouseenter)=\"hover=true\" (mouseleave)=\"hover=false\">\n            <span *ngIf=\"onIcon||offIcon\" [class]=\"getIconClass()\"></span>\n            <span class=\"ui-button-text ui-unselectable-text\">{{checked ? onLabel : offLabel}}</span>\n        </div>\n    ",
            providers: [exports.TOGGLEBUTTON_VALUE_ACCESSOR]
        }), __metadata('design:paramtypes', [])], ToggleButton);
        return ToggleButton;
    }();
    exports.ToggleButton = ToggleButton;
    var ToggleButtonModule = function () {
        function ToggleButtonModule() {}
        ToggleButtonModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [ToggleButton],
            declarations: [ToggleButton]
        }), __metadata('design:paramtypes', [])], ToggleButtonModule);
        return ToggleButtonModule;
    }();
    exports.ToggleButtonModule = ToggleButtonModule;
    

    return module.exports;
});
$__System.registerDynamic("5d", ["3", "9"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var Toolbar = function () {
        function Toolbar() {}
        __decorate([core_1.Input(), __metadata('design:type', Object)], Toolbar.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Toolbar.prototype, "styleClass", void 0);
        Toolbar = __decorate([core_1.Component({
            selector: 'p-toolbar',
            template: "\n        <div [ngClass]=\"'ui-toolbar ui-widget ui-widget-header ui-corner-all ui-helper-clearfix'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <ng-content></ng-content>\n        </div>\n    "
        }), __metadata('design:paramtypes', [])], Toolbar);
        return Toolbar;
    }();
    exports.Toolbar = Toolbar;
    var ToolbarModule = function () {
        function ToolbarModule() {}
        ToolbarModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Toolbar],
            declarations: [Toolbar]
        }), __metadata('design:paramtypes', [])], ToolbarModule);
        return ToolbarModule;
    }();
    exports.ToolbarModule = ToolbarModule;
    

    return module.exports;
});
$__System.registerDynamic("26", ["3"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var DomHandler = function () {
        function DomHandler() {}
        DomHandler.prototype.addClass = function (element, className) {
            if (element.classList) element.classList.add(className);else element.className += ' ' + className;
        };
        DomHandler.prototype.addMultipleClasses = function (element, className) {
            if (element.classList) {
                var styles = className.split(' ');
                for (var i = 0; i < styles.length; i++) {
                    element.classList.add(styles[i]);
                }
            } else {
                var styles = className.split(' ');
                for (var i = 0; i < styles.length; i++) {
                    element.className += ' ' + styles[i];
                }
            }
        };
        DomHandler.prototype.removeClass = function (element, className) {
            if (element.classList) element.classList.remove(className);else element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
        };
        DomHandler.prototype.hasClass = function (element, className) {
            if (element.classList) return element.classList.contains(className);else return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);
        };
        DomHandler.prototype.siblings = function (element) {
            return Array.prototype.filter.call(element.parentNode.children, function (child) {
                return child !== element;
            });
        };
        DomHandler.prototype.find = function (element, selector) {
            return element.querySelectorAll(selector);
        };
        DomHandler.prototype.findSingle = function (element, selector) {
            return element.querySelector(selector);
        };
        DomHandler.prototype.index = function (element) {
            var children = element.parentNode.childNodes;
            var num = 0;
            for (var i = 0; i < children.length; i++) {
                if (children[i] == element) return num;
                if (children[i].nodeType == 1) num++;
            }
            return -1;
        };
        DomHandler.prototype.relativePosition = function (element, target) {
            var elementDimensions = element.offsetParent ? { width: element.outerWidth, height: element.outerHeight } : this.getHiddenElementDimensions(element);
            var targetHeight = target.offsetHeight;
            var targetWidth = target.offsetWidth;
            var targetOffset = target.getBoundingClientRect();
            var top, left;
            if (targetOffset.top + targetHeight + elementDimensions.height > window.innerHeight) top = -1 * elementDimensions.height;else top = targetHeight;
            if (targetOffset.left + elementDimensions.width > window.innerWidth) left = targetWidth - elementDimensions.width;else left = 0;
            element.style.top = top + 'px';
            element.style.left = left + 'px';
        };
        DomHandler.prototype.absolutePosition = function (element, target) {
            var elementDimensions = element.offsetParent ? { width: element.offsetWidth, height: element.offsetHeight } : this.getHiddenElementDimensions(element);
            var elementOuterHeight = elementDimensions.height;
            var elementOuterWidth = elementDimensions.width;
            var targetOuterHeight = target.offsetHeight;
            var targetOuterWidth = target.offsetWidth;
            var targetOffset = target.getBoundingClientRect();
            var windowScrollTop = this.getWindowScrollTop();
            var windowScrollLeft = this.getWindowScrollLeft();
            var top, left;
            if (targetOffset.top + targetOuterHeight + elementOuterHeight > window.innerHeight) top = targetOffset.top + windowScrollTop - elementOuterHeight;else top = targetOuterHeight + targetOffset.top + windowScrollTop;
            if (targetOffset.left + targetOuterWidth + elementOuterWidth > window.innerWidth) left = targetOffset.left + windowScrollLeft + targetOuterWidth - elementOuterWidth;else left = targetOffset.left + windowScrollLeft;
            element.style.top = top + 'px';
            element.style.left = left + 'px';
        };
        DomHandler.prototype.getHiddenElementOuterHeight = function (element) {
            element.style.visibility = 'hidden';
            element.style.display = 'block';
            var elementHeight = element.offsetHeight;
            element.style.display = 'none';
            element.style.visibility = 'visible';
            return elementHeight;
        };
        DomHandler.prototype.getHiddenElementOuterWidth = function (element) {
            element.style.visibility = 'hidden';
            element.style.display = 'block';
            var elementWidth = element.offsetWidth;
            element.style.display = 'none';
            element.style.visibility = 'visible';
            return elementWidth;
        };
        DomHandler.prototype.getHiddenElementDimensions = function (element) {
            var dimensions = {};
            element.style.visibility = 'hidden';
            element.style.display = 'block';
            dimensions.width = element.offsetWidth;
            dimensions.height = element.offsetHeight;
            element.style.display = 'none';
            element.style.visibility = 'visible';
            return dimensions;
        };
        DomHandler.prototype.scrollInView = function (container, item) {
            var borderTopValue = getComputedStyle(container).getPropertyValue('borderTopWidth');
            var borderTop = borderTopValue ? parseFloat(borderTopValue) : 0;
            var paddingTopValue = getComputedStyle(container).getPropertyValue('paddingTop');
            var paddingTop = paddingTopValue ? parseFloat(paddingTopValue) : 0;
            var containerRect = container.getBoundingClientRect();
            var itemRect = item.getBoundingClientRect();
            var offset = itemRect.top + document.body.scrollTop - (containerRect.top + document.body.scrollTop) - borderTop - paddingTop;
            var scroll = container.scrollTop;
            var elementHeight = container.clientHeight;
            var itemHeight = this.getOuterHeight(item);
            if (offset < 0) {
                container.scrollTop = scroll + offset;
            } else if (offset + itemHeight > elementHeight) {
                container.scrollTop = scroll + offset - elementHeight + itemHeight;
            }
        };
        DomHandler.prototype.fadeIn = function (element, duration) {
            element.style.opacity = 0;
            var last = +new Date();
            var tick = function () {
                element.style.opacity = +element.style.opacity + (new Date().getTime() - last) / duration;
                last = +new Date();
                if (+element.style.opacity < 1) {
                    window.requestAnimationFrame && requestAnimationFrame(tick) || setTimeout(tick, 16);
                }
            };
            tick();
        };
        DomHandler.prototype.fadeOut = function (element, ms) {
            var opacity = 1,
                interval = 50,
                duration = ms,
                gap = interval / duration;
            var fading = setInterval(function () {
                opacity = opacity - gap;
                element.style.opacity = opacity;
                if (opacity <= 0) {
                    clearInterval(fading);
                }
            }, interval);
        };
        DomHandler.prototype.getWindowScrollTop = function () {
            var doc = document.documentElement;
            return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
        };
        DomHandler.prototype.getWindowScrollLeft = function () {
            var doc = document.documentElement;
            return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
        };
        DomHandler.prototype.matches = function (element, selector) {
            var p = Element.prototype;
            var f = p['matches'] || p.webkitMatchesSelector || p['mozMatchesSelector'] || p.msMatchesSelector || function (s) {
                return [].indexOf.call(document.querySelectorAll(s), this) !== -1;
            };
            return f.call(element, selector);
        };
        DomHandler.prototype.getOuterWidth = function (el, margin) {
            var width = el.offsetWidth;
            if (margin) {
                var style = getComputedStyle(el);
                width += parseInt(style.paddingLeft) + parseInt(style.paddingRight);
            }
            return width;
        };
        DomHandler.prototype.getHorizontalMargin = function (el) {
            var style = getComputedStyle(el);
            return parseInt(style.marginLeft) + parseInt(style.marginRight);
        };
        DomHandler.prototype.innerWidth = function (el) {
            var width = el.offsetWidth;
            var style = getComputedStyle(el);
            width += parseInt(style.paddingLeft) + parseInt(style.paddingRight);
            return width;
        };
        DomHandler.prototype.width = function (el) {
            var width = el.offsetWidth;
            var style = getComputedStyle(el);
            width -= parseInt(style.paddingLeft) + parseInt(style.paddingRight);
            return width;
        };
        DomHandler.prototype.getOuterHeight = function (el, margin) {
            var height = el.offsetHeight;
            if (margin) {
                var style = getComputedStyle(el);
                height += parseInt(style.marginTop) + parseInt(style.marginBottom);
            }
            return height;
        };
        DomHandler.prototype.getHeight = function (el) {
            var height = el.offsetHeight;
            var style = getComputedStyle(el);
            height -= parseInt(style.paddingTop) + parseInt(style.paddingBottom) + parseInt(style.borderTopWidth) + parseInt(style.borderBottomWidth);
            return height;
        };
        DomHandler.prototype.getViewport = function () {
            var win = window,
                d = document,
                e = d.documentElement,
                g = d.getElementsByTagName('body')[0],
                w = win.innerWidth || e.clientWidth || g.clientWidth,
                h = win.innerHeight || e.clientHeight || g.clientHeight;
            return { width: w, height: h };
        };
        DomHandler.prototype.equals = function (obj1, obj2) {
            if (obj1 == null && obj2 == null) {
                return true;
            }
            if (obj1 == null || obj2 == null) {
                return false;
            }
            if (obj1 == obj2) {
                delete obj1._$visited;
                return true;
            }
            if (typeof obj1 == 'object' && typeof obj2 == 'object') {
                obj1._$visited = true;
                for (var p in obj1) {
                    if (p === "_$visited") continue;
                    if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) {
                        return false;
                    }
                    switch (typeof obj1[p]) {
                        case 'object':
                            if (obj1._$visited || !this.equals(obj1[p], obj2[p])) return false;
                            break;
                        case 'function':
                            if (typeof obj2[p] == 'undefined' || p != 'compare' && obj1[p].toString() != obj2[p].toString()) return false;
                            break;
                        default:
                            if (obj1[p] != obj2[p]) return false;
                            break;
                    }
                }
                for (var p in obj2) {
                    if (typeof obj1[p] == 'undefined') return false;
                }
                delete obj1._$visited;
                return true;
            }
            return false;
        };
        DomHandler.prototype.getUserAgent = function () {
            return navigator.userAgent;
        };
        DomHandler.zindex = 1000;
        DomHandler = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [])], DomHandler);
        return DomHandler;
    }();
    exports.DomHandler = DomHandler;
    

    return module.exports;
});
$__System.registerDynamic("5e", ["3", "9", "26"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var domhandler_1 = $__require("26");
    var Tooltip = function () {
        function Tooltip(el, domHandler) {
            this.el = el;
            this.domHandler = domHandler;
            this.tooltipPosition = 'right';
            this.tooltipEvent = 'hover';
        }
        Tooltip.prototype.onMouseEnter = function (e) {
            if (this.tooltipEvent === 'hover') {
                this.show();
            }
        };
        Tooltip.prototype.onMouseLeave = function (e) {
            if (this.tooltipEvent === 'hover') {
                this.hide();
            }
        };
        Tooltip.prototype.onFocus = function (e) {
            if (this.tooltipEvent === 'focus') {
                this.show();
            }
        };
        Tooltip.prototype.onBlur = function (e) {
            if (this.tooltipEvent === 'focus') {
                this.hide();
            }
        };
        Tooltip.prototype.show = function () {
            this.create();
            var rect = this.el.nativeElement.getBoundingClientRect();
            var targetTop = rect.top + document.body.scrollTop;
            var targetLeft = rect.left + document.body.scrollLeft;
            var left;
            var top;
            this.container.style.display = 'block';
            switch (this.tooltipPosition) {
                case 'right':
                    left = targetLeft + this.domHandler.getOuterWidth(this.el.nativeElement);
                    top = targetTop + (this.domHandler.getOuterHeight(this.el.nativeElement) - this.domHandler.getOuterHeight(this.container)) / 2;
                    break;
                case 'left':
                    left = targetLeft - this.domHandler.getOuterWidth(this.container);
                    top = targetTop + (this.domHandler.getOuterHeight(this.el.nativeElement) - this.domHandler.getOuterHeight(this.container)) / 2;
                    break;
                case 'top':
                    left = targetLeft + (this.domHandler.getOuterWidth(this.el.nativeElement) - this.domHandler.getOuterWidth(this.container)) / 2;
                    top = targetTop - this.domHandler.getOuterHeight(this.container);
                    break;
                case 'bottom':
                    left = targetLeft + (this.domHandler.getOuterWidth(this.el.nativeElement) - this.domHandler.getOuterWidth(this.container)) / 2;
                    top = targetTop + this.domHandler.getOuterHeight(this.el.nativeElement);
                    break;
            }
            this.container.style.left = left + 'px';
            this.container.style.top = top + 'px';
            this.domHandler.fadeIn(this.container, 250);
            this.container.style.zIndex = ++domhandler_1.DomHandler.zindex;
        };
        Tooltip.prototype.hide = function () {
            this.container.style.display = 'none';
            document.body.removeChild(this.container);
            this.container = null;
        };
        Tooltip.prototype.create = function () {
            this.container = document.createElement('div');
            this.container.className = 'ui-widget ui-tooltip ui-tooltip-' + this.tooltipPosition;
            var tooltipArrow = document.createElement('div');
            tooltipArrow.className = 'ui-tooltip-arrow';
            this.container.appendChild(tooltipArrow);
            var tooltipText = document.createElement('div');
            tooltipText.className = 'ui-tooltip-text ui-shadow ui-corner-all';
            tooltipText.innerHTML = this.text;
            this.container.appendChild(tooltipText);
            document.body.appendChild(this.container);
        };
        Tooltip.prototype.ngOnDestroy = function () {
            if (this.container && this.container.parentElement) {
                document.body.removeChild(this.container);
            }
            this.container = null;
        };
        __decorate([core_1.Input('pTooltip'), __metadata('design:type', String)], Tooltip.prototype, "text", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Tooltip.prototype, "tooltipPosition", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Tooltip.prototype, "tooltipEvent", void 0);
        __decorate([core_1.HostListener('mouseenter', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Tooltip.prototype, "onMouseEnter", null);
        __decorate([core_1.HostListener('mouseleave', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Tooltip.prototype, "onMouseLeave", null);
        __decorate([core_1.HostListener('focus', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Tooltip.prototype, "onFocus", null);
        __decorate([core_1.HostListener('blur', ['$event']), __metadata('design:type', Function), __metadata('design:paramtypes', [Object]), __metadata('design:returntype', void 0)], Tooltip.prototype, "onBlur", null);
        Tooltip = __decorate([core_1.Directive({
            selector: '[pTooltip]',
            host: {},
            providers: [domhandler_1.DomHandler]
        }), __metadata('design:paramtypes', [core_1.ElementRef, domhandler_1.DomHandler])], Tooltip);
        return Tooltip;
    }();
    exports.Tooltip = Tooltip;
    var TooltipModule = function () {
        function TooltipModule() {}
        TooltipModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Tooltip],
            declarations: [Tooltip]
        }), __metadata('design:paramtypes', [])], TooltipModule);
        return TooltipModule;
    }();
    exports.TooltipModule = TooltipModule;
    

    return module.exports;
});
$__System.registerDynamic("5f", ["3", "9", "21"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __param = this && this.__param || function (paramIndex, decorator) {
        return function (target, key) {
            decorator(target, key, paramIndex);
        };
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var shared_1 = $__require("21");
    var TreeNodeTemplateLoader = function () {
        function TreeNodeTemplateLoader(viewContainer) {
            this.viewContainer = viewContainer;
        }
        TreeNodeTemplateLoader.prototype.ngOnInit = function () {
            var view = this.viewContainer.createEmbeddedView(this.template, {
                '\$implicit': this.node
            });
        };
        __decorate([core_1.Input(), __metadata('design:type', Object)], TreeNodeTemplateLoader.prototype, "node", void 0);
        __decorate([core_1.Input(), __metadata('design:type', core_1.TemplateRef)], TreeNodeTemplateLoader.prototype, "template", void 0);
        TreeNodeTemplateLoader = __decorate([core_1.Component({
            selector: 'p-treeNodeTemplateLoader',
            template: ""
        }), __metadata('design:paramtypes', [core_1.ViewContainerRef])], TreeNodeTemplateLoader);
        return TreeNodeTemplateLoader;
    }();
    exports.TreeNodeTemplateLoader = TreeNodeTemplateLoader;
    var UITreeNode = function () {
        function UITreeNode(tree) {
            this.tree = tree;
            this.hover = false;
        }
        UITreeNode.prototype.getIcon = function () {
            var icon;
            if (this.node.icon) icon = this.node.icon;else icon = this.node.expanded ? this.node.expandedIcon : this.node.collapsedIcon;
            return UITreeNode.ICON_CLASS + ' ' + icon;
        };
        UITreeNode.prototype.isLeaf = function () {
            return this.node.leaf == false ? false : !(this.node.children && this.node.children.length);
        };
        UITreeNode.prototype.toggle = function (event) {
            if (this.node.expanded) this.tree.onNodeCollapse.emit({ originalEvent: event, node: this.node });else this.tree.onNodeExpand.emit({ originalEvent: event, node: this.node });
            this.node.expanded = !this.node.expanded;
        };
        UITreeNode.prototype.onNodeClick = function (event) {
            this.tree.onNodeClick(event, this.node);
        };
        UITreeNode.prototype.onNodeRightClick = function (event) {
            this.tree.onNodeRightClick(event, this.node);
        };
        UITreeNode.prototype.isSelected = function () {
            return this.tree.isSelected(this.node);
        };
        UITreeNode.ICON_CLASS = 'ui-treenode-icon fa fa-fw';
        __decorate([core_1.Input(), __metadata('design:type', Object)], UITreeNode.prototype, "node", void 0);
        UITreeNode = __decorate([core_1.Component({
            selector: 'p-treeNode',
            template: "\n        <li class=\"ui-treenode\" *ngIf=\"node\">\n            <div class=\"ui-treenode-content\" [ngClass]=\"{'ui-treenode-selectable': tree.selectionMode}\" \n                (mouseenter)=\"hover=true\" (mouseleave)=\"hover=false\" (click)=\"onNodeClick($event)\" (contextmenu)=\"onNodeRightClick($event)\">\n                <span class=\"ui-tree-toggler fa fa-fw\" [ngClass]=\"{'fa-caret-right':!node.expanded,'fa-caret-down':node.expanded}\" *ngIf=\"!isLeaf()\"\n                        (click)=\"toggle($event)\"></span\n                ><span class=\"ui-treenode-leaf-icon\" *ngIf=\"isLeaf()\"></span\n                ><span [class]=\"getIcon()\" *ngIf=\"node.icon||node.expandedIcon||node.collapsedIcon\"></span\n                ><span class=\"ui-treenode-label ui-corner-all\" \n                    [ngClass]=\"{'ui-state-hover':hover&&tree.selectionMode,'ui-state-highlight':isSelected()}\">\n                        <span *ngIf=\"!tree.getTemplateForNode(node)\">{{node.label}}</span>\n                        <span *ngIf=\"tree.getTemplateForNode(node)\">\n                            <p-treeNodeTemplateLoader [node]=\"node\" [template]=\"tree.getTemplateForNode(node)\"></p-treeNodeTemplateLoader>\n                        </span>\n                    </span>\n            </div>\n            <ul class=\"ui-treenode-children\" style=\"display: none;\" *ngIf=\"node.children\" [style.display]=\"node.expanded ? 'block' : 'none'\">\n                <p-treeNode *ngFor=\"let childNode of node.children\" [node]=\"childNode\"></p-treeNode>\n            </ul>\n        </li>\n    "
        }), __param(0, core_1.Inject(core_1.forwardRef(function () {
            return Tree;
        }))), __metadata('design:paramtypes', [Tree])], UITreeNode);
        return UITreeNode;
    }();
    exports.UITreeNode = UITreeNode;
    var Tree = function () {
        function Tree() {
            this.selectionChange = new core_1.EventEmitter();
            this.onNodeSelect = new core_1.EventEmitter();
            this.onNodeUnselect = new core_1.EventEmitter();
            this.onNodeExpand = new core_1.EventEmitter();
            this.onNodeCollapse = new core_1.EventEmitter();
            this.onNodeContextMenuSelect = new core_1.EventEmitter();
        }
        Tree.prototype.ngAfterContentInit = function () {
            var _this = this;
            if (this.templates.length) {
                this.templateMap = {};
            }
            this.templates.forEach(function (item) {
                _this.templateMap[item.type] = item.template;
            });
        };
        Tree.prototype.onNodeClick = function (event, node) {
            if (event.target.className && event.target.className.indexOf('ui-tree-toggler') === 0) {
                return;
            } else {
                var metaKey = event.metaKey || event.ctrlKey;
                var index = this.findIndexInSelection(node);
                var selected = index >= 0;
                if (selected && metaKey) {
                    if (this.isSingleSelectionMode()) {
                        this.selectionChange.emit(null);
                    } else {
                        this.selection.splice(index, 1);
                        this.selectionChange.emit(this.selection);
                    }
                    this.onNodeUnselect.emit({ originalEvent: event, node: node });
                } else {
                    if (this.isSingleSelectionMode()) {
                        this.selectionChange.emit(node);
                    } else if (this.isMultipleSelectionMode()) {
                        this.selection = !metaKey ? [] : this.selection || [];
                        this.selection.push(node);
                        this.selectionChange.emit(this.selection);
                    }
                    this.onNodeSelect.emit({ originalEvent: event, node: node });
                }
            }
        };
        Tree.prototype.onNodeRightClick = function (event, node) {
            if (this.contextMenu) {
                if (event.target.className && event.target.className.indexOf('ui-tree-toggler') === 0) {
                    return;
                } else {
                    var index = this.findIndexInSelection(node);
                    var selected = index >= 0;
                    if (!selected) {
                        if (this.isSingleSelectionMode()) this.selectionChange.emit(node);else this.selectionChange.emit([node]);
                    }
                    this.contextMenu.show(event);
                    this.onNodeContextMenuSelect.emit({ originalEvent: event, node: node });
                }
            }
        };
        Tree.prototype.findIndexInSelection = function (node) {
            var index = -1;
            if (this.selectionMode && this.selection) {
                if (this.isSingleSelectionMode()) {
                    index = this.selection == node ? 0 : -1;
                } else if (this.isMultipleSelectionMode()) {
                    for (var i = 0; i < this.selection.length; i++) {
                        if (this.selection[i] == node) {
                            index = i;
                            break;
                        }
                    }
                }
            }
            return index;
        };
        Tree.prototype.isSelected = function (node) {
            return this.findIndexInSelection(node) != -1;
        };
        Tree.prototype.isSingleSelectionMode = function () {
            return this.selectionMode && this.selectionMode == 'single';
        };
        Tree.prototype.isMultipleSelectionMode = function () {
            return this.selectionMode && this.selectionMode == 'multiple';
        };
        Tree.prototype.expandToNode = function (node) {
            var pathToNode = this.findPathToNode(node);
            if (pathToNode) {
                pathToNode.forEach(function (node) {
                    return node.expanded = true;
                });
            }
        };
        Tree.prototype.findPathToNode = function (node) {
            return Tree.findPathToNodeRecursive(node, this.value);
        };
        Tree.findPathToNodeRecursive = function (searchingFor, searchingIn) {
            if (!searchingIn || searchingIn.length == 0) {
                return undefined;
            }
            for (var i = 0; i < searchingIn.length; i++) {
                if (searchingFor == searchingIn[i]) {
                    return [searchingIn[i]];
                }
                var path = Tree.findPathToNodeRecursive(searchingFor, searchingIn[i].children);
                if (path) {
                    path.unshift(searchingIn[i]);
                    return path;
                }
            }
            return undefined;
        };
        Tree.prototype.getTemplateForNode = function (node) {
            if (this.templateMap) return node.type ? this.templateMap[node.type] : this.templateMap['default'];else return null;
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], Tree.prototype, "value", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Tree.prototype, "selectionMode", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Tree.prototype, "selection", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Tree.prototype, "selectionChange", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Tree.prototype, "onNodeSelect", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Tree.prototype, "onNodeUnselect", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Tree.prototype, "onNodeExpand", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Tree.prototype, "onNodeCollapse", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Tree.prototype, "onNodeContextMenuSelect", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Tree.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Tree.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Tree.prototype, "contextMenu", void 0);
        __decorate([core_1.ContentChildren(shared_1.PrimeTemplate), __metadata('design:type', core_1.QueryList)], Tree.prototype, "templates", void 0);
        Tree = __decorate([core_1.Component({
            selector: 'p-tree',
            template: "\n        <div [ngClass]=\"'ui-tree ui-widget ui-widget-content ui-corner-all'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <ul class=\"ui-tree-container\">\n                <p-treeNode *ngFor=\"let node of value\" [node]=\"node\"></p-treeNode>\n            </ul>\n        </div>\n    "
        }), __metadata('design:paramtypes', [])], Tree);
        return Tree;
    }();
    exports.Tree = Tree;
    var TreeModule = function () {
        function TreeModule() {}
        TreeModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Tree],
            declarations: [Tree, UITreeNode, TreeNodeTemplateLoader]
        }), __metadata('design:paramtypes', [])], TreeModule);
        return TreeModule;
    }();
    exports.TreeModule = TreeModule;
    

    return module.exports;
});
$__System.registerDynamic("21", ["3", "9"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var core_2 = $__require("3");
    var Header = function () {
        function Header() {}
        Header = __decorate([core_2.Component({
            selector: 'header',
            template: '<ng-content></ng-content>'
        }), __metadata('design:paramtypes', [])], Header);
        return Header;
    }();
    exports.Header = Header;
    var Footer = function () {
        function Footer() {}
        Footer = __decorate([core_2.Component({
            selector: 'footer',
            template: '<ng-content></ng-content>'
        }), __metadata('design:paramtypes', [])], Footer);
        return Footer;
    }();
    exports.Footer = Footer;
    var PrimeTemplate = function () {
        function PrimeTemplate(template) {
            this.template = template;
        }
        __decorate([core_1.Input(), __metadata('design:type', String)], PrimeTemplate.prototype, "type", void 0);
        PrimeTemplate = __decorate([core_1.Directive({
            selector: '[pTemplate]',
            host: {}
        }), __metadata('design:paramtypes', [core_1.TemplateRef])], PrimeTemplate);
        return PrimeTemplate;
    }();
    exports.PrimeTemplate = PrimeTemplate;
    var TemplateWrapper = function () {
        function TemplateWrapper(viewContainer) {
            this.viewContainer = viewContainer;
        }
        TemplateWrapper.prototype.ngOnInit = function () {
            var view = this.viewContainer.createEmbeddedView(this.templateRef, {
                '\$implicit': this.item
            });
        };
        __decorate([core_1.Input(), __metadata('design:type', Object)], TemplateWrapper.prototype, "item", void 0);
        __decorate([core_1.Input('pTemplateWrapper'), __metadata('design:type', core_1.TemplateRef)], TemplateWrapper.prototype, "templateRef", void 0);
        TemplateWrapper = __decorate([core_1.Directive({
            selector: '[pTemplateWrapper]'
        }), __metadata('design:paramtypes', [core_1.ViewContainerRef])], TemplateWrapper);
        return TemplateWrapper;
    }();
    exports.TemplateWrapper = TemplateWrapper;
    var Column = function () {
        function Column() {
            this.sortFunction = new core_1.EventEmitter();
        }
        Column.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.templates.forEach(function (item) {
                switch (item.type) {
                    case 'header':
                        _this.headerTemplate = item.template;
                        break;
                    case 'body':
                        _this.bodyTemplate = item.template;
                        break;
                    case 'footer':
                        _this.footerTemplate = item.template;
                        break;
                    default:
                        _this.bodyTemplate = item.template;
                        break;
                }
            });
        };
        __decorate([core_1.Input(), __metadata('design:type', String)], Column.prototype, "field", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Column.prototype, "header", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Column.prototype, "footer", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Column.prototype, "sortable", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Column.prototype, "editable", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Column.prototype, "filter", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Column.prototype, "filterMatchMode", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Column.prototype, "rowspan", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], Column.prototype, "colspan", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], Column.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Column.prototype, "styleClass", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Column.prototype, "hidden", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], Column.prototype, "expander", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], Column.prototype, "selectionMode", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], Column.prototype, "sortFunction", void 0);
        __decorate([core_1.ContentChildren(PrimeTemplate), __metadata('design:type', core_1.QueryList)], Column.prototype, "templates", void 0);
        __decorate([core_1.ContentChild(core_1.TemplateRef), __metadata('design:type', core_1.TemplateRef)], Column.prototype, "template", void 0);
        Column = __decorate([core_2.Component({
            selector: 'p-column',
            template: ""
        }), __metadata('design:paramtypes', [])], Column);
        return Column;
    }();
    exports.Column = Column;
    var ColumnBodyTemplateLoader = function () {
        function ColumnBodyTemplateLoader(viewContainer) {
            this.viewContainer = viewContainer;
        }
        ColumnBodyTemplateLoader.prototype.ngOnInit = function () {
            var view = this.viewContainer.createEmbeddedView(this.column.bodyTemplate, {
                '\$implicit': this.column,
                'rowData': this.rowData,
                'rowIndex': this.rowIndex
            });
        };
        __decorate([core_1.Input(), __metadata('design:type', Object)], ColumnBodyTemplateLoader.prototype, "column", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], ColumnBodyTemplateLoader.prototype, "rowData", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], ColumnBodyTemplateLoader.prototype, "rowIndex", void 0);
        ColumnBodyTemplateLoader = __decorate([core_2.Component({
            selector: 'p-columnBodyTemplateLoader',
            template: ""
        }), __metadata('design:paramtypes', [core_1.ViewContainerRef])], ColumnBodyTemplateLoader);
        return ColumnBodyTemplateLoader;
    }();
    exports.ColumnBodyTemplateLoader = ColumnBodyTemplateLoader;
    var ColumnHeaderTemplateLoader = function () {
        function ColumnHeaderTemplateLoader(viewContainer) {
            this.viewContainer = viewContainer;
        }
        ColumnHeaderTemplateLoader.prototype.ngOnInit = function () {
            var view = this.viewContainer.createEmbeddedView(this.column.headerTemplate, {
                '\$implicit': this.column
            });
        };
        __decorate([core_1.Input(), __metadata('design:type', Object)], ColumnHeaderTemplateLoader.prototype, "column", void 0);
        ColumnHeaderTemplateLoader = __decorate([core_2.Component({
            selector: 'p-columnHeaderTemplateLoader',
            template: ""
        }), __metadata('design:paramtypes', [core_1.ViewContainerRef])], ColumnHeaderTemplateLoader);
        return ColumnHeaderTemplateLoader;
    }();
    exports.ColumnHeaderTemplateLoader = ColumnHeaderTemplateLoader;
    var ColumnFooterTemplateLoader = function () {
        function ColumnFooterTemplateLoader(viewContainer) {
            this.viewContainer = viewContainer;
        }
        ColumnFooterTemplateLoader.prototype.ngOnInit = function () {
            var view = this.viewContainer.createEmbeddedView(this.column.footerTemplate, {
                '\$implicit': this.column
            });
        };
        __decorate([core_1.Input(), __metadata('design:type', Object)], ColumnFooterTemplateLoader.prototype, "column", void 0);
        ColumnFooterTemplateLoader = __decorate([core_2.Component({
            selector: 'p-columnFooterTemplateLoader',
            template: ""
        }), __metadata('design:paramtypes', [core_1.ViewContainerRef])], ColumnFooterTemplateLoader);
        return ColumnFooterTemplateLoader;
    }();
    exports.ColumnFooterTemplateLoader = ColumnFooterTemplateLoader;
    var TemplateLoader = function () {
        function TemplateLoader(viewContainer) {
            this.viewContainer = viewContainer;
        }
        TemplateLoader.prototype.ngOnInit = function () {
            if (this.template) {
                this.viewContainer.createEmbeddedView(this.template, {});
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', core_1.TemplateRef)], TemplateLoader.prototype, "template", void 0);
        TemplateLoader = __decorate([core_2.Component({
            selector: 'p-templateLoader',
            template: ""
        }), __metadata('design:paramtypes', [core_1.ViewContainerRef])], TemplateLoader);
        return TemplateLoader;
    }();
    exports.TemplateLoader = TemplateLoader;
    var SharedModule = function () {
        function SharedModule() {}
        SharedModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [Header, Footer, Column, TemplateWrapper, ColumnHeaderTemplateLoader, ColumnBodyTemplateLoader, ColumnFooterTemplateLoader, PrimeTemplate, TemplateLoader],
            declarations: [Header, Footer, Column, TemplateWrapper, ColumnHeaderTemplateLoader, ColumnBodyTemplateLoader, ColumnFooterTemplateLoader, PrimeTemplate, TemplateLoader]
        }), __metadata('design:paramtypes', [])], SharedModule);
        return SharedModule;
    }();
    exports.SharedModule = SharedModule;
    

    return module.exports;
});
$__System.registerDynamic("60", ["3", "9", "21"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __param = this && this.__param || function (paramIndex, decorator) {
        return function (target, key) {
            decorator(target, key, paramIndex);
        };
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var shared_1 = $__require("21");
    var shared_2 = $__require("21");
    var UITreeRow = function () {
        function UITreeRow(treeTable) {
            this.treeTable = treeTable;
            this.level = 0;
        }
        UITreeRow.prototype.toggle = function (event) {
            if (this.node.expanded) this.treeTable.onNodeCollapse.emit({ originalEvent: event, node: this.node });else this.treeTable.onNodeExpand.emit({ originalEvent: event, node: this.node });
            this.node.expanded = !this.node.expanded;
        };
        UITreeRow.prototype.isLeaf = function () {
            return this.node.leaf == false ? false : !(this.node.children && this.node.children.length);
        };
        UITreeRow.prototype.isSelected = function () {
            return this.treeTable.isSelected(this.node);
        };
        UITreeRow.prototype.onRowClick = function (event) {
            this.treeTable.onRowClick(event, this.node);
        };
        UITreeRow.prototype.resolveFieldData = function (data, field) {
            if (data && field) {
                if (field.indexOf('.') == -1) {
                    return data[field];
                } else {
                    var fields = field.split('.');
                    var value = data;
                    for (var i = 0, len = fields.length; i < len; ++i) {
                        value = value[fields[i]];
                    }
                    return value;
                }
            } else {
                return null;
            }
        };
        __decorate([core_1.Input(), __metadata('design:type', Object)], UITreeRow.prototype, "node", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Number)], UITreeRow.prototype, "level", void 0);
        UITreeRow = __decorate([core_1.Component({
            selector: '[pTreeRow]',
            template: "\n        <div class=\"ui-treetable-row\" [ngClass]=\"{'ui-state-hover':hover&&treeTable.selectionMode,'ui-state-highlight':isSelected(node)}\">\n            <td *ngFor=\"let col of treeTable.columns; let i=index\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\"\n                (mouseenter)=\"hover=true\" (mouseleave)=\"hover=false\" (click)=\"onRowClick($event)\">\n                <span *ngIf=\"i==0\" class=\"ui-treetable-toggler fa fa-fw ui-c\" [ngClass]=\"{'fa-caret-down':node.expanded,'fa-caret-right':!node.expanded}\"\n                    [ngStyle]=\"{'margin-left':level*16 + 'px','visibility': isLeaf() ? 'hidden' : 'visible'}\"\n                    (click)=\"toggle($event)\"></span>\n                <span *ngIf=\"!col.template\">{{resolveFieldData(node.data,col.field)}}</span>\n                <p-columnBodyTemplateLoader [column]=\"col\" [rowData]=\"node\" *ngIf=\"col.template\"></p-columnBodyTemplateLoader>\n            </td>\n        </div>\n        <div *ngIf=\"node.children\" class=\"ui-treetable-row\" [style.display]=\"node.expanded ? 'table-row' : 'none'\">\n            <td [attr.colspan]=\"treeTable.columns.length\" class=\"ui-treetable-child-table-container\">\n                <table>\n                    <tbody pTreeRow *ngFor=\"let childNode of node.children\" [node]=\"childNode\" [level]=\"level+1\"></tbody>\n                </table>\n            </td>\n        </div>\n    "
        }), __param(0, core_1.Inject(core_1.forwardRef(function () {
            return TreeTable;
        }))), __metadata('design:paramtypes', [TreeTable])], UITreeRow);
        return UITreeRow;
    }();
    exports.UITreeRow = UITreeRow;
    var TreeTable = function () {
        function TreeTable() {
            this.selectionChange = new core_1.EventEmitter();
            this.onNodeSelect = new core_1.EventEmitter();
            this.onNodeUnselect = new core_1.EventEmitter();
            this.onNodeExpand = new core_1.EventEmitter();
            this.onNodeCollapse = new core_1.EventEmitter();
        }
        TreeTable.prototype.onRowClick = function (event, node) {
            if (event.target.className && event.target.className.indexOf('ui-treetable-toggler') === 0) {
                return;
            } else {
                var metaKey = event.metaKey || event.ctrlKey;
                var index = this.findIndexInSelection(node);
                var selected = index >= 0;
                if (selected && metaKey) {
                    if (this.isSingleSelectionMode()) {
                        this.selectionChange.emit(null);
                    } else {
                        this.selection.splice(index, 1);
                        this.selectionChange.emit(this.selection);
                    }
                    this.onNodeUnselect.emit({ originalEvent: event, node: node });
                } else {
                    if (this.isSingleSelectionMode()) {
                        this.selectionChange.emit(node);
                    } else if (this.isMultipleSelectionMode()) {
                        this.selection = !metaKey ? [] : this.selection || [];
                        this.selection.push(node);
                        this.selectionChange.emit(this.selection);
                    }
                    this.onNodeSelect.emit({ originalEvent: event, node: node });
                }
            }
        };
        TreeTable.prototype.findIndexInSelection = function (node) {
            var index = -1;
            if (this.selectionMode && this.selection) {
                if (this.isSingleSelectionMode()) {
                    index = this.selection == node ? 0 : -1;
                } else if (this.isMultipleSelectionMode()) {
                    for (var i = 0; i < this.selection.length; i++) {
                        if (this.selection[i] == node) {
                            index = i;
                            break;
                        }
                    }
                }
            }
            return index;
        };
        TreeTable.prototype.isSelected = function (node) {
            return this.findIndexInSelection(node) != -1;
        };
        TreeTable.prototype.isSingleSelectionMode = function () {
            return this.selectionMode && this.selectionMode == 'single';
        };
        TreeTable.prototype.isMultipleSelectionMode = function () {
            return this.selectionMode && this.selectionMode == 'multiple';
        };
        TreeTable.prototype.hasFooter = function () {
            if (this.columns) {
                var columnsArr = this.columns.toArray();
                for (var i = 0; i < columnsArr.length; i++) {
                    if (columnsArr[i].footer) {
                        return true;
                    }
                }
            }
            return false;
        };
        __decorate([core_1.Input(), __metadata('design:type', Array)], TreeTable.prototype, "value", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], TreeTable.prototype, "selectionMode", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], TreeTable.prototype, "selection", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], TreeTable.prototype, "selectionChange", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], TreeTable.prototype, "onNodeSelect", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], TreeTable.prototype, "onNodeUnselect", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], TreeTable.prototype, "onNodeExpand", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], TreeTable.prototype, "onNodeCollapse", void 0);
        __decorate([core_1.Input(), __metadata('design:type', Object)], TreeTable.prototype, "style", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], TreeTable.prototype, "styleClass", void 0);
        __decorate([core_1.ContentChild(shared_1.Header), __metadata('design:type', Object)], TreeTable.prototype, "header", void 0);
        __decorate([core_1.ContentChild(shared_1.Footer), __metadata('design:type', Object)], TreeTable.prototype, "footer", void 0);
        __decorate([core_1.ContentChildren(shared_1.Column), __metadata('design:type', core_1.QueryList)], TreeTable.prototype, "columns", void 0);
        TreeTable = __decorate([core_1.Component({
            selector: 'p-treeTable',
            template: "\n        <div [ngClass]=\"'ui-treetable ui-widget'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"ui-treetable-header ui-widget-header\" *ngIf=\"header\">\n                <ng-content select=\"header\"></ng-content>\n            </div>\n            <div class=\"ui-treetable-tablewrapper\">\n                <table class=\"ui-widget-content\" style=\"border:0 0 1px 0px\">\n                    <thead>\n                        <tr class=\"ui-state-default\">\n                            <th #headerCell *ngFor=\"let col of columns\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\" \n                                [ngClass]=\"'ui-state-default ui-unselectable-text'\">\n                                <span class=\"ui-column-title\" *ngIf=\"!col.headerTemplate\">{{col.header}}</span>\n                                <span class=\"ui-column-title\" *ngIf=\"col.headerTemplate\">\n                                    <p-columnHeaderTemplateLoader [column]=\"col\"></p-columnHeaderTemplateLoader>\n                                </span>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tfoot *ngIf=\"hasFooter()\">\n                        <tr>\n                            <td *ngFor=\"let col of columns\" [ngStyle]=\"col.style\" [class]=\"col.styleClass\" [ngClass]=\"{'ui-state-default':true}\">\n                                <span class=\"ui-column-footer\" *ngIf=\"!col.footerTemplate\">{{col.footer}}</span>\n                                <span class=\"ui-column-footer\" *ngIf=\"col.footerTemplate\">\n                                    <p-columnFooterTemplateLoader [column]=\"col\"></p-columnFooterTemplateLoader>\n                                </span>\n                            </td>\n                        </tr>\n                    </tfoot>\n                    <tbody pTreeRow *ngFor=\"let node of value\" [node]=\"node\" [level]=\"0\"></tbody>\n                </table>\n            </div>\n            <div class=\"ui-treetable-footer ui-widget-header\" *ngIf=\"footer\">\n                <ng-content select=\"footer\"></ng-content>\n            </div>\n        </div>\n    "
        }), __metadata('design:paramtypes', [])], TreeTable);
        return TreeTable;
    }();
    exports.TreeTable = TreeTable;
    var TreeTableModule = function () {
        function TreeTableModule() {}
        TreeTableModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule, shared_2.SharedModule],
            exports: [TreeTable, shared_2.SharedModule],
            declarations: [TreeTable, UITreeRow]
        }), __metadata('design:paramtypes', [])], TreeTableModule);
        return TreeTableModule;
    }();
    exports.TreeTableModule = TreeTableModule;
    

    return module.exports;
});
$__System.registerDynamic('61', ['62'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('62');
    /**
     * @param PromiseCtor
     * @return {Promise<T>}
     * @method toPromise
     * @owner Observable
     */
    function toPromise(PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                PromiseCtor = root_1.root.Rx.config.Promise;
            } else if (root_1.root.Promise) {
                PromiseCtor = root_1.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) {
                return value = x;
            }, function (err) {
                return reject(err);
            }, function () {
                return resolve(value);
            });
        });
    }
    exports.toPromise = toPromise;
    

    return module.exports;
});
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/operator/toPromise'), require('rxjs/Subject'), require('rxjs/Observable'), require('rxjs/observable/fromPromise')) : typeof define === 'function' && define.amd ? define("23", ["exports", "3", "61", "34", "63", "64"], factory) : (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}), global.ng.core, global.Rx.Observable.prototype, global.Rx, global.Rx, global.Rx.Observable));
}(this, function(exports, _angular_core, rxjs_operator_toPromise, rxjs_Subject, rxjs_Observable, rxjs_observable_fromPromise) {
  'use strict';
  var globalScope;
  if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
      globalScope = self;
    } else {
      globalScope = global;
    }
  } else {
    globalScope = window;
  }
  var global$1 = globalScope;
  global$1.assert = function assert(condition) {};
  function isPresent(obj) {
    return obj !== undefined && obj !== null;
  }
  function isBlank(obj) {
    return obj === undefined || obj === null;
  }
  function isString(obj) {
    return typeof obj === 'string';
  }
  function isFunction(obj) {
    return typeof obj === 'function';
  }
  function isStringMap(obj) {
    return typeof obj === 'object' && obj !== null;
  }
  function isPromise(obj) {
    return isPresent(obj) && isFunction(obj.then);
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  var StringWrapper = (function() {
    function StringWrapper() {}
    StringWrapper.fromCharCode = function(code) {
      return String.fromCharCode(code);
    };
    StringWrapper.charCodeAt = function(s, index) {
      return s.charCodeAt(index);
    };
    StringWrapper.split = function(s, regExp) {
      return s.split(regExp);
    };
    StringWrapper.equals = function(s, s2) {
      return s === s2;
    };
    StringWrapper.stripLeft = function(s, charVal) {
      if (s && s.length) {
        var pos = 0;
        for (var i = 0; i < s.length; i++) {
          if (s[i] != charVal)
            break;
          pos++;
        }
        s = s.substring(pos);
      }
      return s;
    };
    StringWrapper.stripRight = function(s, charVal) {
      if (s && s.length) {
        var pos = s.length;
        for (var i = s.length - 1; i >= 0; i--) {
          if (s[i] != charVal)
            break;
          pos--;
        }
        s = s.substring(0, pos);
      }
      return s;
    };
    StringWrapper.replace = function(s, from, replace) {
      return s.replace(from, replace);
    };
    StringWrapper.replaceAll = function(s, from, replace) {
      return s.replace(from, replace);
    };
    StringWrapper.slice = function(s, from, to) {
      if (from === void 0) {
        from = 0;
      }
      if (to === void 0) {
        to = null;
      }
      return s.slice(from, to === null ? undefined : to);
    };
    StringWrapper.replaceAllMapped = function(s, from, cb) {
      return s.replace(from, function() {
        var matches = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          matches[_i - 0] = arguments[_i];
        }
        matches.splice(-2, 2);
        return cb(matches);
      });
    };
    StringWrapper.contains = function(s, substr) {
      return s.indexOf(substr) != -1;
    };
    StringWrapper.compare = function(a, b) {
      if (a < b) {
        return -1;
      } else if (a > b) {
        return 1;
      } else {
        return 0;
      }
    };
    return StringWrapper;
  }());
  var NumberWrapper = (function() {
    function NumberWrapper() {}
    NumberWrapper.toFixed = function(n, fractionDigits) {
      return n.toFixed(fractionDigits);
    };
    NumberWrapper.equal = function(a, b) {
      return a === b;
    };
    NumberWrapper.parseIntAutoRadix = function(text) {
      var result = parseInt(text);
      if (isNaN(result)) {
        throw new Error('Invalid integer literal when parsing ' + text);
      }
      return result;
    };
    NumberWrapper.parseInt = function(text, radix) {
      if (radix == 10) {
        if (/^(\-|\+)?[0-9]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else if (radix == 16) {
        if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else {
        var result = parseInt(text, radix);
        if (!isNaN(result)) {
          return result;
        }
      }
      throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
    };
    NumberWrapper.parseFloat = function(text) {
      return parseFloat(text);
    };
    Object.defineProperty(NumberWrapper, "NaN", {
      get: function() {
        return NaN;
      },
      enumerable: true,
      configurable: true
    });
    NumberWrapper.isNumeric = function(value) {
      return !isNaN(value - parseFloat(value));
    };
    NumberWrapper.isNaN = function(value) {
      return isNaN(value);
    };
    NumberWrapper.isInteger = function(value) {
      return Number.isInteger(value);
    };
    return NumberWrapper;
  }());
  function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
  }
  function normalizeBool(obj) {
    return isBlank(obj) ? false : obj;
  }
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function hasConstructor(value, type) {
    return value.constructor === type;
  }
  var AbstractControlDirective = (function() {
    function AbstractControlDirective() {}
    Object.defineProperty(AbstractControlDirective.prototype, "control", {
      get: function() {
        throw new Error('unimplemented');
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "value", {
      get: function() {
        return isPresent(this.control) ? this.control.value : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "valid", {
      get: function() {
        return isPresent(this.control) ? this.control.valid : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "invalid", {
      get: function() {
        return isPresent(this.control) ? this.control.invalid : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "pending", {
      get: function() {
        return isPresent(this.control) ? this.control.pending : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "errors", {
      get: function() {
        return isPresent(this.control) ? this.control.errors : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
      get: function() {
        return isPresent(this.control) ? this.control.pristine : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
      get: function() {
        return isPresent(this.control) ? this.control.dirty : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "touched", {
      get: function() {
        return isPresent(this.control) ? this.control.touched : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
      get: function() {
        return isPresent(this.control) ? this.control.untouched : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "disabled", {
      get: function() {
        return isPresent(this.control) ? this.control.disabled : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "enabled", {
      get: function() {
        return isPresent(this.control) ? this.control.enabled : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", {
      get: function() {
        return isPresent(this.control) ? this.control.statusChanges : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", {
      get: function() {
        return isPresent(this.control) ? this.control.valueChanges : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "path", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    AbstractControlDirective.prototype.reset = function(value) {
      if (value === void 0) {
        value = undefined;
      }
      if (isPresent(this.control))
        this.control.reset(value);
    };
    return AbstractControlDirective;
  }());
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ControlContainer = (function(_super) {
    __extends$1(ControlContainer, _super);
    function ControlContainer() {
      _super.apply(this, arguments);
    }
    Object.defineProperty(ControlContainer.prototype, "formDirective", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ControlContainer.prototype, "path", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    return ControlContainer;
  }(AbstractControlDirective));
  var Map$1 = global$1.Map;
  var Set = global$1.Set;
  var createMapFromPairs = (function() {
    try {
      if (new Map$1([[1, 2]]).size === 1) {
        return function createMapFromPairs(pairs) {
          return new Map$1(pairs);
        };
      }
    } catch (e) {}
    return function createMapAndPopulateFromPairs(pairs) {
      var map = new Map$1();
      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i];
        map.set(pair[0], pair[1]);
      }
      return map;
    };
  })();
  var createMapFromMap = (function() {
    try {
      if (new Map$1(new Map$1())) {
        return function createMapFromMap(m) {
          return new Map$1(m);
        };
      }
    } catch (e) {}
    return function createMapAndPopulateFromMap(m) {
      var map = new Map$1();
      m.forEach(function(v, k) {
        map.set(k, v);
      });
      return map;
    };
  })();
  var _clearValues = (function() {
    if ((new Map$1()).keys().next) {
      return function _clearValues(m) {
        var keyIterator = m.keys();
        var k;
        while (!((k = keyIterator.next()).done)) {
          m.set(k.value, null);
        }
      };
    } else {
      return function _clearValuesWithForeEach(m) {
        m.forEach(function(v, k) {
          m.set(k, null);
        });
      };
    }
  })();
  var _arrayFromMap = (function() {
    try {
      if ((new Map$1()).values().next) {
        return function createArrayFromMap(m, getValues) {
          return getValues ? Array.from(m.values()) : Array.from(m.keys());
        };
      }
    } catch (e) {}
    return function createArrayFromMapWithForeach(m, getValues) {
      var res = ListWrapper.createFixedSize(m.size),
          i = 0;
      m.forEach(function(v, k) {
        res[i] = getValues ? v : k;
        i++;
      });
      return res;
    };
  })();
  var MapWrapper = (function() {
    function MapWrapper() {}
    MapWrapper.clone = function(m) {
      return createMapFromMap(m);
    };
    MapWrapper.createFromStringMap = function(stringMap) {
      var result = new Map$1();
      for (var prop in stringMap) {
        result.set(prop, stringMap[prop]);
      }
      return result;
    };
    MapWrapper.toStringMap = function(m) {
      var r = {};
      m.forEach(function(v, k) {
        return r[k] = v;
      });
      return r;
    };
    MapWrapper.createFromPairs = function(pairs) {
      return createMapFromPairs(pairs);
    };
    MapWrapper.clearValues = function(m) {
      _clearValues(m);
    };
    MapWrapper.iterable = function(m) {
      return m;
    };
    MapWrapper.keys = function(m) {
      return _arrayFromMap(m, false);
    };
    MapWrapper.values = function(m) {
      return _arrayFromMap(m, true);
    };
    return MapWrapper;
  }());
  var StringMapWrapper = (function() {
    function StringMapWrapper() {}
    StringMapWrapper.create = function() {
      return {};
    };
    StringMapWrapper.contains = function(map, key) {
      return map.hasOwnProperty(key);
    };
    StringMapWrapper.get = function(map, key) {
      return map.hasOwnProperty(key) ? map[key] : undefined;
    };
    StringMapWrapper.set = function(map, key, value) {
      map[key] = value;
    };
    StringMapWrapper.keys = function(map) {
      return Object.keys(map);
    };
    StringMapWrapper.values = function(map) {
      return Object.keys(map).map(function(k) {
        return map[k];
      });
    };
    StringMapWrapper.isEmpty = function(map) {
      for (var prop in map) {
        return false;
      }
      return true;
    };
    StringMapWrapper.delete = function(map, key) {
      delete map[key];
    };
    StringMapWrapper.forEach = function(map, callback) {
      for (var _i = 0,
          _a = Object.keys(map); _i < _a.length; _i++) {
        var k = _a[_i];
        callback(map[k], k);
      }
    };
    StringMapWrapper.merge = function(m1, m2) {
      var m = {};
      for (var _i = 0,
          _a = Object.keys(m1); _i < _a.length; _i++) {
        var k = _a[_i];
        m[k] = m1[k];
      }
      for (var _b = 0,
          _c = Object.keys(m2); _b < _c.length; _b++) {
        var k = _c[_b];
        m[k] = m2[k];
      }
      return m;
    };
    StringMapWrapper.equals = function(m1, m2) {
      var k1 = Object.keys(m1);
      var k2 = Object.keys(m2);
      if (k1.length != k2.length) {
        return false;
      }
      var key;
      for (var i = 0; i < k1.length; i++) {
        key = k1[i];
        if (m1[key] !== m2[key]) {
          return false;
        }
      }
      return true;
    };
    return StringMapWrapper;
  }());
  var ListWrapper = (function() {
    function ListWrapper() {}
    ListWrapper.createFixedSize = function(size) {
      return new Array(size);
    };
    ListWrapper.createGrowableSize = function(size) {
      return new Array(size);
    };
    ListWrapper.clone = function(array) {
      return array.slice(0);
    };
    ListWrapper.forEachWithIndex = function(array, fn) {
      for (var i = 0; i < array.length; i++) {
        fn(array[i], i);
      }
    };
    ListWrapper.first = function(array) {
      if (!array)
        return null;
      return array[0];
    };
    ListWrapper.last = function(array) {
      if (!array || array.length == 0)
        return null;
      return array[array.length - 1];
    };
    ListWrapper.indexOf = function(array, value, startIndex) {
      if (startIndex === void 0) {
        startIndex = 0;
      }
      return array.indexOf(value, startIndex);
    };
    ListWrapper.contains = function(list, el) {
      return list.indexOf(el) !== -1;
    };
    ListWrapper.reversed = function(array) {
      var a = ListWrapper.clone(array);
      return a.reverse();
    };
    ListWrapper.concat = function(a, b) {
      return a.concat(b);
    };
    ListWrapper.insert = function(list, index, value) {
      list.splice(index, 0, value);
    };
    ListWrapper.removeAt = function(list, index) {
      var res = list[index];
      list.splice(index, 1);
      return res;
    };
    ListWrapper.removeAll = function(list, items) {
      for (var i = 0; i < items.length; ++i) {
        var index = list.indexOf(items[i]);
        list.splice(index, 1);
      }
    };
    ListWrapper.remove = function(list, el) {
      var index = list.indexOf(el);
      if (index > -1) {
        list.splice(index, 1);
        return true;
      }
      return false;
    };
    ListWrapper.clear = function(list) {
      list.length = 0;
    };
    ListWrapper.isEmpty = function(list) {
      return list.length == 0;
    };
    ListWrapper.fill = function(list, value, start, end) {
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = null;
      }
      list.fill(value, start, end === null ? list.length : end);
    };
    ListWrapper.equals = function(a, b) {
      if (a.length != b.length)
        return false;
      for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
          return false;
      }
      return true;
    };
    ListWrapper.slice = function(l, from, to) {
      if (from === void 0) {
        from = 0;
      }
      if (to === void 0) {
        to = null;
      }
      return l.slice(from, to === null ? undefined : to);
    };
    ListWrapper.splice = function(l, from, length) {
      return l.splice(from, length);
    };
    ListWrapper.sort = function(l, compareFn) {
      if (isPresent(compareFn)) {
        l.sort(compareFn);
      } else {
        l.sort();
      }
    };
    ListWrapper.toString = function(l) {
      return l.toString();
    };
    ListWrapper.toJSON = function(l) {
      return JSON.stringify(l);
    };
    ListWrapper.maximum = function(list, predicate) {
      if (list.length == 0) {
        return null;
      }
      var solution = null;
      var maxValue = -Infinity;
      for (var index = 0; index < list.length; index++) {
        var candidate = list[index];
        if (isBlank(candidate)) {
          continue;
        }
        var candidateValue = predicate(candidate);
        if (candidateValue > maxValue) {
          solution = candidate;
          maxValue = candidateValue;
        }
      }
      return solution;
    };
    ListWrapper.flatten = function(list) {
      var target = [];
      _flattenArray(list, target);
      return target;
    };
    ListWrapper.addAll = function(list, source) {
      for (var i = 0; i < source.length; i++) {
        list.push(source[i]);
      }
    };
    return ListWrapper;
  }());
  function _flattenArray(source, target) {
    if (isPresent(source)) {
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        if (isArray(item)) {
          _flattenArray(item, target);
        } else {
          target.push(item);
        }
      }
    }
    return target;
  }
  var createSetFromList = (function() {
    var test = new Set([1, 2, 3]);
    if (test.size === 3) {
      return function createSetFromList(lst) {
        return new Set(lst);
      };
    } else {
      return function createSetAndPopulateFromList(lst) {
        var res = new Set(lst);
        if (res.size !== lst.length) {
          for (var i = 0; i < lst.length; i++) {
            res.add(lst[i]);
          }
        }
        return res;
      };
    }
  })();
  var NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');
  var NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');
  var Validators = (function() {
    function Validators() {}
    Validators.required = function(control) {
      return isBlank(control.value) || (isString(control.value) && control.value == '') ? {'required': true} : null;
    };
    Validators.minLength = function(minLength) {
      return function(control) {
        if (isPresent(Validators.required(control)))
          return null;
        var v = control.value;
        return v.length < minLength ? {'minlength': {
            'requiredLength': minLength,
            'actualLength': v.length
          }} : null;
      };
    };
    Validators.maxLength = function(maxLength) {
      return function(control) {
        if (isPresent(Validators.required(control)))
          return null;
        var v = control.value;
        return v.length > maxLength ? {'maxlength': {
            'requiredLength': maxLength,
            'actualLength': v.length
          }} : null;
      };
    };
    Validators.pattern = function(pattern) {
      return function(control) {
        if (isPresent(Validators.required(control)))
          return null;
        var regex = new RegExp("^" + pattern + "$");
        var v = control.value;
        return regex.test(v) ? null : {'pattern': {
            'requiredPattern': "^" + pattern + "$",
            'actualValue': v
          }};
      };
    };
    Validators.nullValidator = function(c) {
      return null;
    };
    Validators.compose = function(validators) {
      if (isBlank(validators))
        return null;
      var presentValidators = validators.filter(isPresent);
      if (presentValidators.length == 0)
        return null;
      return function(control) {
        return _mergeErrors(_executeValidators(control, presentValidators));
      };
    };
    Validators.composeAsync = function(validators) {
      if (isBlank(validators))
        return null;
      var presentValidators = validators.filter(isPresent);
      if (presentValidators.length == 0)
        return null;
      return function(control) {
        var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);
        return Promise.all(promises).then(_mergeErrors);
      };
    };
    return Validators;
  }());
  function _convertToPromise(obj) {
    return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);
  }
  function _executeValidators(control, validators) {
    return validators.map(function(v) {
      return v(control);
    });
  }
  function _executeAsyncValidators(control, validators) {
    return validators.map(function(v) {
      return v(control);
    });
  }
  function _mergeErrors(arrayOfErrors) {
    var res = arrayOfErrors.reduce(function(res, errors) {
      return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;
    }, {});
    return StringMapWrapper.isEmpty(res) ? null : res;
  }
  var NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');
  var CHECKBOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return CheckboxControlValueAccessor;
    }),
    multi: true
  };
  var CheckboxControlValueAccessor = (function() {
    function CheckboxControlValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      this.onChange = function(_) {};
      this.onTouched = function() {};
    }
    CheckboxControlValueAccessor.prototype.writeValue = function(value) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);
    };
    CheckboxControlValueAccessor.prototype.registerOnChange = function(fn) {
      this.onChange = fn;
    };
    CheckboxControlValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    CheckboxControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    CheckboxControlValueAccessor.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
        host: {
          '(change)': 'onChange($event.target.checked)',
          '(blur)': 'onTouched()'
        },
        providers: [CHECKBOX_VALUE_ACCESSOR]
      }]
    }];
    CheckboxControlValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
    return CheckboxControlValueAccessor;
  }());
  var DEFAULT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return DefaultValueAccessor;
    }),
    multi: true
  };
  var DefaultValueAccessor = (function() {
    function DefaultValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      this.onChange = function(_) {};
      this.onTouched = function() {};
    }
    DefaultValueAccessor.prototype.writeValue = function(value) {
      var normalizedValue = isBlank(value) ? '' : value;
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
    };
    DefaultValueAccessor.prototype.registerOnChange = function(fn) {
      this.onChange = fn;
    };
    DefaultValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    DefaultValueAccessor.prototype.setDisabledState = function(isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    DefaultValueAccessor.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
        host: {
          '(input)': 'onChange($event.target.value)',
          '(blur)': 'onTouched()'
        },
        providers: [DEFAULT_VALUE_ACCESSOR]
      }]
    }];
    DefaultValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
    return DefaultValueAccessor;
  }());
  function normalizeValidator(validator) {
    if (validator.validate !== undefined) {
      return function(c) {
        return validator.validate(c);
      };
    } else {
      return validator;
    }
  }
  function normalizeAsyncValidator(validator) {
    if (validator.validate !== undefined) {
      return function(c) {
        return validator.validate(c);
      };
    } else {
      return validator;
    }
  }
  var NUMBER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return NumberValueAccessor;
    }),
    multi: true
  };
  var NumberValueAccessor = (function() {
    function NumberValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      this.onChange = function(_) {};
      this.onTouched = function() {};
    }
    NumberValueAccessor.prototype.writeValue = function(value) {
      var normalizedValue = isBlank(value) ? '' : value;
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
    };
    NumberValueAccessor.prototype.registerOnChange = function(fn) {
      this.onChange = function(value) {
        fn(value == '' ? null : NumberWrapper.parseFloat(value));
      };
    };
    NumberValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    NumberValueAccessor.prototype.setDisabledState = function(isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    NumberValueAccessor.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
        host: {
          '(change)': 'onChange($event.target.value)',
          '(input)': 'onChange($event.target.value)',
          '(blur)': 'onTouched()'
        },
        providers: [NUMBER_VALUE_ACCESSOR]
      }]
    }];
    NumberValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
    return NumberValueAccessor;
  }());
  var __extends$2 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function unimplemented() {
    throw new Error('unimplemented');
  }
  var NgControl = (function(_super) {
    __extends$2(NgControl, _super);
    function NgControl() {
      _super.apply(this, arguments);
      this._parent = null;
      this.name = null;
      this.valueAccessor = null;
      this._rawValidators = [];
      this._rawAsyncValidators = [];
    }
    Object.defineProperty(NgControl.prototype, "validator", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControl.prototype, "asyncValidator", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    return NgControl;
  }(AbstractControlDirective));
  var RADIO_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return RadioControlValueAccessor;
    }),
    multi: true
  };
  var RadioControlRegistry = (function() {
    function RadioControlRegistry() {
      this._accessors = [];
    }
    RadioControlRegistry.prototype.add = function(control, accessor) {
      this._accessors.push([control, accessor]);
    };
    RadioControlRegistry.prototype.remove = function(accessor) {
      var indexToRemove = -1;
      for (var i = 0; i < this._accessors.length; ++i) {
        if (this._accessors[i][1] === accessor) {
          indexToRemove = i;
        }
      }
      ListWrapper.removeAt(this._accessors, indexToRemove);
    };
    RadioControlRegistry.prototype.select = function(accessor) {
      var _this = this;
      this._accessors.forEach(function(c) {
        if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {
          c[1].fireUncheck(accessor.value);
        }
      });
    };
    RadioControlRegistry.prototype._isSameGroup = function(controlPair, accessor) {
      if (!controlPair[0].control)
        return false;
      return controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name;
    };
    RadioControlRegistry.decorators = [{type: _angular_core.Injectable}];
    RadioControlRegistry.ctorParameters = [];
    return RadioControlRegistry;
  }());
  var RadioControlValueAccessor = (function() {
    function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      this._registry = _registry;
      this._injector = _injector;
      this.onChange = function() {};
      this.onTouched = function() {};
    }
    RadioControlValueAccessor.prototype.ngOnInit = function() {
      this._control = this._injector.get(NgControl);
      this._checkName();
      this._registry.add(this._control, this);
    };
    RadioControlValueAccessor.prototype.ngOnDestroy = function() {
      this._registry.remove(this);
    };
    RadioControlValueAccessor.prototype.writeValue = function(value) {
      this._state = value === this.value;
      if (isPresent(value)) {
        this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);
      }
    };
    RadioControlValueAccessor.prototype.registerOnChange = function(fn) {
      var _this = this;
      this._fn = fn;
      this.onChange = function() {
        fn(_this.value);
        _this._registry.select(_this);
      };
    };
    RadioControlValueAccessor.prototype.fireUncheck = function(value) {
      this.writeValue(value);
    };
    RadioControlValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    RadioControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    RadioControlValueAccessor.prototype._checkName = function() {
      if (this.name && this.formControlName && this.name !== this.formControlName) {
        this._throwNameError();
      }
      if (!this.name && this.formControlName)
        this.name = this.formControlName;
    };
    RadioControlValueAccessor.prototype._throwNameError = function() {
      throw new Error("\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    ");
    };
    RadioControlValueAccessor.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
        host: {
          '(change)': 'onChange()',
          '(blur)': 'onTouched()'
        },
        providers: [RADIO_VALUE_ACCESSOR]
      }]
    }];
    RadioControlValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}, {type: RadioControlRegistry}, {type: _angular_core.Injector}];
    RadioControlValueAccessor.propDecorators = {
      'name': [{type: _angular_core.Input}],
      'formControlName': [{type: _angular_core.Input}],
      'value': [{type: _angular_core.Input}]
    };
    return RadioControlValueAccessor;
  }());
  var SELECT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return SelectControlValueAccessor;
    }),
    multi: true
  };
  function _buildValueString(id, value) {
    if (isBlank(id))
      return "" + value;
    if (!isPrimitive(value))
      value = 'Object';
    return StringWrapper.slice(id + ": " + value, 0, 50);
  }
  function _extractId(valueString) {
    return valueString.split(':')[0];
  }
  var SelectControlValueAccessor = (function() {
    function SelectControlValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      this._optionMap = new Map();
      this._idCounter = 0;
      this.onChange = function(_) {};
      this.onTouched = function() {};
    }
    SelectControlValueAccessor.prototype.writeValue = function(value) {
      this.value = value;
      var valueString = _buildValueString(this._getOptionId(value), value);
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);
    };
    SelectControlValueAccessor.prototype.registerOnChange = function(fn) {
      var _this = this;
      this.onChange = function(valueString) {
        _this.value = valueString;
        fn(_this._getOptionValue(valueString));
      };
    };
    SelectControlValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    SelectControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    SelectControlValueAccessor.prototype._registerOption = function() {
      return (this._idCounter++).toString();
    };
    SelectControlValueAccessor.prototype._getOptionId = function(value) {
      for (var _i = 0,
          _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {
        var id = _a[_i];
        if (looseIdentical(this._optionMap.get(id), value))
          return id;
      }
      return null;
    };
    SelectControlValueAccessor.prototype._getOptionValue = function(valueString) {
      var value = this._optionMap.get(_extractId(valueString));
      return isPresent(value) ? value : valueString;
    };
    SelectControlValueAccessor.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
        host: {
          '(change)': 'onChange($event.target.value)',
          '(blur)': 'onTouched()'
        },
        providers: [SELECT_VALUE_ACCESSOR]
      }]
    }];
    SelectControlValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
    return SelectControlValueAccessor;
  }());
  var NgSelectOption = (function() {
    function NgSelectOption(_element, _renderer, _select) {
      this._element = _element;
      this._renderer = _renderer;
      this._select = _select;
      if (isPresent(this._select))
        this.id = this._select._registerOption();
    }
    Object.defineProperty(NgSelectOption.prototype, "ngValue", {
      set: function(value) {
        if (this._select == null)
          return;
        this._select._optionMap.set(this.id, value);
        this._setElementValue(_buildValueString(this.id, value));
        this._select.writeValue(this._select.value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgSelectOption.prototype, "value", {
      set: function(value) {
        this._setElementValue(value);
        if (isPresent(this._select))
          this._select.writeValue(this._select.value);
      },
      enumerable: true,
      configurable: true
    });
    NgSelectOption.prototype._setElementValue = function(value) {
      this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
    };
    NgSelectOption.prototype.ngOnDestroy = function() {
      if (isPresent(this._select)) {
        this._select._optionMap.delete(this.id);
        this._select.writeValue(this._select.value);
      }
    };
    NgSelectOption.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: 'option'}]
    }];
    NgSelectOption.ctorParameters = [{type: _angular_core.ElementRef}, {type: _angular_core.Renderer}, {
      type: SelectControlValueAccessor,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}]
    }];
    NgSelectOption.propDecorators = {
      'ngValue': [{
        type: _angular_core.Input,
        args: ['ngValue']
      }],
      'value': [{
        type: _angular_core.Input,
        args: ['value']
      }]
    };
    return NgSelectOption;
  }());
  var SELECT_MULTIPLE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function() {
      return SelectMultipleControlValueAccessor;
    }),
    multi: true
  };
  function _buildValueString$1(id, value) {
    if (isBlank(id))
      return "" + value;
    if (isString(value))
      value = "'" + value + "'";
    if (!isPrimitive(value))
      value = 'Object';
    return StringWrapper.slice(id + ": " + value, 0, 50);
  }
  function _extractId$1(valueString) {
    return valueString.split(':')[0];
  }
  var SelectMultipleControlValueAccessor = (function() {
    function SelectMultipleControlValueAccessor(_renderer, _elementRef) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      this._optionMap = new Map();
      this._idCounter = 0;
      this.onChange = function(_) {};
      this.onTouched = function() {};
    }
    SelectMultipleControlValueAccessor.prototype.writeValue = function(value) {
      var _this = this;
      this.value = value;
      if (value == null)
        return;
      var values = value;
      var ids = values.map(function(v) {
        return _this._getOptionId(v);
      });
      this._optionMap.forEach(function(opt, o) {
        opt._setSelected(ids.indexOf(o.toString()) > -1);
      });
    };
    SelectMultipleControlValueAccessor.prototype.registerOnChange = function(fn) {
      var _this = this;
      this.onChange = function(_) {
        var selected = [];
        if (_.hasOwnProperty('selectedOptions')) {
          var options = _.selectedOptions;
          for (var i = 0; i < options.length; i++) {
            var opt = options.item(i);
            var val = _this._getOptionValue(opt.value);
            selected.push(val);
          }
        } else {
          var options = _.options;
          for (var i = 0; i < options.length; i++) {
            var opt = options.item(i);
            if (opt.selected) {
              var val = _this._getOptionValue(opt.value);
              selected.push(val);
            }
          }
        }
        fn(selected);
      };
    };
    SelectMultipleControlValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    SelectMultipleControlValueAccessor.prototype.setDisabledState = function(isDisabled) {
      this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    SelectMultipleControlValueAccessor.prototype._registerOption = function(value) {
      var id = (this._idCounter++).toString();
      this._optionMap.set(id, value);
      return id;
    };
    SelectMultipleControlValueAccessor.prototype._getOptionId = function(value) {
      for (var _i = 0,
          _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {
        var id = _a[_i];
        if (looseIdentical(this._optionMap.get(id)._value, value))
          return id;
      }
      return null;
    };
    SelectMultipleControlValueAccessor.prototype._getOptionValue = function(valueString) {
      var opt = this._optionMap.get(_extractId$1(valueString));
      return isPresent(opt) ? opt._value : valueString;
    };
    SelectMultipleControlValueAccessor.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
        host: {
          '(change)': 'onChange($event.target)',
          '(blur)': 'onTouched()'
        },
        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
      }]
    }];
    SelectMultipleControlValueAccessor.ctorParameters = [{type: _angular_core.Renderer}, {type: _angular_core.ElementRef}];
    return SelectMultipleControlValueAccessor;
  }());
  var NgSelectMultipleOption = (function() {
    function NgSelectMultipleOption(_element, _renderer, _select) {
      this._element = _element;
      this._renderer = _renderer;
      this._select = _select;
      if (isPresent(this._select)) {
        this.id = this._select._registerOption(this);
      }
    }
    Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", {
      set: function(value) {
        if (this._select == null)
          return;
        this._value = value;
        this._setElementValue(_buildValueString$1(this.id, value));
        this._select.writeValue(this._select.value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgSelectMultipleOption.prototype, "value", {
      set: function(value) {
        if (isPresent(this._select)) {
          this._value = value;
          this._setElementValue(_buildValueString$1(this.id, value));
          this._select.writeValue(this._select.value);
        } else {
          this._setElementValue(value);
        }
      },
      enumerable: true,
      configurable: true
    });
    NgSelectMultipleOption.prototype._setElementValue = function(value) {
      this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
    };
    NgSelectMultipleOption.prototype._setSelected = function(selected) {
      this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);
    };
    NgSelectMultipleOption.prototype.ngOnDestroy = function() {
      if (isPresent(this._select)) {
        this._select._optionMap.delete(this.id);
        this._select.writeValue(this._select.value);
      }
    };
    NgSelectMultipleOption.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: 'option'}]
    }];
    NgSelectMultipleOption.ctorParameters = [{type: _angular_core.ElementRef}, {type: _angular_core.Renderer}, {
      type: SelectMultipleControlValueAccessor,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}]
    }];
    NgSelectMultipleOption.propDecorators = {
      'ngValue': [{
        type: _angular_core.Input,
        args: ['ngValue']
      }],
      'value': [{
        type: _angular_core.Input,
        args: ['value']
      }]
    };
    return NgSelectMultipleOption;
  }());
  function controlPath(name, parent) {
    var p = ListWrapper.clone(parent.path);
    p.push(name);
    return p;
  }
  function setUpControl(control, dir) {
    if (isBlank(control))
      _throwError(dir, 'Cannot find control with');
    if (isBlank(dir.valueAccessor))
      _throwError(dir, 'No value accessor for form control with');
    control.validator = Validators.compose([control.validator, dir.validator]);
    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
    dir.valueAccessor.writeValue(control.value);
    dir.valueAccessor.registerOnChange(function(newValue) {
      dir.viewToModelUpdate(newValue);
      control.markAsDirty();
      control.setValue(newValue, {emitModelToViewChange: false});
    });
    dir.valueAccessor.registerOnTouched(function() {
      return control.markAsTouched();
    });
    control.registerOnChange(function(newValue, emitModelEvent) {
      dir.valueAccessor.writeValue(newValue);
      if (emitModelEvent)
        dir.viewToModelUpdate(newValue);
    });
    if (dir.valueAccessor.setDisabledState) {
      control.registerOnDisabledChange(function(isDisabled) {
        dir.valueAccessor.setDisabledState(isDisabled);
      });
    }
    dir._rawValidators.forEach(function(validator) {
      if (validator.registerOnChange)
        validator.registerOnChange(function() {
          return control.updateValueAndValidity();
        });
    });
    dir._rawAsyncValidators.forEach(function(validator) {
      if (validator.registerOnChange)
        validator.registerOnChange(function() {
          return control.updateValueAndValidity();
        });
    });
  }
  function cleanUpControl(control, dir) {
    dir.valueAccessor.registerOnChange(function() {
      return _noControlError(dir);
    });
    dir.valueAccessor.registerOnTouched(function() {
      return _noControlError(dir);
    });
    dir._rawValidators.forEach(function(validator) {
      return validator.registerOnChange(null);
    });
    dir._rawAsyncValidators.forEach(function(validator) {
      return validator.registerOnChange(null);
    });
    if (control)
      control._clearChangeFns();
  }
  function setUpFormContainer(control, dir) {
    if (isBlank(control))
      _throwError(dir, 'Cannot find control with');
    control.validator = Validators.compose([control.validator, dir.validator]);
    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
  }
  function _noControlError(dir) {
    return _throwError(dir, 'There is no FormControl instance attached to form control element with');
  }
  function _throwError(dir, message) {
    var messageEnd;
    if (dir.path.length > 1) {
      messageEnd = "path: '" + dir.path.join(' -> ') + "'";
    } else if (dir.path[0]) {
      messageEnd = "name: '" + dir.path + "'";
    } else {
      messageEnd = 'unspecified name attribute';
    }
    throw new Error(message + " " + messageEnd);
  }
  function composeValidators(validators) {
    return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;
  }
  function composeAsyncValidators(validators) {
    return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) : null;
  }
  function isPropertyUpdated(changes, viewModel) {
    if (!StringMapWrapper.contains(changes, 'model'))
      return false;
    var change = changes['model'];
    if (change.isFirstChange())
      return true;
    return !looseIdentical(viewModel, change.currentValue);
  }
  function isBuiltInAccessor(valueAccessor) {
    return (hasConstructor(valueAccessor, CheckboxControlValueAccessor) || hasConstructor(valueAccessor, NumberValueAccessor) || hasConstructor(valueAccessor, SelectControlValueAccessor) || hasConstructor(valueAccessor, SelectMultipleControlValueAccessor) || hasConstructor(valueAccessor, RadioControlValueAccessor));
  }
  function selectValueAccessor(dir, valueAccessors) {
    if (isBlank(valueAccessors))
      return null;
    var defaultAccessor;
    var builtinAccessor;
    var customAccessor;
    valueAccessors.forEach(function(v) {
      if (hasConstructor(v, DefaultValueAccessor)) {
        defaultAccessor = v;
      } else if (isBuiltInAccessor(v)) {
        if (isPresent(builtinAccessor))
          _throwError(dir, 'More than one built-in value accessor matches form control with');
        builtinAccessor = v;
      } else {
        if (isPresent(customAccessor))
          _throwError(dir, 'More than one custom value accessor matches form control with');
        customAccessor = v;
      }
    });
    if (isPresent(customAccessor))
      return customAccessor;
    if (isPresent(builtinAccessor))
      return builtinAccessor;
    if (isPresent(defaultAccessor))
      return defaultAccessor;
    _throwError(dir, 'No valid value accessor for form control with');
    return null;
  }
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AbstractFormGroupDirective = (function(_super) {
    __extends(AbstractFormGroupDirective, _super);
    function AbstractFormGroupDirective() {
      _super.apply(this, arguments);
    }
    AbstractFormGroupDirective.prototype.ngOnInit = function() {
      this._checkParentType();
      this.formDirective.addFormGroup(this);
    };
    AbstractFormGroupDirective.prototype.ngOnDestroy = function() {
      if (this.formDirective) {
        this.formDirective.removeFormGroup(this);
      }
    };
    Object.defineProperty(AbstractFormGroupDirective.prototype, "control", {
      get: function() {
        return this.formDirective.getFormGroup(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "path", {
      get: function() {
        return controlPath(this.name, this._parent);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "formDirective", {
      get: function() {
        return this._parent ? this._parent.formDirective : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "validator", {
      get: function() {
        return composeValidators(this._validators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "asyncValidator", {
      get: function() {
        return composeAsyncValidators(this._asyncValidators);
      },
      enumerable: true,
      configurable: true
    });
    AbstractFormGroupDirective.prototype._checkParentType = function() {};
    return AbstractFormGroupDirective;
  }(ControlContainer));
  var __extends$3 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AbstractControlStatus = (function() {
    function AbstractControlStatus(cd) {
      this._cd = cd;
    }
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassUntouched", {
      get: function() {
        return isPresent(this._cd.control) ? this._cd.control.untouched : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassTouched", {
      get: function() {
        return isPresent(this._cd.control) ? this._cd.control.touched : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassPristine", {
      get: function() {
        return isPresent(this._cd.control) ? this._cd.control.pristine : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassDirty", {
      get: function() {
        return isPresent(this._cd.control) ? this._cd.control.dirty : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassValid", {
      get: function() {
        return isPresent(this._cd.control) ? this._cd.control.valid : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassInvalid", {
      get: function() {
        return isPresent(this._cd.control) ? this._cd.control.invalid : false;
      },
      enumerable: true,
      configurable: true
    });
    return AbstractControlStatus;
  }());
  var ngControlStatusHost = {
    '[class.ng-untouched]': 'ngClassUntouched',
    '[class.ng-touched]': 'ngClassTouched',
    '[class.ng-pristine]': 'ngClassPristine',
    '[class.ng-dirty]': 'ngClassDirty',
    '[class.ng-valid]': 'ngClassValid',
    '[class.ng-invalid]': 'ngClassInvalid'
  };
  var NgControlStatus = (function(_super) {
    __extends$3(NgControlStatus, _super);
    function NgControlStatus(cd) {
      _super.call(this, cd);
    }
    NgControlStatus.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[formControlName],[ngModel],[formControl]',
        host: ngControlStatusHost
      }]
    }];
    NgControlStatus.ctorParameters = [{
      type: NgControl,
      decorators: [{type: _angular_core.Self}]
    }];
    return NgControlStatus;
  }(AbstractControlStatus));
  var NgControlStatusGroup = (function(_super) {
    __extends$3(NgControlStatusGroup, _super);
    function NgControlStatusGroup(cd) {
      _super.call(this, cd);
    }
    NgControlStatusGroup.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
        host: ngControlStatusHost
      }]
    }];
    NgControlStatusGroup.ctorParameters = [{
      type: ControlContainer,
      decorators: [{type: _angular_core.Self}]
    }];
    return NgControlStatusGroup;
  }(AbstractControlStatus));
  var __extends$5 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var EventEmitter = (function(_super) {
    __extends$5(EventEmitter, _super);
    function EventEmitter(isAsync) {
      if (isAsync === void 0) {
        isAsync = false;
      }
      _super.call(this);
      this.__isAsync = isAsync;
    }
    EventEmitter.prototype.emit = function(value) {
      _super.prototype.next.call(this, value);
    };
    EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
      var schedulerFn;
      var errorFn = function(err) {
        return null;
      };
      var completeFn = function() {
        return null;
      };
      if (generatorOrNext && typeof generatorOrNext === 'object') {
        schedulerFn = this.__isAsync ? function(value) {
          setTimeout(function() {
            return generatorOrNext.next(value);
          });
        } : function(value) {
          generatorOrNext.next(value);
        };
        if (generatorOrNext.error) {
          errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return generatorOrNext.error(err);
            });
          } : function(err) {
            generatorOrNext.error(err);
          };
        }
        if (generatorOrNext.complete) {
          completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return generatorOrNext.complete();
            });
          } : function() {
            generatorOrNext.complete();
          };
        }
      } else {
        schedulerFn = this.__isAsync ? function(value) {
          setTimeout(function() {
            return generatorOrNext(value);
          });
        } : function(value) {
          generatorOrNext(value);
        };
        if (error) {
          errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return error(err);
            });
          } : function(err) {
            error(err);
          };
        }
        if (complete) {
          completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return complete();
            });
          } : function() {
            complete();
          };
        }
      }
      return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
    };
    return EventEmitter;
  }(rxjs_Subject.Subject));
  var __extends$6 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var VALID = 'VALID';
  var INVALID = 'INVALID';
  var PENDING = 'PENDING';
  var DISABLED = 'DISABLED';
  function _find(control, path, delimiter) {
    if (isBlank(path))
      return null;
    if (!(path instanceof Array)) {
      path = path.split(delimiter);
    }
    if (path instanceof Array && ListWrapper.isEmpty(path))
      return null;
    return path.reduce(function(v, name) {
      if (v instanceof FormGroup) {
        return isPresent(v.controls[name]) ? v.controls[name] : null;
      } else if (v instanceof FormArray) {
        var index = name;
        return isPresent(v.at(index)) ? v.at(index) : null;
      } else {
        return null;
      }
    }, control);
  }
  function toObservable(r) {
    return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;
  }
  function coerceToValidator(validator) {
    return Array.isArray(validator) ? composeValidators(validator) : validator;
  }
  function coerceToAsyncValidator(asyncValidator) {
    return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;
  }
  var AbstractControl = (function() {
    function AbstractControl(validator, asyncValidator) {
      this.validator = validator;
      this.asyncValidator = asyncValidator;
      this._pristine = true;
      this._touched = false;
    }
    Object.defineProperty(AbstractControl.prototype, "value", {
      get: function() {
        return this._value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "status", {
      get: function() {
        return this._status;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "valid", {
      get: function() {
        return this._status === VALID;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "invalid", {
      get: function() {
        return this._status === INVALID;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "errors", {
      get: function() {
        return this._errors;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "pristine", {
      get: function() {
        return this._pristine;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "dirty", {
      get: function() {
        return !this.pristine;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "touched", {
      get: function() {
        return this._touched;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "untouched", {
      get: function() {
        return !this._touched;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "valueChanges", {
      get: function() {
        return this._valueChanges;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "statusChanges", {
      get: function() {
        return this._statusChanges;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "pending", {
      get: function() {
        return this._status == PENDING;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "disabled", {
      get: function() {
        return this._status === DISABLED;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "enabled", {
      get: function() {
        return this._status !== DISABLED;
      },
      enumerable: true,
      configurable: true
    });
    AbstractControl.prototype.setAsyncValidators = function(newValidator) {
      this.asyncValidator = coerceToAsyncValidator(newValidator);
    };
    AbstractControl.prototype.clearAsyncValidators = function() {
      this.asyncValidator = null;
    };
    AbstractControl.prototype.setValidators = function(newValidator) {
      this.validator = coerceToValidator(newValidator);
    };
    AbstractControl.prototype.clearValidators = function() {
      this.validator = null;
    };
    AbstractControl.prototype.markAsTouched = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      onlySelf = normalizeBool(onlySelf);
      this._touched = true;
      if (isPresent(this._parent) && !onlySelf) {
        this._parent.markAsTouched({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.markAsDirty = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      onlySelf = normalizeBool(onlySelf);
      this._pristine = false;
      if (isPresent(this._parent) && !onlySelf) {
        this._parent.markAsDirty({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.markAsPristine = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._pristine = true;
      this._forEachChild(function(control) {
        control.markAsPristine({onlySelf: true});
      });
      if (isPresent(this._parent) && !onlySelf) {
        this._parent._updatePristine({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.markAsUntouched = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._touched = false;
      this._forEachChild(function(control) {
        control.markAsUntouched({onlySelf: true});
      });
      if (isPresent(this._parent) && !onlySelf) {
        this._parent._updateTouched({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.markAsPending = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      onlySelf = normalizeBool(onlySelf);
      this._status = PENDING;
      if (isPresent(this._parent) && !onlySelf) {
        this._parent.markAsPending({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.disable = function(_a) {
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;
      emitEvent = isPresent(emitEvent) ? emitEvent : true;
      this._status = DISABLED;
      this._forEachChild(function(control) {
        control.disable({onlySelf: true});
      });
      this._updateValue();
      if (emitEvent) {
        this._valueChanges.emit(this._value);
        this._statusChanges.emit(this._status);
      }
      this._updateAncestors(onlySelf);
      this._onDisabledChange(true);
    };
    AbstractControl.prototype.enable = function(_a) {
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;
      this._status = VALID;
      this._forEachChild(function(control) {
        control.enable({onlySelf: true});
      });
      this.updateValueAndValidity({
        onlySelf: true,
        emitEvent: emitEvent
      });
      this._updateAncestors(onlySelf);
      this._onDisabledChange(false);
    };
    AbstractControl.prototype._updateAncestors = function(onlySelf) {
      if (isPresent(this._parent) && !onlySelf) {
        this._parent.updateValueAndValidity();
        this._parent._updatePristine();
        this._parent._updateTouched();
      }
    };
    AbstractControl.prototype.setParent = function(parent) {
      this._parent = parent;
    };
    AbstractControl.prototype.updateValueAndValidity = function(_a) {
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;
      onlySelf = normalizeBool(onlySelf);
      emitEvent = isPresent(emitEvent) ? emitEvent : true;
      this._updateValue();
      this._errors = this._runValidator();
      var originalStatus = this._status;
      this._status = this._calculateStatus();
      if (this._status == VALID || this._status == PENDING) {
        this._runAsyncValidator(emitEvent);
      }
      if (this._disabledChanged(originalStatus)) {
        this._updateValue();
      }
      if (emitEvent) {
        this._valueChanges.emit(this._value);
        this._statusChanges.emit(this._status);
      }
      if (isPresent(this._parent) && !onlySelf) {
        this._parent.updateValueAndValidity({
          onlySelf: onlySelf,
          emitEvent: emitEvent
        });
      }
    };
    AbstractControl.prototype._updateTreeValidity = function(_a) {
      var emitEvent = (_a === void 0 ? {emitEvent: true} : _a).emitEvent;
      this._forEachChild(function(ctrl) {
        return ctrl._updateTreeValidity({emitEvent: emitEvent});
      });
      this.updateValueAndValidity({
        onlySelf: true,
        emitEvent: emitEvent
      });
    };
    AbstractControl.prototype._runValidator = function() {
      return isPresent(this.validator) ? this.validator(this) : null;
    };
    AbstractControl.prototype._runAsyncValidator = function(emitEvent) {
      var _this = this;
      if (isPresent(this.asyncValidator)) {
        this._status = PENDING;
        this._cancelExistingSubscription();
        var obs = toObservable(this.asyncValidator(this));
        this._asyncValidationSubscription = obs.subscribe({next: function(res) {
            return _this.setErrors(res, {emitEvent: emitEvent});
          }});
      }
    };
    AbstractControl.prototype._cancelExistingSubscription = function() {
      if (isPresent(this._asyncValidationSubscription)) {
        this._asyncValidationSubscription.unsubscribe();
      }
    };
    AbstractControl.prototype._disabledChanged = function(originalStatus) {
      return this._status !== originalStatus && (this._status === DISABLED || originalStatus === DISABLED);
    };
    AbstractControl.prototype.setErrors = function(errors, _a) {
      var emitEvent = (_a === void 0 ? {} : _a).emitEvent;
      emitEvent = isPresent(emitEvent) ? emitEvent : true;
      this._errors = errors;
      this._updateControlsErrors(emitEvent);
    };
    AbstractControl.prototype.get = function(path) {
      return _find(this, path, '.');
    };
    AbstractControl.prototype.getError = function(errorCode, path) {
      if (path === void 0) {
        path = null;
      }
      var control = isPresent(path) && !ListWrapper.isEmpty(path) ? this.get(path) : this;
      if (isPresent(control) && isPresent(control._errors)) {
        return StringMapWrapper.get(control._errors, errorCode);
      } else {
        return null;
      }
    };
    AbstractControl.prototype.hasError = function(errorCode, path) {
      if (path === void 0) {
        path = null;
      }
      return isPresent(this.getError(errorCode, path));
    };
    Object.defineProperty(AbstractControl.prototype, "root", {
      get: function() {
        var x = this;
        while (isPresent(x._parent)) {
          x = x._parent;
        }
        return x;
      },
      enumerable: true,
      configurable: true
    });
    AbstractControl.prototype._updateControlsErrors = function(emitEvent) {
      this._status = this._calculateStatus();
      if (emitEvent) {
        this._statusChanges.emit(this._status);
      }
      if (isPresent(this._parent)) {
        this._parent._updateControlsErrors(emitEvent);
      }
    };
    AbstractControl.prototype._initObservables = function() {
      this._valueChanges = new EventEmitter();
      this._statusChanges = new EventEmitter();
    };
    AbstractControl.prototype._calculateStatus = function() {
      if (isPresent(this._errors))
        return INVALID;
      if (this._anyControlsHaveStatus(PENDING))
        return PENDING;
      if (this._anyControlsHaveStatus(INVALID))
        return INVALID;
      if (this._allControlsDisabled())
        return DISABLED;
      return VALID;
    };
    AbstractControl.prototype._anyControlsHaveStatus = function(status) {
      return this._anyControls(function(control) {
        return control.status == status;
      });
    };
    AbstractControl.prototype._anyControlsDirty = function() {
      return this._anyControls(function(control) {
        return control.dirty;
      });
    };
    AbstractControl.prototype._anyControlsTouched = function() {
      return this._anyControls(function(control) {
        return control.touched;
      });
    };
    AbstractControl.prototype._updatePristine = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._pristine = !this._anyControlsDirty();
      if (isPresent(this._parent) && !onlySelf) {
        this._parent._updatePristine({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype._updateTouched = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._touched = this._anyControlsTouched();
      if (isPresent(this._parent) && !onlySelf) {
        this._parent._updateTouched({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype._onDisabledChange = function(isDisabled) {};
    AbstractControl.prototype._isBoxedValue = function(formState) {
      return isStringMap(formState) && Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;
    };
    return AbstractControl;
  }());
  var FormControl = (function(_super) {
    __extends$6(FormControl, _super);
    function FormControl(formState, validator, asyncValidator) {
      if (formState === void 0) {
        formState = null;
      }
      if (validator === void 0) {
        validator = null;
      }
      if (asyncValidator === void 0) {
        asyncValidator = null;
      }
      _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));
      this._onChange = [];
      this._applyFormState(formState);
      this.updateValueAndValidity({
        onlySelf: true,
        emitEvent: false
      });
      this._initObservables();
    }
    FormControl.prototype.setValue = function(value, _a) {
      var _this = this;
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent,
          emitModelToViewChange = _b.emitModelToViewChange,
          emitViewToModelChange = _b.emitViewToModelChange;
      emitModelToViewChange = isPresent(emitModelToViewChange) ? emitModelToViewChange : true;
      emitViewToModelChange = isPresent(emitViewToModelChange) ? emitViewToModelChange : true;
      this._value = value;
      if (this._onChange.length && emitModelToViewChange) {
        this._onChange.forEach(function(changeFn) {
          return changeFn(_this._value, emitViewToModelChange);
        });
      }
      this.updateValueAndValidity({
        onlySelf: onlySelf,
        emitEvent: emitEvent
      });
    };
    FormControl.prototype.patchValue = function(value, options) {
      if (options === void 0) {
        options = {};
      }
      this.setValue(value, options);
    };
    FormControl.prototype.reset = function(formState, _a) {
      if (formState === void 0) {
        formState = null;
      }
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._applyFormState(formState);
      this.markAsPristine({onlySelf: onlySelf});
      this.markAsUntouched({onlySelf: onlySelf});
      this.setValue(this._value, {onlySelf: onlySelf});
    };
    FormControl.prototype._updateValue = function() {};
    FormControl.prototype._anyControls = function(condition) {
      return false;
    };
    FormControl.prototype._allControlsDisabled = function() {
      return this.disabled;
    };
    FormControl.prototype.registerOnChange = function(fn) {
      this._onChange.push(fn);
    };
    FormControl.prototype._clearChangeFns = function() {
      this._onChange = [];
      this._onDisabledChange = null;
    };
    FormControl.prototype.registerOnDisabledChange = function(fn) {
      this._onDisabledChange = fn;
    };
    FormControl.prototype._forEachChild = function(cb) {};
    FormControl.prototype._applyFormState = function(formState) {
      if (this._isBoxedValue(formState)) {
        this._value = formState.value;
        formState.disabled ? this.disable({
          onlySelf: true,
          emitEvent: false
        }) : this.enable({
          onlySelf: true,
          emitEvent: false
        });
      } else {
        this._value = formState;
      }
    };
    return FormControl;
  }(AbstractControl));
  var FormGroup = (function(_super) {
    __extends$6(FormGroup, _super);
    function FormGroup(controls, validator, asyncValidator) {
      if (validator === void 0) {
        validator = null;
      }
      if (asyncValidator === void 0) {
        asyncValidator = null;
      }
      _super.call(this, validator, asyncValidator);
      this.controls = controls;
      this._initObservables();
      this._setParentForControls();
      this.updateValueAndValidity({
        onlySelf: true,
        emitEvent: false
      });
    }
    FormGroup.prototype.registerControl = function(name, control) {
      if (this.controls[name])
        return this.controls[name];
      this.controls[name] = control;
      control.setParent(this);
      return control;
    };
    FormGroup.prototype.addControl = function(name, control) {
      this.registerControl(name, control);
      this.updateValueAndValidity();
    };
    FormGroup.prototype.removeControl = function(name) {
      StringMapWrapper.delete(this.controls, name);
      this.updateValueAndValidity();
    };
    FormGroup.prototype.contains = function(controlName) {
      var c = StringMapWrapper.contains(this.controls, controlName);
      return c && this.get(controlName).enabled;
    };
    FormGroup.prototype.setValue = function(value, _a) {
      var _this = this;
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._checkAllValuesPresent(value);
      StringMapWrapper.forEach(value, function(newValue, name) {
        _this._throwIfControlMissing(name);
        _this.controls[name].setValue(newValue, {onlySelf: true});
      });
      this.updateValueAndValidity({onlySelf: onlySelf});
    };
    FormGroup.prototype.patchValue = function(value, _a) {
      var _this = this;
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      StringMapWrapper.forEach(value, function(newValue, name) {
        if (_this.controls[name]) {
          _this.controls[name].patchValue(newValue, {onlySelf: true});
        }
      });
      this.updateValueAndValidity({onlySelf: onlySelf});
    };
    FormGroup.prototype.reset = function(value, _a) {
      if (value === void 0) {
        value = {};
      }
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._forEachChild(function(control, name) {
        control.reset(value[name], {onlySelf: true});
      });
      this.updateValueAndValidity({onlySelf: onlySelf});
      this._updatePristine({onlySelf: onlySelf});
      this._updateTouched({onlySelf: onlySelf});
    };
    FormGroup.prototype.getRawValue = function() {
      return this._reduceChildren({}, function(acc, control, name) {
        acc[name] = control.value;
        return acc;
      });
    };
    FormGroup.prototype._throwIfControlMissing = function(name) {
      if (!Object.keys(this.controls).length) {
        throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
      }
      if (!this.controls[name]) {
        throw new Error("Cannot find form control with name: " + name + ".");
      }
    };
    FormGroup.prototype._forEachChild = function(cb) {
      StringMapWrapper.forEach(this.controls, cb);
    };
    FormGroup.prototype._setParentForControls = function() {
      var _this = this;
      this._forEachChild(function(control, name) {
        control.setParent(_this);
      });
    };
    FormGroup.prototype._updateValue = function() {
      this._value = this._reduceValue();
    };
    FormGroup.prototype._anyControls = function(condition) {
      var _this = this;
      var res = false;
      this._forEachChild(function(control, name) {
        res = res || (_this.contains(name) && condition(control));
      });
      return res;
    };
    FormGroup.prototype._reduceValue = function() {
      var _this = this;
      return this._reduceChildren({}, function(acc, control, name) {
        if (control.enabled || _this.disabled) {
          acc[name] = control.value;
        }
        return acc;
      });
    };
    FormGroup.prototype._reduceChildren = function(initValue, fn) {
      var res = initValue;
      this._forEachChild(function(control, name) {
        res = fn(res, control, name);
      });
      return res;
    };
    FormGroup.prototype._allControlsDisabled = function() {
      for (var _i = 0,
          _a = Object.keys(this.controls); _i < _a.length; _i++) {
        var controlName = _a[_i];
        if (this.controls[controlName].enabled) {
          return false;
        }
      }
      return !StringMapWrapper.isEmpty(this.controls);
    };
    FormGroup.prototype._checkAllValuesPresent = function(value) {
      this._forEachChild(function(control, name) {
        if (value[name] === undefined) {
          throw new Error("Must supply a value for form control with name: '" + name + "'.");
        }
      });
    };
    return FormGroup;
  }(AbstractControl));
  var FormArray = (function(_super) {
    __extends$6(FormArray, _super);
    function FormArray(controls, validator, asyncValidator) {
      if (validator === void 0) {
        validator = null;
      }
      if (asyncValidator === void 0) {
        asyncValidator = null;
      }
      _super.call(this, validator, asyncValidator);
      this.controls = controls;
      this._initObservables();
      this._setParentForControls();
      this.updateValueAndValidity({
        onlySelf: true,
        emitEvent: false
      });
    }
    FormArray.prototype.at = function(index) {
      return this.controls[index];
    };
    FormArray.prototype.push = function(control) {
      this.controls.push(control);
      control.setParent(this);
      this.updateValueAndValidity();
    };
    FormArray.prototype.insert = function(index, control) {
      ListWrapper.insert(this.controls, index, control);
      control.setParent(this);
      this.updateValueAndValidity();
    };
    FormArray.prototype.removeAt = function(index) {
      ListWrapper.removeAt(this.controls, index);
      this.updateValueAndValidity();
    };
    Object.defineProperty(FormArray.prototype, "length", {
      get: function() {
        return this.controls.length;
      },
      enumerable: true,
      configurable: true
    });
    FormArray.prototype.setValue = function(value, _a) {
      var _this = this;
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._checkAllValuesPresent(value);
      value.forEach(function(newValue, index) {
        _this._throwIfControlMissing(index);
        _this.at(index).setValue(newValue, {onlySelf: true});
      });
      this.updateValueAndValidity({onlySelf: onlySelf});
    };
    FormArray.prototype.patchValue = function(value, _a) {
      var _this = this;
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      value.forEach(function(newValue, index) {
        if (_this.at(index)) {
          _this.at(index).patchValue(newValue, {onlySelf: true});
        }
      });
      this.updateValueAndValidity({onlySelf: onlySelf});
    };
    FormArray.prototype.reset = function(value, _a) {
      if (value === void 0) {
        value = [];
      }
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      this._forEachChild(function(control, index) {
        control.reset(value[index], {onlySelf: true});
      });
      this.updateValueAndValidity({onlySelf: onlySelf});
      this._updatePristine({onlySelf: onlySelf});
      this._updateTouched({onlySelf: onlySelf});
    };
    FormArray.prototype.getRawValue = function() {
      return this.controls.map(function(control) {
        return control.value;
      });
    };
    FormArray.prototype._throwIfControlMissing = function(index) {
      if (!this.controls.length) {
        throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
      }
      if (!this.at(index)) {
        throw new Error("Cannot find form control at index " + index);
      }
    };
    FormArray.prototype._forEachChild = function(cb) {
      this.controls.forEach(function(control, index) {
        cb(control, index);
      });
    };
    FormArray.prototype._updateValue = function() {
      var _this = this;
      this._value = this.controls.filter(function(control) {
        return control.enabled || _this.disabled;
      }).map(function(control) {
        return control.value;
      });
    };
    FormArray.prototype._anyControls = function(condition) {
      return this.controls.some(function(control) {
        return control.enabled && condition(control);
      });
    };
    FormArray.prototype._setParentForControls = function() {
      var _this = this;
      this._forEachChild(function(control) {
        control.setParent(_this);
      });
    };
    FormArray.prototype._checkAllValuesPresent = function(value) {
      this._forEachChild(function(control, i) {
        if (value[i] === undefined) {
          throw new Error("Must supply a value for form control at index: " + i + ".");
        }
      });
    };
    FormArray.prototype._allControlsDisabled = function() {
      for (var _i = 0,
          _a = this.controls; _i < _a.length; _i++) {
        var control = _a[_i];
        if (control.enabled)
          return false;
      }
      return !!this.controls.length;
    };
    return FormArray;
  }(AbstractControl));
  var __extends$4 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var formDirectiveProvider = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return NgForm;
    })
  };
  var resolvedPromise = Promise.resolve(null);
  var NgForm = (function(_super) {
    __extends$4(NgForm, _super);
    function NgForm(validators, asyncValidators) {
      _super.call(this);
      this._submitted = false;
      this.ngSubmit = new EventEmitter();
      this.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
    }
    Object.defineProperty(NgForm.prototype, "submitted", {
      get: function() {
        return this._submitted;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "formDirective", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "control", {
      get: function() {
        return this.form;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "path", {
      get: function() {
        return [];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "controls", {
      get: function() {
        return this.form.controls;
      },
      enumerable: true,
      configurable: true
    });
    NgForm.prototype.addControl = function(dir) {
      var _this = this;
      resolvedPromise.then(function() {
        var container = _this._findContainer(dir.path);
        dir._control = container.registerControl(dir.name, dir.control);
        setUpControl(dir.control, dir);
        dir.control.updateValueAndValidity({emitEvent: false});
      });
    };
    NgForm.prototype.getControl = function(dir) {
      return this.form.get(dir.path);
    };
    NgForm.prototype.removeControl = function(dir) {
      var _this = this;
      resolvedPromise.then(function() {
        var container = _this._findContainer(dir.path);
        if (isPresent(container)) {
          container.removeControl(dir.name);
        }
      });
    };
    NgForm.prototype.addFormGroup = function(dir) {
      var _this = this;
      resolvedPromise.then(function() {
        var container = _this._findContainer(dir.path);
        var group = new FormGroup({});
        setUpFormContainer(group, dir);
        container.registerControl(dir.name, group);
        group.updateValueAndValidity({emitEvent: false});
      });
    };
    NgForm.prototype.removeFormGroup = function(dir) {
      var _this = this;
      resolvedPromise.then(function() {
        var container = _this._findContainer(dir.path);
        if (isPresent(container)) {
          container.removeControl(dir.name);
        }
      });
    };
    NgForm.prototype.getFormGroup = function(dir) {
      return this.form.get(dir.path);
    };
    NgForm.prototype.updateModel = function(dir, value) {
      var _this = this;
      resolvedPromise.then(function() {
        var ctrl = _this.form.get(dir.path);
        ctrl.setValue(value);
      });
    };
    NgForm.prototype.setValue = function(value) {
      this.control.setValue(value);
    };
    NgForm.prototype.onSubmit = function() {
      this._submitted = true;
      this.ngSubmit.emit(null);
      return false;
    };
    NgForm.prototype.onReset = function() {
      this.resetForm();
    };
    NgForm.prototype.resetForm = function(value) {
      if (value === void 0) {
        value = undefined;
      }
      this.form.reset(value);
      this._submitted = false;
    };
    NgForm.prototype._findContainer = function(path) {
      path.pop();
      return ListWrapper.isEmpty(path) ? this.form : this.form.get(path);
    };
    NgForm.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',
        providers: [formDirectiveProvider],
        host: {
          '(submit)': 'onSubmit()',
          '(reset)': 'onReset()'
        },
        outputs: ['ngSubmit'],
        exportAs: 'ngForm'
      }]
    }];
    NgForm.ctorParameters = [{
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }];
    return NgForm;
  }(ControlContainer));
  var Examples = {
    formControlName: "\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });",
    formGroupName: "\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });",
    formArrayName: "\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; let i=index\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });",
    ngModelGroup: "\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>",
    ngModelWithFormGroup: "\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  "
  };
  var TemplateDrivenErrors = (function() {
    function TemplateDrivenErrors() {}
    TemplateDrivenErrors.modelParentException = function() {
      throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      " + Examples.formControlName + "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      " + Examples.ngModelWithFormGroup);
    };
    TemplateDrivenErrors.formGroupNameException = function() {
      throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      " + Examples.ngModelGroup);
    };
    TemplateDrivenErrors.missingNameException = function() {
      throw new Error("If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">");
    };
    TemplateDrivenErrors.modelGroupParentException = function() {
      throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      " + Examples.ngModelGroup);
    };
    return TemplateDrivenErrors;
  }());
  var __extends$8 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var modelGroupProvider = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return NgModelGroup;
    })
  };
  var NgModelGroup = (function(_super) {
    __extends$8(NgModelGroup, _super);
    function NgModelGroup(parent, validators, asyncValidators) {
      _super.call(this);
      this._parent = parent;
      this._validators = validators;
      this._asyncValidators = asyncValidators;
    }
    NgModelGroup.prototype._checkParentType = function() {
      if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
        TemplateDrivenErrors.modelGroupParentException();
      }
    };
    NgModelGroup.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[ngModelGroup]',
        providers: [modelGroupProvider],
        exportAs: 'ngModelGroup'
      }]
    }];
    NgModelGroup.ctorParameters = [{
      type: ControlContainer,
      decorators: [{type: _angular_core.Host}, {type: _angular_core.SkipSelf}]
    }, {
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }];
    NgModelGroup.propDecorators = {'name': [{
        type: _angular_core.Input,
        args: ['ngModelGroup']
      }]};
    return NgModelGroup;
  }(AbstractFormGroupDirective));
  var __extends$7 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var formControlBinding = {
    provide: NgControl,
    useExisting: _angular_core.forwardRef(function() {
      return NgModel;
    })
  };
  var resolvedPromise$1 = Promise.resolve(null);
  var NgModel = (function(_super) {
    __extends$7(NgModel, _super);
    function NgModel(parent, validators, asyncValidators, valueAccessors) {
      _super.call(this);
      this._control = new FormControl();
      this._registered = false;
      this.update = new EventEmitter();
      this._parent = parent;
      this._rawValidators = validators || [];
      this._rawAsyncValidators = asyncValidators || [];
      this.valueAccessor = selectValueAccessor(this, valueAccessors);
    }
    NgModel.prototype.ngOnChanges = function(changes) {
      this._checkForErrors();
      if (!this._registered)
        this._setUpControl();
      if ('isDisabled' in changes) {
        this._updateDisabled(changes);
      }
      if (isPropertyUpdated(changes, this.viewModel)) {
        this._updateValue(this.model);
        this.viewModel = this.model;
      }
    };
    NgModel.prototype.ngOnDestroy = function() {
      this.formDirective && this.formDirective.removeControl(this);
    };
    Object.defineProperty(NgModel.prototype, "control", {
      get: function() {
        return this._control;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModel.prototype, "path", {
      get: function() {
        return this._parent ? controlPath(this.name, this._parent) : [this.name];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModel.prototype, "formDirective", {
      get: function() {
        return this._parent ? this._parent.formDirective : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModel.prototype, "validator", {
      get: function() {
        return composeValidators(this._rawValidators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModel.prototype, "asyncValidator", {
      get: function() {
        return composeAsyncValidators(this._rawAsyncValidators);
      },
      enumerable: true,
      configurable: true
    });
    NgModel.prototype.viewToModelUpdate = function(newValue) {
      this.viewModel = newValue;
      this.update.emit(newValue);
    };
    NgModel.prototype._setUpControl = function() {
      this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);
      this._registered = true;
    };
    NgModel.prototype._isStandalone = function() {
      return !this._parent || (this.options && this.options.standalone);
    };
    NgModel.prototype._setUpStandalone = function() {
      setUpControl(this._control, this);
      this._control.updateValueAndValidity({emitEvent: false});
    };
    NgModel.prototype._checkForErrors = function() {
      if (!this._isStandalone()) {
        this._checkParentType();
      }
      this._checkName();
    };
    NgModel.prototype._checkParentType = function() {
      if (!(this._parent instanceof NgModelGroup) && this._parent instanceof AbstractFormGroupDirective) {
        TemplateDrivenErrors.formGroupNameException();
      } else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
        TemplateDrivenErrors.modelParentException();
      }
    };
    NgModel.prototype._checkName = function() {
      if (this.options && this.options.name)
        this.name = this.options.name;
      if (!this._isStandalone() && !this.name) {
        TemplateDrivenErrors.missingNameException();
      }
    };
    NgModel.prototype._updateValue = function(value) {
      var _this = this;
      resolvedPromise$1.then(function() {
        _this.control.setValue(value, {emitViewToModelChange: false});
      });
    };
    NgModel.prototype._updateDisabled = function(changes) {
      var _this = this;
      var disabledValue = changes['isDisabled'].currentValue;
      var isDisabled = disabledValue != null && disabledValue != false;
      resolvedPromise$1.then(function() {
        if (isDisabled && !_this.control.disabled) {
          _this.control.disable();
        } else if (!isDisabled && _this.control.disabled) {
          _this.control.enable();
        }
      });
    };
    NgModel.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[ngModel]:not([formControlName]):not([formControl])',
        providers: [formControlBinding],
        exportAs: 'ngModel'
      }]
    }];
    NgModel.ctorParameters = [{
      type: ControlContainer,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}]
    }, {
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_VALUE_ACCESSOR]
      }]
    }];
    NgModel.propDecorators = {
      'name': [{type: _angular_core.Input}],
      'isDisabled': [{
        type: _angular_core.Input,
        args: ['disabled']
      }],
      'model': [{
        type: _angular_core.Input,
        args: ['ngModel']
      }],
      'options': [{
        type: _angular_core.Input,
        args: ['ngModelOptions']
      }],
      'update': [{
        type: _angular_core.Output,
        args: ['ngModelChange']
      }]
    };
    return NgModel;
  }(NgControl));
  var ReactiveErrors = (function() {
    function ReactiveErrors() {}
    ReactiveErrors.controlParentException = function() {
      throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formControlName);
    };
    ReactiveErrors.ngModelGroupException = function() {
      throw new Error("formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        " + Examples.formGroupName + "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        " + Examples.ngModelGroup);
    };
    ReactiveErrors.missingFormException = function() {
      throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       " + Examples.formControlName);
    };
    ReactiveErrors.groupParentException = function() {
      throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formGroupName);
    };
    ReactiveErrors.arrayParentException = function() {
      throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        " + Examples.formArrayName);
    };
    ReactiveErrors.disabledAttrWarning = function() {
      console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
    };
    return ReactiveErrors;
  }());
  var __extends$9 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var formControlBinding$1 = {
    provide: NgControl,
    useExisting: _angular_core.forwardRef(function() {
      return FormControlDirective;
    })
  };
  var FormControlDirective = (function(_super) {
    __extends$9(FormControlDirective, _super);
    function FormControlDirective(validators, asyncValidators, valueAccessors) {
      _super.call(this);
      this.update = new EventEmitter();
      this._rawValidators = validators || [];
      this._rawAsyncValidators = asyncValidators || [];
      this.valueAccessor = selectValueAccessor(this, valueAccessors);
    }
    Object.defineProperty(FormControlDirective.prototype, "isDisabled", {
      set: function(isDisabled) {
        ReactiveErrors.disabledAttrWarning();
      },
      enumerable: true,
      configurable: true
    });
    FormControlDirective.prototype.ngOnChanges = function(changes) {
      if (this._isControlChanged(changes)) {
        setUpControl(this.form, this);
        if (this.control.disabled)
          this.valueAccessor.setDisabledState(true);
        this.form.updateValueAndValidity({emitEvent: false});
      }
      if (isPropertyUpdated(changes, this.viewModel)) {
        this.form.setValue(this.model);
        this.viewModel = this.model;
      }
    };
    Object.defineProperty(FormControlDirective.prototype, "path", {
      get: function() {
        return [];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "validator", {
      get: function() {
        return composeValidators(this._rawValidators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "asyncValidator", {
      get: function() {
        return composeAsyncValidators(this._rawAsyncValidators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "control", {
      get: function() {
        return this.form;
      },
      enumerable: true,
      configurable: true
    });
    FormControlDirective.prototype.viewToModelUpdate = function(newValue) {
      this.viewModel = newValue;
      this.update.emit(newValue);
    };
    FormControlDirective.prototype._isControlChanged = function(changes) {
      return StringMapWrapper.contains(changes, 'form');
    };
    FormControlDirective.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[formControl]',
        providers: [formControlBinding$1],
        exportAs: 'ngForm'
      }]
    }];
    FormControlDirective.ctorParameters = [{
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_VALUE_ACCESSOR]
      }]
    }];
    FormControlDirective.propDecorators = {
      'form': [{
        type: _angular_core.Input,
        args: ['formControl']
      }],
      'model': [{
        type: _angular_core.Input,
        args: ['ngModel']
      }],
      'update': [{
        type: _angular_core.Output,
        args: ['ngModelChange']
      }],
      'isDisabled': [{
        type: _angular_core.Input,
        args: ['disabled']
      }]
    };
    return FormControlDirective;
  }(NgControl));
  var __extends$11 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var formDirectiveProvider$1 = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return FormGroupDirective;
    })
  };
  var FormGroupDirective = (function(_super) {
    __extends$11(FormGroupDirective, _super);
    function FormGroupDirective(_validators, _asyncValidators) {
      _super.call(this);
      this._validators = _validators;
      this._asyncValidators = _asyncValidators;
      this._submitted = false;
      this.directives = [];
      this.form = null;
      this.ngSubmit = new EventEmitter();
    }
    FormGroupDirective.prototype.ngOnChanges = function(changes) {
      this._checkFormPresent();
      if (StringMapWrapper.contains(changes, 'form')) {
        var sync = composeValidators(this._validators);
        this.form.validator = Validators.compose([this.form.validator, sync]);
        var async = composeAsyncValidators(this._asyncValidators);
        this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);
        this._updateDomValue(changes);
      }
    };
    Object.defineProperty(FormGroupDirective.prototype, "submitted", {
      get: function() {
        return this._submitted;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormGroupDirective.prototype, "formDirective", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormGroupDirective.prototype, "control", {
      get: function() {
        return this.form;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormGroupDirective.prototype, "path", {
      get: function() {
        return [];
      },
      enumerable: true,
      configurable: true
    });
    FormGroupDirective.prototype.addControl = function(dir) {
      var ctrl = this.form.get(dir.path);
      setUpControl(ctrl, dir);
      ctrl.updateValueAndValidity({emitEvent: false});
      this.directives.push(dir);
    };
    FormGroupDirective.prototype.getControl = function(dir) {
      return this.form.get(dir.path);
    };
    FormGroupDirective.prototype.removeControl = function(dir) {
      ListWrapper.remove(this.directives, dir);
    };
    FormGroupDirective.prototype.addFormGroup = function(dir) {
      var ctrl = this.form.get(dir.path);
      setUpFormContainer(ctrl, dir);
      ctrl.updateValueAndValidity({emitEvent: false});
    };
    FormGroupDirective.prototype.removeFormGroup = function(dir) {};
    FormGroupDirective.prototype.getFormGroup = function(dir) {
      return this.form.get(dir.path);
    };
    FormGroupDirective.prototype.addFormArray = function(dir) {
      var ctrl = this.form.get(dir.path);
      setUpFormContainer(ctrl, dir);
      ctrl.updateValueAndValidity({emitEvent: false});
    };
    FormGroupDirective.prototype.removeFormArray = function(dir) {};
    FormGroupDirective.prototype.getFormArray = function(dir) {
      return this.form.get(dir.path);
    };
    FormGroupDirective.prototype.updateModel = function(dir, value) {
      var ctrl = this.form.get(dir.path);
      ctrl.setValue(value);
    };
    FormGroupDirective.prototype.onSubmit = function() {
      this._submitted = true;
      this.ngSubmit.emit(null);
      return false;
    };
    FormGroupDirective.prototype.onReset = function() {
      this.resetForm();
    };
    FormGroupDirective.prototype.resetForm = function(value) {
      if (value === void 0) {
        value = undefined;
      }
      this.form.reset(value);
      this._submitted = false;
    };
    FormGroupDirective.prototype._updateDomValue = function(changes) {
      var _this = this;
      var oldForm = changes['form'].previousValue;
      this.directives.forEach(function(dir) {
        var newCtrl = _this.form.get(dir.path);
        var oldCtrl = oldForm.get(dir.path);
        if (oldCtrl !== newCtrl) {
          cleanUpControl(oldCtrl, dir);
          if (newCtrl)
            setUpControl(newCtrl, dir);
        }
      });
      this.form._updateTreeValidity({emitEvent: false});
    };
    FormGroupDirective.prototype._checkFormPresent = function() {
      if (isBlank(this.form)) {
        ReactiveErrors.missingFormException();
      }
    };
    FormGroupDirective.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[formGroup]',
        providers: [formDirectiveProvider$1],
        host: {
          '(submit)': 'onSubmit()',
          '(reset)': 'onReset()'
        },
        exportAs: 'ngForm'
      }]
    }];
    FormGroupDirective.ctorParameters = [{
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }];
    FormGroupDirective.propDecorators = {
      'form': [{
        type: _angular_core.Input,
        args: ['formGroup']
      }],
      'ngSubmit': [{type: _angular_core.Output}]
    };
    return FormGroupDirective;
  }(ControlContainer));
  var __extends$12 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var formGroupNameProvider = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return FormGroupName;
    })
  };
  var FormGroupName = (function(_super) {
    __extends$12(FormGroupName, _super);
    function FormGroupName(parent, validators, asyncValidators) {
      _super.call(this);
      this._parent = parent;
      this._validators = validators;
      this._asyncValidators = asyncValidators;
    }
    FormGroupName.prototype._checkParentType = function() {
      if (_hasInvalidParent(this._parent)) {
        ReactiveErrors.groupParentException();
      }
    };
    FormGroupName.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[formGroupName]',
        providers: [formGroupNameProvider]
      }]
    }];
    FormGroupName.ctorParameters = [{
      type: ControlContainer,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}, {type: _angular_core.SkipSelf}]
    }, {
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }];
    FormGroupName.propDecorators = {'name': [{
        type: _angular_core.Input,
        args: ['formGroupName']
      }]};
    return FormGroupName;
  }(AbstractFormGroupDirective));
  var formArrayNameProvider = {
    provide: ControlContainer,
    useExisting: _angular_core.forwardRef(function() {
      return FormArrayName;
    })
  };
  var FormArrayName = (function(_super) {
    __extends$12(FormArrayName, _super);
    function FormArrayName(parent, validators, asyncValidators) {
      _super.call(this);
      this._parent = parent;
      this._validators = validators;
      this._asyncValidators = asyncValidators;
    }
    FormArrayName.prototype.ngOnInit = function() {
      this._checkParentType();
      this.formDirective.addFormArray(this);
    };
    FormArrayName.prototype.ngOnDestroy = function() {
      if (this.formDirective) {
        this.formDirective.removeFormArray(this);
      }
    };
    Object.defineProperty(FormArrayName.prototype, "control", {
      get: function() {
        return this.formDirective.getFormArray(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "formDirective", {
      get: function() {
        return this._parent ? this._parent.formDirective : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "path", {
      get: function() {
        return controlPath(this.name, this._parent);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "validator", {
      get: function() {
        return composeValidators(this._validators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "asyncValidator", {
      get: function() {
        return composeAsyncValidators(this._asyncValidators);
      },
      enumerable: true,
      configurable: true
    });
    FormArrayName.prototype._checkParentType = function() {
      if (_hasInvalidParent(this._parent)) {
        ReactiveErrors.arrayParentException();
      }
    };
    FormArrayName.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[formArrayName]',
        providers: [formArrayNameProvider]
      }]
    }];
    FormArrayName.ctorParameters = [{
      type: ControlContainer,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}, {type: _angular_core.SkipSelf}]
    }, {
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }];
    FormArrayName.propDecorators = {'name': [{
        type: _angular_core.Input,
        args: ['formArrayName']
      }]};
    return FormArrayName;
  }(ControlContainer));
  function _hasInvalidParent(parent) {
    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);
  }
  var __extends$10 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var controlNameBinding = {
    provide: NgControl,
    useExisting: _angular_core.forwardRef(function() {
      return FormControlName;
    })
  };
  var FormControlName = (function(_super) {
    __extends$10(FormControlName, _super);
    function FormControlName(parent, validators, asyncValidators, valueAccessors) {
      _super.call(this);
      this._added = false;
      this.update = new EventEmitter();
      this._parent = parent;
      this._rawValidators = validators || [];
      this._rawAsyncValidators = asyncValidators || [];
      this.valueAccessor = selectValueAccessor(this, valueAccessors);
    }
    Object.defineProperty(FormControlName.prototype, "isDisabled", {
      set: function(isDisabled) {
        ReactiveErrors.disabledAttrWarning();
      },
      enumerable: true,
      configurable: true
    });
    FormControlName.prototype.ngOnChanges = function(changes) {
      if (!this._added) {
        this._checkParentType();
        this.formDirective.addControl(this);
        if (this.control.disabled)
          this.valueAccessor.setDisabledState(true);
        this._added = true;
      }
      if (isPropertyUpdated(changes, this.viewModel)) {
        this.viewModel = this.model;
        this.formDirective.updateModel(this, this.model);
      }
    };
    FormControlName.prototype.ngOnDestroy = function() {
      if (this.formDirective) {
        this.formDirective.removeControl(this);
      }
    };
    FormControlName.prototype.viewToModelUpdate = function(newValue) {
      this.viewModel = newValue;
      this.update.emit(newValue);
    };
    Object.defineProperty(FormControlName.prototype, "path", {
      get: function() {
        return controlPath(this.name, this._parent);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "formDirective", {
      get: function() {
        return this._parent ? this._parent.formDirective : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "validator", {
      get: function() {
        return composeValidators(this._rawValidators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "asyncValidator", {
      get: function() {
        return composeAsyncValidators(this._rawAsyncValidators);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "control", {
      get: function() {
        return this.formDirective.getControl(this);
      },
      enumerable: true,
      configurable: true
    });
    FormControlName.prototype._checkParentType = function() {
      if (!(this._parent instanceof FormGroupName) && this._parent instanceof AbstractFormGroupDirective) {
        ReactiveErrors.ngModelGroupException();
      } else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) && !(this._parent instanceof FormArrayName)) {
        ReactiveErrors.controlParentException();
      }
    };
    FormControlName.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[formControlName]',
        providers: [controlNameBinding]
      }]
    }];
    FormControlName.ctorParameters = [{
      type: ControlContainer,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Host}, {type: _angular_core.SkipSelf}]
    }, {
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_ASYNC_VALIDATORS]
      }]
    }, {
      type: Array,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.Self}, {
        type: _angular_core.Inject,
        args: [NG_VALUE_ACCESSOR]
      }]
    }];
    FormControlName.propDecorators = {
      'name': [{
        type: _angular_core.Input,
        args: ['formControlName']
      }],
      'model': [{
        type: _angular_core.Input,
        args: ['ngModel']
      }],
      'update': [{
        type: _angular_core.Output,
        args: ['ngModelChange']
      }],
      'isDisabled': [{
        type: _angular_core.Input,
        args: ['disabled']
      }]
    };
    return FormControlName;
  }(NgControl));
  var REQUIRED_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function() {
      return RequiredValidator;
    }),
    multi: true
  };
  var RequiredValidator = (function() {
    function RequiredValidator() {}
    Object.defineProperty(RequiredValidator.prototype, "required", {
      get: function() {
        return this._required;
      },
      set: function(value) {
        this._required = isPresent(value) && "" + value !== 'false';
        if (this._onChange)
          this._onChange();
      },
      enumerable: true,
      configurable: true
    });
    RequiredValidator.prototype.validate = function(c) {
      return this.required ? Validators.required(c) : null;
    };
    RequiredValidator.prototype.registerOnChange = function(fn) {
      this._onChange = fn;
    };
    RequiredValidator.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[required][formControlName],[required][formControl],[required][ngModel]',
        providers: [REQUIRED_VALIDATOR],
        host: {'[attr.required]': 'required? "" : null'}
      }]
    }];
    RequiredValidator.ctorParameters = [];
    RequiredValidator.propDecorators = {'required': [{type: _angular_core.Input}]};
    return RequiredValidator;
  }());
  var MIN_LENGTH_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function() {
      return MinLengthValidator;
    }),
    multi: true
  };
  var MinLengthValidator = (function() {
    function MinLengthValidator() {}
    MinLengthValidator.prototype._createValidator = function() {
      this._validator = Validators.minLength(parseInt(this.minlength, 10));
    };
    MinLengthValidator.prototype.ngOnChanges = function(changes) {
      if (changes['minlength']) {
        this._createValidator();
        if (this._onChange)
          this._onChange();
      }
    };
    MinLengthValidator.prototype.validate = function(c) {
      return isPresent(this.minlength) ? this._validator(c) : null;
    };
    MinLengthValidator.prototype.registerOnChange = function(fn) {
      this._onChange = fn;
    };
    MinLengthValidator.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
        providers: [MIN_LENGTH_VALIDATOR],
        host: {'[attr.minlength]': 'minlength? minlength : null'}
      }]
    }];
    MinLengthValidator.ctorParameters = [];
    MinLengthValidator.propDecorators = {'minlength': [{type: _angular_core.Input}]};
    return MinLengthValidator;
  }());
  var MAX_LENGTH_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function() {
      return MaxLengthValidator;
    }),
    multi: true
  };
  var MaxLengthValidator = (function() {
    function MaxLengthValidator() {}
    MaxLengthValidator.prototype._createValidator = function() {
      this._validator = Validators.maxLength(parseInt(this.maxlength, 10));
    };
    MaxLengthValidator.prototype.ngOnChanges = function(changes) {
      if (changes['maxlength']) {
        this._createValidator();
        if (this._onChange)
          this._onChange();
      }
    };
    MaxLengthValidator.prototype.validate = function(c) {
      return isPresent(this.maxlength) ? this._validator(c) : null;
    };
    MaxLengthValidator.prototype.registerOnChange = function(fn) {
      this._onChange = fn;
    };
    MaxLengthValidator.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
        providers: [MAX_LENGTH_VALIDATOR],
        host: {'[attr.maxlength]': 'maxlength? maxlength : null'}
      }]
    }];
    MaxLengthValidator.ctorParameters = [];
    MaxLengthValidator.propDecorators = {'maxlength': [{type: _angular_core.Input}]};
    return MaxLengthValidator;
  }());
  var PATTERN_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: _angular_core.forwardRef(function() {
      return PatternValidator;
    }),
    multi: true
  };
  var PatternValidator = (function() {
    function PatternValidator() {}
    PatternValidator.prototype._createValidator = function() {
      this._validator = Validators.pattern(this.pattern);
    };
    PatternValidator.prototype.ngOnChanges = function(changes) {
      if (changes['pattern']) {
        this._createValidator();
        if (this._onChange)
          this._onChange();
      }
    };
    PatternValidator.prototype.validate = function(c) {
      return isPresent(this.pattern) ? this._validator(c) : null;
    };
    PatternValidator.prototype.registerOnChange = function(fn) {
      this._onChange = fn;
    };
    PatternValidator.decorators = [{
      type: _angular_core.Directive,
      args: [{
        selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
        providers: [PATTERN_VALIDATOR],
        host: {'[attr.pattern]': 'pattern? pattern : null'}
      }]
    }];
    PatternValidator.ctorParameters = [];
    PatternValidator.propDecorators = {'pattern': [{type: _angular_core.Input}]};
    return PatternValidator;
  }());
  var FormBuilder = (function() {
    function FormBuilder() {}
    FormBuilder.prototype.group = function(controlsConfig, extra) {
      if (extra === void 0) {
        extra = null;
      }
      var controls = this._reduceControls(controlsConfig);
      var validator = isPresent(extra) ? StringMapWrapper.get(extra, 'validator') : null;
      var asyncValidator = isPresent(extra) ? StringMapWrapper.get(extra, 'asyncValidator') : null;
      return new FormGroup(controls, validator, asyncValidator);
    };
    FormBuilder.prototype.control = function(formState, validator, asyncValidator) {
      if (validator === void 0) {
        validator = null;
      }
      if (asyncValidator === void 0) {
        asyncValidator = null;
      }
      return new FormControl(formState, validator, asyncValidator);
    };
    FormBuilder.prototype.array = function(controlsConfig, validator, asyncValidator) {
      var _this = this;
      if (validator === void 0) {
        validator = null;
      }
      if (asyncValidator === void 0) {
        asyncValidator = null;
      }
      var controls = controlsConfig.map(function(c) {
        return _this._createControl(c);
      });
      return new FormArray(controls, validator, asyncValidator);
    };
    FormBuilder.prototype._reduceControls = function(controlsConfig) {
      var _this = this;
      var controls = {};
      StringMapWrapper.forEach(controlsConfig, function(controlConfig, controlName) {
        controls[controlName] = _this._createControl(controlConfig);
      });
      return controls;
    };
    FormBuilder.prototype._createControl = function(controlConfig) {
      if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup || controlConfig instanceof FormArray) {
        return controlConfig;
      } else if (isArray(controlConfig)) {
        var value = controlConfig[0];
        var validator = controlConfig.length > 1 ? controlConfig[1] : null;
        var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
        return this.control(value, validator, asyncValidator);
      } else {
        return this.control(controlConfig);
      }
    };
    FormBuilder.decorators = [{type: _angular_core.Injectable}];
    FormBuilder.ctorParameters = [];
    return FormBuilder;
  }());
  var SHARED_FORM_DIRECTIVES = [NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator];
  var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
  var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
  var InternalFormsSharedModule = (function() {
    function InternalFormsSharedModule() {}
    InternalFormsSharedModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{
        declarations: SHARED_FORM_DIRECTIVES,
        exports: SHARED_FORM_DIRECTIVES
      }]
    }];
    InternalFormsSharedModule.ctorParameters = [];
    return InternalFormsSharedModule;
  }());
  var FormsModule = (function() {
    function FormsModule() {}
    FormsModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{
        declarations: TEMPLATE_DRIVEN_DIRECTIVES,
        providers: [RadioControlRegistry],
        exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
      }]
    }];
    FormsModule.ctorParameters = [];
    return FormsModule;
  }());
  var ReactiveFormsModule = (function() {
    function ReactiveFormsModule() {}
    ReactiveFormsModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{
        declarations: [REACTIVE_DRIVEN_DIRECTIVES],
        providers: [FormBuilder, RadioControlRegistry],
        exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
      }]
    }];
    ReactiveFormsModule.ctorParameters = [];
    return ReactiveFormsModule;
  }());
  exports.AbstractControlDirective = AbstractControlDirective;
  exports.AbstractFormGroupDirective = AbstractFormGroupDirective;
  exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
  exports.ControlContainer = ControlContainer;
  exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;
  exports.DefaultValueAccessor = DefaultValueAccessor;
  exports.NgControl = NgControl;
  exports.NgControlStatus = NgControlStatus;
  exports.NgControlStatusGroup = NgControlStatusGroup;
  exports.NgForm = NgForm;
  exports.NgModel = NgModel;
  exports.NgModelGroup = NgModelGroup;
  exports.FormControlDirective = FormControlDirective;
  exports.FormControlName = FormControlName;
  exports.FormGroupDirective = FormGroupDirective;
  exports.FormArrayName = FormArrayName;
  exports.FormGroupName = FormGroupName;
  exports.NgSelectOption = NgSelectOption;
  exports.SelectControlValueAccessor = SelectControlValueAccessor;
  exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;
  exports.MaxLengthValidator = MaxLengthValidator;
  exports.MinLengthValidator = MinLengthValidator;
  exports.PatternValidator = PatternValidator;
  exports.RequiredValidator = RequiredValidator;
  exports.FormBuilder = FormBuilder;
  exports.AbstractControl = AbstractControl;
  exports.FormArray = FormArray;
  exports.FormControl = FormControl;
  exports.FormGroup = FormGroup;
  exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;
  exports.NG_VALIDATORS = NG_VALIDATORS;
  exports.Validators = Validators;
  exports.FormsModule = FormsModule;
  exports.ReactiveFormsModule = ReactiveFormsModule;
}));

})();
$__System.registerDynamic("65", ["3", "9", "23"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("9");
    var forms_1 = $__require("23");
    exports.TRISTATECHECKBOX_VALUE_ACCESSOR = {
        provide: forms_1.NG_VALUE_ACCESSOR,
        useExisting: core_1.forwardRef(function () {
            return TriStateCheckbox;
        }),
        multi: true
    };
    var TriStateCheckbox = function () {
        function TriStateCheckbox() {
            this.onChange = new core_1.EventEmitter();
            this.onModelChange = function () {};
            this.onModelTouched = function () {};
        }
        TriStateCheckbox.prototype.onClick = function (event, input) {
            if (!this.disabled) {
                this.toggle(event);
                this.focus = true;
                input.focus();
            }
        };
        TriStateCheckbox.prototype.onKeydown = function (event) {
            if (event.keyCode == 32) {
                event.preventDefault();
            }
        };
        TriStateCheckbox.prototype.onKeyup = function (event) {
            if (event.keyCode == 32) {
                this.toggle(event);
                event.preventDefault();
            }
        };
        TriStateCheckbox.prototype.toggle = function (event) {
            if (this.value == null) this.value = true;else if (this.value == true) this.value = false;else if (this.value == false) this.value = null;
            this.onModelChange(this.value);
            this.onChange.emit({
                originalEvent: event,
                value: this.value
            });
        };
        TriStateCheckbox.prototype.onFocus = function () {
            this.focus = true;
        };
        TriStateCheckbox.prototype.onBlur = function () {
            this.focus = false;
            this.onModelTouched();
        };
        TriStateCheckbox.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        TriStateCheckbox.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        TriStateCheckbox.prototype.writeValue = function (value) {
            this.value = value || null;
        };
        TriStateCheckbox.prototype.setDisabledState = function (disabled) {
            this.disabled = disabled;
        };
        __decorate([core_1.Input(), __metadata('design:type', Boolean)], TriStateCheckbox.prototype, "disabled", void 0);
        __decorate([core_1.Input(), __metadata('design:type', String)], TriStateCheckbox.prototype, "name", void 0);
        __decorate([core_1.Output(), __metadata('design:type', core_1.EventEmitter)], TriStateCheckbox.prototype, "onChange", void 0);
        TriStateCheckbox = __decorate([core_1.Component({
            selector: 'p-triStateCheckbox',
            template: "\n        <div class=\"ui-chkbox ui-tristatechkbox ui-widget\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #input type=\"text\" [name]=\"name\" readonly [disabled]=\"disabled\" (keyup)=\"onKeyup($event)\" (keydown)=\"onKeydown($event)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n            </div>\n            <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" (click)=\"onClick($event,input)\"\n                [ngClass]=\"{'ui-state-hover':hover&&!disabled,'ui-state-active':value!=null,'ui-state-disabled':disabled,'ui-state-focus':focus}\" \n                    (mouseenter)=\"hover=true\" (mouseleave)=\"hover=false\">\n                <span class=\"ui-chkbox-icon fa fa-fw ui-c\" [ngClass]=\"{'fa-check':value==true,'fa-close':value==false}\"></span>\n            </div>\n        </div>\n    ",
            providers: [exports.TRISTATECHECKBOX_VALUE_ACCESSOR]
        }), __metadata('design:paramtypes', [])], TriStateCheckbox);
        return TriStateCheckbox;
    }();
    exports.TriStateCheckbox = TriStateCheckbox;
    var TriStateCheckboxModule = function () {
        function TriStateCheckboxModule() {}
        TriStateCheckboxModule = __decorate([core_1.NgModule({
            imports: [common_1.CommonModule],
            exports: [TriStateCheckbox],
            declarations: [TriStateCheckbox]
        }), __metadata('design:paramtypes', [])], TriStateCheckboxModule);
        return TriStateCheckboxModule;
    }();
    exports.TriStateCheckboxModule = TriStateCheckboxModule;
    

    return module.exports;
});
$__System.registerDynamic('c', ['33', '21', '20', '22', '27', '25', '28', '29', '2a', '2b', '2c', '2d', '2e', '30', '31', '32', '35', '36', '37', '38', '39', '3a', '3b', '3e', '3f', '40', '41', '42', '24', '43', '44', '45', '46', '47', '48', '3c', '49', '4a', '4b', '2f', '4c', '4d', '4e', '4f', '3d', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '65'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    __export($__require('33'));
    __export($__require('21'));
    __export($__require('20'));
    __export($__require('22'));
    __export($__require('27'));
    __export($__require('25'));
    __export($__require('28'));
    __export($__require('29'));
    __export($__require('2a'));
    __export($__require('2b'));
    __export($__require('2c'));
    __export($__require('2d'));
    __export($__require('2e'));
    __export($__require('30'));
    __export($__require('31'));
    __export($__require('32'));
    __export($__require('35'));
    __export($__require('36'));
    __export($__require('37'));
    __export($__require('38'));
    __export($__require('39'));
    __export($__require('3a'));
    __export($__require('3b'));
    __export($__require('3e'));
    __export($__require('3f'));
    __export($__require('40'));
    __export($__require('41'));
    __export($__require('42'));
    __export($__require('24'));
    __export($__require('43'));
    __export($__require('44'));
    __export($__require('45'));
    __export($__require('46'));
    __export($__require('47'));
    __export($__require('48'));
    __export($__require('3c'));
    __export($__require('49'));
    __export($__require('4a'));
    __export($__require('4b'));
    __export($__require('2f'));
    __export($__require('4c'));
    __export($__require('4d'));
    __export($__require('4e'));
    __export($__require('4f'));
    __export($__require('3d'));
    __export($__require('50'));
    __export($__require('51'));
    __export($__require('52'));
    __export($__require('53'));
    __export($__require('54'));
    __export($__require('55'));
    __export($__require('56'));
    __export($__require('57'));
    __export($__require('58'));
    __export($__require('59'));
    __export($__require('5a'));
    __export($__require('5b'));
    __export($__require('5c'));
    __export($__require('5d'));
    __export($__require('5e'));
    __export($__require('5f'));
    __export($__require('60'));
    __export($__require('65'));
    

    return module.exports;
});
$__System.registerDynamic("66", ["3", "67", "68", "69", "6a"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var http_1 = $__require("67");
    $__require("68");
    $__require("69");
    var AppConfig_1 = $__require("6a");
    var AccountSettingsService = function () {
        function AccountSettingsService(http) {
            this.http = http;
        }
        AccountSettingsService.prototype.getMerchantAccounts = function (merchantId) {
            var headers = new http_1.Headers({ 'Content-Type': 'application/json' });
            headers.append('Authorization', 'Bearer ' + window.localStorage.getItem('auth_key'));
            var options = new http_1.RequestOptions({ headers: headers });
            return this.http.get(AppConfig_1.AppConfig.GET_MERCHANTS_ACCOUNTS_URL.replace(':merchantId', merchantId), options).map(function (res) {
                return res.json();
            });
        };
        AccountSettingsService.prototype.updateMerchantAccounts = function (account) {
            var body = JSON.stringify(account);
            var headers = new http_1.Headers({ 'Content-Type': 'application/json' });
            headers.append('Authorization', 'Bearer ' + window.localStorage.getItem('auth_key'));
            var options = new http_1.RequestOptions({ headers: headers });
            return this.http.post(AppConfig_1.AppConfig.UPDATE_ACCOUNT_URL, body, options).map(function (res) {
                return res.json();
            });
        };
        AccountSettingsService = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [http_1.Http])], AccountSettingsService);
        return AccountSettingsService;
    }();
    exports.AccountSettingsService = AccountSettingsService;
    

    return module.exports;
});
$__System.registerDynamic("13", ["3", "66", "1f", "6b"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var accountsettings_service_1 = $__require("66");
    var merchant_service_1 = $__require("1f");
    var role_service_1 = $__require("6b");
    var AccountSettingsComponent = function () {
        function AccountSettingsComponent(accountSettingsService, merchantService, roleService) {
            var _this = this;
            this.accountSettingsService = accountSettingsService;
            this.merchantService = merchantService;
            this.roleService = roleService;
            this.messageType = '';
            this.message = '';
            this.showCustomAlert = false;
            this.display = false;
            this.selectedAccount = {
                name: '',
                role: '',
                roleId: '',
                uuid: ''
            };
            this.merchants = [];
            this.accounts = [];
            this.roles = [];
            this.merchantService.getMerchants().subscribe(function (data) {
                return _this.merchants = data.data;
            });
        }
        AccountSettingsComponent.prototype.searchMerchantAccounts = function (event) {
            var _this = this;
            event.preventDefault();
            this.accountSettingsService.getMerchantAccounts(this.selectedMerchant).subscribe(function (data) {
                if (data.responseCode == '200') {
                    _this.messageType = 'HOORAY!';
                    _this.message = 'Total search results: ' + data.data.length;
                    _this.showCustomAlert = true;
                    _this.accounts = data.data;
                } else {
                    _this.messageType = 'OOPS!';
                    _this.message = 'No merchant match with RUSH server.';
                    _this.showCustomAlert = true;
                }
            });
            this.roleService.getRoles(this.selectedMerchant).subscribe(function (data) {
                return _this.roles = data.data;
            });
        };
        AccountSettingsComponent.prototype.showDialog = function (event, account) {
            event.preventDefault();
            this.selectedAccount = {
                name: account.name,
                role: account.role,
                uuid: account.uuid,
                roleId: account.roleId
            };
            this.display = true;
        };
        AccountSettingsComponent.prototype.update = function (event, account) {
            var _this = this;
            event.preventDefault();
            if (account.roleId == undefined) {
                this.messageType = 'OOPS!';
                this.message = 'All fields are required!';
                this.showCustomAlert = true;
                return;
            }
            this.accountSettingsService.updateMerchantAccounts(account).subscribe(function (data) {
                _this.messageType = 'HOORAY!';
                _this.message = 'Account has been updated.';
                _this.showCustomAlert = true;
                _this.display = false;
                _this.searchMerchantAccounts(event);
            }, function (error) {
                _this.messageType = 'OOPS!';
                _this.message = 'Something went wrong please contact developer :)';
                _this.showCustomAlert = true;
            });
        };
        AccountSettingsComponent = __decorate([core_1.Component({
            moduleId: module.id,
            selector: 'app-account-settings',
            templateUrl: 'account-settings.html',
            providers: [accountsettings_service_1.AccountSettingsService, merchant_service_1.MerchantService, role_service_1.RoleService]
        }), __metadata('design:paramtypes', [accountsettings_service_1.AccountSettingsService, merchant_service_1.MerchantService, role_service_1.RoleService])], AccountSettingsComponent);
        return AccountSettingsComponent;
    }();
    exports.AccountSettingsComponent = AccountSettingsComponent;
    

    return module.exports;
});
$__System.registerDynamic("6c", ["3", "67", "68", "69", "6a"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var http_1 = $__require("67");
    $__require("68");
    $__require("69");
    var AppConfig_1 = $__require("6a");
    var ScreenRestrictionsService = function () {
        function ScreenRestrictionsService(http) {
            this.http = http;
        }
        ScreenRestrictionsService.prototype.getScreens = function (merchantId) {
            var headers = new http_1.Headers({ 'Content-Type': 'application/json' });
            headers.append('Authorization', 'Bearer ' + window.localStorage.getItem('auth_key'));
            var options = new http_1.RequestOptions({ headers: headers });
            return this.http.get(AppConfig_1.AppConfig.GET_SCREENS.replace(':merchantId', merchantId), options).map(function (res) {
                return res.json();
            });
        };
        ScreenRestrictionsService.prototype.updateAccess = function (roleDTO) {
            var body = JSON.stringify(roleDTO);
            var headers = new http_1.Headers({ 'Content-Type': 'application/json' });
            headers.append('Authorization', 'Bearer ' + window.localStorage.getItem('auth_key'));
            var options = new http_1.RequestOptions({ headers: headers });
            return this.http.post(AppConfig_1.AppConfig.UPDATE_ACCESS_URL, body, options).map(function (res) {
                return res.json();
            });
        };
        ScreenRestrictionsService = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [http_1.Http])], ScreenRestrictionsService);
        return ScreenRestrictionsService;
    }();
    exports.ScreenRestrictionsService = ScreenRestrictionsService;
    

    return module.exports;
});
$__System.registerDynamic("14", ["3", "1f", "6c"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var merchant_service_1 = $__require("1f");
    var screenrestrictions_service_1 = $__require("6c");
    var ScreenRestrictionsComponent = function () {
        function ScreenRestrictionsComponent(merchantService, screenRestrictionsService) {
            var _this = this;
            this.merchantService = merchantService;
            this.screenRestrictionsService = screenRestrictionsService;
            this.messageType = '';
            this.message = '';
            this.showCustomAlert = false;
            this.display = false;
            this.selectedRole = {
                name: '',
                screens: [],
                merchantId: '',
                roleId: ''
            };
            this.merchants = [];
            this.roleDTOs = [];
            this.selectedMerchant = '';
            this.merchantService.getMerchants().subscribe(function (data) {
                return _this.merchants = data.data;
            });
        }
        ScreenRestrictionsComponent.prototype.getScreens = function (event) {
            var _this = this;
            event.preventDefault();
            this.screenRestrictionsService.getScreens(this.selectedMerchant).subscribe(function (data) {
                if (data.responseCode == '200') {
                    _this.messageType = 'HOORAY!';
                    _this.message = 'Total search results: ' + data.data.roleDTOs.length;
                    _this.showCustomAlert = true;
                    _this.roleDTOs = data.data.roleDTOs;
                    _this.screens = data.data.screens;
                } else {
                    _this.messageType = 'OOPS!';
                    _this.message = 'Something unexpected happened please contact developer :)';
                    _this.showCustomAlert = false;
                }
            });
        };
        ScreenRestrictionsComponent.prototype.showDialog = function (event, account) {
            event.preventDefault();
            var screens = [];
            for (var i = 0; i < account.screens.length; i++) {
                var screen = {
                    name: account.screens[i].name,
                    checked: account.screens[i].checked
                };
                screens.push(screen);
            }
            this.selectedRole = {
                name: account.name,
                screens: screens,
                merchantId: account.merchantId,
                roleId: account.roleId
            };
            this.display = true;
        };
        ScreenRestrictionsComponent.prototype.update = function (event) {
            var _this = this;
            event.preventDefault();
            this.screenRestrictionsService.updateAccess(this.selectedRole).subscribe(function (data) {
                _this.messageType = 'HOORAY!';
                _this.message = 'Screen restrictions has been updated.';
                _this.showCustomAlert = true;
                _this.display = false;
                _this.screenRestrictionsService.getScreens(_this.selectedMerchant).subscribe(function (data) {
                    _this.roleDTOs = data.data.roleDTOs;
                    _this.screens = data.data.screens;
                });
            }, function (error) {
                _this.messageType = 'OOPS!';
                _this.message = 'Something unexpected happened please contact developer :)';
                _this.showCustomAlert = true;
            });
        };
        ScreenRestrictionsComponent = __decorate([core_1.Component({
            moduleId: module.id,
            selector: 'app-screen-restrictions',
            templateUrl: 'screen-restrictions.html',
            providers: [merchant_service_1.MerchantService, screenrestrictions_service_1.ScreenRestrictionsService]
        }), __metadata('design:paramtypes', [merchant_service_1.MerchantService, screenrestrictions_service_1.ScreenRestrictionsService])], ScreenRestrictionsComponent);
        return ScreenRestrictionsComponent;
    }();
    exports.ScreenRestrictionsComponent = ScreenRestrictionsComponent;
    

    return module.exports;
});
$__System.registerDynamic("6b", ["3", "67", "68", "69", "6a"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var http_1 = $__require("67");
    $__require("68");
    $__require("69");
    var AppConfig_1 = $__require("6a");
    var RoleService = function () {
        function RoleService(http) {
            this.http = http;
        }
        RoleService.prototype.getRoles = function (merchantId) {
            var headers = new http_1.Headers();
            headers.append('Content-type', 'application/json');
            headers.append('Authorization', 'Bearer ' + window.localStorage.getItem('auth_key'));
            return this.http.get(AppConfig_1.AppConfig.GET_ROLES_URL.replace(':merchantId', merchantId), { headers: headers }).map(function (res) {
                return res.json();
            });
        };
        RoleService.prototype.updateRole = function (roleDTO) {
            var body = JSON.stringify(roleDTO);
            var headers = new http_1.Headers({ 'Content-Type': 'application/json' });
            headers.append('Authorization', 'Bearer ' + window.localStorage.getItem('auth_key'));
            var options = new http_1.RequestOptions({ headers: headers });
            return this.http.post(AppConfig_1.AppConfig.UPDATE_ROLES_URL, body, options).map(function (res) {
                return res.json();
            });
        };
        RoleService.prototype.deleteRole = function (roleDTO) {
            var body = JSON.stringify(roleDTO);
            var headers = new http_1.Headers({ 'Content-Type': 'application/json' });
            headers.append('Authorization', 'Bearer ' + window.localStorage.getItem('auth_key'));
            var options = new http_1.RequestOptions({ headers: headers });
            return this.http.post(AppConfig_1.AppConfig.DELETE_ROLES_URL, body, options).map(function (res) {
                return res.json();
            });
        };
        RoleService = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [http_1.Http])], RoleService);
        return RoleService;
    }();
    exports.RoleService = RoleService;
    

    return module.exports;
});
$__System.registerDynamic("15", ["3", "1f", "6b"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var merchant_service_1 = $__require("1f");
    var role_service_1 = $__require("6b");
    var RoleSettingsComponent = function () {
        function RoleSettingsComponent(merchantService, roleService) {
            var _this = this;
            this.merchantService = merchantService;
            this.roleService = roleService;
            this.messageType = '';
            this.message = '';
            this.showCustomAlert = false;
            this.display = false;
            this.selectedRole = {
                name: '',
                roleId: '',
                merchantId: ''
            };
            this.deleteAlert = false;
            this.merchants = [];
            this.roles = [];
            this.selectedMerchant = '';
            this.roleDTO = {
                merchantId: '',
                roleName: ''
            };
            this.merchantService.getMerchants().subscribe(function (data) {
                return _this.merchants = data.data;
            });
        }
        RoleSettingsComponent.prototype.getRoles = function (event) {
            var _this = this;
            event.preventDefault();
            this.roleService.getRoles(this.selectedMerchant).subscribe(function (data) {
                return _this.roles = data.data;
            });
        };
        RoleSettingsComponent.prototype.clear = function (event) {
            event.preventDefault();
            this.roleDTO = {
                merchantId: '',
                name: ''
            };
        };
        RoleSettingsComponent.prototype.create = function (event) {
            var _this = this;
            event.preventDefault();
            if (this.roleDTO.merchantId == '' || this.roleDTO.name == '') {
                this.messageType = 'OOPS!';
                this.message = 'All fields are required';
                this.showCustomAlert = true;
                return;
            }
            this.roleService.updateRole(this.roleDTO).subscribe(function (data) {
                _this.roleDTO = {
                    merchantId: '',
                    name: ''
                };
                _this.messageType = 'HOORAY!';
                _this.message = 'Role has been created.';
                _this.showCustomAlert = true;
            }, function (error) {
                _this.messageType = 'OOPS!';
                _this.message = 'Something unexpected happened please contact developer :)';
                _this.showCustomAlert = true;
            });
        };
        RoleSettingsComponent.prototype.showDialog = function (event, role) {
            event.preventDefault();
            this.selectedRole = {
                name: role.name,
                roleId: role.roleId,
                merchantId: role.merchantId
            };
            this.display = true;
        };
        RoleSettingsComponent.prototype.update = function (event) {
            var _this = this;
            event.preventDefault();
            this.roleService.updateRole(this.selectedRole).subscribe(function (data) {
                _this.roleService.getRoles(_this.selectedMerchant).subscribe(function (data) {
                    return _this.roles = data.data;
                });
                _this.roleDTO = {
                    merchantId: '',
                    name: ''
                };
                _this.display = false;
                _this.messageType = 'HOORAY!';
                _this.message = 'Role has been updated';
                _this.showCustomAlert = true;
            }, function (error) {
                _this.messageType = 'OOPS!';
                _this.message = 'Something unexpected happened please contact developer :)';
                _this.showCustomAlert = true;
            });
        };
        RoleSettingsComponent.prototype.delete = function (event) {
            var _this = this;
            event.preventDefault();
            this.roleService.deleteRole(this.selectedRole).subscribe(function (data) {
                _this.roleService.getRoles(_this.selectedMerchant).subscribe(function (data) {
                    return _this.roles = data.data;
                });
                _this.selectedRole = {
                    name: '',
                    roleId: '',
                    merchantId: ''
                };
                _this.deleteAlert = false;
                _this.messageType = 'HOORAY!';
                _this.message = 'Role has been deleted.';
                _this.showCustomAlert = true;
            }, function (error) {
                _this.messageType = 'OOPS!';
                _this.message = 'Something unexpected happened please contact developer :)';
                _this.showCustomAlert = true;
            });
        };
        RoleSettingsComponent.prototype.showDeleteAlert = function (event, role) {
            event.preventDefault();
            this.selectedRole = {
                name: role.name,
                roleId: role.roleId,
                merchantId: role.merchantId
            };
            this.deleteAlert = true;
        };
        RoleSettingsComponent = __decorate([core_1.Component({
            moduleId: module.id,
            selector: 'app-rolesettings',
            templateUrl: 'role-settings.html',
            providers: [merchant_service_1.MerchantService, role_service_1.RoleService]
        }), __metadata('design:paramtypes', [merchant_service_1.MerchantService, role_service_1.RoleService])], RoleSettingsComponent);
        return RoleSettingsComponent;
    }();
    exports.RoleSettingsComponent = RoleSettingsComponent;
    

    return module.exports;
});
$__System.registerDynamic("1f", ["3", "67", "68", "69", "6a"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var http_1 = $__require("67");
    $__require("68");
    $__require("69");
    var AppConfig_1 = $__require("6a");
    var MerchantService = function () {
        function MerchantService(http) {
            this.http = http;
        }
        MerchantService.prototype.getMerchants = function () {
            var headers = new http_1.Headers();
            headers.append('Content-type', 'application/json');
            headers.append('Authorization', 'Bearer ' + window.localStorage.getItem('auth_key'));
            return this.http.get(AppConfig_1.AppConfig.GET_MERCHANTS_URL, { headers: headers }).map(function (res) {
                return res.json();
            });
        };
        MerchantService.prototype.create = function (merchant) {
            var body = JSON.stringify(merchant);
            var headers = new http_1.Headers({ 'Content-Type': 'application/json' });
            headers.append('Authorization', 'Bearer ' + window.localStorage.getItem('auth_key'));
            var options = new http_1.RequestOptions({ headers: headers });
            return this.http.post(AppConfig_1.AppConfig.GET_MERCHANTS_URL, body, options).map(function (res) {
                return res.json();
            });
        };
        MerchantService.prototype.update = function (merchant) {
            event.preventDefault();
            var body = JSON.stringify(merchant);
            var headers = new http_1.Headers({ 'Content-Type': 'application/json' });
            var options = new http_1.RequestOptions({ headers: headers });
            console.log(body);
            return this.http.post(AppConfig_1.AppConfig.GET_MERCHANTS_URL, body, options).map(function (res) {
                return res.json();
            });
        };
        MerchantService = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [http_1.Http])], MerchantService);
        return MerchantService;
    }();
    exports.MerchantService = MerchantService;
    

    return module.exports;
});
$__System.registerDynamic("6d", ["3", "67", "68", "69", "6a"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var http_1 = $__require("67");
    $__require("68");
    $__require("69");
    var AppConfig_1 = $__require("6a");
    var BranchService = function () {
        function BranchService(http) {
            this.http = http;
        }
        BranchService.prototype.getBranches = function (merchantId) {
            var headers = new http_1.Headers({ 'Content-Type': 'application/json' });
            headers.append('Authorization', 'Bearer ' + window.localStorage.getItem('auth_key'));
            var options = new http_1.RequestOptions({ headers: headers });
            return this.http.get(AppConfig_1.AppConfig.GET_BRANCHES_URL.replace(':merchantId', merchantId), options).map(function (res) {
                return res.json();
            });
        };
        BranchService.prototype.updateBranch = function (branchDTO) {
            var body = JSON.stringify(branchDTO);
            var headers = new http_1.Headers({ 'Content-Type': 'application/json' });
            headers.append('Authorization', 'Bearer ' + window.localStorage.getItem('auth_key'));
            var options = new http_1.RequestOptions({ headers: headers });
            return this.http.post(AppConfig_1.AppConfig.UPDATE_BRANCH_URL, body, options).map(function (res) {
                return res.json();
            });
        };
        BranchService = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [http_1.Http])], BranchService);
        return BranchService;
    }();
    exports.BranchService = BranchService;
    

    return module.exports;
});
$__System.registerDynamic("16", ["3", "1f", "6d"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var merchant_service_1 = $__require("1f");
    var branchsettings_service_1 = $__require("6d");
    var BranchSettingsComponent = function () {
        function BranchSettingsComponent(merchantService, branchService) {
            var _this = this;
            this.merchantService = merchantService;
            this.branchService = branchService;
            this.messageType = '';
            this.message = '';
            this.showCustomAlert = false;
            this.display = false;
            this.selectedBranch = {
                branchName: '',
                branchId: '',
                uuid: '',
                withVk: ''
            };
            this.merchants = [];
            this.branchDTOs = [];
            this.selectedMerchant = '';
            this.merchantService.getMerchants().subscribe(function (data) {
                return _this.merchants = data.data;
            });
        }
        BranchSettingsComponent.prototype.getBranches = function (event) {
            var _this = this;
            event.preventDefault();
            this.branchService.getBranches(this.selectedMerchant).subscribe(function (data) {
                if (data.responseCode == '200') {
                    _this.messageType = 'HOORAY!';
                    _this.message = 'Total search results: ' + data.data.length;
                    _this.showCustomAlert = true;
                    _this.branchDTOs = data.data;
                } else {
                    _this.messageType = 'OOPS!';
                    _this.message = 'Something unexpected happened please contact developer :)';
                    _this.showCustomAlert = false;
                }
            });
        };
        BranchSettingsComponent.prototype.showDialog = function (event, item) {
            event.preventDefault();
            this.selectedBranch = {
                branchName: item.branchName,
                branchId: item.branchId,
                uuid: item.uuid,
                withVk: item.withVk
            };
            this.display = true;
        };
        BranchSettingsComponent.prototype.update = function (event) {
            var _this = this;
            event.preventDefault();
            this.branchService.updateBranch(this.selectedBranch).subscribe(function (data) {
                _this.messageType = 'HOORAY!';
                _this.message = 'Branch has been updated.';
                _this.showCustomAlert = true;
                _this.display = false;
                _this.branchService.getBranches(_this.selectedMerchant).subscribe(function (data) {
                    _this.branchDTOs = data.data;
                });
            }, function (error) {
                _this.messageType = 'OOPS!';
                _this.message = 'Something unexpected happened please contact developer :)';
                _this.showCustomAlert = true;
            });
        };
        BranchSettingsComponent = __decorate([core_1.Component({
            moduleId: module.id,
            templateUrl: 'branch-settings.html',
            providers: [merchant_service_1.MerchantService, branchsettings_service_1.BranchService]
        }), __metadata('design:paramtypes', [merchant_service_1.MerchantService, branchsettings_service_1.BranchService])], BranchSettingsComponent);
        return BranchSettingsComponent;
    }();
    exports.BranchSettingsComponent = BranchSettingsComponent;
    

    return module.exports;
});
$__System.registerDynamic("6e", ["3", "f", "10", "9", "23", "1e", "12", "c", "13", "14", "15", "16"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    //HomeModule Config
    var core_1 = $__require("3");
    var home_component_1 = $__require("f");
    var routes_1 = $__require("10");
    var common_1 = $__require("9");
    var forms_1 = $__require("23");
    var angular2_datatable_1 = $__require("1e");
    var merchant_component_1 = $__require("12");
    var primeng_1 = $__require("c");
    var accountsettings_component_1 = $__require("13");
    var screenrestrictions_component_1 = $__require("14");
    var rolesettings_component_1 = $__require("15");
    var branchsettings_component_1 = $__require("16");
    var HomeModule = function () {
        function HomeModule() {}
        HomeModule = __decorate([core_1.NgModule({
            imports: [routes_1.routing, common_1.CommonModule, forms_1.FormsModule, angular2_datatable_1.DataTableModule, primeng_1.DialogModule],
            declarations: [home_component_1.HomeComponent, merchant_component_1.MerchantComponent, accountsettings_component_1.AccountSettingsComponent, screenrestrictions_component_1.ScreenRestrictionsComponent, rolesettings_component_1.RoleSettingsComponent, branchsettings_component_1.BranchSettingsComponent],
            providers: [routes_1.appRoutingProviders]
        }), __metadata('design:paramtypes', [])], HomeModule);
        return HomeModule;
    }();
    exports.HomeModule = HomeModule;
    

    return module.exports;
});
$__System.registerDynamic("11", ["3", "d", "e"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var router_1 = $__require("d");
    var auth_service_1 = $__require("e");
    var AuthManager = function () {
        function AuthManager(router, authService) {
            this.router = router;
            this.authService = authService;
        }
        AuthManager.prototype.canActivate = function (next, state) {
            if (window.localStorage.getItem('auth_key')) return true;
            this.router.navigate(['/login']);
            return false;
        };
        AuthManager = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [router_1.Router, auth_service_1.AuthService])], AuthManager);
        return AuthManager;
    }();
    exports.AuthManager = AuthManager;
    

    return module.exports;
});
$__System.registerDynamic('6f', ['62', '63', '70'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1 = $__require('62');
    var Observable_1 = $__require('63');
    var iterator_1 = $__require('70');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var IteratorObservable = function (_super) {
        __extends(IteratorObservable, _super);
        function IteratorObservable(iterator, scheduler) {
            _super.call(this);
            this.scheduler = scheduler;
            if (iterator == null) {
                throw new Error('iterator cannot be null.');
            }
            this.iterator = getIterator(iterator);
        }
        IteratorObservable.create = function (iterator, scheduler) {
            return new IteratorObservable(iterator, scheduler);
        };
        IteratorObservable.dispatch = function (state) {
            var index = state.index,
                hasError = state.hasError,
                iterator = state.iterator,
                subscriber = state.subscriber;
            if (hasError) {
                subscriber.error(state.error);
                return;
            }
            var result = iterator.next();
            if (result.done) {
                subscriber.complete();
                return;
            }
            subscriber.next(result.value);
            state.index = index + 1;
            if (subscriber.closed) {
                return;
            }
            this.schedule(state);
        };
        IteratorObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var _a = this,
                iterator = _a.iterator,
                scheduler = _a.scheduler;
            if (scheduler) {
                return scheduler.schedule(IteratorObservable.dispatch, 0, {
                    index: index, iterator: iterator, subscriber: subscriber
                });
            } else {
                do {
                    var result = iterator.next();
                    if (result.done) {
                        subscriber.complete();
                        break;
                    } else {
                        subscriber.next(result.value);
                    }
                    if (subscriber.closed) {
                        break;
                    }
                } while (true);
            }
        };
        return IteratorObservable;
    }(Observable_1.Observable);
    exports.IteratorObservable = IteratorObservable;
    var StringIterator = function () {
        function StringIterator(str, idx, len) {
            if (idx === void 0) {
                idx = 0;
            }
            if (len === void 0) {
                len = str.length;
            }
            this.str = str;
            this.idx = idx;
            this.len = len;
        }
        StringIterator.prototype[iterator_1.$$iterator] = function () {
            return this;
        };
        StringIterator.prototype.next = function () {
            return this.idx < this.len ? {
                done: false,
                value: this.str.charAt(this.idx++)
            } : {
                done: true,
                value: undefined
            };
        };
        return StringIterator;
    }();
    var ArrayIterator = function () {
        function ArrayIterator(arr, idx, len) {
            if (idx === void 0) {
                idx = 0;
            }
            if (len === void 0) {
                len = toLength(arr);
            }
            this.arr = arr;
            this.idx = idx;
            this.len = len;
        }
        ArrayIterator.prototype[iterator_1.$$iterator] = function () {
            return this;
        };
        ArrayIterator.prototype.next = function () {
            return this.idx < this.len ? {
                done: false,
                value: this.arr[this.idx++]
            } : {
                done: true,
                value: undefined
            };
        };
        return ArrayIterator;
    }();
    function getIterator(obj) {
        var i = obj[iterator_1.$$iterator];
        if (!i && typeof obj === 'string') {
            return new StringIterator(obj);
        }
        if (!i && obj.length !== undefined) {
            return new ArrayIterator(obj);
        }
        if (!i) {
            throw new TypeError('object is not iterable');
        }
        return obj[iterator_1.$$iterator]();
    }
    var maxSafeInteger = Math.pow(2, 53) - 1;
    function toLength(o) {
        var len = +o.length;
        if (isNaN(len)) {
            return 0;
        }
        if (len === 0 || !numberIsFinite(len)) {
            return len;
        }
        len = sign(len) * Math.floor(Math.abs(len));
        if (len <= 0) {
            return 0;
        }
        if (len > maxSafeInteger) {
            return maxSafeInteger;
        }
        return len;
    }
    function numberIsFinite(value) {
        return typeof value === 'number' && root_1.root.isFinite(value);
    }
    function sign(value) {
        var valueAsNumber = +value;
        if (valueAsNumber === 0) {
            return valueAsNumber;
        }
        if (isNaN(valueAsNumber)) {
            return valueAsNumber;
        }
        return valueAsNumber < 0 ? -1 : 1;
    }
    

    return module.exports;
});
$__System.registerDynamic('71', ['63', '72', '73'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('63');
    var ScalarObservable_1 = $__require('72');
    var EmptyObservable_1 = $__require('73');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ArrayLikeObservable = function (_super) {
        __extends(ArrayLikeObservable, _super);
        function ArrayLikeObservable(arrayLike, scheduler) {
            _super.call(this);
            this.arrayLike = arrayLike;
            this.scheduler = scheduler;
            if (!scheduler && arrayLike.length === 1) {
                this._isScalar = true;
                this.value = arrayLike[0];
            }
        }
        ArrayLikeObservable.create = function (arrayLike, scheduler) {
            var length = arrayLike.length;
            if (length === 0) {
                return new EmptyObservable_1.EmptyObservable();
            } else if (length === 1) {
                return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
            } else {
                return new ArrayLikeObservable(arrayLike, scheduler);
            }
        };
        ArrayLikeObservable.dispatch = function (state) {
            var arrayLike = state.arrayLike,
                index = state.index,
                length = state.length,
                subscriber = state.subscriber;
            if (subscriber.closed) {
                return;
            }
            if (index >= length) {
                subscriber.complete();
                return;
            }
            subscriber.next(arrayLike[index]);
            state.index = index + 1;
            this.schedule(state);
        };
        ArrayLikeObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var _a = this,
                arrayLike = _a.arrayLike,
                scheduler = _a.scheduler;
            var length = arrayLike.length;
            if (scheduler) {
                return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
                    arrayLike: arrayLike, index: index, length: length, subscriber: subscriber
                });
            } else {
                for (var i = 0; i < length && !subscriber.closed; i++) {
                    subscriber.next(arrayLike[i]);
                }
                subscriber.complete();
            }
        };
        return ArrayLikeObservable;
    }(Observable_1.Observable);
    exports.ArrayLikeObservable = ArrayLikeObservable;
    

    return module.exports;
});
$__System.registerDynamic('74', ['63'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var Observable_1 = $__require('63');
    /**
     * Represents a push-based event or value that an {@link Observable} can emit.
     * This class is particularly useful for operators that manage notifications,
     * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
     * others. Besides wrapping the actual delivered value, it also annotates it
     * with metadata of, for instance, what type of push message it is (`next`,
     * `error`, or `complete`).
     *
     * @see {@link materialize}
     * @see {@link dematerialize}
     * @see {@link observeOn}
     *
     * @class Notification<T>
     */
    var Notification = function () {
        function Notification(kind, value, exception) {
            this.kind = kind;
            this.value = value;
            this.exception = exception;
            this.hasValue = kind === 'N';
        }
        /**
         * Delivers to the given `observer` the value wrapped by this Notification.
         * @param {Observer} observer
         * @return
         */
        Notification.prototype.observe = function (observer) {
            switch (this.kind) {
                case 'N':
                    return observer.next && observer.next(this.value);
                case 'E':
                    return observer.error && observer.error(this.exception);
                case 'C':
                    return observer.complete && observer.complete();
            }
        };
        /**
         * Given some {@link Observer} callbacks, deliver the value represented by the
         * current Notification to the correctly corresponding callback.
         * @param {function(value: T): void} next An Observer `next` callback.
         * @param {function(err: any): void} [error] An Observer `error` callback.
         * @param {function(): void} [complete] An Observer `complete` callback.
         * @return {any}
         */
        Notification.prototype.do = function (next, error, complete) {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return next && next(this.value);
                case 'E':
                    return error && error(this.exception);
                case 'C':
                    return complete && complete();
            }
        };
        /**
         * Takes an Observer or its individual callback functions, and calls `observe`
         * or `do` methods accordingly.
         * @param {Observer|function(value: T): void} nextOrObserver An Observer or
         * the `next` callback.
         * @param {function(err: any): void} [error] An Observer `error` callback.
         * @param {function(): void} [complete] An Observer `complete` callback.
         * @return {any}
         */
        Notification.prototype.accept = function (nextOrObserver, error, complete) {
            if (nextOrObserver && typeof nextOrObserver.next === 'function') {
                return this.observe(nextOrObserver);
            } else {
                return this.do(nextOrObserver, error, complete);
            }
        };
        /**
         * Returns a simple Observable that just delivers the notification represented
         * by this Notification instance.
         * @return {any}
         */
        Notification.prototype.toObservable = function () {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return Observable_1.Observable.of(this.value);
                case 'E':
                    return Observable_1.Observable.throw(this.exception);
                case 'C':
                    return Observable_1.Observable.empty();
            }
            throw new Error('unexpected notification kind value');
        };
        /**
         * A shortcut to create a Notification instance of the type `next` from a
         * given value.
         * @param {T} value The `next` value.
         * @return {Notification<T>} The "next" Notification representing the
         * argument.
         */
        Notification.createNext = function (value) {
            if (typeof value !== 'undefined') {
                return new Notification('N', value);
            }
            return this.undefinedValueNotification;
        };
        /**
         * A shortcut to create a Notification instance of the type `error` from a
         * given error.
         * @param {any} [err] The `error` exception.
         * @return {Notification<T>} The "error" Notification representing the
         * argument.
         */
        Notification.createError = function (err) {
            return new Notification('E', undefined, err);
        };
        /**
         * A shortcut to create a Notification instance of the type `complete`.
         * @return {Notification<any>} The valueless "complete" Notification.
         */
        Notification.createComplete = function () {
            return this.completeNotification;
        };
        Notification.completeNotification = new Notification('C');
        Notification.undefinedValueNotification = new Notification('N', undefined);
        return Notification;
    }();
    exports.Notification = Notification;
    

    return module.exports;
});
$__System.registerDynamic('75', ['76', '74'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('76');
    var Notification_1 = $__require('74');
    /**
     * @see {@link Notification}
     *
     * @param scheduler
     * @param delay
     * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
     * @method observeOn
     * @owner Observable
     */
    function observeOn(scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return this.lift(new ObserveOnOperator(scheduler, delay));
    }
    exports.observeOn = observeOn;
    var ObserveOnOperator = function () {
        function ObserveOnOperator(scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            this.scheduler = scheduler;
            this.delay = delay;
        }
        ObserveOnOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
        };
        return ObserveOnOperator;
    }();
    exports.ObserveOnOperator = ObserveOnOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ObserveOnSubscriber = function (_super) {
        __extends(ObserveOnSubscriber, _super);
        function ObserveOnSubscriber(destination, scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            _super.call(this, destination);
            this.scheduler = scheduler;
            this.delay = delay;
        }
        ObserveOnSubscriber.dispatch = function (arg) {
            var notification = arg.notification,
                destination = arg.destination;
            notification.observe(destination);
        };
        ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
            this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
        };
        ObserveOnSubscriber.prototype._next = function (value) {
            this.scheduleMessage(Notification_1.Notification.createNext(value));
        };
        ObserveOnSubscriber.prototype._error = function (err) {
            this.scheduleMessage(Notification_1.Notification.createError(err));
        };
        ObserveOnSubscriber.prototype._complete = function () {
            this.scheduleMessage(Notification_1.Notification.createComplete());
        };
        return ObserveOnSubscriber;
    }(Subscriber_1.Subscriber);
    exports.ObserveOnSubscriber = ObserveOnSubscriber;
    var ObserveOnMessage = function () {
        function ObserveOnMessage(notification, destination) {
            this.notification = notification;
            this.destination = destination;
        }
        return ObserveOnMessage;
    }();
    exports.ObserveOnMessage = ObserveOnMessage;
    

    return module.exports;
});
$__System.registerDynamic('77', ['78', '79', '7a', '6f', '7b', '71', '70', '63', '75', '7c'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var isArray_1 = $__require('78');
    var isPromise_1 = $__require('79');
    var PromiseObservable_1 = $__require('7a');
    var IteratorObservable_1 = $__require('6f');
    var ArrayObservable_1 = $__require('7b');
    var ArrayLikeObservable_1 = $__require('71');
    var iterator_1 = $__require('70');
    var Observable_1 = $__require('63');
    var observeOn_1 = $__require('75');
    var observable_1 = $__require('7c');
    var isArrayLike = function (x) {
        return x && typeof x.length === 'number';
    };
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var FromObservable = function (_super) {
        __extends(FromObservable, _super);
        function FromObservable(ish, scheduler) {
            _super.call(this, null);
            this.ish = ish;
            this.scheduler = scheduler;
        }
        /**
         * Creates an Observable from an Array, an array-like object, a Promise, an
         * iterable object, or an Observable-like object.
         *
         * <span class="informal">Converts almost anything to an Observable.</span>
         *
         * <img src="./img/from.png" width="100%">
         *
         * Convert various other objects and data types into Observables. `from`
         * converts a Promise or an array-like or an
         * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)
         * object into an Observable that emits the items in that promise or array or
         * iterable. A String, in this context, is treated as an array of characters.
         * Observable-like objects (contains a function named with the ES2015 Symbol
         * for Observable) can also be converted through this operator.
         *
         * @example <caption>Converts an array to an Observable</caption>
         * var array = [10, 20, 30];
         * var result = Rx.Observable.from(array);
         * result.subscribe(x => console.log(x));
         *
         * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>
         * function* generateDoubles(seed) {
         *   var i = seed;
         *   while (true) {
         *     yield i;
         *     i = 2 * i; // double it
         *   }
         * }
         *
         * var iterator = generateDoubles(3);
         * var result = Rx.Observable.from(iterator).take(10);
         * result.subscribe(x => console.log(x));
         *
         * @see {@link create}
         * @see {@link fromEvent}
         * @see {@link fromEventPattern}
         * @see {@link fromPromise}
         *
         * @param {ObservableInput<T>} ish A subscribable object, a Promise, an
         * Observable-like, an Array, an iterable or an array-like object to be
         * converted.
         * @param {Scheduler} [scheduler] The scheduler on which to schedule the
         * emissions of values.
         * @return {Observable<T>} The Observable whose values are originally from the
         * input object that was converted.
         * @static true
         * @name from
         * @owner Observable
         */
        FromObservable.create = function (ish, scheduler) {
            if (ish != null) {
                if (typeof ish[observable_1.$$observable] === 'function') {
                    if (ish instanceof Observable_1.Observable && !scheduler) {
                        return ish;
                    }
                    return new FromObservable(ish, scheduler);
                } else if (isArray_1.isArray(ish)) {
                    return new ArrayObservable_1.ArrayObservable(ish, scheduler);
                } else if (isPromise_1.isPromise(ish)) {
                    return new PromiseObservable_1.PromiseObservable(ish, scheduler);
                } else if (typeof ish[iterator_1.$$iterator] === 'function' || typeof ish === 'string') {
                    return new IteratorObservable_1.IteratorObservable(ish, scheduler);
                } else if (isArrayLike(ish)) {
                    return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
                }
            }
            throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
        };
        FromObservable.prototype._subscribe = function (subscriber) {
            var ish = this.ish;
            var scheduler = this.scheduler;
            if (scheduler == null) {
                return ish[observable_1.$$observable]().subscribe(subscriber);
            } else {
                return ish[observable_1.$$observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
            }
        };
        return FromObservable;
    }(Observable_1.Observable);
    exports.FromObservable = FromObservable;
    

    return module.exports;
});
$__System.registerDynamic("7d", ["77"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var FromObservable_1 = $__require("77");
  exports.from = FromObservable_1.FromObservable.create;
  

  return module.exports;
});
$__System.registerDynamic("72", ["63"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require("63");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ScalarObservable = function (_super) {
        __extends(ScalarObservable, _super);
        function ScalarObservable(value, scheduler) {
            _super.call(this);
            this.value = value;
            this.scheduler = scheduler;
            this._isScalar = true;
            if (scheduler) {
                this._isScalar = false;
            }
        }
        ScalarObservable.create = function (value, scheduler) {
            return new ScalarObservable(value, scheduler);
        };
        ScalarObservable.dispatch = function (state) {
            var done = state.done,
                value = state.value,
                subscriber = state.subscriber;
            if (done) {
                subscriber.complete();
                return;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                return;
            }
            state.done = true;
            this.schedule(state);
        };
        ScalarObservable.prototype._subscribe = function (subscriber) {
            var value = this.value;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ScalarObservable.dispatch, 0, {
                    done: false, value: value, subscriber: subscriber
                });
            } else {
                subscriber.next(value);
                if (!subscriber.closed) {
                    subscriber.complete();
                }
            }
        };
        return ScalarObservable;
    }(Observable_1.Observable);
    exports.ScalarObservable = ScalarObservable;
    

    return module.exports;
});
$__System.registerDynamic("73", ["63"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require("63");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var EmptyObservable = function (_super) {
        __extends(EmptyObservable, _super);
        function EmptyObservable(scheduler) {
            _super.call(this);
            this.scheduler = scheduler;
        }
        /**
         * Creates an Observable that emits no items to the Observer and immediately
         * emits a complete notification.
         *
         * <span class="informal">Just emits 'complete', and nothing else.
         * </span>
         *
         * <img src="./img/empty.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that only
         * emits the complete notification. It can be used for composing with other
         * Observables, such as in a {@link mergeMap}.
         *
         * @example <caption>Emit the number 7, then complete.</caption>
         * var result = Rx.Observable.empty().startWith(7);
         * result.subscribe(x => console.log(x));
         *
         * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
         * var interval = Rx.Observable.interval(1000);
         * var result = interval.mergeMap(x =>
         *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
         * );
         * result.subscribe(x => console.log(x));
         *
         * @see {@link create}
         * @see {@link never}
         * @see {@link of}
         * @see {@link throw}
         *
         * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
         * the emission of the complete notification.
         * @return {Observable} An "empty" Observable: emits only the complete
         * notification.
         * @static true
         * @name empty
         * @owner Observable
         */
        EmptyObservable.create = function (scheduler) {
            return new EmptyObservable(scheduler);
        };
        EmptyObservable.dispatch = function (arg) {
            var subscriber = arg.subscriber;
            subscriber.complete();
        };
        EmptyObservable.prototype._subscribe = function (subscriber) {
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
            } else {
                subscriber.complete();
            }
        };
        return EmptyObservable;
    }(Observable_1.Observable);
    exports.EmptyObservable = EmptyObservable;
    

    return module.exports;
});
$__System.registerDynamic("7e", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isScheduler(value) {
        return value && typeof value.schedule === 'function';
    }
    exports.isScheduler = isScheduler;
    

    return module.exports;
});
$__System.registerDynamic('7b', ['63', '72', '73', '7e'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('63');
    var ScalarObservable_1 = $__require('72');
    var EmptyObservable_1 = $__require('73');
    var isScheduler_1 = $__require('7e');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var ArrayObservable = function (_super) {
        __extends(ArrayObservable, _super);
        function ArrayObservable(array, scheduler) {
            _super.call(this);
            this.array = array;
            this.scheduler = scheduler;
            if (!scheduler && array.length === 1) {
                this._isScalar = true;
                this.value = array[0];
            }
        }
        ArrayObservable.create = function (array, scheduler) {
            return new ArrayObservable(array, scheduler);
        };
        /**
         * Creates an Observable that emits some values you specify as arguments,
         * immediately one after the other, and then emits a complete notification.
         *
         * <span class="informal">Emits the arguments you provide, then completes.
         * </span>
         *
         * <img src="./img/of.png" width="100%">
         *
         * This static operator is useful for creating a simple Observable that only
         * emits the arguments given, and the complete notification thereafter. It can
         * be used for composing with other Observables, such as with {@link concat}.
         * By default, it uses a `null` Scheduler, which means the `next`
         * notifications are sent synchronously, although with a different Scheduler
         * it is possible to determine when those notifications will be delivered.
         *
         * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
         * var numbers = Rx.Observable.of(10, 20, 30);
         * var letters = Rx.Observable.of('a', 'b', 'c');
         * var interval = Rx.Observable.interval(1000);
         * var result = numbers.concat(letters).concat(interval);
         * result.subscribe(x => console.log(x));
         *
         * @see {@link create}
         * @see {@link empty}
         * @see {@link never}
         * @see {@link throw}
         *
         * @param {...T} values Arguments that represent `next` values to be emitted.
         * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
         * the emissions of the `next` notifications.
         * @return {Observable<T>} An Observable that emits each given input value.
         * @static true
         * @name of
         * @owner Observable
         */
        ArrayObservable.of = function () {
            var array = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                array[_i - 0] = arguments[_i];
            }
            var scheduler = array[array.length - 1];
            if (isScheduler_1.isScheduler(scheduler)) {
                array.pop();
            } else {
                scheduler = null;
            }
            var len = array.length;
            if (len > 1) {
                return new ArrayObservable(array, scheduler);
            } else if (len === 1) {
                return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
            } else {
                return new EmptyObservable_1.EmptyObservable(scheduler);
            }
        };
        ArrayObservable.dispatch = function (state) {
            var array = state.array,
                index = state.index,
                count = state.count,
                subscriber = state.subscriber;
            if (index >= count) {
                subscriber.complete();
                return;
            }
            subscriber.next(array[index]);
            if (subscriber.closed) {
                return;
            }
            state.index = index + 1;
            this.schedule(state);
        };
        ArrayObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var array = this.array;
            var count = array.length;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ArrayObservable.dispatch, 0, {
                    array: array, index: index, count: count, subscriber: subscriber
                });
            } else {
                for (var i = 0; i < count && !subscriber.closed; i++) {
                    subscriber.next(array[i]);
                }
                subscriber.complete();
            }
        };
        return ArrayObservable;
    }(Observable_1.Observable);
    exports.ArrayObservable = ArrayObservable;
    

    return module.exports;
});
$__System.registerDynamic("7f", ["7b"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var ArrayObservable_1 = $__require("7b");
  exports.of = ArrayObservable_1.ArrayObservable.of;
  

  return module.exports;
});
$__System.registerDynamic("80", ["76"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("76");
    /**
     * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
     * @param {function} predicate a function for determining if an item meets a specified condition.
     * @param {any} [thisArg] optional object to use for `this` in the callback
     * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.
     * @method every
     * @owner Observable
     */
    function every(predicate, thisArg) {
        return this.lift(new EveryOperator(predicate, thisArg, this));
    }
    exports.every = every;
    var EveryOperator = function () {
        function EveryOperator(predicate, thisArg, source) {
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.source = source;
        }
        EveryOperator.prototype.call = function (observer, source) {
            return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
        };
        return EveryOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var EverySubscriber = function (_super) {
        __extends(EverySubscriber, _super);
        function EverySubscriber(destination, predicate, thisArg, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.source = source;
            this.index = 0;
            this.thisArg = thisArg || this;
        }
        EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
            this.destination.next(everyValueMatch);
            this.destination.complete();
        };
        EverySubscriber.prototype._next = function (value) {
            var result = false;
            try {
                result = this.predicate.call(this.thisArg, value, this.index++, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (!result) {
                this.notifyComplete(false);
            }
        };
        EverySubscriber.prototype._complete = function () {
            this.notifyComplete(true);
        };
        return EverySubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('81', ['82', '83'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var subscribeToResult_1 = $__require('82');
    var OuterSubscriber_1 = $__require('83');
    /**
     * Projects each source value to an Observable which is merged in the output
     * Observable.
     *
     * <span class="informal">Maps each value to an Observable, then flattens all of
     * these inner Observables using {@link mergeAll}.</span>
     *
     * <img src="./img/mergeMap.png" width="100%">
     *
     * Returns an Observable that emits items based on applying a function that you
     * supply to each item emitted by the source Observable, where that function
     * returns an Observable, and then merging those resulting Observables and
     * emitting the results of this merger.
     *
     * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
     * var letters = Rx.Observable.of('a', 'b', 'c');
     * var result = letters.mergeMap(x =>
     *   Rx.Observable.interval(1000).map(i => x+i)
     * );
     * result.subscribe(x => console.log(x));
     *
     * @see {@link concatMap}
     * @see {@link exhaustMap}
     * @see {@link merge}
     * @see {@link mergeAll}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     * @see {@link switchMap}
     *
     * @param {function(value: T, ?index: number): Observable} project A function
     * that, when applied to an item emitted by the source Observable, returns an
     * Observable.
     * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
     * A function to produce the value on the output Observable based on the values
     * and the indices of the source (outer) emission and the inner Observable
     * emission. The arguments passed to this function are:
     * - `outerValue`: the value that came from the source
     * - `innerValue`: the value that came from the projected Observable
     * - `outerIndex`: the "index" of the value that came from the source
     * - `innerIndex`: the "index" of the value from the projected Observable
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
     * Observables being subscribed to concurrently.
     * @return {Observable} An Observable that emits the result of applying the
     * projection function (and the optional `resultSelector`) to each item emitted
     * by the source Observable and merging the results of the Observables obtained
     * from this transformation.
     * @method mergeMap
     * @owner Observable
     */
    function mergeMap(project, resultSelector, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
            resultSelector = null;
        }
        return this.lift(new MergeMapOperator(project, resultSelector, concurrent));
    }
    exports.mergeMap = mergeMap;
    var MergeMapOperator = function () {
        function MergeMapOperator(project, resultSelector, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            this.project = project;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
        }
        MergeMapOperator.prototype.call = function (observer, source) {
            return source._subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
        };
        return MergeMapOperator;
    }();
    exports.MergeMapOperator = MergeMapOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MergeMapSubscriber = function (_super) {
        __extends(MergeMapSubscriber, _super);
        function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            _super.call(this, destination);
            this.project = project;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
            this.index = 0;
        }
        MergeMapSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                this._tryNext(value);
            } else {
                this.buffer.push(value);
            }
        };
        MergeMapSubscriber.prototype._tryNext = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.active++;
            this._innerSub(result, value, index);
        };
        MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
            this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
        };
        MergeMapSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
        };
        MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (this.resultSelector) {
                this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
            } else {
                this.destination.next(innerValue);
            }
        };
        MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
            var result;
            try {
                result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            } else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeMapSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.MergeMapSubscriber = MergeMapSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('84', ['76'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('76');
    /**
     * Applies an accumulator function over the source Observable, and returns the
     * accumulated result when the source completes, given an optional seed value.
     *
     * <span class="informal">Combines together all values emitted on the source,
     * using an accumulator function that knows how to join a new source value into
     * the accumulation from the past.</span>
     *
     * <img src="./img/reduce.png" width="100%">
     *
     * Like
     * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),
     * `reduce` applies an `accumulator` function against an accumulation and each
     * value of the source Observable (from the past) to reduce it to a single
     * value, emitted on the output Observable. Note that `reduce` will only emit
     * one value, only when the source Observable completes. It is equivalent to
     * applying operator {@link scan} followed by operator {@link last}.
     *
     * Returns an Observable that applies a specified `accumulator` function to each
     * item emitted by the source Observable. If a `seed` value is specified, then
     * that value will be used as the initial value for the accumulator. If no seed
     * value is specified, the first item of the source is used as the seed.
     *
     * @example <caption>Count the number of click events that happened in 5 seconds</caption>
     * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')
     *   .takeUntil(Rx.Observable.interval(5000));
     * var ones = clicksInFiveSeconds.mapTo(1);
     * var seed = 0;
     * var count = ones.reduce((acc, one) => acc + one, seed);
     * count.subscribe(x => console.log(x));
     *
     * @see {@link count}
     * @see {@link expand}
     * @see {@link mergeScan}
     * @see {@link scan}
     *
     * @param {function(acc: R, value: T): R} accumulator The accumulator function
     * called on each source value.
     * @param {R} [seed] The initial accumulation value.
     * @return {Observable<R>} An observable of the accumulated values.
     * @return {Observable<R>} An Observable that emits a single value that is the
     * result of accumulating the values emitted by the source Observable.
     * @method reduce
     * @owner Observable
     */
    function reduce(accumulator, seed) {
        return this.lift(new ReduceOperator(accumulator, seed));
    }
    exports.reduce = reduce;
    var ReduceOperator = function () {
        function ReduceOperator(accumulator, seed) {
            this.accumulator = accumulator;
            this.seed = seed;
        }
        ReduceOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));
        };
        return ReduceOperator;
    }();
    exports.ReduceOperator = ReduceOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var ReduceSubscriber = function (_super) {
        __extends(ReduceSubscriber, _super);
        function ReduceSubscriber(destination, accumulator, seed) {
            _super.call(this, destination);
            this.accumulator = accumulator;
            this.hasValue = false;
            this.acc = seed;
            this.accumulator = accumulator;
            this.hasSeed = typeof seed !== 'undefined';
        }
        ReduceSubscriber.prototype._next = function (value) {
            if (this.hasValue || (this.hasValue = this.hasSeed)) {
                this._tryReduce(value);
            } else {
                this.acc = value;
                this.hasValue = true;
            }
        };
        ReduceSubscriber.prototype._tryReduce = function (value) {
            var result;
            try {
                result = this.accumulator(this.acc, value);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.acc = result;
        };
        ReduceSubscriber.prototype._complete = function () {
            if (this.hasValue || this.hasSeed) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        };
        return ReduceSubscriber;
    }(Subscriber_1.Subscriber);
    exports.ReduceSubscriber = ReduceSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('85', ['83', '82'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('83');
    var subscribeToResult_1 = $__require('82');
    /**
     * Converts a higher-order Observable into a first-order Observable which
     * concurrently delivers all values that are emitted on the inner Observables.
     *
     * <span class="informal">Flattens an Observable-of-Observables.</span>
     *
     * <img src="./img/mergeAll.png" width="100%">
     *
     * `mergeAll` subscribes to an Observable that emits Observables, also known as
     * a higher-order Observable. Each time it observes one of these emitted inner
     * Observables, it subscribes to that and delivers all the values from the
     * inner Observable on the output Observable. The output Observable only
     * completes once all inner Observables have completed. Any error delivered by
     * a inner Observable will be immediately emitted on the output Observable.
     *
     * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
     * var firstOrder = higherOrder.mergeAll();
     * firstOrder.subscribe(x => console.log(x));
     *
     * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
     * var firstOrder = higherOrder.mergeAll(2);
     * firstOrder.subscribe(x => console.log(x));
     *
     * @see {@link combineAll}
     * @see {@link concatAll}
     * @see {@link exhaust}
     * @see {@link merge}
     * @see {@link mergeMap}
     * @see {@link mergeMapTo}
     * @see {@link mergeScan}
     * @see {@link switch}
     * @see {@link zipAll}
     *
     * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
     * Observables being subscribed to concurrently.
     * @return {Observable} An Observable that emits values coming from all the
     * inner Observables emitted by the source Observable.
     * @method mergeAll
     * @owner Observable
     */
    function mergeAll(concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        return this.lift(new MergeAllOperator(concurrent));
    }
    exports.mergeAll = mergeAll;
    var MergeAllOperator = function () {
        function MergeAllOperator(concurrent) {
            this.concurrent = concurrent;
        }
        MergeAllOperator.prototype.call = function (observer, source) {
            return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));
        };
        return MergeAllOperator;
    }();
    exports.MergeAllOperator = MergeAllOperator;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MergeAllSubscriber = function (_super) {
        __extends(MergeAllSubscriber, _super);
        function MergeAllSubscriber(destination, concurrent) {
            _super.call(this, destination);
            this.concurrent = concurrent;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
        }
        MergeAllSubscriber.prototype._next = function (observable) {
            if (this.active < this.concurrent) {
                this.active++;
                this.add(subscribeToResult_1.subscribeToResult(this, observable));
            } else {
                this.buffer.push(observable);
            }
        };
        MergeAllSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
        };
        MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            } else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeAllSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    exports.MergeAllSubscriber = MergeAllSubscriber;
    

    return module.exports;
});
$__System.registerDynamic("86", ["85"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var mergeAll_1 = $__require("85");
  /**
   * Converts a higher-order Observable into a first-order Observable by
   * concatenating the inner Observables in order.
   *
   * <span class="informal">Flattens an Observable-of-Observables by putting one
   * inner Observable after the other.</span>
   *
   * <img src="./img/concatAll.png" width="100%">
   *
   * Joins every Observable emitted by the source (a higher-order Observable), in
   * a serial fashion. It subscribes to each inner Observable only after the
   * previous inner Observable has completed, and merges all of their values into
   * the returned observable.
   *
   * __Warning:__ If the source Observable emits Observables quickly and
   * endlessly, and the inner Observables it emits generally complete slower than
   * the source emits, you can run into memory issues as the incoming Observables
   * collect in an unbounded buffer.
   *
   * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
   * to `1`.
   *
   * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
   * var clicks = Rx.Observable.fromEvent(document, 'click');
   * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
   * var firstOrder = higherOrder.concatAll();
   * firstOrder.subscribe(x => console.log(x));
   *
   * @see {@link combineAll}
   * @see {@link concat}
   * @see {@link concatMap}
   * @see {@link concatMapTo}
   * @see {@link exhaust}
   * @see {@link mergeAll}
   * @see {@link switch}
   * @see {@link zipAll}
   *
   * @return {Observable} An Observable emitting values from all the inner
   * Observables concatenated.
   * @method concatAll
   * @owner Observable
   */
  function concatAll() {
    return this.lift(new mergeAll_1.MergeAllOperator(1));
  }
  exports.concatAll = concatAll;
  

  return module.exports;
});
$__System.registerDynamic('87', ['76', '88'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('76');
    var EmptyError_1 = $__require('88');
    /**
     * Emits only the first value (or the first value that meets some condition)
     * emitted by the source Observable.
     *
     * <span class="informal">Emits only the first value. Or emits only the first
     * value that passes some test.</span>
     *
     * <img src="./img/first.png" width="100%">
     *
     * If called with no arguments, `first` emits the first value of the source
     * Observable, then completes. If called with a `predicate` function, `first`
     * emits the first value of the source that matches the specified condition. It
     * may also take a `resultSelector` function to produce the output value from
     * the input value, and a `defaultValue` to emit in case the source completes
     * before it is able to emit a valid value. Throws an error if `defaultValue`
     * was not provided and a matching element is not found.
     *
     * @example <caption>Emit only the first click that happens on the DOM</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.first();
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Emits the first click that happens on a DIV</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var result = clicks.first(ev => ev.target.tagName === 'DIV');
     * result.subscribe(x => console.log(x));
     *
     * @see {@link filter}
     * @see {@link find}
     * @see {@link take}
     *
     * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
     * callback if the Observable completes before any `next` notification was sent.
     *
     * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
     * An optional function called with each item to test for condition matching.
     * @param {function(value: T, index: number): R} [resultSelector] A function to
     * produce the value on the output Observable based on the values
     * and the indices of the source Observable. The arguments passed to this
     * function are:
     * - `value`: the value that was emitted on the source.
     * - `index`: the "index" of the value from the source.
     * @param {R} [defaultValue] The default value emitted in case no valid value
     * was found on the source.
     * @return {Observable<T|R>} an Observable of the first item that matches the
     * condition.
     * @method first
     * @owner Observable
     */
    function first(predicate, resultSelector, defaultValue) {
        return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
    }
    exports.first = first;
    var FirstOperator = function () {
        function FirstOperator(predicate, resultSelector, defaultValue, source) {
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
        }
        FirstOperator.prototype.call = function (observer, source) {
            return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
        };
        return FirstOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var FirstSubscriber = function (_super) {
        __extends(FirstSubscriber, _super);
        function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
            this.index = 0;
            this.hasCompleted = false;
        }
        FirstSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this._tryPredicate(value, index);
            } else {
                this._emit(value, index);
            }
        };
        FirstSubscriber.prototype._tryPredicate = function (value, index) {
            var result;
            try {
                result = this.predicate(value, index, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this._emit(value, index);
            }
        };
        FirstSubscriber.prototype._emit = function (value, index) {
            if (this.resultSelector) {
                this._tryResultSelector(value, index);
                return;
            }
            this._emitFinal(value);
        };
        FirstSubscriber.prototype._tryResultSelector = function (value, index) {
            var result;
            try {
                result = this.resultSelector(value, index);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this._emitFinal(result);
        };
        FirstSubscriber.prototype._emitFinal = function (value) {
            var destination = this.destination;
            destination.next(value);
            destination.complete();
            this.hasCompleted = true;
        };
        FirstSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
                destination.next(this.defaultValue);
                destination.complete();
            } else if (!this.hasCompleted) {
                destination.error(new EmptyError_1.EmptyError());
            }
        };
        return FirstSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('7a', ['62', '63'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1 = $__require('62');
    var Observable_1 = $__require('63');
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var PromiseObservable = function (_super) {
        __extends(PromiseObservable, _super);
        function PromiseObservable(promise, scheduler) {
            _super.call(this);
            this.promise = promise;
            this.scheduler = scheduler;
        }
        /**
         * Converts a Promise to an Observable.
         *
         * <span class="informal">Returns an Observable that just emits the Promise's
         * resolved value, then completes.</span>
         *
         * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an
         * Observable. If the Promise resolves with a value, the output Observable
         * emits that resolved value as a `next`, and then completes. If the Promise
         * is rejected, then the output Observable emits the corresponding Error.
         *
         * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>
         * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));
         * result.subscribe(x => console.log(x), e => console.error(e));
         *
         * @see {@link bindCallback}
         * @see {@link from}
         *
         * @param {Promise<T>} promise The promise to be converted.
         * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling
         * the delivery of the resolved value (or the rejection).
         * @return {Observable<T>} An Observable which wraps the Promise.
         * @static true
         * @name fromPromise
         * @owner Observable
         */
        PromiseObservable.create = function (promise, scheduler) {
            return new PromiseObservable(promise, scheduler);
        };
        PromiseObservable.prototype._subscribe = function (subscriber) {
            var _this = this;
            var promise = this.promise;
            var scheduler = this.scheduler;
            if (scheduler == null) {
                if (this._isScalar) {
                    if (!subscriber.closed) {
                        subscriber.next(this.value);
                        subscriber.complete();
                    }
                } else {
                    promise.then(function (value) {
                        _this.value = value;
                        _this._isScalar = true;
                        if (!subscriber.closed) {
                            subscriber.next(value);
                            subscriber.complete();
                        }
                    }, function (err) {
                        if (!subscriber.closed) {
                            subscriber.error(err);
                        }
                    }).then(null, function (err) {
                        // escape the promise trap, throw unhandled errors
                        root_1.root.setTimeout(function () {
                            throw err;
                        });
                    });
                }
            } else {
                if (this._isScalar) {
                    if (!subscriber.closed) {
                        return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
                    }
                } else {
                    promise.then(function (value) {
                        _this.value = value;
                        _this._isScalar = true;
                        if (!subscriber.closed) {
                            subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
                        }
                    }, function (err) {
                        if (!subscriber.closed) {
                            subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
                        }
                    }).then(null, function (err) {
                        // escape the promise trap, throw unhandled errors
                        root_1.root.setTimeout(function () {
                            throw err;
                        });
                    });
                }
            }
        };
        return PromiseObservable;
    }(Observable_1.Observable);
    exports.PromiseObservable = PromiseObservable;
    function dispatchNext(arg) {
        var value = arg.value,
            subscriber = arg.subscriber;
        if (!subscriber.closed) {
            subscriber.next(value);
            subscriber.complete();
        }
    }
    function dispatchError(arg) {
        var err = arg.err,
            subscriber = arg.subscriber;
        if (!subscriber.closed) {
            subscriber.error(err);
        }
    }
    

    return module.exports;
});
$__System.registerDynamic("64", ["7a"], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var PromiseObservable_1 = $__require("7a");
  exports.fromPromise = PromiseObservable_1.PromiseObservable.create;
  

  return module.exports;
});
$__System.registerDynamic('88', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when an Observable or a sequence was queried but has no
     * elements.
     *
     * @see {@link first}
     * @see {@link last}
     * @see {@link single}
     *
     * @class EmptyError
     */
    var EmptyError = function (_super) {
        __extends(EmptyError, _super);
        function EmptyError() {
            var err = _super.call(this, 'no elements in sequence');
            this.name = err.name = 'EmptyError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return EmptyError;
    }(Error);
    exports.EmptyError = EmptyError;
    

    return module.exports;
});
$__System.registerDynamic('89', ['76', '88'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('76');
    var EmptyError_1 = $__require('88');
    /**
     * Returns an Observable that emits only the last item emitted by the source Observable.
     * It optionally takes a predicate function as a parameter, in which case, rather than emitting
     * the last item from the source Observable, the resulting Observable will emit the last item
     * from the source Observable that satisfies the predicate.
     *
     * <img src="./img/last.png" width="100%">
     *
     * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
     * callback if the Observable completes before any `next` notification was sent.
     * @param {function} predicate - the condition any source emitted item has to satisfy.
     * @return {Observable} an Observable that emits only the last item satisfying the given condition
     * from the source, or an NoSuchElementException if no such items are emitted.
     * @throws - Throws if no items that match the predicate are emitted by the source Observable.
     * @method last
     * @owner Observable
     */
    function last(predicate, resultSelector, defaultValue) {
        return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
    }
    exports.last = last;
    var LastOperator = function () {
        function LastOperator(predicate, resultSelector, defaultValue, source) {
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
        }
        LastOperator.prototype.call = function (observer, source) {
            return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
        };
        return LastOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var LastSubscriber = function (_super) {
        __extends(LastSubscriber, _super);
        function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
            this.hasValue = false;
            this.index = 0;
            if (typeof defaultValue !== 'undefined') {
                this.lastValue = defaultValue;
                this.hasValue = true;
            }
        }
        LastSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this._tryPredicate(value, index);
            } else {
                if (this.resultSelector) {
                    this._tryResultSelector(value, index);
                    return;
                }
                this.lastValue = value;
                this.hasValue = true;
            }
        };
        LastSubscriber.prototype._tryPredicate = function (value, index) {
            var result;
            try {
                result = this.predicate(value, index, this.source);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                if (this.resultSelector) {
                    this._tryResultSelector(value, index);
                    return;
                }
                this.lastValue = value;
                this.hasValue = true;
            }
        };
        LastSubscriber.prototype._tryResultSelector = function (value, index) {
            var result;
            try {
                result = this.resultSelector(value, index);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.lastValue = result;
            this.hasValue = true;
        };
        LastSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (this.hasValue) {
                destination.next(this.lastValue);
                destination.complete();
            } else {
                destination.error(new EmptyError_1.EmptyError());
            }
        };
        return LastSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('8a', ['34', '8b'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1 = $__require('34');
    var ObjectUnsubscribedError_1 = $__require('8b');
    /**
     * @class BehaviorSubject<T>
     */
    var BehaviorSubject = function (_super) {
        __extends(BehaviorSubject, _super);
        function BehaviorSubject(_value) {
            _super.call(this);
            this._value = _value;
        }
        Object.defineProperty(BehaviorSubject.prototype, "value", {
            get: function () {
                return this.getValue();
            },
            enumerable: true,
            configurable: true
        });
        BehaviorSubject.prototype._subscribe = function (subscriber) {
            var subscription = _super.prototype._subscribe.call(this, subscriber);
            if (subscription && !subscription.closed) {
                subscriber.next(this._value);
            }
            return subscription;
        };
        BehaviorSubject.prototype.getValue = function () {
            if (this.hasError) {
                throw this.thrownError;
            } else if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            } else {
                return this._value;
            }
        };
        BehaviorSubject.prototype.next = function (value) {
            _super.prototype.next.call(this, this._value = value);
        };
        return BehaviorSubject;
    }(Subject_1.Subject);
    exports.BehaviorSubject = BehaviorSubject;
    

    return module.exports;
});
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('rxjs/Subject'), require('rxjs/observable/from'), require('rxjs/observable/of'), require('rxjs/operator/every'), require('rxjs/operator/map'), require('rxjs/operator/mergeAll'), require('rxjs/operator/mergeMap'), require('rxjs/operator/reduce'), require('rxjs/Observable'), require('rxjs/operator/catch'), require('rxjs/operator/concatAll'), require('rxjs/operator/first'), require('rxjs/util/EmptyError'), require('rxjs/observable/fromPromise'), require('rxjs/operator/last'), require('rxjs/BehaviorSubject')) : typeof define === 'function' && define.amd ? define("d", ["exports", "9", "3", "34", "7d", "7f", "80", "8c", "85", "81", "84", "63", "8d", "86", "87", "88", "64", "89", "8a"], factory) : (factory((global.ng = global.ng || {}, global.ng.router = global.ng.router || {}), global.ng.common, global.ng.core, global.Rx, global.Rx.Observable, global.Rx.Observable, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx.Observable.prototype, global.Rx, global.Rx.Observable, global.Rx.Observable.prototype, global.Rx));
}(this, function(exports, _angular_common, _angular_core, rxjs_Subject, rxjs_observable_from, rxjs_observable_of, rxjs_operator_every, rxjs_operator_map, rxjs_operator_mergeAll, rxjs_operator_mergeMap, rxjs_operator_reduce, rxjs_Observable, rxjs_operator_catch, rxjs_operator_concatAll, rxjs_operator_first, rxjs_util_EmptyError, rxjs_observable_fromPromise, l, rxjs_BehaviorSubject) {
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var PRIMARY_OUTLET = 'primary';
  var NavigationCancelingError = (function(_super) {
    __extends(NavigationCancelingError, _super);
    function NavigationCancelingError(message) {
      _super.call(this, message);
      this.message = message;
      this.stack = (new Error(message)).stack;
    }
    NavigationCancelingError.prototype.toString = function() {
      return this.message;
    };
    return NavigationCancelingError;
  }(Error));
  function shallowEqualArrays(a, b) {
    if (a.length !== b.length)
      return false;
    for (var i = 0; i < a.length; ++i) {
      if (!shallowEqual(a[i], b[i]))
        return false;
    }
    return true;
  }
  function shallowEqual(a, b) {
    var k1 = Object.keys(a);
    var k2 = Object.keys(b);
    if (k1.length != k2.length) {
      return false;
    }
    var key;
    for (var i = 0; i < k1.length; i++) {
      key = k1[i];
      if (a[key] !== b[key]) {
        return false;
      }
    }
    return true;
  }
  function flatten(a) {
    var target = [];
    for (var i = 0; i < a.length; ++i) {
      for (var j = 0; j < a[i].length; ++j) {
        target.push(a[i][j]);
      }
    }
    return target;
  }
  function last(a) {
    return a.length > 0 ? a[a.length - 1] : null;
  }
  function merge(m1, m2) {
    var m = {};
    for (var attr in m1) {
      if (m1.hasOwnProperty(attr)) {
        m[attr] = m1[attr];
      }
    }
    for (var attr in m2) {
      if (m2.hasOwnProperty(attr)) {
        m[attr] = m2[attr];
      }
    }
    return m;
  }
  function forEach(map, callback) {
    for (var prop in map) {
      if (map.hasOwnProperty(prop)) {
        callback(map[prop], prop);
      }
    }
  }
  function waitForMap(obj, fn) {
    var waitFor = [];
    var res = {};
    forEach(obj, function(a, k) {
      if (k === PRIMARY_OUTLET) {
        waitFor.push(rxjs_operator_map.map.call(fn(k, a), function(_) {
          res[k] = _;
          return _;
        }));
      }
    });
    forEach(obj, function(a, k) {
      if (k !== PRIMARY_OUTLET) {
        waitFor.push(rxjs_operator_map.map.call(fn(k, a), function(_) {
          res[k] = _;
          return _;
        }));
      }
    });
    if (waitFor.length > 0) {
      var concatted$ = rxjs_operator_concatAll.concatAll.call(rxjs_observable_of.of.apply(void 0, waitFor));
      var last$ = l.last.call(concatted$);
      return rxjs_operator_map.map.call(last$, function() {
        return res;
      });
    } else {
      return rxjs_observable_of.of(res);
    }
  }
  function andObservables(observables) {
    var merged$ = rxjs_operator_mergeAll.mergeAll.call(observables);
    return rxjs_operator_every.every.call(merged$, function(result) {
      return result === true;
    });
  }
  function wrapIntoObservable(value) {
    if (value instanceof rxjs_Observable.Observable) {
      return value;
    } else if (value instanceof Promise) {
      return rxjs_observable_fromPromise.fromPromise(value);
    } else {
      return rxjs_observable_of.of(value);
    }
  }
  var ROUTES = new _angular_core.OpaqueToken('ROUTES');
  var LoadedRouterConfig = (function() {
    function LoadedRouterConfig(routes, injector, factoryResolver) {
      this.routes = routes;
      this.injector = injector;
      this.factoryResolver = factoryResolver;
    }
    return LoadedRouterConfig;
  }());
  var RouterConfigLoader = (function() {
    function RouterConfigLoader(loader, compiler) {
      this.loader = loader;
      this.compiler = compiler;
    }
    RouterConfigLoader.prototype.load = function(parentInjector, loadChildren) {
      return rxjs_operator_map.map.call(this.loadModuleFactory(loadChildren), function(r) {
        var ref = r.create(parentInjector);
        return new LoadedRouterConfig(flatten(ref.injector.get(ROUTES)), ref.injector, ref.componentFactoryResolver);
      });
    };
    RouterConfigLoader.prototype.loadModuleFactory = function(loadChildren) {
      var _this = this;
      if (typeof loadChildren === 'string') {
        return rxjs_observable_fromPromise.fromPromise(this.loader.load(loadChildren));
      } else {
        var offlineMode_1 = this.compiler instanceof _angular_core.Compiler;
        return rxjs_operator_mergeMap.mergeMap.call(wrapIntoObservable(loadChildren()), function(t) {
          return offlineMode_1 ? rxjs_observable_of.of(t) : rxjs_observable_fromPromise.fromPromise(_this.compiler.compileModuleAsync(t));
        });
      }
    };
    return RouterConfigLoader;
  }());
  function createEmptyUrlTree() {
    return new UrlTree(new UrlSegmentGroup([], {}), {}, null);
  }
  function containsTree(container, containee, exact) {
    if (exact) {
      return equalSegmentGroups(container.root, containee.root);
    } else {
      return containsSegmentGroup(container.root, containee.root);
    }
  }
  function equalSegmentGroups(container, containee) {
    if (!equalPath(container.segments, containee.segments))
      return false;
    if (container.numberOfChildren !== containee.numberOfChildren)
      return false;
    for (var c in containee.children) {
      if (!container.children[c])
        return false;
      if (!equalSegmentGroups(container.children[c], containee.children[c]))
        return false;
    }
    return true;
  }
  function containsSegmentGroup(container, containee) {
    return containsSegmentGroupHelper(container, containee, containee.segments);
  }
  function containsSegmentGroupHelper(container, containee, containeePaths) {
    if (container.segments.length > containeePaths.length) {
      var current = container.segments.slice(0, containeePaths.length);
      if (!equalPath(current, containeePaths))
        return false;
      if (containee.hasChildren())
        return false;
      return true;
    } else if (container.segments.length === containeePaths.length) {
      if (!equalPath(container.segments, containeePaths))
        return false;
      for (var c in containee.children) {
        if (!container.children[c])
          return false;
        if (!containsSegmentGroup(container.children[c], containee.children[c]))
          return false;
      }
      return true;
    } else {
      var current = containeePaths.slice(0, container.segments.length);
      var next = containeePaths.slice(container.segments.length);
      if (!equalPath(container.segments, current))
        return false;
      if (!container.children[PRIMARY_OUTLET])
        return false;
      return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);
    }
  }
  var UrlTree = (function() {
    function UrlTree(root, queryParams, fragment) {
      this.root = root;
      this.queryParams = queryParams;
      this.fragment = fragment;
    }
    UrlTree.prototype.toString = function() {
      return new DefaultUrlSerializer().serialize(this);
    };
    return UrlTree;
  }());
  var UrlSegmentGroup = (function() {
    function UrlSegmentGroup(segments, children) {
      var _this = this;
      this.segments = segments;
      this.children = children;
      this.parent = null;
      forEach(children, function(v, k) {
        return v.parent = _this;
      });
    }
    UrlSegmentGroup.prototype.hasChildren = function() {
      return this.numberOfChildren > 0;
    };
    Object.defineProperty(UrlSegmentGroup.prototype, "numberOfChildren", {
      get: function() {
        return Object.keys(this.children).length;
      },
      enumerable: true,
      configurable: true
    });
    UrlSegmentGroup.prototype.toString = function() {
      return serializePaths(this);
    };
    return UrlSegmentGroup;
  }());
  var UrlSegment = (function() {
    function UrlSegment(path, parameters) {
      this.path = path;
      this.parameters = parameters;
    }
    UrlSegment.prototype.toString = function() {
      return serializePath(this);
    };
    return UrlSegment;
  }());
  function equalPath(a, b) {
    if (a.length !== b.length)
      return false;
    for (var i = 0; i < a.length; ++i) {
      if (a[i].path !== b[i].path)
        return false;
    }
    return true;
  }
  function mapChildrenIntoArray(segment, fn) {
    var res = [];
    forEach(segment.children, function(child, childOutlet) {
      if (childOutlet === PRIMARY_OUTLET) {
        res = res.concat(fn(child, childOutlet));
      }
    });
    forEach(segment.children, function(child, childOutlet) {
      if (childOutlet !== PRIMARY_OUTLET) {
        res = res.concat(fn(child, childOutlet));
      }
    });
    return res;
  }
  var UrlSerializer = (function() {
    function UrlSerializer() {}
    return UrlSerializer;
  }());
  var DefaultUrlSerializer = (function() {
    function DefaultUrlSerializer() {}
    DefaultUrlSerializer.prototype.parse = function(url) {
      var p = new UrlParser(url);
      return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
    };
    DefaultUrlSerializer.prototype.serialize = function(tree) {
      var segment = "/" + serializeSegment(tree.root, true);
      var query = serializeQueryParams(tree.queryParams);
      var fragment = tree.fragment !== null && tree.fragment !== undefined ? "#" + encodeURI(tree.fragment) : '';
      return "" + segment + query + fragment;
    };
    return DefaultUrlSerializer;
  }());
  function serializePaths(segment) {
    return segment.segments.map(function(p) {
      return serializePath(p);
    }).join('/');
  }
  function serializeSegment(segment, root) {
    if (segment.hasChildren() && root) {
      var primary = segment.children[PRIMARY_OUTLET] ? serializeSegment(segment.children[PRIMARY_OUTLET], false) : '';
      var children_1 = [];
      forEach(segment.children, function(v, k) {
        if (k !== PRIMARY_OUTLET) {
          children_1.push(k + ":" + serializeSegment(v, false));
        }
      });
      if (children_1.length > 0) {
        return primary + "(" + children_1.join('//') + ")";
      } else {
        return "" + primary;
      }
    } else if (segment.hasChildren() && !root) {
      var children = mapChildrenIntoArray(segment, function(v, k) {
        if (k === PRIMARY_OUTLET) {
          return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];
        } else {
          return [(k + ":" + serializeSegment(v, false))];
        }
      });
      return serializePaths(segment) + "/(" + children.join('//') + ")";
    } else {
      return serializePaths(segment);
    }
  }
  function encode(s) {
    return encodeURIComponent(s);
  }
  function decode(s) {
    return decodeURIComponent(s);
  }
  function serializePath(path) {
    return "" + encode(path.path) + serializeParams(path.parameters);
  }
  function serializeParams(params) {
    return pairs(params).map(function(p) {
      return (";" + encode(p.first) + "=" + encode(p.second));
    }).join('');
  }
  function serializeQueryParams(params) {
    var strs = pairs(params).map(function(p) {
      return (encode(p.first) + "=" + encode(p.second));
    });
    return strs.length > 0 ? "?" + strs.join("&") : '';
  }
  var Pair = (function() {
    function Pair(first, second) {
      this.first = first;
      this.second = second;
    }
    return Pair;
  }());
  function pairs(obj) {
    var res = [];
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop)) {
        res.push(new Pair(prop, obj[prop]));
      }
    }
    return res;
  }
  var SEGMENT_RE = /^[^\/\(\)\?;=&#]+/;
  function matchSegments(str) {
    SEGMENT_RE.lastIndex = 0;
    var match = str.match(SEGMENT_RE);
    return match ? match[0] : '';
  }
  var QUERY_PARAM_RE = /^[^=\?&#]+/;
  function matchQueryParams(str) {
    QUERY_PARAM_RE.lastIndex = 0;
    var match = str.match(SEGMENT_RE);
    return match ? match[0] : '';
  }
  var QUERY_PARAM_VALUE_RE = /^[^\?&#]+/;
  function matchUrlQueryParamValue(str) {
    QUERY_PARAM_VALUE_RE.lastIndex = 0;
    var match = str.match(QUERY_PARAM_VALUE_RE);
    return match ? match[0] : '';
  }
  var UrlParser = (function() {
    function UrlParser(url) {
      this.url = url;
      this.remaining = url;
    }
    UrlParser.prototype.peekStartsWith = function(str) {
      return this.remaining.startsWith(str);
    };
    UrlParser.prototype.capture = function(str) {
      if (!this.remaining.startsWith(str)) {
        throw new Error("Expected \"" + str + "\".");
      }
      this.remaining = this.remaining.substring(str.length);
    };
    UrlParser.prototype.parseRootSegment = function() {
      if (this.remaining.startsWith('/')) {
        this.capture('/');
      }
      if (this.remaining === '' || this.remaining.startsWith('?') || this.remaining.startsWith('#')) {
        return new UrlSegmentGroup([], {});
      } else {
        return new UrlSegmentGroup([], this.parseChildren());
      }
    };
    UrlParser.prototype.parseChildren = function() {
      if (this.remaining.length == 0) {
        return {};
      }
      if (this.peekStartsWith('/')) {
        this.capture('/');
      }
      var paths = [];
      if (!this.peekStartsWith('(')) {
        paths.push(this.parseSegments());
      }
      while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {
        this.capture('/');
        paths.push(this.parseSegments());
      }
      var children = {};
      if (this.peekStartsWith('/(')) {
        this.capture('/');
        children = this.parseParens(true);
      }
      var res = {};
      if (this.peekStartsWith('(')) {
        res = this.parseParens(false);
      }
      if (paths.length > 0 || Object.keys(children).length > 0) {
        res[PRIMARY_OUTLET] = new UrlSegmentGroup(paths, children);
      }
      return res;
    };
    UrlParser.prototype.parseSegments = function() {
      var path = matchSegments(this.remaining);
      if (path === '' && this.peekStartsWith(';')) {
        throw new Error("Empty path url segment cannot have parameters: '" + this.remaining + "'.");
      }
      this.capture(path);
      var matrixParams = {};
      if (this.peekStartsWith(';')) {
        matrixParams = this.parseMatrixParams();
      }
      return new UrlSegment(decode(path), matrixParams);
    };
    UrlParser.prototype.parseQueryParams = function() {
      var params = {};
      if (this.peekStartsWith('?')) {
        this.capture('?');
        this.parseQueryParam(params);
        while (this.remaining.length > 0 && this.peekStartsWith('&')) {
          this.capture('&');
          this.parseQueryParam(params);
        }
      }
      return params;
    };
    UrlParser.prototype.parseFragment = function() {
      if (this.peekStartsWith('#')) {
        return decodeURI(this.remaining.substring(1));
      } else {
        return null;
      }
    };
    UrlParser.prototype.parseMatrixParams = function() {
      var params = {};
      while (this.remaining.length > 0 && this.peekStartsWith(';')) {
        this.capture(';');
        this.parseParam(params);
      }
      return params;
    };
    UrlParser.prototype.parseParam = function(params) {
      var key = matchSegments(this.remaining);
      if (!key) {
        return;
      }
      this.capture(key);
      var value = '';
      if (this.peekStartsWith('=')) {
        this.capture('=');
        var valueMatch = matchSegments(this.remaining);
        if (valueMatch) {
          value = valueMatch;
          this.capture(value);
        }
      }
      params[decode(key)] = decode(value);
    };
    UrlParser.prototype.parseQueryParam = function(params) {
      var key = matchQueryParams(this.remaining);
      if (!key) {
        return;
      }
      this.capture(key);
      var value = '';
      if (this.peekStartsWith('=')) {
        this.capture('=');
        var valueMatch = matchUrlQueryParamValue(this.remaining);
        if (valueMatch) {
          value = valueMatch;
          this.capture(value);
        }
      }
      params[decode(key)] = decode(value);
    };
    UrlParser.prototype.parseParens = function(allowPrimary) {
      var segments = {};
      this.capture('(');
      while (!this.peekStartsWith(')') && this.remaining.length > 0) {
        var path = matchSegments(this.remaining);
        var next = this.remaining[path.length];
        if (next !== '/' && next !== ')' && next !== ';') {
          throw new Error("Cannot parse url '" + this.url + "'");
        }
        var outletName = void 0;
        if (path.indexOf(':') > -1) {
          outletName = path.substr(0, path.indexOf(':'));
          this.capture(outletName);
          this.capture(':');
        } else if (allowPrimary) {
          outletName = PRIMARY_OUTLET;
        }
        var children = this.parseChildren();
        segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] : new UrlSegmentGroup([], children);
        if (this.peekStartsWith('//')) {
          this.capture('//');
        }
      }
      this.capture(')');
      return segments;
    };
    return UrlParser;
  }());
  var NoMatch = (function() {
    function NoMatch(segmentGroup) {
      if (segmentGroup === void 0) {
        segmentGroup = null;
      }
      this.segmentGroup = segmentGroup;
    }
    return NoMatch;
  }());
  var AbsoluteRedirect = (function() {
    function AbsoluteRedirect(segments) {
      this.segments = segments;
    }
    return AbsoluteRedirect;
  }());
  function noMatch(segmentGroup) {
    return new rxjs_Observable.Observable(function(obs) {
      return obs.error(new NoMatch(segmentGroup));
    });
  }
  function absoluteRedirect(segments) {
    return new rxjs_Observable.Observable(function(obs) {
      return obs.error(new AbsoluteRedirect(segments));
    });
  }
  function canLoadFails(route) {
    return new rxjs_Observable.Observable(function(obs) {
      return obs.error(new NavigationCancelingError("Cannot load children because the guard of the route \"path: '" + route.path + "'\" returned false"));
    });
  }
  function applyRedirects(injector, configLoader, urlTree, config) {
    return new ApplyRedirects(injector, configLoader, urlTree, config).apply();
  }
  var ApplyRedirects = (function() {
    function ApplyRedirects(injector, configLoader, urlTree, config) {
      this.injector = injector;
      this.configLoader = configLoader;
      this.urlTree = urlTree;
      this.config = config;
      this.allowRedirects = true;
    }
    ApplyRedirects.prototype.apply = function() {
      var _this = this;
      var expanded$ = this.expandSegmentGroup(this.injector, this.config, this.urlTree.root, PRIMARY_OUTLET);
      var urlTrees$ = rxjs_operator_map.map.call(expanded$, function(rootSegmentGroup) {
        return _this.createUrlTree(rootSegmentGroup);
      });
      return rxjs_operator_catch._catch.call(urlTrees$, function(e) {
        if (e instanceof AbsoluteRedirect) {
          _this.allowRedirects = false;
          var group = new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = new UrlSegmentGroup(e.segments, {}), _a));
          return _this.match(group);
        } else if (e instanceof NoMatch) {
          throw _this.noMatchError(e);
        } else {
          throw e;
        }
        var _a;
      });
    };
    ApplyRedirects.prototype.match = function(segmentGroup) {
      var _this = this;
      var expanded$ = this.expandSegmentGroup(this.injector, this.config, segmentGroup, PRIMARY_OUTLET);
      var mapped$ = rxjs_operator_map.map.call(expanded$, function(rootSegmentGroup) {
        return _this.createUrlTree(rootSegmentGroup);
      });
      return rxjs_operator_catch._catch.call(mapped$, function(e) {
        if (e instanceof NoMatch) {
          throw _this.noMatchError(e);
        } else {
          throw e;
        }
      });
    };
    ApplyRedirects.prototype.noMatchError = function(e) {
      return new Error("Cannot match any routes: '" + e.segmentGroup + "'");
    };
    ApplyRedirects.prototype.createUrlTree = function(rootCandidate) {
      var root = rootCandidate.segments.length > 0 ? new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = rootCandidate, _a)) : rootCandidate;
      return new UrlTree(root, this.urlTree.queryParams, this.urlTree.fragment);
      var _a;
    };
    ApplyRedirects.prototype.expandSegmentGroup = function(injector, routes, segmentGroup, outlet) {
      if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
        return rxjs_operator_map.map.call(this.expandChildren(injector, routes, segmentGroup), function(children) {
          return new UrlSegmentGroup([], children);
        });
      } else {
        return this.expandSegment(injector, segmentGroup, routes, segmentGroup.segments, outlet, true);
      }
    };
    ApplyRedirects.prototype.expandChildren = function(injector, routes, segmentGroup) {
      var _this = this;
      return waitForMap(segmentGroup.children, function(childOutlet, child) {
        return _this.expandSegmentGroup(injector, routes, child, childOutlet);
      });
    };
    ApplyRedirects.prototype.expandSegment = function(injector, segmentGroup, routes, segments, outlet, allowRedirects) {
      var _this = this;
      var routes$ = rxjs_observable_of.of.apply(void 0, routes);
      var processedRoutes$ = rxjs_operator_map.map.call(routes$, function(r) {
        var expanded$ = _this.expandSegmentAgainstRoute(injector, segmentGroup, routes, r, segments, outlet, allowRedirects);
        return rxjs_operator_catch._catch.call(expanded$, function(e) {
          if (e instanceof NoMatch)
            return rxjs_observable_of.of(null);
          else
            throw e;
        });
      });
      var concattedProcessedRoutes$ = rxjs_operator_concatAll.concatAll.call(processedRoutes$);
      var first$ = rxjs_operator_first.first.call(concattedProcessedRoutes$, function(s) {
        return !!s;
      });
      return rxjs_operator_catch._catch.call(first$, function(e, _) {
        if (e instanceof rxjs_util_EmptyError.EmptyError) {
          throw new NoMatch(segmentGroup);
        } else {
          throw e;
        }
      });
    };
    ApplyRedirects.prototype.expandSegmentAgainstRoute = function(injector, segmentGroup, routes, route, paths, outlet, allowRedirects) {
      if (getOutlet$1(route) !== outlet)
        return noMatch(segmentGroup);
      if (route.redirectTo !== undefined && !(allowRedirects && this.allowRedirects))
        return noMatch(segmentGroup);
      if (route.redirectTo === undefined) {
        return this.matchSegmentAgainstRoute(injector, segmentGroup, route, paths);
      } else {
        return this.expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, paths, outlet);
      }
    };
    ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function(injector, segmentGroup, routes, route, segments, outlet) {
      if (route.path === '**') {
        return this.expandWildCardWithParamsAgainstRouteUsingRedirect(route);
      } else {
        return this.expandRegularSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, segments, outlet);
      }
    };
    ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function(route) {
      var newSegments = applyRedirectCommands([], route.redirectTo, {});
      if (route.redirectTo.startsWith('/')) {
        return absoluteRedirect(newSegments);
      } else {
        return rxjs_observable_of.of(new UrlSegmentGroup(newSegments, {}));
      }
    };
    ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function(injector, segmentGroup, routes, route, segments, outlet) {
      var _a = match(segmentGroup, route, segments),
          matched = _a.matched,
          consumedSegments = _a.consumedSegments,
          lastChild = _a.lastChild,
          positionalParamSegments = _a.positionalParamSegments;
      if (!matched)
        return noMatch(segmentGroup);
      var newSegments = applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments);
      if (route.redirectTo.startsWith('/')) {
        return absoluteRedirect(newSegments);
      } else {
        return this.expandSegment(injector, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);
      }
    };
    ApplyRedirects.prototype.matchSegmentAgainstRoute = function(injector, rawSegmentGroup, route, segments) {
      var _this = this;
      if (route.path === '**') {
        return rxjs_observable_of.of(new UrlSegmentGroup(segments, {}));
      } else {
        var _a = match(rawSegmentGroup, route, segments),
            matched = _a.matched,
            consumedSegments_1 = _a.consumedSegments,
            lastChild = _a.lastChild;
        if (!matched)
          return noMatch(rawSegmentGroup);
        var rawSlicedSegments_1 = segments.slice(lastChild);
        var childConfig$ = this.getChildConfig(injector, route);
        return rxjs_operator_mergeMap.mergeMap.call(childConfig$, function(routerConfig) {
          var childInjector = routerConfig.injector;
          var childConfig = routerConfig.routes;
          var _a = split(rawSegmentGroup, consumedSegments_1, rawSlicedSegments_1, childConfig),
              segmentGroup = _a.segmentGroup,
              slicedSegments = _a.slicedSegments;
          if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
            var expanded$ = _this.expandChildren(childInjector, childConfig, segmentGroup);
            return rxjs_operator_map.map.call(expanded$, function(children) {
              return new UrlSegmentGroup(consumedSegments_1, children);
            });
          } else if (childConfig.length === 0 && slicedSegments.length === 0) {
            return rxjs_observable_of.of(new UrlSegmentGroup(consumedSegments_1, {}));
          } else {
            var expanded$ = _this.expandSegment(childInjector, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);
            return rxjs_operator_map.map.call(expanded$, function(cs) {
              return new UrlSegmentGroup(consumedSegments_1.concat(cs.segments), cs.children);
            });
          }
        });
      }
    };
    ApplyRedirects.prototype.getChildConfig = function(injector, route) {
      var _this = this;
      if (route.children) {
        return rxjs_observable_of.of(new LoadedRouterConfig(route.children, injector, null));
      } else if (route.loadChildren) {
        return rxjs_operator_mergeMap.mergeMap.call(runGuards(injector, route), function(shouldLoad) {
          if (shouldLoad) {
            if (route._loadedConfig) {
              return rxjs_observable_of.of(route._loadedConfig);
            } else {
              return rxjs_operator_map.map.call(_this.configLoader.load(injector, route.loadChildren), function(r) {
                route._loadedConfig = r;
                return r;
              });
            }
          } else {
            return canLoadFails(route);
          }
        });
      } else {
        return rxjs_observable_of.of(new LoadedRouterConfig([], injector, null));
      }
    };
    return ApplyRedirects;
  }());
  function runGuards(injector, route) {
    var canLoad = route.canLoad;
    if (!canLoad || canLoad.length === 0)
      return rxjs_observable_of.of(true);
    var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canLoad), function(c) {
      var guard = injector.get(c);
      if (guard.canLoad) {
        return wrapIntoObservable(guard.canLoad(route));
      } else {
        return wrapIntoObservable(guard(route));
      }
    });
    return andObservables(obs);
  }
  function match(segmentGroup, route, segments) {
    var noMatch = {
      matched: false,
      consumedSegments: [],
      lastChild: 0,
      positionalParamSegments: {}
    };
    if (route.path === '') {
      if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {
        return {
          matched: false,
          consumedSegments: [],
          lastChild: 0,
          positionalParamSegments: {}
        };
      } else {
        return {
          matched: true,
          consumedSegments: [],
          lastChild: 0,
          positionalParamSegments: {}
        };
      }
    }
    var path = route.path;
    var parts = path.split('/');
    var positionalParamSegments = {};
    var consumedSegments = [];
    var currentIndex = 0;
    for (var i = 0; i < parts.length; ++i) {
      if (currentIndex >= segments.length)
        return noMatch;
      var current = segments[currentIndex];
      var p = parts[i];
      var isPosParam = p.startsWith(':');
      if (!isPosParam && p !== current.path)
        return noMatch;
      if (isPosParam) {
        positionalParamSegments[p.substring(1)] = current;
      }
      consumedSegments.push(current);
      currentIndex++;
    }
    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || currentIndex < segments.length)) {
      return {
        matched: false,
        consumedSegments: [],
        lastChild: 0,
        positionalParamSegments: {}
      };
    }
    return {
      matched: true,
      consumedSegments: consumedSegments,
      lastChild: currentIndex,
      positionalParamSegments: positionalParamSegments
    };
  }
  function applyRedirectCommands(segments, redirectTo, posParams) {
    var r = redirectTo.startsWith('/') ? redirectTo.substring(1) : redirectTo;
    if (r === '') {
      return [];
    } else {
      return createSegments(redirectTo, r.split('/'), segments, posParams);
    }
  }
  function createSegments(redirectTo, parts, segments, posParams) {
    return parts.map(function(p) {
      return p.startsWith(':') ? findPosParam(p, posParams, redirectTo) : findOrCreateSegment(p, segments);
    });
  }
  function findPosParam(part, posParams, redirectTo) {
    var paramName = part.substring(1);
    var pos = posParams[paramName];
    if (!pos)
      throw new Error("Cannot redirect to '" + redirectTo + "'. Cannot find '" + part + "'.");
    return pos;
  }
  function findOrCreateSegment(part, segments) {
    var idx = 0;
    for (var _i = 0,
        segments_1 = segments; _i < segments_1.length; _i++) {
      var s = segments_1[_i];
      if (s.path === part) {
        segments.splice(idx);
        return s;
      }
      idx++;
    }
    return new UrlSegment(part, {});
  }
  function split(segmentGroup, consumedSegments, slicedSegments, config) {
    if (slicedSegments.length > 0 && containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {
      var s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
      return {
        segmentGroup: mergeTrivialChildren(s),
        slicedSegments: []
      };
    } else if (slicedSegments.length === 0 && containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {
      var s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
      return {
        segmentGroup: mergeTrivialChildren(s),
        slicedSegments: slicedSegments
      };
    } else {
      return {
        segmentGroup: segmentGroup,
        slicedSegments: slicedSegments
      };
    }
  }
  function mergeTrivialChildren(s) {
    if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
      var c = s.children[PRIMARY_OUTLET];
      return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
    } else {
      return s;
    }
  }
  function addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
    var res = {};
    for (var _i = 0,
        routes_1 = routes; _i < routes_1.length; _i++) {
      var r = routes_1[_i];
      if (emptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {
        res[getOutlet$1(r)] = new UrlSegmentGroup([], {});
      }
    }
    return merge(children, res);
  }
  function createChildrenForEmptySegments(routes, primarySegmentGroup) {
    var res = {};
    res[PRIMARY_OUTLET] = primarySegmentGroup;
    for (var _i = 0,
        routes_2 = routes; _i < routes_2.length; _i++) {
      var r = routes_2[_i];
      if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {
        res[getOutlet$1(r)] = new UrlSegmentGroup([], {});
      }
    }
    return res;
  }
  function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, routes) {
    return routes.filter(function(r) {
      return emptyPathRedirect(segmentGroup, slicedSegments, r) && getOutlet$1(r) !== PRIMARY_OUTLET;
    }).length > 0;
  }
  function containsEmptyPathRedirects(segmentGroup, slicedSegments, routes) {
    return routes.filter(function(r) {
      return emptyPathRedirect(segmentGroup, slicedSegments, r);
    }).length > 0;
  }
  function emptyPathRedirect(segmentGroup, slicedSegments, r) {
    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')
      return false;
    return r.path === '' && r.redirectTo !== undefined;
  }
  function getOutlet$1(route) {
    return route.outlet ? route.outlet : PRIMARY_OUTLET;
  }
  function validateConfig(config) {
    config.forEach(validateNode);
  }
  function validateNode(route) {
    if (Array.isArray(route)) {
      throw new Error("Invalid route configuration: Array cannot be specified");
    }
    if (!!route.redirectTo && !!route.children) {
      throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and children cannot be used together");
    }
    if (!!route.redirectTo && !!route.loadChildren) {
      throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and loadChildren cannot be used together");
    }
    if (!!route.children && !!route.loadChildren) {
      throw new Error("Invalid configuration of route '" + route.path + "': children and loadChildren cannot be used together");
    }
    if (!!route.redirectTo && !!route.component) {
      throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and component cannot be used together");
    }
    if (route.redirectTo === undefined && !route.component && !route.children && !route.loadChildren) {
      throw new Error("Invalid configuration of route '" + route.path + "': one of the following must be provided (component or redirectTo or children or loadChildren)");
    }
    if (route.path === undefined) {
      throw new Error("Invalid route configuration: routes must have path specified");
    }
    if (route.path.startsWith('/')) {
      throw new Error("Invalid route configuration of route '" + route.path + "': path cannot start with a slash");
    }
    if (route.path === '' && route.redirectTo !== undefined && route.pathMatch === undefined) {
      var exp = "The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.";
      throw new Error("Invalid route configuration of route '{path: \"" + route.path + "\", redirectTo: \"" + route.redirectTo + "\"}': please provide 'pathMatch'. " + exp);
    }
    if (route.pathMatch !== undefined && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {
      throw new Error("Invalid configuration of route '" + route.path + "': pathMatch can only be set to 'prefix' or 'full'");
    }
  }
  var Tree = (function() {
    function Tree(root) {
      this._root = root;
    }
    Object.defineProperty(Tree.prototype, "root", {
      get: function() {
        return this._root.value;
      },
      enumerable: true,
      configurable: true
    });
    Tree.prototype.parent = function(t) {
      var p = this.pathFromRoot(t);
      return p.length > 1 ? p[p.length - 2] : null;
    };
    Tree.prototype.children = function(t) {
      var n = findNode(t, this._root);
      return n ? n.children.map(function(t) {
        return t.value;
      }) : [];
    };
    Tree.prototype.firstChild = function(t) {
      var n = findNode(t, this._root);
      return n && n.children.length > 0 ? n.children[0].value : null;
    };
    Tree.prototype.siblings = function(t) {
      var p = findPath(t, this._root, []);
      if (p.length < 2)
        return [];
      var c = p[p.length - 2].children.map(function(c) {
        return c.value;
      });
      return c.filter(function(cc) {
        return cc !== t;
      });
    };
    Tree.prototype.pathFromRoot = function(t) {
      return findPath(t, this._root, []).map(function(s) {
        return s.value;
      });
    };
    return Tree;
  }());
  function findNode(expected, c) {
    if (expected === c.value)
      return c;
    for (var _i = 0,
        _a = c.children; _i < _a.length; _i++) {
      var cc = _a[_i];
      var r = findNode(expected, cc);
      if (r)
        return r;
    }
    return null;
  }
  function findPath(expected, c, collected) {
    collected.push(c);
    if (expected === c.value)
      return collected;
    for (var _i = 0,
        _a = c.children; _i < _a.length; _i++) {
      var cc = _a[_i];
      var cloned = collected.slice(0);
      var r = findPath(expected, cc, cloned);
      if (r.length > 0)
        return r;
    }
    return [];
  }
  var TreeNode = (function() {
    function TreeNode(value, children) {
      this.value = value;
      this.children = children;
    }
    TreeNode.prototype.toString = function() {
      return "TreeNode(" + this.value + ")";
    };
    return TreeNode;
  }());
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var RouterState = (function(_super) {
    __extends$1(RouterState, _super);
    function RouterState(root, snapshot) {
      _super.call(this, root);
      this.snapshot = snapshot;
      setRouterStateSnapshot(this, root);
    }
    RouterState.prototype.toString = function() {
      return this.snapshot.toString();
    };
    return RouterState;
  }(Tree));
  function createEmptyState(urlTree, rootComponent) {
    var snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
    var emptyUrl = new rxjs_BehaviorSubject.BehaviorSubject([new UrlSegment('', {})]);
    var emptyParams = new rxjs_BehaviorSubject.BehaviorSubject({});
    var emptyData = new rxjs_BehaviorSubject.BehaviorSubject({});
    var emptyQueryParams = new rxjs_BehaviorSubject.BehaviorSubject({});
    var fragment = new rxjs_BehaviorSubject.BehaviorSubject('');
    var activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
    activated.snapshot = snapshot.root;
    return new RouterState(new TreeNode(activated, []), snapshot);
  }
  function createEmptyStateSnapshot(urlTree, rootComponent) {
    var emptyParams = {};
    var emptyData = {};
    var emptyQueryParams = {};
    var fragment = '';
    var activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, InheritedResolve.empty);
    return new RouterStateSnapshot('', new TreeNode(activated, []));
  }
  var ActivatedRoute = (function() {
    function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {
      this.url = url;
      this.params = params;
      this.queryParams = queryParams;
      this.fragment = fragment;
      this.data = data;
      this.outlet = outlet;
      this.component = component;
      this._futureSnapshot = futureSnapshot;
    }
    Object.defineProperty(ActivatedRoute.prototype, "routeConfig", {
      get: function() {
        return this._futureSnapshot.routeConfig;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "root", {
      get: function() {
        return this._routerState.root;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "parent", {
      get: function() {
        return this._routerState.parent(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "firstChild", {
      get: function() {
        return this._routerState.firstChild(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "children", {
      get: function() {
        return this._routerState.children(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "pathFromRoot", {
      get: function() {
        return this._routerState.pathFromRoot(this);
      },
      enumerable: true,
      configurable: true
    });
    ActivatedRoute.prototype.toString = function() {
      return this.snapshot ? this.snapshot.toString() : "Future(" + this._futureSnapshot + ")";
    };
    return ActivatedRoute;
  }());
  var InheritedResolve = (function() {
    function InheritedResolve(parent, current) {
      this.parent = parent;
      this.current = current;
      this.resolvedData = {};
    }
    Object.defineProperty(InheritedResolve.prototype, "flattenedResolvedData", {
      get: function() {
        return this.parent ? merge(this.parent.flattenedResolvedData, this.resolvedData) : this.resolvedData;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(InheritedResolve, "empty", {
      get: function() {
        return new InheritedResolve(null, {});
      },
      enumerable: true,
      configurable: true
    });
    return InheritedResolve;
  }());
  var ActivatedRouteSnapshot = (function() {
    function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {
      this.url = url;
      this.params = params;
      this.queryParams = queryParams;
      this.fragment = fragment;
      this.data = data;
      this.outlet = outlet;
      this.component = component;
      this._routeConfig = routeConfig;
      this._urlSegment = urlSegment;
      this._lastPathIndex = lastPathIndex;
      this._resolve = resolve;
    }
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "routeConfig", {
      get: function() {
        return this._routeConfig;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "root", {
      get: function() {
        return this._routerState.root;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "parent", {
      get: function() {
        return this._routerState.parent(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "firstChild", {
      get: function() {
        return this._routerState.firstChild(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "children", {
      get: function() {
        return this._routerState.children(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "pathFromRoot", {
      get: function() {
        return this._routerState.pathFromRoot(this);
      },
      enumerable: true,
      configurable: true
    });
    ActivatedRouteSnapshot.prototype.toString = function() {
      var url = this.url.map(function(s) {
        return s.toString();
      }).join('/');
      var matched = this._routeConfig ? this._routeConfig.path : '';
      return "Route(url:'" + url + "', path:'" + matched + "')";
    };
    return ActivatedRouteSnapshot;
  }());
  var RouterStateSnapshot = (function(_super) {
    __extends$1(RouterStateSnapshot, _super);
    function RouterStateSnapshot(url, root) {
      _super.call(this, root);
      this.url = url;
      setRouterStateSnapshot(this, root);
    }
    RouterStateSnapshot.prototype.toString = function() {
      return serializeNode(this._root);
    };
    return RouterStateSnapshot;
  }(Tree));
  function setRouterStateSnapshot(state, node) {
    node.value._routerState = state;
    node.children.forEach(function(c) {
      return setRouterStateSnapshot(state, c);
    });
  }
  function serializeNode(node) {
    var c = node.children.length > 0 ? " { " + node.children.map(serializeNode).join(", ") + " } " : '';
    return "" + node.value + c;
  }
  function advanceActivatedRoute(route) {
    if (route.snapshot) {
      if (!shallowEqual(route.snapshot.queryParams, route._futureSnapshot.queryParams)) {
        route.queryParams.next(route._futureSnapshot.queryParams);
      }
      if (route.snapshot.fragment !== route._futureSnapshot.fragment) {
        route.fragment.next(route._futureSnapshot.fragment);
      }
      if (!shallowEqual(route.snapshot.params, route._futureSnapshot.params)) {
        route.params.next(route._futureSnapshot.params);
        route.data.next(route._futureSnapshot.data);
      }
      if (!shallowEqualArrays(route.snapshot.url, route._futureSnapshot.url)) {
        route.url.next(route._futureSnapshot.url);
      }
      route.snapshot = route._futureSnapshot;
    } else {
      route.snapshot = route._futureSnapshot;
      route.data.next(route._futureSnapshot.data);
    }
  }
  function createRouterState(curr, prevState) {
    var root = createNode(curr._root, prevState ? prevState._root : undefined);
    return new RouterState(root, curr);
  }
  function createNode(curr, prevState) {
    if (prevState && equalRouteSnapshots(prevState.value.snapshot, curr.value)) {
      var value = prevState.value;
      value._futureSnapshot = curr.value;
      var children = createOrReuseChildren(curr, prevState);
      return new TreeNode(value, children);
    } else {
      var value = createActivatedRoute(curr.value);
      var children = curr.children.map(function(c) {
        return createNode(c);
      });
      return new TreeNode(value, children);
    }
  }
  function createOrReuseChildren(curr, prevState) {
    return curr.children.map(function(child) {
      for (var _i = 0,
          _a = prevState.children; _i < _a.length; _i++) {
        var p = _a[_i];
        if (equalRouteSnapshots(p.value.snapshot, child.value)) {
          return createNode(child, p);
        }
      }
      return createNode(child);
    });
  }
  function createActivatedRoute(c) {
    return new ActivatedRoute(new rxjs_BehaviorSubject.BehaviorSubject(c.url), new rxjs_BehaviorSubject.BehaviorSubject(c.params), new rxjs_BehaviorSubject.BehaviorSubject(c.queryParams), new rxjs_BehaviorSubject.BehaviorSubject(c.fragment), new rxjs_BehaviorSubject.BehaviorSubject(c.data), c.outlet, c.component, c);
  }
  function equalRouteSnapshots(a, b) {
    return a._routeConfig === b._routeConfig;
  }
  function createUrlTree(route, urlTree, commands, queryParams, fragment) {
    if (commands.length === 0) {
      return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);
    }
    var normalizedCommands = normalizeCommands(commands);
    validateCommands(normalizedCommands);
    if (navigateToRoot(normalizedCommands)) {
      return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);
    }
    var startingPosition = findStartingPosition(normalizedCommands, urlTree, route);
    var segmentGroup = startingPosition.processChildren ? updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, normalizedCommands.commands) : updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, normalizedCommands.commands);
    return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);
  }
  function validateCommands(n) {
    if (n.isAbsolute && n.commands.length > 0 && isMatrixParams(n.commands[0])) {
      throw new Error('Root segment cannot have matrix parameters');
    }
    var c = n.commands.filter(function(c) {
      return typeof c === 'object' && c.outlets !== undefined;
    });
    if (c.length > 0 && c[0] !== n.commands[n.commands.length - 1]) {
      throw new Error('{outlets:{}} has to be the last command');
    }
  }
  function isMatrixParams(command) {
    return typeof command === 'object' && command.outlets === undefined && command.segmentPath === undefined;
  }
  function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {
    if (urlTree.root === oldSegmentGroup) {
      return new UrlTree(newSegmentGroup, stringify(queryParams), fragment);
    } else {
      return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), stringify(queryParams), fragment);
    }
  }
  function replaceSegment(current, oldSegment, newSegment) {
    var children = {};
    forEach(current.children, function(c, outletName) {
      if (c === oldSegment) {
        children[outletName] = newSegment;
      } else {
        children[outletName] = replaceSegment(c, oldSegment, newSegment);
      }
    });
    return new UrlSegmentGroup(current.segments, children);
  }
  function navigateToRoot(normalizedChange) {
    return normalizedChange.isAbsolute && normalizedChange.commands.length === 1 && normalizedChange.commands[0] == '/';
  }
  var NormalizedNavigationCommands = (function() {
    function NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, commands) {
      this.isAbsolute = isAbsolute;
      this.numberOfDoubleDots = numberOfDoubleDots;
      this.commands = commands;
    }
    return NormalizedNavigationCommands;
  }());
  function normalizeCommands(commands) {
    if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] == '/') {
      return new NormalizedNavigationCommands(true, 0, commands);
    }
    var numberOfDoubleDots = 0;
    var isAbsolute = false;
    var res = [];
    var _loop_1 = function(i) {
      var c = commands[i];
      if (typeof c === 'object' && c.outlets !== undefined) {
        var r_1 = {};
        forEach(c.outlets, function(commands, name) {
          if (typeof commands === 'string') {
            r_1[name] = commands.split('/');
          } else {
            r_1[name] = commands;
          }
        });
        res.push({outlets: r_1});
        return "continue";
      }
      if (typeof c === 'object' && c.segmentPath !== undefined) {
        res.push(c.segmentPath);
        return "continue";
      }
      if (!(typeof c === 'string')) {
        res.push(c);
        return "continue";
      }
      if (i === 0) {
        var parts = c.split('/');
        for (var j = 0; j < parts.length; ++j) {
          var cc = parts[j];
          if (j == 0 && cc == '.') {} else if (j == 0 && cc == '') {
            isAbsolute = true;
          } else if (cc == '..') {
            numberOfDoubleDots++;
          } else if (cc != '') {
            res.push(cc);
          }
        }
      } else {
        res.push(c);
      }
    };
    for (var i = 0; i < commands.length; ++i) {
      _loop_1(i);
    }
    return new NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, res);
  }
  var Position = (function() {
    function Position(segmentGroup, processChildren, index) {
      this.segmentGroup = segmentGroup;
      this.processChildren = processChildren;
      this.index = index;
    }
    return Position;
  }());
  function findStartingPosition(normalizedChange, urlTree, route) {
    if (normalizedChange.isAbsolute) {
      return new Position(urlTree.root, true, 0);
    } else if (route.snapshot._lastPathIndex === -1) {
      return new Position(route.snapshot._urlSegment, true, 0);
    } else {
      var modifier = isMatrixParams(normalizedChange.commands[0]) ? 0 : 1;
      var index = route.snapshot._lastPathIndex + modifier;
      return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, normalizedChange.numberOfDoubleDots);
    }
  }
  function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
    var g = group;
    var ci = index;
    var dd = numberOfDoubleDots;
    while (dd > ci) {
      dd -= ci;
      g = g.parent;
      if (!g) {
        throw new Error('Invalid number of \'../\'');
      }
      ci = g.segments.length;
    }
    return new Position(g, false, ci - dd);
  }
  function getPath(command) {
    return "" + command;
  }
  function getOutlets(commands) {
    if (!(typeof commands[0] === 'object'))
      return (_a = {}, _a[PRIMARY_OUTLET] = commands, _a);
    if (commands[0].outlets === undefined)
      return (_b = {}, _b[PRIMARY_OUTLET] = commands, _b);
    return commands[0].outlets;
    var _a,
        _b;
  }
  function updateSegmentGroup(segmentGroup, startIndex, commands) {
    if (!segmentGroup) {
      segmentGroup = new UrlSegmentGroup([], {});
    }
    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
      return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
    }
    var m = prefixedWith(segmentGroup, startIndex, commands);
    var slicedCommands = commands.slice(m.lastIndex);
    if (m.match && slicedCommands.length === 0) {
      return new UrlSegmentGroup(segmentGroup.segments, {});
    } else if (m.match && !segmentGroup.hasChildren()) {
      return createNewSegmentGroup(segmentGroup, startIndex, commands);
    } else if (m.match) {
      return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
    } else {
      return createNewSegmentGroup(segmentGroup, startIndex, commands);
    }
  }
  function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
    if (commands.length === 0) {
      return new UrlSegmentGroup(segmentGroup.segments, {});
    } else {
      var outlets_1 = getOutlets(commands);
      var children_1 = {};
      forEach(outlets_1, function(commands, outlet) {
        if (commands !== null) {
          children_1[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);
        }
      });
      forEach(segmentGroup.children, function(child, childOutlet) {
        if (outlets_1[childOutlet] === undefined) {
          children_1[childOutlet] = child;
        }
      });
      return new UrlSegmentGroup(segmentGroup.segments, children_1);
    }
  }
  function prefixedWith(segmentGroup, startIndex, commands) {
    var currentCommandIndex = 0;
    var currentPathIndex = startIndex;
    var noMatch = {
      match: false,
      lastIndex: 0
    };
    while (currentPathIndex < segmentGroup.segments.length) {
      if (currentCommandIndex >= commands.length)
        return noMatch;
      var path = segmentGroup.segments[currentPathIndex];
      var curr = getPath(commands[currentCommandIndex]);
      var next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
      if (curr && next && (typeof next === 'object') && next.outlets === undefined) {
        if (!compare(curr, next, path))
          return noMatch;
        currentCommandIndex += 2;
      } else {
        if (!compare(curr, {}, path))
          return noMatch;
        currentCommandIndex++;
      }
      currentPathIndex++;
    }
    return {
      match: true,
      lastIndex: currentCommandIndex
    };
  }
  function createNewSegmentGroup(segmentGroup, startIndex, commands) {
    var paths = segmentGroup.segments.slice(0, startIndex);
    var i = 0;
    while (i < commands.length) {
      if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {
        var children = createNewSegmentChldren(commands[i].outlets);
        return new UrlSegmentGroup(paths, children);
      }
      if (i === 0 && isMatrixParams(commands[0])) {
        var p = segmentGroup.segments[startIndex];
        paths.push(new UrlSegment(p.path, commands[0]));
        i++;
        continue;
      }
      var curr = getPath(commands[i]);
      var next = (i < commands.length - 1) ? commands[i + 1] : null;
      if (curr && next && isMatrixParams(next)) {
        paths.push(new UrlSegment(curr, stringify(next)));
        i += 2;
      } else {
        paths.push(new UrlSegment(curr, {}));
        i++;
      }
    }
    return new UrlSegmentGroup(paths, {});
  }
  function createNewSegmentChldren(outlets) {
    var children = {};
    forEach(outlets, function(commands, outlet) {
      if (commands !== null) {
        children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
      }
    });
    return children;
  }
  function stringify(params) {
    var res = {};
    forEach(params, function(v, k) {
      return res[k] = "" + v;
    });
    return res;
  }
  function compare(path, params, segment) {
    return path == segment.path && shallowEqual(params, segment.parameters);
  }
  var NoMatch$1 = (function() {
    function NoMatch() {}
    return NoMatch;
  }());
  var InheritedFromParent = (function() {
    function InheritedFromParent(parent, snapshot, params, data, resolve) {
      this.parent = parent;
      this.snapshot = snapshot;
      this.params = params;
      this.data = data;
      this.resolve = resolve;
    }
    Object.defineProperty(InheritedFromParent.prototype, "allParams", {
      get: function() {
        return this.parent ? merge(this.parent.allParams, this.params) : this.params;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(InheritedFromParent.prototype, "allData", {
      get: function() {
        return this.parent ? merge(this.parent.allData, this.data) : this.data;
      },
      enumerable: true,
      configurable: true
    });
    InheritedFromParent.empty = function(snapshot) {
      return new InheritedFromParent(null, snapshot, {}, {}, new InheritedResolve(null, {}));
    };
    return InheritedFromParent;
  }());
  function recognize(rootComponentType, config, urlTree, url) {
    return new Recognizer(rootComponentType, config, urlTree, url).recognize();
  }
  var Recognizer = (function() {
    function Recognizer(rootComponentType, config, urlTree, url) {
      this.rootComponentType = rootComponentType;
      this.config = config;
      this.urlTree = urlTree;
      this.url = url;
    }
    Recognizer.prototype.recognize = function() {
      try {
        var rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config).segmentGroup;
        var children = this.processSegmentGroup(this.config, rootSegmentGroup, InheritedFromParent.empty(null), PRIMARY_OUTLET);
        var root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, InheritedResolve.empty);
        var rootNode = new TreeNode(root, children);
        return rxjs_observable_of.of(new RouterStateSnapshot(this.url, rootNode));
      } catch (e) {
        return new rxjs_Observable.Observable(function(obs) {
          return obs.error(e);
        });
      }
    };
    Recognizer.prototype.processSegmentGroup = function(config, segmentGroup, inherited, outlet) {
      if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
        return this.processChildren(config, segmentGroup, inherited);
      } else {
        return this.processSegment(config, segmentGroup, 0, segmentGroup.segments, inherited, outlet);
      }
    };
    Recognizer.prototype.processChildren = function(config, segmentGroup, inherited) {
      var _this = this;
      var children = mapChildrenIntoArray(segmentGroup, function(child, childOutlet) {
        return _this.processSegmentGroup(config, child, inherited, childOutlet);
      });
      checkOutletNameUniqueness(children);
      sortActivatedRouteSnapshots(children);
      return children;
    };
    Recognizer.prototype.processSegment = function(config, segmentGroup, pathIndex, segments, inherited, outlet) {
      for (var _i = 0,
          config_1 = config; _i < config_1.length; _i++) {
        var r = config_1[_i];
        try {
          return this.processSegmentAgainstRoute(r, segmentGroup, pathIndex, segments, inherited, outlet);
        } catch (e) {
          if (!(e instanceof NoMatch$1))
            throw e;
        }
      }
      throw new NoMatch$1();
    };
    Recognizer.prototype.processSegmentAgainstRoute = function(route, rawSegment, pathIndex, segments, inherited, outlet) {
      if (route.redirectTo)
        throw new NoMatch$1();
      if ((route.outlet ? route.outlet : PRIMARY_OUTLET) !== outlet)
        throw new NoMatch$1();
      var newInheritedResolve = new InheritedResolve(inherited.resolve, getResolve(route));
      if (route.path === '**') {
        var params = segments.length > 0 ? last(segments).parameters : {};
        var snapshot_1 = new ActivatedRouteSnapshot(segments, Object.freeze(merge(inherited.allParams, params)), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, merge(inherited.allData, getData(route)), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, newInheritedResolve);
        return [new TreeNode(snapshot_1, [])];
      }
      var _a = match$1(rawSegment, route, segments, inherited.snapshot),
          consumedSegments = _a.consumedSegments,
          parameters = _a.parameters,
          lastChild = _a.lastChild;
      var rawSlicedSegments = segments.slice(lastChild);
      var childConfig = getChildConfig(route);
      var _b = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig),
          segmentGroup = _b.segmentGroup,
          slicedSegments = _b.slicedSegments;
      var snapshot = new ActivatedRouteSnapshot(consumedSegments, Object.freeze(merge(inherited.allParams, parameters)), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, merge(inherited.allData, getData(route)), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, newInheritedResolve);
      var newInherited = route.component ? InheritedFromParent.empty(snapshot) : new InheritedFromParent(inherited, snapshot, parameters, getData(route), newInheritedResolve);
      if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
        var children = this.processChildren(childConfig, segmentGroup, newInherited);
        return [new TreeNode(snapshot, children)];
      } else if (childConfig.length === 0 && slicedSegments.length === 0) {
        return [new TreeNode(snapshot, [])];
      } else {
        var children = this.processSegment(childConfig, segmentGroup, pathIndex + lastChild, slicedSegments, newInherited, PRIMARY_OUTLET);
        return [new TreeNode(snapshot, children)];
      }
    };
    return Recognizer;
  }());
  function sortActivatedRouteSnapshots(nodes) {
    nodes.sort(function(a, b) {
      if (a.value.outlet === PRIMARY_OUTLET)
        return -1;
      if (b.value.outlet === PRIMARY_OUTLET)
        return 1;
      return a.value.outlet.localeCompare(b.value.outlet);
    });
  }
  function getChildConfig(route) {
    if (route.children) {
      return route.children;
    } else if (route.loadChildren) {
      return route._loadedConfig.routes;
    } else {
      return [];
    }
  }
  function match$1(segmentGroup, route, segments, parent) {
    if (route.path === '') {
      if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {
        throw new NoMatch$1();
      } else {
        var params = parent ? parent.params : {};
        return {
          consumedSegments: [],
          lastChild: 0,
          parameters: params
        };
      }
    }
    var path = route.path;
    var parts = path.split('/');
    var posParameters = {};
    var consumedSegments = [];
    var currentIndex = 0;
    for (var i = 0; i < parts.length; ++i) {
      if (currentIndex >= segments.length)
        throw new NoMatch$1();
      var current = segments[currentIndex];
      var p = parts[i];
      var isPosParam = p.startsWith(':');
      if (!isPosParam && p !== current.path)
        throw new NoMatch$1();
      if (isPosParam) {
        posParameters[p.substring(1)] = current.path;
      }
      consumedSegments.push(current);
      currentIndex++;
    }
    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || currentIndex < segments.length)) {
      throw new NoMatch$1();
    }
    var parameters = merge(posParameters, consumedSegments[consumedSegments.length - 1].parameters);
    return {
      consumedSegments: consumedSegments,
      lastChild: currentIndex,
      parameters: parameters
    };
  }
  function checkOutletNameUniqueness(nodes) {
    var names = {};
    nodes.forEach(function(n) {
      var routeWithSameOutletName = names[n.value.outlet];
      if (routeWithSameOutletName) {
        var p = routeWithSameOutletName.url.map(function(s) {
          return s.toString();
        }).join('/');
        var c = n.value.url.map(function(s) {
          return s.toString();
        }).join('/');
        throw new Error("Two segments cannot have the same outlet name: '" + p + "' and '" + c + "'.");
      }
      names[n.value.outlet] = n.value;
    });
  }
  function getSourceSegmentGroup(segmentGroup) {
    var s = segmentGroup;
    while (s._sourceSegment) {
      s = s._sourceSegment;
    }
    return s;
  }
  function getPathIndexShift(segmentGroup) {
    var s = segmentGroup;
    var res = (s._segmentIndexShift ? s._segmentIndexShift : 0);
    while (s._sourceSegment) {
      s = s._sourceSegment;
      res += (s._segmentIndexShift ? s._segmentIndexShift : 0);
    }
    return res - 1;
  }
  function split$1(segmentGroup, consumedSegments, slicedSegments, config) {
    if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {
      var s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
      s._sourceSegment = segmentGroup;
      s._segmentIndexShift = consumedSegments.length;
      return {
        segmentGroup: s,
        slicedSegments: []
      };
    } else if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {
      var s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
      s._sourceSegment = segmentGroup;
      s._segmentIndexShift = consumedSegments.length;
      return {
        segmentGroup: s,
        slicedSegments: slicedSegments
      };
    } else {
      var s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
      s._sourceSegment = segmentGroup;
      s._segmentIndexShift = consumedSegments.length;
      return {
        segmentGroup: s,
        slicedSegments: slicedSegments
      };
    }
  }
  function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
    var res = {};
    for (var _i = 0,
        routes_1 = routes; _i < routes_1.length; _i++) {
      var r = routes_1[_i];
      if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$2(r)]) {
        var s = new UrlSegmentGroup([], {});
        s._sourceSegment = segmentGroup;
        s._segmentIndexShift = segmentGroup.segments.length;
        res[getOutlet$2(r)] = s;
      }
    }
    return merge(children, res);
  }
  function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {
    var res = {};
    res[PRIMARY_OUTLET] = primarySegment;
    primarySegment._sourceSegment = segmentGroup;
    primarySegment._segmentIndexShift = consumedSegments.length;
    for (var _i = 0,
        routes_2 = routes; _i < routes_2.length; _i++) {
      var r = routes_2[_i];
      if (r.path === '' && getOutlet$2(r) !== PRIMARY_OUTLET) {
        var s = new UrlSegmentGroup([], {});
        s._sourceSegment = segmentGroup;
        s._segmentIndexShift = consumedSegments.length;
        res[getOutlet$2(r)] = s;
      }
    }
    return res;
  }
  function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {
    return routes.filter(function(r) {
      return emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet$2(r) !== PRIMARY_OUTLET;
    }).length > 0;
  }
  function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {
    return routes.filter(function(r) {
      return emptyPathMatch(segmentGroup, slicedSegments, r);
    }).length > 0;
  }
  function emptyPathMatch(segmentGroup, slicedSegments, r) {
    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')
      return false;
    return r.path === '' && r.redirectTo === undefined;
  }
  function getOutlet$2(route) {
    return route.outlet ? route.outlet : PRIMARY_OUTLET;
  }
  function getData(route) {
    return route.data ? route.data : {};
  }
  function getResolve(route) {
    return route.resolve ? route.resolve : {};
  }
  var RouterOutletMap = (function() {
    function RouterOutletMap() {
      this._outlets = {};
    }
    RouterOutletMap.prototype.registerOutlet = function(name, outlet) {
      this._outlets[name] = outlet;
    };
    RouterOutletMap.prototype.removeOutlet = function(name) {
      this._outlets[name] = undefined;
    };
    return RouterOutletMap;
  }());
  var NavigationStart = (function() {
    function NavigationStart(id, url) {
      this.id = id;
      this.url = url;
    }
    NavigationStart.prototype.toString = function() {
      return "NavigationStart(id: " + this.id + ", url: '" + this.url + "')";
    };
    return NavigationStart;
  }());
  var NavigationEnd = (function() {
    function NavigationEnd(id, url, urlAfterRedirects) {
      this.id = id;
      this.url = url;
      this.urlAfterRedirects = urlAfterRedirects;
    }
    NavigationEnd.prototype.toString = function() {
      return "NavigationEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "')";
    };
    return NavigationEnd;
  }());
  var NavigationCancel = (function() {
    function NavigationCancel(id, url, reason) {
      this.id = id;
      this.url = url;
      this.reason = reason;
    }
    NavigationCancel.prototype.toString = function() {
      return "NavigationCancel(id: " + this.id + ", url: '" + this.url + "')";
    };
    return NavigationCancel;
  }());
  var NavigationError = (function() {
    function NavigationError(id, url, error) {
      this.id = id;
      this.url = url;
      this.error = error;
    }
    NavigationError.prototype.toString = function() {
      return "NavigationError(id: " + this.id + ", url: '" + this.url + "', error: " + this.error + ")";
    };
    return NavigationError;
  }());
  var RoutesRecognized = (function() {
    function RoutesRecognized(id, url, urlAfterRedirects, state) {
      this.id = id;
      this.url = url;
      this.urlAfterRedirects = urlAfterRedirects;
      this.state = state;
    }
    RoutesRecognized.prototype.toString = function() {
      return "RoutesRecognized(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
    };
    return RoutesRecognized;
  }());
  function defaultErrorHandler(error) {
    throw error;
  }
  var Router = (function() {
    function Router(rootComponentType, urlSerializer, outletMap, location, injector, loader, compiler, config) {
      this.rootComponentType = rootComponentType;
      this.urlSerializer = urlSerializer;
      this.outletMap = outletMap;
      this.location = location;
      this.injector = injector;
      this.config = config;
      this.navigationId = 0;
      this.errorHandler = defaultErrorHandler;
      this.navigated = false;
      this.resetConfig(config);
      this.routerEvents = new rxjs_Subject.Subject();
      this.currentUrlTree = createEmptyUrlTree();
      this.configLoader = new RouterConfigLoader(loader, compiler);
      this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);
    }
    Router.prototype.initialNavigation = function() {
      this.setUpLocationChangeListener();
      this.navigateByUrl(this.location.path(true), {replaceUrl: true});
    };
    Router.prototype.setUpLocationChangeListener = function() {
      var _this = this;
      this.locationSubscription = this.location.subscribe(Zone.current.wrap(function(change) {
        var tree = _this.urlSerializer.parse(change['url']);
        return _this.currentUrlTree.toString() !== tree.toString() ? _this.scheduleNavigation(tree, {
          skipLocationChange: change['pop'],
          replaceUrl: true
        }) : null;
      }));
    };
    Object.defineProperty(Router.prototype, "routerState", {
      get: function() {
        return this.currentRouterState;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Router.prototype, "url", {
      get: function() {
        return this.serializeUrl(this.currentUrlTree);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Router.prototype, "events", {
      get: function() {
        return this.routerEvents;
      },
      enumerable: true,
      configurable: true
    });
    Router.prototype.resetConfig = function(config) {
      validateConfig(config);
      this.config = config;
    };
    Router.prototype.ngOnDestroy = function() {
      this.dispose();
    };
    Router.prototype.dispose = function() {
      this.locationSubscription.unsubscribe();
    };
    Router.prototype.createUrlTree = function(commands, _a) {
      var _b = _a === void 0 ? {} : _a,
          relativeTo = _b.relativeTo,
          queryParams = _b.queryParams,
          fragment = _b.fragment,
          preserveQueryParams = _b.preserveQueryParams,
          preserveFragment = _b.preserveFragment;
      var a = relativeTo ? relativeTo : this.routerState.root;
      var q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams;
      var f = preserveFragment ? this.currentUrlTree.fragment : fragment;
      return createUrlTree(a, this.currentUrlTree, commands, q, f);
    };
    Router.prototype.navigateByUrl = function(url, extras) {
      if (extras === void 0) {
        extras = {skipLocationChange: false};
      }
      if (url instanceof UrlTree) {
        return this.scheduleNavigation(url, extras);
      } else {
        var urlTree = this.urlSerializer.parse(url);
        return this.scheduleNavigation(urlTree, extras);
      }
    };
    Router.prototype.navigate = function(commands, extras) {
      if (extras === void 0) {
        extras = {skipLocationChange: false};
      }
      return this.scheduleNavigation(this.createUrlTree(commands, extras), extras);
    };
    Router.prototype.serializeUrl = function(url) {
      return this.urlSerializer.serialize(url);
    };
    Router.prototype.parseUrl = function(url) {
      return this.urlSerializer.parse(url);
    };
    Router.prototype.isActive = function(url, exact) {
      if (url instanceof UrlTree) {
        return containsTree(this.currentUrlTree, url, exact);
      } else {
        var urlTree = this.urlSerializer.parse(url);
        return containsTree(this.currentUrlTree, urlTree, exact);
      }
    };
    Router.prototype.scheduleNavigation = function(url, extras) {
      var _this = this;
      var id = ++this.navigationId;
      this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
      return Promise.resolve().then(function(_) {
        return _this.runNavigate(url, extras.skipLocationChange, extras.replaceUrl, id);
      });
    };
    Router.prototype.runNavigate = function(url, shouldPreventPushState, shouldReplaceUrl, id) {
      var _this = this;
      if (id !== this.navigationId) {
        this.location.go(this.urlSerializer.serialize(this.currentUrlTree));
        this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), "Navigation ID " + id + " is not equal to the current navigation id " + this.navigationId));
        return Promise.resolve(false);
      }
      return new Promise(function(resolvePromise, rejectPromise) {
        var state;
        var navigationIsSuccessful;
        var preActivation;
        var appliedUrl;
        var storedState = _this.currentRouterState;
        var storedUrl = _this.currentUrlTree;
        var redirectsApplied$ = applyRedirects(_this.injector, _this.configLoader, url, _this.config);
        var snapshot$ = rxjs_operator_mergeMap.mergeMap.call(redirectsApplied$, function(u) {
          appliedUrl = u;
          return recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl));
        });
        var emitRecognzied$ = rxjs_operator_map.map.call(snapshot$, function(newRouterStateSnapshot) {
          _this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), newRouterStateSnapshot));
          return newRouterStateSnapshot;
        });
        var routerState$ = rxjs_operator_map.map.call(emitRecognzied$, function(routerStateSnapshot) {
          return createRouterState(routerStateSnapshot, _this.currentRouterState);
        });
        var preactivation$ = rxjs_operator_map.map.call(routerState$, function(newState) {
          state = newState;
          preActivation = new PreActivation(state.snapshot, _this.currentRouterState.snapshot, _this.injector);
          preActivation.traverse(_this.outletMap);
        });
        var preactivation2$ = rxjs_operator_mergeMap.mergeMap.call(preactivation$, function() {
          return preActivation.checkGuards();
        });
        var resolveData$ = rxjs_operator_mergeMap.mergeMap.call(preactivation2$, function(shouldActivate) {
          if (shouldActivate) {
            return rxjs_operator_map.map.call(preActivation.resolveData(), function() {
              return shouldActivate;
            });
          } else {
            return rxjs_observable_of.of(shouldActivate);
          }
        });
        resolveData$.forEach(function(shouldActivate) {
          if (!shouldActivate || id !== _this.navigationId) {
            navigationIsSuccessful = false;
            return;
          }
          _this.currentUrlTree = appliedUrl;
          _this.currentRouterState = state;
          if (!shouldPreventPushState) {
            var path = _this.urlSerializer.serialize(appliedUrl);
            if (_this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {
              _this.location.replaceState(path);
            } else {
              _this.location.go(path);
            }
          }
          new ActivateRoutes(state, storedState).activate(_this.outletMap);
          navigationIsSuccessful = true;
        }).then(function() {
          _this.navigated = true;
          if (navigationIsSuccessful) {
            _this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl)));
            resolvePromise(true);
          } else {
            _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), ''));
            resolvePromise(false);
          }
        }, function(e) {
          if (e instanceof NavigationCancelingError) {
            _this.navigated = true;
            _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), e.message));
            resolvePromise(false);
          } else {
            _this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));
            try {
              resolvePromise(_this.errorHandler(e));
            } catch (ee) {
              rejectPromise(ee);
            }
          }
          if (id === _this.navigationId) {
            _this.currentRouterState = storedState;
            _this.currentUrlTree = storedUrl;
            _this.location.replaceState(_this.serializeUrl(storedUrl));
          }
        });
      });
    };
    return Router;
  }());
  var CanActivate = (function() {
    function CanActivate(path) {
      this.path = path;
    }
    Object.defineProperty(CanActivate.prototype, "route", {
      get: function() {
        return this.path[this.path.length - 1];
      },
      enumerable: true,
      configurable: true
    });
    return CanActivate;
  }());
  var CanDeactivate = (function() {
    function CanDeactivate(component, route) {
      this.component = component;
      this.route = route;
    }
    return CanDeactivate;
  }());
  var PreActivation = (function() {
    function PreActivation(future, curr, injector) {
      this.future = future;
      this.curr = curr;
      this.injector = injector;
      this.checks = [];
    }
    PreActivation.prototype.traverse = function(parentOutletMap) {
      var futureRoot = this.future._root;
      var currRoot = this.curr ? this.curr._root : null;
      this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap, [futureRoot.value]);
    };
    PreActivation.prototype.checkGuards = function() {
      var _this = this;
      if (this.checks.length === 0)
        return rxjs_observable_of.of(true);
      var checks$ = rxjs_observable_from.from(this.checks);
      var runningChecks$ = rxjs_operator_map.map.call(checks$, function(s) {
        if (s instanceof CanActivate) {
          return andObservables(rxjs_observable_from.from([_this.runCanActivateChild(s.path), _this.runCanActivate(s.route)]));
        } else if (s instanceof CanDeactivate) {
          var s2 = s;
          return _this.runCanDeactivate(s2.component, s2.route);
        } else {
          throw new Error('Cannot be reached');
        }
      });
      var mergedChecks$ = rxjs_operator_mergeAll.mergeAll.call(runningChecks$);
      return rxjs_operator_every.every.call(mergedChecks$, function(result) {
        return result === true;
      });
    };
    PreActivation.prototype.resolveData = function() {
      var _this = this;
      if (this.checks.length === 0)
        return rxjs_observable_of.of(null);
      var checks$ = rxjs_observable_from.from(this.checks);
      var runningChecks$ = rxjs_operator_mergeMap.mergeMap.call(checks$, function(s) {
        if (s instanceof CanActivate) {
          return _this.runResolve(s.route);
        } else {
          return rxjs_observable_of.of(null);
        }
      });
      return rxjs_operator_reduce.reduce.call(runningChecks$, function(_, __) {
        return _;
      });
    };
    PreActivation.prototype.traverseChildRoutes = function(futureNode, currNode, outletMap, futurePath) {
      var _this = this;
      var prevChildren = nodeChildrenAsMap(currNode);
      futureNode.children.forEach(function(c) {
        _this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap, futurePath.concat([c.value]));
        delete prevChildren[c.value.outlet];
      });
      forEach(prevChildren, function(v, k) {
        return _this.deactivateOutletAndItChildren(v, outletMap._outlets[k]);
      });
    };
    PreActivation.prototype.traverseRoutes = function(futureNode, currNode, parentOutletMap, futurePath) {
      var future = futureNode.value;
      var curr = currNode ? currNode.value : null;
      var outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;
      if (curr && future._routeConfig === curr._routeConfig) {
        if (!shallowEqual(future.params, curr.params)) {
          this.checks.push(new CanDeactivate(outlet.component, curr), new CanActivate(futurePath));
        } else {
          future.data = curr.data;
        }
        if (future.component) {
          this.traverseChildRoutes(futureNode, currNode, outlet ? outlet.outletMap : null, futurePath);
        } else {
          this.traverseChildRoutes(futureNode, currNode, parentOutletMap, futurePath);
        }
      } else {
        if (curr) {
          if (curr.component) {
            this.deactivateOutletAndItChildren(curr, outlet);
          } else {
            this.deactivateOutletMap(parentOutletMap);
          }
        }
        this.checks.push(new CanActivate(futurePath));
        if (future.component) {
          this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null, futurePath);
        } else {
          this.traverseChildRoutes(futureNode, null, parentOutletMap, futurePath);
        }
      }
    };
    PreActivation.prototype.deactivateOutletAndItChildren = function(route, outlet) {
      if (outlet && outlet.isActivated) {
        this.deactivateOutletMap(outlet.outletMap);
        this.checks.push(new CanDeactivate(outlet.component, route));
      }
    };
    PreActivation.prototype.deactivateOutletMap = function(outletMap) {
      var _this = this;
      forEach(outletMap._outlets, function(v) {
        if (v.isActivated) {
          _this.deactivateOutletAndItChildren(v.activatedRoute.snapshot, v);
        }
      });
    };
    PreActivation.prototype.runCanActivate = function(future) {
      var _this = this;
      var canActivate = future._routeConfig ? future._routeConfig.canActivate : null;
      if (!canActivate || canActivate.length === 0)
        return rxjs_observable_of.of(true);
      var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canActivate), function(c) {
        var guard = _this.getToken(c, future);
        if (guard.canActivate) {
          return wrapIntoObservable(guard.canActivate(future, _this.future));
        } else {
          return wrapIntoObservable(guard(future, _this.future));
        }
      });
      return andObservables(obs);
    };
    PreActivation.prototype.runCanActivateChild = function(path) {
      var _this = this;
      var future = path[path.length - 1];
      var canActivateChildGuards = path.slice(0, path.length - 1).reverse().map(function(p) {
        return _this.extractCanActivateChild(p);
      }).filter(function(_) {
        return _ !== null;
      });
      return andObservables(rxjs_operator_map.map.call(rxjs_observable_from.from(canActivateChildGuards), function(d) {
        var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(d.guards), function(c) {
          var guard = _this.getToken(c, c.node);
          if (guard.canActivateChild) {
            return wrapIntoObservable(guard.canActivateChild(future, _this.future));
          } else {
            return wrapIntoObservable(guard(future, _this.future));
          }
        });
        return andObservables(obs);
      }));
    };
    PreActivation.prototype.extractCanActivateChild = function(p) {
      var canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;
      if (!canActivateChild || canActivateChild.length === 0)
        return null;
      return {
        node: p,
        guards: canActivateChild
      };
    };
    PreActivation.prototype.runCanDeactivate = function(component, curr) {
      var _this = this;
      var canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;
      if (!canDeactivate || canDeactivate.length === 0)
        return rxjs_observable_of.of(true);
      var canDeactivate$ = rxjs_operator_map.map.call(rxjs_observable_from.from(canDeactivate), function(c) {
        var guard = _this.getToken(c, curr);
        if (guard.canDeactivate) {
          return wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr));
        } else {
          return wrapIntoObservable(guard(component, curr, _this.curr));
        }
      });
      var merged$ = rxjs_operator_mergeAll.mergeAll.call(canDeactivate$);
      return rxjs_operator_every.every.call(merged$, function(result) {
        return result === true;
      });
    };
    PreActivation.prototype.runResolve = function(future) {
      var resolve = future._resolve;
      return rxjs_operator_map.map.call(this.resolveNode(resolve.current, future), function(resolvedData) {
        resolve.resolvedData = resolvedData;
        future.data = merge(future.data, resolve.flattenedResolvedData);
        return null;
      });
    };
    PreActivation.prototype.resolveNode = function(resolve, future) {
      var _this = this;
      return waitForMap(resolve, function(k, v) {
        var resolver = _this.getToken(v, future);
        return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, _this.future)) : wrapIntoObservable(resolver(future, _this.future));
      });
    };
    PreActivation.prototype.getToken = function(token, snapshot) {
      var config = closestLoadedConfig(snapshot);
      var injector = config ? config.injector : this.injector;
      return injector.get(token);
    };
    return PreActivation;
  }());
  var ActivateRoutes = (function() {
    function ActivateRoutes(futureState, currState) {
      this.futureState = futureState;
      this.currState = currState;
    }
    ActivateRoutes.prototype.activate = function(parentOutletMap) {
      var futureRoot = this.futureState._root;
      var currRoot = this.currState ? this.currState._root : null;
      advanceActivatedRoute(this.futureState.root);
      this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);
    };
    ActivateRoutes.prototype.activateChildRoutes = function(futureNode, currNode, outletMap) {
      var _this = this;
      var prevChildren = nodeChildrenAsMap(currNode);
      futureNode.children.forEach(function(c) {
        _this.activateRoutes(c, prevChildren[c.value.outlet], outletMap);
        delete prevChildren[c.value.outlet];
      });
      forEach(prevChildren, function(v, k) {
        return _this.deactivateOutletAndItChildren(outletMap._outlets[k]);
      });
    };
    ActivateRoutes.prototype.activateRoutes = function(futureNode, currNode, parentOutletMap) {
      var future = futureNode.value;
      var curr = currNode ? currNode.value : null;
      if (future === curr) {
        advanceActivatedRoute(future);
        if (future.component) {
          var outlet = getOutlet(parentOutletMap, futureNode.value);
          this.activateChildRoutes(futureNode, currNode, outlet.outletMap);
        } else {
          this.activateChildRoutes(futureNode, currNode, parentOutletMap);
        }
      } else {
        if (curr) {
          if (curr.component) {
            var outlet = getOutlet(parentOutletMap, futureNode.value);
            this.deactivateOutletAndItChildren(outlet);
          } else {
            this.deactivateOutletMap(parentOutletMap);
          }
        }
        if (future.component) {
          advanceActivatedRoute(future);
          var outlet = getOutlet(parentOutletMap, futureNode.value);
          var outletMap = new RouterOutletMap();
          this.placeComponentIntoOutlet(outletMap, future, outlet);
          this.activateChildRoutes(futureNode, null, outletMap);
        } else {
          advanceActivatedRoute(future);
          this.activateChildRoutes(futureNode, null, parentOutletMap);
        }
      }
    };
    ActivateRoutes.prototype.placeComponentIntoOutlet = function(outletMap, future, outlet) {
      var resolved = [{
        provide: ActivatedRoute,
        useValue: future
      }, {
        provide: RouterOutletMap,
        useValue: outletMap
      }];
      var config = parentLoadedConfig(future.snapshot);
      var loadedFactoryResolver = null;
      var loadedInjector = null;
      if (config) {
        loadedFactoryResolver = config.factoryResolver;
        loadedInjector = config.injector;
        resolved.push({
          provide: _angular_core.ComponentFactoryResolver,
          useValue: loadedFactoryResolver
        });
      }
      outlet.activate(future, loadedFactoryResolver, loadedInjector, _angular_core.ReflectiveInjector.resolve(resolved), outletMap);
    };
    ActivateRoutes.prototype.deactivateOutletAndItChildren = function(outlet) {
      if (outlet && outlet.isActivated) {
        this.deactivateOutletMap(outlet.outletMap);
        outlet.deactivate();
      }
    };
    ActivateRoutes.prototype.deactivateOutletMap = function(outletMap) {
      var _this = this;
      forEach(outletMap._outlets, function(v) {
        return _this.deactivateOutletAndItChildren(v);
      });
    };
    return ActivateRoutes;
  }());
  function parentLoadedConfig(snapshot) {
    var s = snapshot.parent;
    while (s) {
      var c = s._routeConfig;
      if (c && c._loadedConfig)
        return c._loadedConfig;
      if (c && c.component)
        return null;
      s = s.parent;
    }
    return null;
  }
  function closestLoadedConfig(snapshot) {
    if (!snapshot)
      return null;
    var s = snapshot.parent;
    while (s) {
      var c = s._routeConfig;
      if (c && c._loadedConfig)
        return c._loadedConfig;
      s = s.parent;
    }
    return null;
  }
  function nodeChildrenAsMap(node) {
    return node ? node.children.reduce(function(m, c) {
      m[c.value.outlet] = c;
      return m;
    }, {}) : {};
  }
  function getOutlet(outletMap, route) {
    var outlet = outletMap._outlets[route.outlet];
    if (!outlet) {
      var componentName = route.component.name;
      if (route.outlet === PRIMARY_OUTLET) {
        throw new Error("Cannot find primary outlet to load '" + componentName + "'");
      } else {
        throw new Error("Cannot find the outlet " + route.outlet + " to load '" + componentName + "'");
      }
    }
    return outlet;
  }
  var RouterLink = (function() {
    function RouterLink(router, route, locationStrategy) {
      this.router = router;
      this.route = route;
      this.locationStrategy = locationStrategy;
      this.commands = [];
    }
    Object.defineProperty(RouterLink.prototype, "routerLink", {
      set: function(data) {
        if (Array.isArray(data)) {
          this.commands = data;
        } else {
          this.commands = [data];
        }
      },
      enumerable: true,
      configurable: true
    });
    RouterLink.prototype.onClick = function(button, ctrlKey, metaKey) {
      if (button !== 0 || ctrlKey || metaKey) {
        return true;
      }
      this.router.navigateByUrl(this.urlTree);
      return false;
    };
    Object.defineProperty(RouterLink.prototype, "urlTree", {
      get: function() {
        return this.router.createUrlTree(this.commands, {
          relativeTo: this.route,
          queryParams: this.queryParams,
          fragment: this.fragment,
          preserveQueryParams: toBool(this.preserveQueryParams),
          preserveFragment: toBool(this.preserveFragment)
        });
      },
      enumerable: true,
      configurable: true
    });
    RouterLink.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: ':not(a)[routerLink]'}]
    }];
    RouterLink.ctorParameters = [{type: Router}, {type: ActivatedRoute}, {type: _angular_common.LocationStrategy}];
    RouterLink.propDecorators = {
      'queryParams': [{type: _angular_core.Input}],
      'fragment': [{type: _angular_core.Input}],
      'preserveQueryParams': [{type: _angular_core.Input}],
      'preserveFragment': [{type: _angular_core.Input}],
      'routerLink': [{type: _angular_core.Input}],
      'onClick': [{
        type: _angular_core.HostListener,
        args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey']]
      }]
    };
    return RouterLink;
  }());
  var RouterLinkWithHref = (function() {
    function RouterLinkWithHref(router, route, locationStrategy) {
      var _this = this;
      this.router = router;
      this.route = route;
      this.locationStrategy = locationStrategy;
      this.commands = [];
      this.subscription = router.events.subscribe(function(s) {
        if (s instanceof NavigationEnd) {
          _this.updateTargetUrlAndHref();
        }
      });
    }
    Object.defineProperty(RouterLinkWithHref.prototype, "routerLink", {
      set: function(data) {
        if (Array.isArray(data)) {
          this.commands = data;
        } else {
          this.commands = [data];
        }
      },
      enumerable: true,
      configurable: true
    });
    RouterLinkWithHref.prototype.ngOnChanges = function(changes) {
      this.updateTargetUrlAndHref();
    };
    RouterLinkWithHref.prototype.ngOnDestroy = function() {
      this.subscription.unsubscribe();
    };
    RouterLinkWithHref.prototype.onClick = function(button, ctrlKey, metaKey) {
      if (button !== 0 || ctrlKey || metaKey) {
        return true;
      }
      if (typeof this.target === 'string' && this.target != '_self') {
        return true;
      }
      this.router.navigateByUrl(this.urlTree);
      return false;
    };
    RouterLinkWithHref.prototype.updateTargetUrlAndHref = function() {
      this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
    };
    Object.defineProperty(RouterLinkWithHref.prototype, "urlTree", {
      get: function() {
        return this.router.createUrlTree(this.commands, {
          relativeTo: this.route,
          queryParams: this.queryParams,
          fragment: this.fragment,
          preserveQueryParams: toBool(this.preserveQueryParams),
          preserveFragment: toBool(this.preserveFragment)
        });
      },
      enumerable: true,
      configurable: true
    });
    RouterLinkWithHref.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: 'a[routerLink]'}]
    }];
    RouterLinkWithHref.ctorParameters = [{type: Router}, {type: ActivatedRoute}, {type: _angular_common.LocationStrategy}];
    RouterLinkWithHref.propDecorators = {
      'target': [{type: _angular_core.Input}],
      'queryParams': [{type: _angular_core.Input}],
      'fragment': [{type: _angular_core.Input}],
      'routerLinkOptions': [{type: _angular_core.Input}],
      'preserveQueryParams': [{type: _angular_core.Input}],
      'preserveFragment': [{type: _angular_core.Input}],
      'href': [{type: _angular_core.HostBinding}],
      'routerLink': [{type: _angular_core.Input}],
      'onClick': [{
        type: _angular_core.HostListener,
        args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey']]
      }]
    };
    return RouterLinkWithHref;
  }());
  function toBool(s) {
    if (s === '')
      return true;
    return !!s;
  }
  var RouterLinkActive = (function() {
    function RouterLinkActive(router, element, renderer) {
      var _this = this;
      this.router = router;
      this.element = element;
      this.renderer = renderer;
      this.classes = [];
      this.routerLinkActiveOptions = {exact: false};
      this.subscription = router.events.subscribe(function(s) {
        if (s instanceof NavigationEnd) {
          _this.update();
        }
      });
    }
    RouterLinkActive.prototype.ngAfterContentInit = function() {
      var _this = this;
      this.links.changes.subscribe(function(s) {
        return _this.update();
      });
      this.linksWithHrefs.changes.subscribe(function(s) {
        return _this.update();
      });
      this.update();
    };
    Object.defineProperty(RouterLinkActive.prototype, "routerLinkActive", {
      set: function(data) {
        if (Array.isArray(data)) {
          this.classes = data;
        } else {
          this.classes = data.split(' ');
        }
      },
      enumerable: true,
      configurable: true
    });
    RouterLinkActive.prototype.ngOnChanges = function(changes) {
      this.update();
    };
    RouterLinkActive.prototype.ngOnDestroy = function() {
      this.subscription.unsubscribe();
    };
    RouterLinkActive.prototype.update = function() {
      var _this = this;
      if (!this.links || !this.linksWithHrefs || !this.router.navigated)
        return;
      var isActiveLinks = this.reduceList(this.links);
      var isActiveLinksWithHrefs = this.reduceList(this.linksWithHrefs);
      this.classes.forEach(function(c) {
        return _this.renderer.setElementClass(_this.element.nativeElement, c, isActiveLinks || isActiveLinksWithHrefs);
      });
    };
    RouterLinkActive.prototype.reduceList = function(q) {
      var _this = this;
      return q.reduce(function(res, link) {
        return res || _this.router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact);
      }, false);
    };
    RouterLinkActive.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[routerLinkActive]'}]
    }];
    RouterLinkActive.ctorParameters = [{type: Router}, {type: _angular_core.ElementRef}, {type: _angular_core.Renderer}];
    RouterLinkActive.propDecorators = {
      'links': [{
        type: _angular_core.ContentChildren,
        args: [RouterLink, {descendants: true}]
      }],
      'linksWithHrefs': [{
        type: _angular_core.ContentChildren,
        args: [RouterLinkWithHref, {descendants: true}]
      }],
      'routerLinkActiveOptions': [{type: _angular_core.Input}],
      'routerLinkActive': [{type: _angular_core.Input}]
    };
    return RouterLinkActive;
  }());
  var RouterOutlet = (function() {
    function RouterOutlet(parentOutletMap, location, resolver, name) {
      this.parentOutletMap = parentOutletMap;
      this.location = location;
      this.resolver = resolver;
      this.name = name;
      this.activateEvents = new _angular_core.EventEmitter();
      this.deactivateEvents = new _angular_core.EventEmitter();
      parentOutletMap.registerOutlet(name ? name : PRIMARY_OUTLET, this);
    }
    RouterOutlet.prototype.ngOnDestroy = function() {
      this.parentOutletMap.removeOutlet(this.name ? this.name : PRIMARY_OUTLET);
    };
    Object.defineProperty(RouterOutlet.prototype, "isActivated", {
      get: function() {
        return !!this.activated;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RouterOutlet.prototype, "component", {
      get: function() {
        if (!this.activated)
          throw new Error('Outlet is not activated');
        return this.activated.instance;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RouterOutlet.prototype, "activatedRoute", {
      get: function() {
        if (!this.activated)
          throw new Error('Outlet is not activated');
        return this._activatedRoute;
      },
      enumerable: true,
      configurable: true
    });
    RouterOutlet.prototype.deactivate = function() {
      if (this.activated) {
        var c = this.component;
        this.activated.destroy();
        this.activated = null;
        this.deactivateEvents.emit(c);
      }
    };
    RouterOutlet.prototype.activate = function(activatedRoute, loadedResolver, loadedInjector, providers, outletMap) {
      this.outletMap = outletMap;
      this._activatedRoute = activatedRoute;
      var snapshot = activatedRoute._futureSnapshot;
      var component = snapshot._routeConfig.component;
      var factory;
      if (loadedResolver) {
        factory = loadedResolver.resolveComponentFactory(component);
      } else {
        factory = this.resolver.resolveComponentFactory(component);
      }
      var injector = loadedInjector ? loadedInjector : this.location.parentInjector;
      var inj = _angular_core.ReflectiveInjector.fromResolvedProviders(providers, injector);
      this.activated = this.location.createComponent(factory, this.location.length, inj, []);
      this.activated.changeDetectorRef.detectChanges();
      this.activateEvents.emit(this.activated.instance);
    };
    RouterOutlet.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: 'router-outlet'}]
    }];
    RouterOutlet.ctorParameters = [{type: RouterOutletMap}, {type: _angular_core.ViewContainerRef}, {type: _angular_core.ComponentFactoryResolver}, {
      type: undefined,
      decorators: [{
        type: _angular_core.Attribute,
        args: ['name']
      }]
    }];
    RouterOutlet.propDecorators = {
      'activateEvents': [{
        type: _angular_core.Output,
        args: ['activate']
      }],
      'deactivateEvents': [{
        type: _angular_core.Output,
        args: ['deactivate']
      }]
    };
    return RouterOutlet;
  }());
  var ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];
  var ROUTER_CONFIGURATION = new _angular_core.OpaqueToken('ROUTER_CONFIGURATION');
  var ROUTER_FORROOT_GUARD = new _angular_core.OpaqueToken('ROUTER_FORROOT_GUARD');
  var ROUTER_PROVIDERS = [_angular_common.Location, {
    provide: UrlSerializer,
    useClass: DefaultUrlSerializer
  }, {
    provide: Router,
    useFactory: setupRouter,
    deps: [_angular_core.ApplicationRef, UrlSerializer, RouterOutletMap, _angular_common.Location, _angular_core.Injector, _angular_core.NgModuleFactoryLoader, _angular_core.Compiler, ROUTES, ROUTER_CONFIGURATION]
  }, RouterOutletMap, {
    provide: ActivatedRoute,
    useFactory: rootRoute,
    deps: [Router]
  }, {
    provide: _angular_core.NgModuleFactoryLoader,
    useClass: _angular_core.SystemJsNgModuleLoader
  }, {
    provide: ROUTER_CONFIGURATION,
    useValue: {enableTracing: false}
  }];
  var RouterModule = (function() {
    function RouterModule(guard) {}
    RouterModule.forRoot = function(routes, config) {
      return {
        ngModule: RouterModule,
        providers: [ROUTER_PROVIDERS, provideRoutes(routes), {
          provide: ROUTER_FORROOT_GUARD,
          useFactory: provideForRootGuard,
          deps: [[Router, new _angular_core.Optional(), new _angular_core.SkipSelf()]]
        }, {
          provide: ROUTER_CONFIGURATION,
          useValue: config ? config : {}
        }, {
          provide: _angular_common.LocationStrategy,
          useFactory: provideLocationStrategy,
          deps: [_angular_common.PlatformLocation, [new _angular_core.Inject(_angular_common.APP_BASE_HREF), new _angular_core.Optional()], ROUTER_CONFIGURATION]
        }, provideRouterInitializer()]
      };
    };
    RouterModule.forChild = function(routes) {
      return {
        ngModule: RouterModule,
        providers: [provideRoutes(routes)]
      };
    };
    RouterModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{
        declarations: ROUTER_DIRECTIVES,
        exports: ROUTER_DIRECTIVES
      }]
    }];
    RouterModule.ctorParameters = [{
      type: undefined,
      decorators: [{type: _angular_core.Optional}, {
        type: _angular_core.Inject,
        args: [ROUTER_FORROOT_GUARD]
      }]
    }];
    return RouterModule;
  }());
  function provideLocationStrategy(platformLocationStrategy, baseHref, options) {
    if (options === void 0) {
      options = {};
    }
    return options.useHash ? new _angular_common.HashLocationStrategy(platformLocationStrategy, baseHref) : new _angular_common.PathLocationStrategy(platformLocationStrategy, baseHref);
  }
  function provideForRootGuard(router) {
    if (router) {
      throw new Error("RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.");
    }
    return 'guarded';
  }
  function provideRoutes(routes) {
    return [{
      provide: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS,
      multi: true,
      useValue: routes
    }, {
      provide: ROUTES,
      multi: true,
      useValue: routes
    }];
  }
  function setupRouter(ref, urlSerializer, outletMap, location, injector, loader, compiler, config, opts) {
    if (opts === void 0) {
      opts = {};
    }
    if (ref.componentTypes.length == 0) {
      throw new Error('Bootstrap at least one component before injecting Router.');
    }
    var componentType = ref.componentTypes[0];
    var r = new Router(componentType, urlSerializer, outletMap, location, injector, loader, compiler, flatten(config));
    if (opts.errorHandler) {
      r.errorHandler = opts.errorHandler;
    }
    if (opts.enableTracing) {
      r.events.subscribe(function(e) {
        console.group("Router Event: " + e.constructor.name);
        console.log(e.toString());
        console.log(e);
        console.groupEnd();
      });
    }
    return r;
  }
  function rootRoute(router) {
    return router.routerState.root;
  }
  function initialRouterNavigation(router, opts) {
    return function() {
      if (opts.initialNavigation === false) {
        router.setUpLocationChangeListener();
      } else {
        router.initialNavigation();
      }
    };
  }
  function provideRouterInitializer() {
    return {
      provide: _angular_core.APP_BOOTSTRAP_LISTENER,
      multi: true,
      useFactory: initialRouterNavigation,
      deps: [Router, ROUTER_CONFIGURATION]
    };
  }
  var __router_private__ = {
    ROUTER_PROVIDERS: ROUTER_PROVIDERS,
    ROUTES: ROUTES,
    flatten: flatten
  };
  exports.RouterLink = RouterLink;
  exports.RouterLinkWithHref = RouterLinkWithHref;
  exports.RouterLinkActive = RouterLinkActive;
  exports.RouterOutlet = RouterOutlet;
  exports.NavigationCancel = NavigationCancel;
  exports.NavigationEnd = NavigationEnd;
  exports.NavigationError = NavigationError;
  exports.NavigationStart = NavigationStart;
  exports.Router = Router;
  exports.RoutesRecognized = RoutesRecognized;
  exports.RouterModule = RouterModule;
  exports.provideRoutes = provideRoutes;
  exports.RouterOutletMap = RouterOutletMap;
  exports.ActivatedRoute = ActivatedRoute;
  exports.ActivatedRouteSnapshot = ActivatedRouteSnapshot;
  exports.RouterState = RouterState;
  exports.RouterStateSnapshot = RouterStateSnapshot;
  exports.PRIMARY_OUTLET = PRIMARY_OUTLET;
  exports.DefaultUrlSerializer = DefaultUrlSerializer;
  exports.UrlSegment = UrlSegment;
  exports.UrlSerializer = UrlSerializer;
  exports.UrlTree = UrlTree;
  exports.__router_private__ = __router_private__;
}));

})();
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) : typeof define === 'function' && define.amd ? define("9", ["exports", "3"], factory) : (factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}), global.ng.core));
}(this, function(exports, _angular_core) {
  'use strict';
  var globalScope;
  if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
      globalScope = self;
    } else {
      globalScope = global;
    }
  } else {
    globalScope = window;
  }
  var global$1 = globalScope;
  function getTypeNameForDebugging(type) {
    if (type['name']) {
      return type['name'];
    }
    return typeof type;
  }
  var Date = global$1.Date;
  global$1.assert = function assert(condition) {};
  function isPresent(obj) {
    return obj !== undefined && obj !== null;
  }
  function isBlank(obj) {
    return obj === undefined || obj === null;
  }
  function isNumber(obj) {
    return typeof obj === 'number';
  }
  function isString(obj) {
    return typeof obj === 'string';
  }
  function isFunction(obj) {
    return typeof obj === 'function';
  }
  function isStringMap(obj) {
    return typeof obj === 'object' && obj !== null;
  }
  function isPromise(obj) {
    return isPresent(obj) && isFunction(obj.then);
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  function isDate(obj) {
    return obj instanceof Date && !isNaN(obj.valueOf());
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token === undefined || token === null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return token.overriddenName;
    }
    if (token.name) {
      return token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);
  }
  var StringWrapper = (function() {
    function StringWrapper() {}
    StringWrapper.fromCharCode = function(code) {
      return String.fromCharCode(code);
    };
    StringWrapper.charCodeAt = function(s, index) {
      return s.charCodeAt(index);
    };
    StringWrapper.split = function(s, regExp) {
      return s.split(regExp);
    };
    StringWrapper.equals = function(s, s2) {
      return s === s2;
    };
    StringWrapper.stripLeft = function(s, charVal) {
      if (s && s.length) {
        var pos = 0;
        for (var i = 0; i < s.length; i++) {
          if (s[i] != charVal)
            break;
          pos++;
        }
        s = s.substring(pos);
      }
      return s;
    };
    StringWrapper.stripRight = function(s, charVal) {
      if (s && s.length) {
        var pos = s.length;
        for (var i = s.length - 1; i >= 0; i--) {
          if (s[i] != charVal)
            break;
          pos--;
        }
        s = s.substring(0, pos);
      }
      return s;
    };
    StringWrapper.replace = function(s, from, replace) {
      return s.replace(from, replace);
    };
    StringWrapper.replaceAll = function(s, from, replace) {
      return s.replace(from, replace);
    };
    StringWrapper.slice = function(s, from, to) {
      if (from === void 0) {
        from = 0;
      }
      if (to === void 0) {
        to = null;
      }
      return s.slice(from, to === null ? undefined : to);
    };
    StringWrapper.replaceAllMapped = function(s, from, cb) {
      return s.replace(from, function() {
        var matches = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          matches[_i - 0] = arguments[_i];
        }
        matches.splice(-2, 2);
        return cb(matches);
      });
    };
    StringWrapper.contains = function(s, substr) {
      return s.indexOf(substr) != -1;
    };
    StringWrapper.compare = function(a, b) {
      if (a < b) {
        return -1;
      } else if (a > b) {
        return 1;
      } else {
        return 0;
      }
    };
    return StringWrapper;
  }());
  var NumberWrapper = (function() {
    function NumberWrapper() {}
    NumberWrapper.toFixed = function(n, fractionDigits) {
      return n.toFixed(fractionDigits);
    };
    NumberWrapper.equal = function(a, b) {
      return a === b;
    };
    NumberWrapper.parseIntAutoRadix = function(text) {
      var result = parseInt(text);
      if (isNaN(result)) {
        throw new Error('Invalid integer literal when parsing ' + text);
      }
      return result;
    };
    NumberWrapper.parseInt = function(text, radix) {
      if (radix == 10) {
        if (/^(\-|\+)?[0-9]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else if (radix == 16) {
        if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else {
        var result = parseInt(text, radix);
        if (!isNaN(result)) {
          return result;
        }
      }
      throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
    };
    NumberWrapper.parseFloat = function(text) {
      return parseFloat(text);
    };
    Object.defineProperty(NumberWrapper, "NaN", {
      get: function() {
        return NaN;
      },
      enumerable: true,
      configurable: true
    });
    NumberWrapper.isNumeric = function(value) {
      return !isNaN(value - parseFloat(value));
    };
    NumberWrapper.isNaN = function(value) {
      return isNaN(value);
    };
    NumberWrapper.isInteger = function(value) {
      return Number.isInteger(value);
    };
    return NumberWrapper;
  }());
  function normalizeBlank(obj) {
    return isBlank(obj) ? null : obj;
  }
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
  }
  var Json = (function() {
    function Json() {}
    Json.parse = function(s) {
      return global$1.JSON.parse(s);
    };
    Json.stringify = function(data) {
      return global$1.JSON.stringify(data, null, 2);
    };
    return Json;
  }());
  var DateWrapper = (function() {
    function DateWrapper() {}
    DateWrapper.create = function(year, month, day, hour, minutes, seconds, milliseconds) {
      if (month === void 0) {
        month = 1;
      }
      if (day === void 0) {
        day = 1;
      }
      if (hour === void 0) {
        hour = 0;
      }
      if (minutes === void 0) {
        minutes = 0;
      }
      if (seconds === void 0) {
        seconds = 0;
      }
      if (milliseconds === void 0) {
        milliseconds = 0;
      }
      return new Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
    };
    DateWrapper.fromISOString = function(str) {
      return new Date(str);
    };
    DateWrapper.fromMillis = function(ms) {
      return new Date(ms);
    };
    DateWrapper.toMillis = function(date) {
      return date.getTime();
    };
    DateWrapper.now = function() {
      return new Date();
    };
    DateWrapper.toJson = function(date) {
      return date.toJSON();
    };
    return DateWrapper;
  }());
  var _symbolIterator = null;
  function getSymbolIterator() {
    if (isBlank(_symbolIterator)) {
      if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
        _symbolIterator = Symbol.iterator;
      } else {
        var keys = Object.getOwnPropertyNames(Map.prototype);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
            _symbolIterator = key;
          }
        }
      }
    }
    return _symbolIterator;
  }
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var BaseError = (function(_super) {
    __extends$1(BaseError, _super);
    function BaseError(message) {
      var nativeError = _super.call(this, message);
      this._nativeError = nativeError;
    }
    Object.defineProperty(BaseError.prototype, "message", {
      get: function() {
        return this._nativeError.message;
      },
      set: function(message) {
        this._nativeError.message = message;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseError.prototype, "name", {
      get: function() {
        return this._nativeError.name;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseError.prototype, "stack", {
      get: function() {
        return this._nativeError.stack;
      },
      set: function(value) {
        this._nativeError.stack = value;
      },
      enumerable: true,
      configurable: true
    });
    BaseError.prototype.toString = function() {
      return this._nativeError.toString();
    };
    return BaseError;
  }(Error));
  var WrappedError = (function(_super) {
    __extends$1(WrappedError, _super);
    function WrappedError(message, error) {
      _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
      this.originalError = error;
    }
    Object.defineProperty(WrappedError.prototype, "stack", {
      get: function() {
        return (this.originalError instanceof Error ? this.originalError : this._nativeError).stack;
      },
      enumerable: true,
      configurable: true
    });
    return WrappedError;
  }(BaseError));
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var InvalidPipeArgumentError = (function(_super) {
    __extends(InvalidPipeArgumentError, _super);
    function InvalidPipeArgumentError(type, value) {
      _super.call(this, "Invalid argument '" + value + "' for pipe '" + stringify(type) + "'");
    }
    return InvalidPipeArgumentError;
  }(BaseError));
  var ObservableStrategy = (function() {
    function ObservableStrategy() {}
    ObservableStrategy.prototype.createSubscription = function(async, updateLatestValue) {
      return async.subscribe({
        next: updateLatestValue,
        error: function(e) {
          throw e;
        }
      });
    };
    ObservableStrategy.prototype.dispose = function(subscription) {
      subscription.unsubscribe();
    };
    ObservableStrategy.prototype.onDestroy = function(subscription) {
      subscription.unsubscribe();
    };
    return ObservableStrategy;
  }());
  var PromiseStrategy = (function() {
    function PromiseStrategy() {}
    PromiseStrategy.prototype.createSubscription = function(async, updateLatestValue) {
      return async.then(updateLatestValue, function(e) {
        throw e;
      });
    };
    PromiseStrategy.prototype.dispose = function(subscription) {};
    PromiseStrategy.prototype.onDestroy = function(subscription) {};
    return PromiseStrategy;
  }());
  var _promiseStrategy = new PromiseStrategy();
  var _observableStrategy = new ObservableStrategy();
  var AsyncPipe = (function() {
    function AsyncPipe(_ref) {
      this._latestValue = null;
      this._latestReturnedValue = null;
      this._subscription = null;
      this._obj = null;
      this._strategy = null;
      this._ref = _ref;
    }
    AsyncPipe.prototype.ngOnDestroy = function() {
      if (isPresent(this._subscription)) {
        this._dispose();
      }
    };
    AsyncPipe.prototype.transform = function(obj) {
      if (isBlank(this._obj)) {
        if (isPresent(obj)) {
          this._subscribe(obj);
        }
        this._latestReturnedValue = this._latestValue;
        return this._latestValue;
      }
      if (obj !== this._obj) {
        this._dispose();
        return this.transform(obj);
      }
      if (this._latestValue === this._latestReturnedValue) {
        return this._latestReturnedValue;
      } else {
        this._latestReturnedValue = this._latestValue;
        return _angular_core.WrappedValue.wrap(this._latestValue);
      }
    };
    AsyncPipe.prototype._subscribe = function(obj) {
      var _this = this;
      this._obj = obj;
      this._strategy = this._selectStrategy(obj);
      this._subscription = this._strategy.createSubscription(obj, function(value) {
        return _this._updateLatestValue(obj, value);
      });
    };
    AsyncPipe.prototype._selectStrategy = function(obj) {
      if (isPromise(obj)) {
        return _promiseStrategy;
      } else if (obj.subscribe) {
        return _observableStrategy;
      } else {
        throw new InvalidPipeArgumentError(AsyncPipe, obj);
      }
    };
    AsyncPipe.prototype._dispose = function() {
      this._strategy.dispose(this._subscription);
      this._latestValue = null;
      this._latestReturnedValue = null;
      this._subscription = null;
      this._obj = null;
    };
    AsyncPipe.prototype._updateLatestValue = function(async, value) {
      if (async === this._obj) {
        this._latestValue = value;
        this._ref.markForCheck();
      }
    };
    AsyncPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{
        name: 'async',
        pure: false
      }]
    }];
    AsyncPipe.ctorParameters = [{type: _angular_core.ChangeDetectorRef}];
    return AsyncPipe;
  }());
  var Map$1 = global$1.Map;
  var Set$1 = global$1.Set;
  var createMapFromPairs = (function() {
    try {
      if (new Map$1([[1, 2]]).size === 1) {
        return function createMapFromPairs(pairs) {
          return new Map$1(pairs);
        };
      }
    } catch (e) {}
    return function createMapAndPopulateFromPairs(pairs) {
      var map = new Map$1();
      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i];
        map.set(pair[0], pair[1]);
      }
      return map;
    };
  })();
  var createMapFromMap = (function() {
    try {
      if (new Map$1(new Map$1())) {
        return function createMapFromMap(m) {
          return new Map$1(m);
        };
      }
    } catch (e) {}
    return function createMapAndPopulateFromMap(m) {
      var map = new Map$1();
      m.forEach(function(v, k) {
        map.set(k, v);
      });
      return map;
    };
  })();
  var _clearValues = (function() {
    if ((new Map$1()).keys().next) {
      return function _clearValues(m) {
        var keyIterator = m.keys();
        var k;
        while (!((k = keyIterator.next()).done)) {
          m.set(k.value, null);
        }
      };
    } else {
      return function _clearValuesWithForeEach(m) {
        m.forEach(function(v, k) {
          m.set(k, null);
        });
      };
    }
  })();
  var _arrayFromMap = (function() {
    try {
      if ((new Map$1()).values().next) {
        return function createArrayFromMap(m, getValues) {
          return getValues ? Array.from(m.values()) : Array.from(m.keys());
        };
      }
    } catch (e) {}
    return function createArrayFromMapWithForeach(m, getValues) {
      var res = ListWrapper.createFixedSize(m.size),
          i = 0;
      m.forEach(function(v, k) {
        res[i] = getValues ? v : k;
        i++;
      });
      return res;
    };
  })();
  var StringMapWrapper = (function() {
    function StringMapWrapper() {}
    StringMapWrapper.create = function() {
      return {};
    };
    StringMapWrapper.contains = function(map, key) {
      return map.hasOwnProperty(key);
    };
    StringMapWrapper.get = function(map, key) {
      return map.hasOwnProperty(key) ? map[key] : undefined;
    };
    StringMapWrapper.set = function(map, key, value) {
      map[key] = value;
    };
    StringMapWrapper.keys = function(map) {
      return Object.keys(map);
    };
    StringMapWrapper.values = function(map) {
      return Object.keys(map).map(function(k) {
        return map[k];
      });
    };
    StringMapWrapper.isEmpty = function(map) {
      for (var prop in map) {
        return false;
      }
      return true;
    };
    StringMapWrapper.delete = function(map, key) {
      delete map[key];
    };
    StringMapWrapper.forEach = function(map, callback) {
      for (var _i = 0,
          _a = Object.keys(map); _i < _a.length; _i++) {
        var k = _a[_i];
        callback(map[k], k);
      }
    };
    StringMapWrapper.merge = function(m1, m2) {
      var m = {};
      for (var _i = 0,
          _a = Object.keys(m1); _i < _a.length; _i++) {
        var k = _a[_i];
        m[k] = m1[k];
      }
      for (var _b = 0,
          _c = Object.keys(m2); _b < _c.length; _b++) {
        var k = _c[_b];
        m[k] = m2[k];
      }
      return m;
    };
    StringMapWrapper.equals = function(m1, m2) {
      var k1 = Object.keys(m1);
      var k2 = Object.keys(m2);
      if (k1.length != k2.length) {
        return false;
      }
      var key;
      for (var i = 0; i < k1.length; i++) {
        key = k1[i];
        if (m1[key] !== m2[key]) {
          return false;
        }
      }
      return true;
    };
    return StringMapWrapper;
  }());
  var ListWrapper = (function() {
    function ListWrapper() {}
    ListWrapper.createFixedSize = function(size) {
      return new Array(size);
    };
    ListWrapper.createGrowableSize = function(size) {
      return new Array(size);
    };
    ListWrapper.clone = function(array) {
      return array.slice(0);
    };
    ListWrapper.forEachWithIndex = function(array, fn) {
      for (var i = 0; i < array.length; i++) {
        fn(array[i], i);
      }
    };
    ListWrapper.first = function(array) {
      if (!array)
        return null;
      return array[0];
    };
    ListWrapper.last = function(array) {
      if (!array || array.length == 0)
        return null;
      return array[array.length - 1];
    };
    ListWrapper.indexOf = function(array, value, startIndex) {
      if (startIndex === void 0) {
        startIndex = 0;
      }
      return array.indexOf(value, startIndex);
    };
    ListWrapper.contains = function(list, el) {
      return list.indexOf(el) !== -1;
    };
    ListWrapper.reversed = function(array) {
      var a = ListWrapper.clone(array);
      return a.reverse();
    };
    ListWrapper.concat = function(a, b) {
      return a.concat(b);
    };
    ListWrapper.insert = function(list, index, value) {
      list.splice(index, 0, value);
    };
    ListWrapper.removeAt = function(list, index) {
      var res = list[index];
      list.splice(index, 1);
      return res;
    };
    ListWrapper.removeAll = function(list, items) {
      for (var i = 0; i < items.length; ++i) {
        var index = list.indexOf(items[i]);
        list.splice(index, 1);
      }
    };
    ListWrapper.remove = function(list, el) {
      var index = list.indexOf(el);
      if (index > -1) {
        list.splice(index, 1);
        return true;
      }
      return false;
    };
    ListWrapper.clear = function(list) {
      list.length = 0;
    };
    ListWrapper.isEmpty = function(list) {
      return list.length == 0;
    };
    ListWrapper.fill = function(list, value, start, end) {
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = null;
      }
      list.fill(value, start, end === null ? list.length : end);
    };
    ListWrapper.equals = function(a, b) {
      if (a.length != b.length)
        return false;
      for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
          return false;
      }
      return true;
    };
    ListWrapper.slice = function(l, from, to) {
      if (from === void 0) {
        from = 0;
      }
      if (to === void 0) {
        to = null;
      }
      return l.slice(from, to === null ? undefined : to);
    };
    ListWrapper.splice = function(l, from, length) {
      return l.splice(from, length);
    };
    ListWrapper.sort = function(l, compareFn) {
      if (isPresent(compareFn)) {
        l.sort(compareFn);
      } else {
        l.sort();
      }
    };
    ListWrapper.toString = function(l) {
      return l.toString();
    };
    ListWrapper.toJSON = function(l) {
      return JSON.stringify(l);
    };
    ListWrapper.maximum = function(list, predicate) {
      if (list.length == 0) {
        return null;
      }
      var solution = null;
      var maxValue = -Infinity;
      for (var index = 0; index < list.length; index++) {
        var candidate = list[index];
        if (isBlank(candidate)) {
          continue;
        }
        var candidateValue = predicate(candidate);
        if (candidateValue > maxValue) {
          solution = candidate;
          maxValue = candidateValue;
        }
      }
      return solution;
    };
    ListWrapper.flatten = function(list) {
      var target = [];
      _flattenArray(list, target);
      return target;
    };
    ListWrapper.addAll = function(list, source) {
      for (var i = 0; i < source.length; i++) {
        list.push(source[i]);
      }
    };
    return ListWrapper;
  }());
  function _flattenArray(source, target) {
    if (isPresent(source)) {
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        if (isArray(item)) {
          _flattenArray(item, target);
        } else {
          target.push(item);
        }
      }
    }
    return target;
  }
  function isListLikeIterable(obj) {
    if (!isJsObject(obj))
      return false;
    return isArray(obj) || (!(obj instanceof Map$1) && getSymbolIterator() in obj);
  }
  var createSetFromList = (function() {
    var test = new Set$1([1, 2, 3]);
    if (test.size === 3) {
      return function createSetFromList(lst) {
        return new Set$1(lst);
      };
    } else {
      return function createSetAndPopulateFromList(lst) {
        var res = new Set$1(lst);
        if (res.size !== lst.length) {
          for (var i = 0; i < lst.length; i++) {
            res.add(lst[i]);
          }
        }
        return res;
      };
    }
  })();
  var NumberFormatStyle;
  (function(NumberFormatStyle) {
    NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
    NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
    NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
  })(NumberFormatStyle || (NumberFormatStyle = {}));
  var NumberFormatter = (function() {
    function NumberFormatter() {}
    NumberFormatter.format = function(num, locale, style, _a) {
      var _b = _a === void 0 ? {} : _a,
          minimumIntegerDigits = _b.minimumIntegerDigits,
          minimumFractionDigits = _b.minimumFractionDigits,
          maximumFractionDigits = _b.maximumFractionDigits,
          currency = _b.currency,
          _c = _b.currencyAsSymbol,
          currencyAsSymbol = _c === void 0 ? false : _c;
      var options = {
        minimumIntegerDigits: minimumIntegerDigits,
        minimumFractionDigits: minimumFractionDigits,
        maximumFractionDigits: maximumFractionDigits,
        style: NumberFormatStyle[style].toLowerCase()
      };
      if (style == NumberFormatStyle.Currency) {
        options.currency = currency;
        options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
      }
      return new Intl.NumberFormat(locale, options).format(num);
    };
    return NumberFormatter;
  }());
  var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
  var PATTERN_ALIASES = {
    yMMMdjms: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1), digitCondition('hour', 1), digitCondition('minute', 1), digitCondition('second', 1)])),
    yMdjm: datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1), digitCondition('hour', 1), digitCondition('minute', 1)])),
    yMMMMEEEEd: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4), digitCondition('day', 1)])),
    yMMMMd: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
    yMMMd: datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
    yMd: datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
    jms: datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
    jm: datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
  };
  var DATE_FORMATS = {
    yyyy: datePartGetterFactory(digitCondition('year', 4)),
    yy: datePartGetterFactory(digitCondition('year', 2)),
    y: datePartGetterFactory(digitCondition('year', 1)),
    MMMM: datePartGetterFactory(nameCondition('month', 4)),
    MMM: datePartGetterFactory(nameCondition('month', 3)),
    MM: datePartGetterFactory(digitCondition('month', 2)),
    M: datePartGetterFactory(digitCondition('month', 1)),
    LLLL: datePartGetterFactory(nameCondition('month', 4)),
    dd: datePartGetterFactory(digitCondition('day', 2)),
    d: datePartGetterFactory(digitCondition('day', 1)),
    HH: digitModifier(hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
    H: hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
    hh: digitModifier(hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
    h: hourExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
    jj: datePartGetterFactory(digitCondition('hour', 2)),
    j: datePartGetterFactory(digitCondition('hour', 1)),
    mm: digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
    m: datePartGetterFactory(digitCondition('minute', 1)),
    ss: digitModifier(datePartGetterFactory(digitCondition('second', 2))),
    s: datePartGetterFactory(digitCondition('second', 1)),
    sss: datePartGetterFactory(digitCondition('second', 3)),
    EEEE: datePartGetterFactory(nameCondition('weekday', 4)),
    EEE: datePartGetterFactory(nameCondition('weekday', 3)),
    EE: datePartGetterFactory(nameCondition('weekday', 2)),
    E: datePartGetterFactory(nameCondition('weekday', 1)),
    a: hourClockExtracter(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
    Z: timeZoneGetter('short'),
    z: timeZoneGetter('long'),
    ww: datePartGetterFactory({}),
    w: datePartGetterFactory({}),
    G: datePartGetterFactory(nameCondition('era', 1)),
    GG: datePartGetterFactory(nameCondition('era', 2)),
    GGG: datePartGetterFactory(nameCondition('era', 3)),
    GGGG: datePartGetterFactory(nameCondition('era', 4))
  };
  function digitModifier(inner) {
    return function(date, locale) {
      var result = inner(date, locale);
      return result.length == 1 ? '0' + result : result;
    };
  }
  function hourClockExtracter(inner) {
    return function(date, locale) {
      var result = inner(date, locale);
      return result.split(' ')[1];
    };
  }
  function hourExtracter(inner) {
    return function(date, locale) {
      var result = inner(date, locale);
      return result.split(' ')[0];
    };
  }
  function intlDateFormat(date, locale, options) {
    return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
  }
  function timeZoneGetter(timezone) {
    var options = {
      hour: '2-digit',
      hour12: false,
      timeZoneName: timezone
    };
    return function(date, locale) {
      var result = intlDateFormat(date, locale, options);
      return result ? result.substring(3) : '';
    };
  }
  function hour12Modify(options, value) {
    options.hour12 = value;
    return options;
  }
  function digitCondition(prop, len) {
    var result = {};
    result[prop] = len == 2 ? '2-digit' : 'numeric';
    return result;
  }
  function nameCondition(prop, len) {
    var result = {};
    result[prop] = len < 4 ? 'short' : 'long';
    return result;
  }
  function combine(options) {
    var result = {};
    options.forEach(function(option) {
      Object.assign(result, option);
    });
    return result;
  }
  function datePartGetterFactory(ret) {
    return function(date, locale) {
      return intlDateFormat(date, locale, ret);
    };
  }
  var datePartsFormatterCache = new Map();
  function dateFormatter(format, date, locale) {
    var text = '';
    var match;
    var fn;
    var parts = [];
    if (PATTERN_ALIASES[format]) {
      return PATTERN_ALIASES[format](date, locale);
    }
    if (datePartsFormatterCache.has(format)) {
      parts = datePartsFormatterCache.get(format);
    } else {
      var matches = DATE_FORMATS_SPLIT.exec(format);
      while (format) {
        match = DATE_FORMATS_SPLIT.exec(format);
        if (match) {
          parts = concat(parts, match, 1);
          format = parts.pop();
        } else {
          parts.push(format);
          format = null;
        }
      }
      datePartsFormatterCache.set(format, parts);
    }
    parts.forEach(function(part) {
      fn = DATE_FORMATS[part];
      text += fn ? fn(date, locale) : part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
    });
    return text;
  }
  var slice = [].slice;
  function concat(array1, array2, index) {
    return array1.concat(slice.call(array2, index));
  }
  var DateFormatter = (function() {
    function DateFormatter() {}
    DateFormatter.format = function(date, locale, pattern) {
      return dateFormatter(pattern, date, locale);
    };
    return DateFormatter;
  }());
  var DatePipe = (function() {
    function DatePipe(_locale) {
      this._locale = _locale;
    }
    DatePipe.prototype.transform = function(value, pattern) {
      if (pattern === void 0) {
        pattern = 'mediumDate';
      }
      if (isBlank(value))
        return null;
      if (!this.supports(value)) {
        throw new InvalidPipeArgumentError(DatePipe, value);
      }
      if (NumberWrapper.isNumeric(value)) {
        value = DateWrapper.fromMillis(parseFloat(value));
      } else if (isString(value)) {
        value = DateWrapper.fromISOString(value);
      }
      if (StringMapWrapper.contains(DatePipe._ALIASES, pattern)) {
        pattern = StringMapWrapper.get(DatePipe._ALIASES, pattern);
      }
      return DateFormatter.format(value, this._locale, pattern);
    };
    DatePipe.prototype.supports = function(obj) {
      if (isDate(obj) || NumberWrapper.isNumeric(obj)) {
        return true;
      }
      if (isString(obj) && isDate(DateWrapper.fromISOString(obj))) {
        return true;
      }
      return false;
    };
    DatePipe._ALIASES = {
      'medium': 'yMMMdjms',
      'short': 'yMdjm',
      'fullDate': 'yMMMMEEEEd',
      'longDate': 'yMMMMd',
      'mediumDate': 'yMMMd',
      'shortDate': 'yMd',
      'mediumTime': 'jms',
      'shortTime': 'jm'
    };
    DatePipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{
        name: 'date',
        pure: true
      }]
    }];
    DatePipe.ctorParameters = [{
      type: undefined,
      decorators: [{
        type: _angular_core.Inject,
        args: [_angular_core.LOCALE_ID]
      }]
    }];
    return DatePipe;
  }());
  var __extends$2 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var NgLocalization = (function() {
    function NgLocalization() {}
    return NgLocalization;
  }());
  function getPluralCategory(value, cases, ngLocalization) {
    var nbCase = "=" + value;
    return cases.indexOf(nbCase) > -1 ? nbCase : ngLocalization.getPluralCategory(value);
  }
  var NgLocaleLocalization = (function(_super) {
    __extends$2(NgLocaleLocalization, _super);
    function NgLocaleLocalization(_locale) {
      _super.call(this);
      this._locale = _locale;
    }
    NgLocaleLocalization.prototype.getPluralCategory = function(value) {
      var plural = getPluralCase(this._locale, value);
      switch (plural) {
        case Plural.Zero:
          return 'zero';
        case Plural.One:
          return 'one';
        case Plural.Two:
          return 'two';
        case Plural.Few:
          return 'few';
        case Plural.Many:
          return 'many';
        default:
          return 'other';
      }
    };
    NgLocaleLocalization.decorators = [{type: _angular_core.Injectable}];
    NgLocaleLocalization.ctorParameters = [{
      type: undefined,
      decorators: [{
        type: _angular_core.Inject,
        args: [_angular_core.LOCALE_ID]
      }]
    }];
    return NgLocaleLocalization;
  }(NgLocalization));
  var Plural;
  (function(Plural) {
    Plural[Plural["Zero"] = 0] = "Zero";
    Plural[Plural["One"] = 1] = "One";
    Plural[Plural["Two"] = 2] = "Two";
    Plural[Plural["Few"] = 3] = "Few";
    Plural[Plural["Many"] = 4] = "Many";
    Plural[Plural["Other"] = 5] = "Other";
  })(Plural || (Plural = {}));
  function getPluralCase(locale, nLike) {
    if (typeof nLike === 'string') {
      nLike = parseInt(nLike, 10);
    }
    var n = nLike;
    var nDecimal = n.toString().replace(/^[^.]*\.?/, '');
    var i = Math.floor(Math.abs(n));
    var v = nDecimal.length;
    var f = parseInt(nDecimal, 10);
    var t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
    var lang = locale.split('_')[0].toLowerCase();
    switch (lang) {
      case 'af':
      case 'asa':
      case 'az':
      case 'bem':
      case 'bez':
      case 'bg':
      case 'brx':
      case 'ce':
      case 'cgg':
      case 'chr':
      case 'ckb':
      case 'ee':
      case 'el':
      case 'eo':
      case 'es':
      case 'eu':
      case 'fo':
      case 'fur':
      case 'gsw':
      case 'ha':
      case 'haw':
      case 'hu':
      case 'jgo':
      case 'jmc':
      case 'ka':
      case 'kk':
      case 'kkj':
      case 'kl':
      case 'ks':
      case 'ksb':
      case 'ky':
      case 'lb':
      case 'lg':
      case 'mas':
      case 'mgo':
      case 'ml':
      case 'mn':
      case 'nb':
      case 'nd':
      case 'ne':
      case 'nn':
      case 'nnh':
      case 'nyn':
      case 'om':
      case 'or':
      case 'os':
      case 'ps':
      case 'rm':
      case 'rof':
      case 'rwk':
      case 'saq':
      case 'seh':
      case 'sn':
      case 'so':
      case 'sq':
      case 'ta':
      case 'te':
      case 'teo':
      case 'tk':
      case 'tr':
      case 'ug':
      case 'uz':
      case 'vo':
      case 'vun':
      case 'wae':
      case 'xog':
        if (n === 1)
          return Plural.One;
        return Plural.Other;
      case 'agq':
      case 'bas':
      case 'cu':
      case 'dav':
      case 'dje':
      case 'dua':
      case 'dyo':
      case 'ebu':
      case 'ewo':
      case 'guz':
      case 'kam':
      case 'khq':
      case 'ki':
      case 'kln':
      case 'kok':
      case 'ksf':
      case 'lrc':
      case 'lu':
      case 'luo':
      case 'luy':
      case 'mer':
      case 'mfe':
      case 'mgh':
      case 'mua':
      case 'mzn':
      case 'nmg':
      case 'nus':
      case 'qu':
      case 'rn':
      case 'rw':
      case 'sbp':
      case 'twq':
      case 'vai':
      case 'yav':
      case 'yue':
      case 'zgh':
      case 'ak':
      case 'ln':
      case 'mg':
      case 'pa':
      case 'ti':
        if (n === Math.floor(n) && n >= 0 && n <= 1)
          return Plural.One;
        return Plural.Other;
      case 'am':
      case 'as':
      case 'bn':
      case 'fa':
      case 'gu':
      case 'hi':
      case 'kn':
      case 'mr':
      case 'zu':
        if (i === 0 || n === 1)
          return Plural.One;
        return Plural.Other;
      case 'ar':
        if (n === 0)
          return Plural.Zero;
        if (n === 1)
          return Plural.One;
        if (n === 2)
          return Plural.Two;
        if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
          return Plural.Few;
        if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
          return Plural.Many;
        return Plural.Other;
      case 'ast':
      case 'ca':
      case 'de':
      case 'en':
      case 'et':
      case 'fi':
      case 'fy':
      case 'gl':
      case 'it':
      case 'nl':
      case 'sv':
      case 'sw':
      case 'ur':
      case 'yi':
        if (i === 1 && v === 0)
          return Plural.One;
        return Plural.Other;
      case 'be':
        if (n % 10 === 1 && !(n % 100 === 11))
          return Plural.One;
        if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 && !(n % 100 >= 12 && n % 100 <= 14))
          return Plural.Few;
        if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
          return Plural.Many;
        return Plural.Other;
      case 'br':
        if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
          return Plural.One;
        if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
          return Plural.Two;
        if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) && !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 || n % 100 >= 90 && n % 100 <= 99))
          return Plural.Few;
        if (!(n === 0) && n % 1e6 === 0)
          return Plural.Many;
        return Plural.Other;
      case 'bs':
      case 'hr':
      case 'sr':
        if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
          return Plural.One;
        if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14) || f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 && !(f % 100 >= 12 && f % 100 <= 14))
          return Plural.Few;
        return Plural.Other;
      case 'cs':
      case 'sk':
        if (i === 1 && v === 0)
          return Plural.One;
        if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
          return Plural.Few;
        if (!(v === 0))
          return Plural.Many;
        return Plural.Other;
      case 'cy':
        if (n === 0)
          return Plural.Zero;
        if (n === 1)
          return Plural.One;
        if (n === 2)
          return Plural.Two;
        if (n === 3)
          return Plural.Few;
        if (n === 6)
          return Plural.Many;
        return Plural.Other;
      case 'da':
        if (n === 1 || !(t === 0) && (i === 0 || i === 1))
          return Plural.One;
        return Plural.Other;
      case 'dsb':
      case 'hsb':
        if (v === 0 && i % 100 === 1 || f % 100 === 1)
          return Plural.One;
        if (v === 0 && i % 100 === 2 || f % 100 === 2)
          return Plural.Two;
        if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
          return Plural.Few;
        return Plural.Other;
      case 'ff':
      case 'fr':
      case 'hy':
      case 'kab':
        if (i === 0 || i === 1)
          return Plural.One;
        return Plural.Other;
      case 'fil':
        if (v === 0 && (i === 1 || i === 2 || i === 3) || v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) || !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
          return Plural.One;
        return Plural.Other;
      case 'ga':
        if (n === 1)
          return Plural.One;
        if (n === 2)
          return Plural.Two;
        if (n === Math.floor(n) && n >= 3 && n <= 6)
          return Plural.Few;
        if (n === Math.floor(n) && n >= 7 && n <= 10)
          return Plural.Many;
        return Plural.Other;
      case 'gd':
        if (n === 1 || n === 11)
          return Plural.One;
        if (n === 2 || n === 12)
          return Plural.Two;
        if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
          return Plural.Few;
        return Plural.Other;
      case 'gv':
        if (v === 0 && i % 10 === 1)
          return Plural.One;
        if (v === 0 && i % 10 === 2)
          return Plural.Two;
        if (v === 0 && (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
          return Plural.Few;
        if (!(v === 0))
          return Plural.Many;
        return Plural.Other;
      case 'he':
        if (i === 1 && v === 0)
          return Plural.One;
        if (i === 2 && v === 0)
          return Plural.Two;
        if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
          return Plural.Many;
        return Plural.Other;
      case 'is':
        if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
          return Plural.One;
        return Plural.Other;
      case 'ksh':
        if (n === 0)
          return Plural.Zero;
        if (n === 1)
          return Plural.One;
        return Plural.Other;
      case 'kw':
      case 'naq':
      case 'se':
      case 'smn':
        if (n === 1)
          return Plural.One;
        if (n === 2)
          return Plural.Two;
        return Plural.Other;
      case 'lag':
        if (n === 0)
          return Plural.Zero;
        if ((i === 0 || i === 1) && !(n === 0))
          return Plural.One;
        return Plural.Other;
      case 'lt':
        if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
          return Plural.One;
        if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 && !(n % 100 >= 11 && n % 100 <= 19))
          return Plural.Few;
        if (!(f === 0))
          return Plural.Many;
        return Plural.Other;
      case 'lv':
      case 'prg':
        if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 || v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
          return Plural.Zero;
        if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) || !(v === 2) && f % 10 === 1)
          return Plural.One;
        return Plural.Other;
      case 'mk':
        if (v === 0 && i % 10 === 1 || f % 10 === 1)
          return Plural.One;
        return Plural.Other;
      case 'mt':
        if (n === 1)
          return Plural.One;
        if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
          return Plural.Few;
        if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
          return Plural.Many;
        return Plural.Other;
      case 'pl':
        if (i === 1 && v === 0)
          return Plural.One;
        if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14))
          return Plural.Few;
        if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
          return Plural.Many;
        return Plural.Other;
      case 'pt':
        if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
          return Plural.One;
        return Plural.Other;
      case 'ro':
        if (i === 1 && v === 0)
          return Plural.One;
        if (!(v === 0) || n === 0 || !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
          return Plural.Few;
        return Plural.Other;
      case 'ru':
      case 'uk':
        if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
          return Plural.One;
        if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14))
          return Plural.Few;
        if (v === 0 && i % 10 === 0 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
          return Plural.Many;
        return Plural.Other;
      case 'shi':
        if (i === 0 || n === 1)
          return Plural.One;
        if (n === Math.floor(n) && n >= 2 && n <= 10)
          return Plural.Few;
        return Plural.Other;
      case 'si':
        if (n === 0 || n === 1 || i === 0 && f === 1)
          return Plural.One;
        return Plural.Other;
      case 'sl':
        if (v === 0 && i % 100 === 1)
          return Plural.One;
        if (v === 0 && i % 100 === 2)
          return Plural.Two;
        if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
          return Plural.Few;
        return Plural.Other;
      case 'tzm':
        if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
          return Plural.One;
        return Plural.Other;
      default:
        return Plural.Other;
    }
  }
  var _INTERPOLATION_REGEXP = /#/g;
  var I18nPluralPipe = (function() {
    function I18nPluralPipe(_localization) {
      this._localization = _localization;
    }
    I18nPluralPipe.prototype.transform = function(value, pluralMap) {
      if (isBlank(value))
        return '';
      if (!isStringMap(pluralMap)) {
        throw new InvalidPipeArgumentError(I18nPluralPipe, pluralMap);
      }
      var key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
      return StringWrapper.replaceAll(pluralMap[key], _INTERPOLATION_REGEXP, value.toString());
    };
    I18nPluralPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{
        name: 'i18nPlural',
        pure: true
      }]
    }];
    I18nPluralPipe.ctorParameters = [{type: NgLocalization}];
    return I18nPluralPipe;
  }());
  var I18nSelectPipe = (function() {
    function I18nSelectPipe() {}
    I18nSelectPipe.prototype.transform = function(value, mapping) {
      if (isBlank(value))
        return '';
      if (!isStringMap(mapping)) {
        throw new InvalidPipeArgumentError(I18nSelectPipe, mapping);
      }
      return mapping.hasOwnProperty(value) ? mapping[value] : '';
    };
    I18nSelectPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{
        name: 'i18nSelect',
        pure: true
      }]
    }];
    I18nSelectPipe.ctorParameters = [];
    return I18nSelectPipe;
  }());
  var JsonPipe = (function() {
    function JsonPipe() {}
    JsonPipe.prototype.transform = function(value) {
      return Json.stringify(value);
    };
    JsonPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{
        name: 'json',
        pure: false
      }]
    }];
    JsonPipe.ctorParameters = [];
    return JsonPipe;
  }());
  var LowerCasePipe = (function() {
    function LowerCasePipe() {}
    LowerCasePipe.prototype.transform = function(value) {
      if (isBlank(value))
        return value;
      if (!isString(value)) {
        throw new InvalidPipeArgumentError(LowerCasePipe, value);
      }
      return value.toLowerCase();
    };
    LowerCasePipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{name: 'lowercase'}]
    }];
    LowerCasePipe.ctorParameters = [];
    return LowerCasePipe;
  }());
  var _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(\-(\d+))?)?$/;
  function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
    if (currency === void 0) {
      currency = null;
    }
    if (currencyAsSymbol === void 0) {
      currencyAsSymbol = false;
    }
    if (isBlank(value))
      return null;
    value = isString(value) && NumberWrapper.isNumeric(value) ? +value : value;
    if (!isNumber(value)) {
      throw new InvalidPipeArgumentError(pipe, value);
    }
    var minInt;
    var minFraction;
    var maxFraction;
    if (style !== NumberFormatStyle.Currency) {
      minInt = 1;
      minFraction = 0;
      maxFraction = 3;
    }
    if (isPresent(digits)) {
      var parts = digits.match(_NUMBER_FORMAT_REGEXP);
      if (parts === null) {
        throw new Error(digits + " is not a valid digit info for number pipes");
      }
      if (isPresent(parts[1])) {
        minInt = NumberWrapper.parseIntAutoRadix(parts[1]);
      }
      if (isPresent(parts[3])) {
        minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);
      }
      if (isPresent(parts[5])) {
        maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);
      }
    }
    return NumberFormatter.format(value, locale, style, {
      minimumIntegerDigits: minInt,
      minimumFractionDigits: minFraction,
      maximumFractionDigits: maxFraction,
      currency: currency,
      currencyAsSymbol: currencyAsSymbol
    });
  }
  var DecimalPipe = (function() {
    function DecimalPipe(_locale) {
      this._locale = _locale;
    }
    DecimalPipe.prototype.transform = function(value, digits) {
      if (digits === void 0) {
        digits = null;
      }
      return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
    };
    DecimalPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{name: 'number'}]
    }];
    DecimalPipe.ctorParameters = [{
      type: undefined,
      decorators: [{
        type: _angular_core.Inject,
        args: [_angular_core.LOCALE_ID]
      }]
    }];
    return DecimalPipe;
  }());
  var PercentPipe = (function() {
    function PercentPipe(_locale) {
      this._locale = _locale;
    }
    PercentPipe.prototype.transform = function(value, digits) {
      if (digits === void 0) {
        digits = null;
      }
      return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
    };
    PercentPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{name: 'percent'}]
    }];
    PercentPipe.ctorParameters = [{
      type: undefined,
      decorators: [{
        type: _angular_core.Inject,
        args: [_angular_core.LOCALE_ID]
      }]
    }];
    return PercentPipe;
  }());
  var CurrencyPipe = (function() {
    function CurrencyPipe(_locale) {
      this._locale = _locale;
    }
    CurrencyPipe.prototype.transform = function(value, currencyCode, symbolDisplay, digits) {
      if (currencyCode === void 0) {
        currencyCode = 'USD';
      }
      if (symbolDisplay === void 0) {
        symbolDisplay = false;
      }
      if (digits === void 0) {
        digits = null;
      }
      return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
    };
    CurrencyPipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{name: 'currency'}]
    }];
    CurrencyPipe.ctorParameters = [{
      type: undefined,
      decorators: [{
        type: _angular_core.Inject,
        args: [_angular_core.LOCALE_ID]
      }]
    }];
    return CurrencyPipe;
  }());
  var SlicePipe = (function() {
    function SlicePipe() {}
    SlicePipe.prototype.transform = function(value, start, end) {
      if (end === void 0) {
        end = null;
      }
      if (isBlank(value))
        return value;
      if (!this.supports(value)) {
        throw new InvalidPipeArgumentError(SlicePipe, value);
      }
      if (isString(value)) {
        return StringWrapper.slice(value, start, end);
      }
      return ListWrapper.slice(value, start, end);
    };
    SlicePipe.prototype.supports = function(obj) {
      return isString(obj) || isArray(obj);
    };
    SlicePipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{
        name: 'slice',
        pure: false
      }]
    }];
    SlicePipe.ctorParameters = [];
    return SlicePipe;
  }());
  var UpperCasePipe = (function() {
    function UpperCasePipe() {}
    UpperCasePipe.prototype.transform = function(value) {
      if (isBlank(value))
        return value;
      if (!isString(value)) {
        throw new InvalidPipeArgumentError(UpperCasePipe, value);
      }
      return value.toUpperCase();
    };
    UpperCasePipe.decorators = [{
      type: _angular_core.Pipe,
      args: [{name: 'uppercase'}]
    }];
    UpperCasePipe.ctorParameters = [];
    return UpperCasePipe;
  }());
  var NgClass = (function() {
    function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
      this._iterableDiffers = _iterableDiffers;
      this._keyValueDiffers = _keyValueDiffers;
      this._ngEl = _ngEl;
      this._renderer = _renderer;
      this._initialClasses = [];
    }
    Object.defineProperty(NgClass.prototype, "initialClasses", {
      set: function(v) {
        this._applyInitialClasses(true);
        this._initialClasses = isPresent(v) && isString(v) ? v.split(' ') : [];
        this._applyInitialClasses(false);
        this._applyClasses(this._rawClass, false);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgClass.prototype, "ngClass", {
      set: function(v) {
        this._cleanupClasses(this._rawClass);
        if (isString(v)) {
          v = v.split(' ');
        }
        this._rawClass = v;
        this._iterableDiffer = null;
        this._keyValueDiffer = null;
        if (isPresent(v)) {
          if (isListLikeIterable(v)) {
            this._iterableDiffer = this._iterableDiffers.find(v).create(null);
          } else {
            this._keyValueDiffer = this._keyValueDiffers.find(v).create(null);
          }
        }
      },
      enumerable: true,
      configurable: true
    });
    NgClass.prototype.ngDoCheck = function() {
      if (isPresent(this._iterableDiffer)) {
        var changes = this._iterableDiffer.diff(this._rawClass);
        if (isPresent(changes)) {
          this._applyIterableChanges(changes);
        }
      }
      if (isPresent(this._keyValueDiffer)) {
        var changes = this._keyValueDiffer.diff(this._rawClass);
        if (isPresent(changes)) {
          this._applyKeyValueChanges(changes);
        }
      }
    };
    NgClass.prototype._cleanupClasses = function(rawClassVal) {
      this._applyClasses(rawClassVal, true);
      this._applyInitialClasses(false);
    };
    NgClass.prototype._applyKeyValueChanges = function(changes) {
      var _this = this;
      changes.forEachAddedItem(function(record) {
        _this._toggleClass(record.key, record.currentValue);
      });
      changes.forEachChangedItem(function(record) {
        _this._toggleClass(record.key, record.currentValue);
      });
      changes.forEachRemovedItem(function(record) {
        if (record.previousValue) {
          _this._toggleClass(record.key, false);
        }
      });
    };
    NgClass.prototype._applyIterableChanges = function(changes) {
      var _this = this;
      changes.forEachAddedItem(function(record) {
        _this._toggleClass(record.item, true);
      });
      changes.forEachRemovedItem(function(record) {
        _this._toggleClass(record.item, false);
      });
    };
    NgClass.prototype._applyInitialClasses = function(isCleanup) {
      var _this = this;
      this._initialClasses.forEach(function(className) {
        return _this._toggleClass(className, !isCleanup);
      });
    };
    NgClass.prototype._applyClasses = function(rawClassVal, isCleanup) {
      var _this = this;
      if (isPresent(rawClassVal)) {
        if (isArray(rawClassVal)) {
          rawClassVal.forEach(function(className) {
            return _this._toggleClass(className, !isCleanup);
          });
        } else if (rawClassVal instanceof Set) {
          rawClassVal.forEach(function(className) {
            return _this._toggleClass(className, !isCleanup);
          });
        } else {
          StringMapWrapper.forEach(rawClassVal, function(expVal, className) {
            if (isPresent(expVal))
              _this._toggleClass(className, !isCleanup);
          });
        }
      }
    };
    NgClass.prototype._toggleClass = function(className, enabled) {
      className = className.trim();
      if (className.length > 0) {
        if (className.indexOf(' ') > -1) {
          var classes = className.split(/\s+/g);
          for (var i = 0,
              len = classes.length; i < len; i++) {
            this._renderer.setElementClass(this._ngEl.nativeElement, classes[i], enabled);
          }
        } else {
          this._renderer.setElementClass(this._ngEl.nativeElement, className, enabled);
        }
      }
    };
    NgClass.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngClass]'}]
    }];
    NgClass.ctorParameters = [{type: _angular_core.IterableDiffers}, {type: _angular_core.KeyValueDiffers}, {type: _angular_core.ElementRef}, {type: _angular_core.Renderer}];
    NgClass.propDecorators = {
      'initialClasses': [{
        type: _angular_core.Input,
        args: ['class']
      }],
      'ngClass': [{type: _angular_core.Input}]
    };
    return NgClass;
  }());
  var NgForRow = (function() {
    function NgForRow($implicit, index, count) {
      this.$implicit = $implicit;
      this.index = index;
      this.count = count;
    }
    Object.defineProperty(NgForRow.prototype, "first", {
      get: function() {
        return this.index === 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForRow.prototype, "last", {
      get: function() {
        return this.index === this.count - 1;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForRow.prototype, "even", {
      get: function() {
        return this.index % 2 === 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForRow.prototype, "odd", {
      get: function() {
        return !this.even;
      },
      enumerable: true,
      configurable: true
    });
    return NgForRow;
  }());
  var NgFor = (function() {
    function NgFor(_viewContainer, _templateRef, _iterableDiffers, _cdr) {
      this._viewContainer = _viewContainer;
      this._templateRef = _templateRef;
      this._iterableDiffers = _iterableDiffers;
      this._cdr = _cdr;
    }
    Object.defineProperty(NgFor.prototype, "ngForTemplate", {
      set: function(value) {
        if (isPresent(value)) {
          this._templateRef = value;
        }
      },
      enumerable: true,
      configurable: true
    });
    NgFor.prototype.ngOnChanges = function(changes) {
      if ('ngForOf' in changes) {
        var value = changes['ngForOf'].currentValue;
        if (isBlank(this._differ) && isPresent(value)) {
          try {
            this._differ = this._iterableDiffers.find(value).create(this._cdr, this.ngForTrackBy);
          } catch (e) {
            throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
          }
        }
      }
    };
    NgFor.prototype.ngDoCheck = function() {
      if (isPresent(this._differ)) {
        var changes = this._differ.diff(this.ngForOf);
        if (isPresent(changes))
          this._applyChanges(changes);
      }
    };
    NgFor.prototype._applyChanges = function(changes) {
      var _this = this;
      var insertTuples = [];
      changes.forEachOperation(function(item, adjustedPreviousIndex, currentIndex) {
        if (item.previousIndex == null) {
          var view = _this._viewContainer.createEmbeddedView(_this._templateRef, new NgForRow(null, null, null), currentIndex);
          var tuple = new RecordViewTuple(item, view);
          insertTuples.push(tuple);
        } else if (currentIndex == null) {
          _this._viewContainer.remove(adjustedPreviousIndex);
        } else {
          var view = _this._viewContainer.get(adjustedPreviousIndex);
          _this._viewContainer.move(view, currentIndex);
          var tuple = new RecordViewTuple(item, view);
          insertTuples.push(tuple);
        }
      });
      for (var i = 0; i < insertTuples.length; i++) {
        this._perViewChange(insertTuples[i].view, insertTuples[i].record);
      }
      for (var i = 0,
          ilen = this._viewContainer.length; i < ilen; i++) {
        var viewRef = this._viewContainer.get(i);
        viewRef.context.index = i;
        viewRef.context.count = ilen;
      }
      changes.forEachIdentityChange(function(record) {
        var viewRef = _this._viewContainer.get(record.currentIndex);
        viewRef.context.$implicit = record.item;
      });
    };
    NgFor.prototype._perViewChange = function(view, record) {
      view.context.$implicit = record.item;
    };
    NgFor.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngFor][ngForOf]'}]
    }];
    NgFor.ctorParameters = [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}, {type: _angular_core.IterableDiffers}, {type: _angular_core.ChangeDetectorRef}];
    NgFor.propDecorators = {
      'ngForOf': [{type: _angular_core.Input}],
      'ngForTrackBy': [{type: _angular_core.Input}],
      'ngForTemplate': [{type: _angular_core.Input}]
    };
    return NgFor;
  }());
  var RecordViewTuple = (function() {
    function RecordViewTuple(record, view) {
      this.record = record;
      this.view = view;
    }
    return RecordViewTuple;
  }());
  var NgIf = (function() {
    function NgIf(_viewContainer, _templateRef) {
      this._viewContainer = _viewContainer;
      this._templateRef = _templateRef;
      this._prevCondition = null;
    }
    Object.defineProperty(NgIf.prototype, "ngIf", {
      set: function(newCondition) {
        if (newCondition && (isBlank(this._prevCondition) || !this._prevCondition)) {
          this._prevCondition = true;
          this._viewContainer.createEmbeddedView(this._templateRef);
        } else if (!newCondition && (isBlank(this._prevCondition) || this._prevCondition)) {
          this._prevCondition = false;
          this._viewContainer.clear();
        }
      },
      enumerable: true,
      configurable: true
    });
    NgIf.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngIf]'}]
    }];
    NgIf.ctorParameters = [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}];
    NgIf.propDecorators = {'ngIf': [{type: _angular_core.Input}]};
    return NgIf;
  }());
  var _CASE_DEFAULT = new Object();
  var SwitchView = (function() {
    function SwitchView(_viewContainerRef, _templateRef) {
      this._viewContainerRef = _viewContainerRef;
      this._templateRef = _templateRef;
    }
    SwitchView.prototype.create = function() {
      this._viewContainerRef.createEmbeddedView(this._templateRef);
    };
    SwitchView.prototype.destroy = function() {
      this._viewContainerRef.clear();
    };
    return SwitchView;
  }());
  var NgSwitch = (function() {
    function NgSwitch() {
      this._useDefault = false;
      this._valueViews = new Map();
      this._activeViews = [];
    }
    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
      set: function(value) {
        this._emptyAllActiveViews();
        this._useDefault = false;
        var views = this._valueViews.get(value);
        if (isBlank(views)) {
          this._useDefault = true;
          views = normalizeBlank(this._valueViews.get(_CASE_DEFAULT));
        }
        this._activateViews(views);
        this._switchValue = value;
      },
      enumerable: true,
      configurable: true
    });
    NgSwitch.prototype._onCaseValueChanged = function(oldCase, newCase, view) {
      this._deregisterView(oldCase, view);
      this._registerView(newCase, view);
      if (oldCase === this._switchValue) {
        view.destroy();
        ListWrapper.remove(this._activeViews, view);
      } else if (newCase === this._switchValue) {
        if (this._useDefault) {
          this._useDefault = false;
          this._emptyAllActiveViews();
        }
        view.create();
        this._activeViews.push(view);
      }
      if (this._activeViews.length === 0 && !this._useDefault) {
        this._useDefault = true;
        this._activateViews(this._valueViews.get(_CASE_DEFAULT));
      }
    };
    NgSwitch.prototype._emptyAllActiveViews = function() {
      var activeContainers = this._activeViews;
      for (var i = 0; i < activeContainers.length; i++) {
        activeContainers[i].destroy();
      }
      this._activeViews = [];
    };
    NgSwitch.prototype._activateViews = function(views) {
      if (isPresent(views)) {
        for (var i = 0; i < views.length; i++) {
          views[i].create();
        }
        this._activeViews = views;
      }
    };
    NgSwitch.prototype._registerView = function(value, view) {
      var views = this._valueViews.get(value);
      if (isBlank(views)) {
        views = [];
        this._valueViews.set(value, views);
      }
      views.push(view);
    };
    NgSwitch.prototype._deregisterView = function(value, view) {
      if (value === _CASE_DEFAULT)
        return;
      var views = this._valueViews.get(value);
      if (views.length == 1) {
        this._valueViews.delete(value);
      } else {
        ListWrapper.remove(views, view);
      }
    };
    NgSwitch.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngSwitch]'}]
    }];
    NgSwitch.ctorParameters = [];
    NgSwitch.propDecorators = {'ngSwitch': [{type: _angular_core.Input}]};
    return NgSwitch;
  }());
  var NgSwitchCase = (function() {
    function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
      this._value = _CASE_DEFAULT;
      this._switch = ngSwitch;
      this._view = new SwitchView(viewContainer, templateRef);
    }
    Object.defineProperty(NgSwitchCase.prototype, "ngSwitchCase", {
      set: function(value) {
        this._switch._onCaseValueChanged(this._value, value, this._view);
        this._value = value;
      },
      enumerable: true,
      configurable: true
    });
    NgSwitchCase.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngSwitchCase]'}]
    }];
    NgSwitchCase.ctorParameters = [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}, {
      type: NgSwitch,
      decorators: [{type: _angular_core.Host}]
    }];
    NgSwitchCase.propDecorators = {'ngSwitchCase': [{type: _angular_core.Input}]};
    return NgSwitchCase;
  }());
  var NgSwitchDefault = (function() {
    function NgSwitchDefault(viewContainer, templateRef, sswitch) {
      sswitch._registerView(_CASE_DEFAULT, new SwitchView(viewContainer, templateRef));
    }
    NgSwitchDefault.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngSwitchDefault]'}]
    }];
    NgSwitchDefault.ctorParameters = [{type: _angular_core.ViewContainerRef}, {type: _angular_core.TemplateRef}, {
      type: NgSwitch,
      decorators: [{type: _angular_core.Host}]
    }];
    return NgSwitchDefault;
  }());
  var NgPlural = (function() {
    function NgPlural(_localization) {
      this._localization = _localization;
      this._caseViews = {};
    }
    Object.defineProperty(NgPlural.prototype, "ngPlural", {
      set: function(value) {
        this._switchValue = value;
        this._updateView();
      },
      enumerable: true,
      configurable: true
    });
    NgPlural.prototype.addCase = function(value, switchView) {
      this._caseViews[value] = switchView;
    };
    NgPlural.prototype._updateView = function() {
      this._clearViews();
      var key = getPluralCategory(this._switchValue, Object.keys(this._caseViews), this._localization);
      this._activateView(this._caseViews[key]);
    };
    NgPlural.prototype._clearViews = function() {
      if (isPresent(this._activeView))
        this._activeView.destroy();
    };
    NgPlural.prototype._activateView = function(view) {
      if (!isPresent(view))
        return;
      this._activeView = view;
      this._activeView.create();
    };
    NgPlural.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngPlural]'}]
    }];
    NgPlural.ctorParameters = [{type: NgLocalization}];
    NgPlural.propDecorators = {'ngPlural': [{type: _angular_core.Input}]};
    return NgPlural;
  }());
  var NgPluralCase = (function() {
    function NgPluralCase(value, template, viewContainer, ngPlural) {
      this.value = value;
      ngPlural.addCase(value, new SwitchView(viewContainer, template));
    }
    NgPluralCase.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngPluralCase]'}]
    }];
    NgPluralCase.ctorParameters = [{
      type: undefined,
      decorators: [{
        type: _angular_core.Attribute,
        args: ['ngPluralCase']
      }]
    }, {type: _angular_core.TemplateRef}, {type: _angular_core.ViewContainerRef}, {
      type: NgPlural,
      decorators: [{type: _angular_core.Host}]
    }];
    return NgPluralCase;
  }());
  var NgStyle = (function() {
    function NgStyle(_differs, _ngEl, _renderer) {
      this._differs = _differs;
      this._ngEl = _ngEl;
      this._renderer = _renderer;
    }
    Object.defineProperty(NgStyle.prototype, "ngStyle", {
      set: function(v) {
        this._ngStyle = v;
        if (isBlank(this._differ) && isPresent(v)) {
          this._differ = this._differs.find(this._ngStyle).create(null);
        }
      },
      enumerable: true,
      configurable: true
    });
    NgStyle.prototype.ngDoCheck = function() {
      if (isPresent(this._differ)) {
        var changes = this._differ.diff(this._ngStyle);
        if (isPresent(changes)) {
          this._applyChanges(changes);
        }
      }
    };
    NgStyle.prototype._applyChanges = function(changes) {
      var _this = this;
      changes.forEachRemovedItem(function(record) {
        _this._setStyle(record.key, null);
      });
      changes.forEachAddedItem(function(record) {
        _this._setStyle(record.key, record.currentValue);
      });
      changes.forEachChangedItem(function(record) {
        _this._setStyle(record.key, record.currentValue);
      });
    };
    NgStyle.prototype._setStyle = function(name, val) {
      var nameParts = name.split('.');
      var nameToSet = nameParts[0];
      var valToSet = isPresent(val) && nameParts.length === 2 ? "" + val + nameParts[1] : val;
      this._renderer.setElementStyle(this._ngEl.nativeElement, nameToSet, valToSet);
    };
    NgStyle.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngStyle]'}]
    }];
    NgStyle.ctorParameters = [{type: _angular_core.KeyValueDiffers}, {type: _angular_core.ElementRef}, {type: _angular_core.Renderer}];
    NgStyle.propDecorators = {'ngStyle': [{type: _angular_core.Input}]};
    return NgStyle;
  }());
  var NgTemplateOutlet = (function() {
    function NgTemplateOutlet(_viewContainerRef) {
      this._viewContainerRef = _viewContainerRef;
    }
    Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
      set: function(context) {
        this._context = context;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgTemplateOutlet.prototype, "ngTemplateOutlet", {
      set: function(templateRef) {
        this._templateRef = templateRef;
      },
      enumerable: true,
      configurable: true
    });
    NgTemplateOutlet.prototype.ngOnChanges = function() {
      if (this._viewRef) {
        this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
      }
      if (this._templateRef) {
        this._viewRef = this._viewContainerRef.createEmbeddedView(this._templateRef, this._context);
      }
    };
    NgTemplateOutlet.decorators = [{
      type: _angular_core.Directive,
      args: [{selector: '[ngTemplateOutlet]'}]
    }];
    NgTemplateOutlet.ctorParameters = [{type: _angular_core.ViewContainerRef}];
    NgTemplateOutlet.propDecorators = {
      'ngOutletContext': [{type: _angular_core.Input}],
      'ngTemplateOutlet': [{type: _angular_core.Input}]
    };
    return NgTemplateOutlet;
  }());
  var PlatformLocation = (function() {
    function PlatformLocation() {}
    Object.defineProperty(PlatformLocation.prototype, "pathname", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PlatformLocation.prototype, "search", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PlatformLocation.prototype, "hash", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    return PlatformLocation;
  }());
  var LocationStrategy = (function() {
    function LocationStrategy() {}
    return LocationStrategy;
  }());
  var APP_BASE_HREF = new _angular_core.OpaqueToken('appBaseHref');
  var Location = (function() {
    function Location(platformStrategy) {
      var _this = this;
      this._subject = new _angular_core.EventEmitter();
      this._platformStrategy = platformStrategy;
      var browserBaseHref = this._platformStrategy.getBaseHref();
      this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
      this._platformStrategy.onPopState(function(ev) {
        _this._subject.emit({
          'url': _this.path(true),
          'pop': true,
          'type': ev.type
        });
      });
    }
    Location.prototype.path = function(includeHash) {
      if (includeHash === void 0) {
        includeHash = false;
      }
      return this.normalize(this._platformStrategy.path(includeHash));
    };
    Location.prototype.isCurrentPathEqualTo = function(path, query) {
      if (query === void 0) {
        query = '';
      }
      return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
    };
    Location.prototype.normalize = function(url) {
      return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
    };
    Location.prototype.prepareExternalUrl = function(url) {
      if (url.length > 0 && !url.startsWith('/')) {
        url = '/' + url;
      }
      return this._platformStrategy.prepareExternalUrl(url);
    };
    Location.prototype.go = function(path, query) {
      if (query === void 0) {
        query = '';
      }
      this._platformStrategy.pushState(null, '', path, query);
    };
    Location.prototype.replaceState = function(path, query) {
      if (query === void 0) {
        query = '';
      }
      this._platformStrategy.replaceState(null, '', path, query);
    };
    Location.prototype.forward = function() {
      this._platformStrategy.forward();
    };
    Location.prototype.back = function() {
      this._platformStrategy.back();
    };
    Location.prototype.subscribe = function(onNext, onThrow, onReturn) {
      if (onThrow === void 0) {
        onThrow = null;
      }
      if (onReturn === void 0) {
        onReturn = null;
      }
      return this._subject.subscribe({
        next: onNext,
        error: onThrow,
        complete: onReturn
      });
    };
    Location.normalizeQueryParams = function(params) {
      return (params.length > 0 && params.substring(0, 1) != '?') ? ('?' + params) : params;
    };
    Location.joinWithSlash = function(start, end) {
      if (start.length == 0) {
        return end;
      }
      if (end.length == 0) {
        return start;
      }
      var slashes = 0;
      if (start.endsWith('/')) {
        slashes++;
      }
      if (end.startsWith('/')) {
        slashes++;
      }
      if (slashes == 2) {
        return start + end.substring(1);
      }
      if (slashes == 1) {
        return start + end;
      }
      return start + '/' + end;
    };
    Location.stripTrailingSlash = function(url) {
      if (/\/$/g.test(url)) {
        url = url.substring(0, url.length - 1);
      }
      return url;
    };
    Location.decorators = [{type: _angular_core.Injectable}];
    Location.ctorParameters = [{type: LocationStrategy}];
    return Location;
  }());
  function _stripBaseHref(baseHref, url) {
    if (baseHref.length > 0 && url.startsWith(baseHref)) {
      return url.substring(baseHref.length);
    }
    return url;
  }
  function _stripIndexHtml(url) {
    if (/\/index.html$/g.test(url)) {
      return url.substring(0, url.length - 11);
    }
    return url;
  }
  var __extends$3 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HashLocationStrategy = (function(_super) {
    __extends$3(HashLocationStrategy, _super);
    function HashLocationStrategy(_platformLocation, _baseHref) {
      _super.call(this);
      this._platformLocation = _platformLocation;
      this._baseHref = '';
      if (isPresent(_baseHref)) {
        this._baseHref = _baseHref;
      }
    }
    HashLocationStrategy.prototype.onPopState = function(fn) {
      this._platformLocation.onPopState(fn);
      this._platformLocation.onHashChange(fn);
    };
    HashLocationStrategy.prototype.getBaseHref = function() {
      return this._baseHref;
    };
    HashLocationStrategy.prototype.path = function(includeHash) {
      if (includeHash === void 0) {
        includeHash = false;
      }
      var path = this._platformLocation.hash;
      if (!isPresent(path))
        path = '#';
      return path.length > 0 ? path.substring(1) : path;
    };
    HashLocationStrategy.prototype.prepareExternalUrl = function(internal) {
      var url = Location.joinWithSlash(this._baseHref, internal);
      return url.length > 0 ? ('#' + url) : url;
    };
    HashLocationStrategy.prototype.pushState = function(state, title, path, queryParams) {
      var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
      if (url.length == 0) {
        url = this._platformLocation.pathname;
      }
      this._platformLocation.pushState(state, title, url);
    };
    HashLocationStrategy.prototype.replaceState = function(state, title, path, queryParams) {
      var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
      if (url.length == 0) {
        url = this._platformLocation.pathname;
      }
      this._platformLocation.replaceState(state, title, url);
    };
    HashLocationStrategy.prototype.forward = function() {
      this._platformLocation.forward();
    };
    HashLocationStrategy.prototype.back = function() {
      this._platformLocation.back();
    };
    HashLocationStrategy.decorators = [{type: _angular_core.Injectable}];
    HashLocationStrategy.ctorParameters = [{type: PlatformLocation}, {
      type: undefined,
      decorators: [{type: _angular_core.Optional}, {
        type: _angular_core.Inject,
        args: [APP_BASE_HREF]
      }]
    }];
    return HashLocationStrategy;
  }(LocationStrategy));
  var __extends$4 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var PathLocationStrategy = (function(_super) {
    __extends$4(PathLocationStrategy, _super);
    function PathLocationStrategy(_platformLocation, href) {
      _super.call(this);
      this._platformLocation = _platformLocation;
      if (isBlank(href)) {
        href = this._platformLocation.getBaseHrefFromDOM();
      }
      if (isBlank(href)) {
        throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
      }
      this._baseHref = href;
    }
    PathLocationStrategy.prototype.onPopState = function(fn) {
      this._platformLocation.onPopState(fn);
      this._platformLocation.onHashChange(fn);
    };
    PathLocationStrategy.prototype.getBaseHref = function() {
      return this._baseHref;
    };
    PathLocationStrategy.prototype.prepareExternalUrl = function(internal) {
      return Location.joinWithSlash(this._baseHref, internal);
    };
    PathLocationStrategy.prototype.path = function(includeHash) {
      if (includeHash === void 0) {
        includeHash = false;
      }
      var pathname = this._platformLocation.pathname + Location.normalizeQueryParams(this._platformLocation.search);
      var hash = this._platformLocation.hash;
      return hash && includeHash ? "" + pathname + hash : pathname;
    };
    PathLocationStrategy.prototype.pushState = function(state, title, url, queryParams) {
      var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
      this._platformLocation.pushState(state, title, externalUrl);
    };
    PathLocationStrategy.prototype.replaceState = function(state, title, url, queryParams) {
      var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
      this._platformLocation.replaceState(state, title, externalUrl);
    };
    PathLocationStrategy.prototype.forward = function() {
      this._platformLocation.forward();
    };
    PathLocationStrategy.prototype.back = function() {
      this._platformLocation.back();
    };
    PathLocationStrategy.decorators = [{type: _angular_core.Injectable}];
    PathLocationStrategy.ctorParameters = [{type: PlatformLocation}, {
      type: undefined,
      decorators: [{type: _angular_core.Optional}, {
        type: _angular_core.Inject,
        args: [APP_BASE_HREF]
      }]
    }];
    return PathLocationStrategy;
  }(LocationStrategy));
  var CORE_DIRECTIVES = [NgClass, NgFor, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase];
  var COMMON_DIRECTIVES = CORE_DIRECTIVES;
  var COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe];
  var CommonModule = (function() {
    function CommonModule() {}
    CommonModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{
        declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
        exports: [COMMON_DIRECTIVES, COMMON_PIPES],
        providers: [{
          provide: NgLocalization,
          useClass: NgLocaleLocalization
        }]
      }]
    }];
    CommonModule.ctorParameters = [];
    return CommonModule;
  }());
  exports.NgLocalization = NgLocalization;
  exports.CommonModule = CommonModule;
  exports.AsyncPipe = AsyncPipe;
  exports.DatePipe = DatePipe;
  exports.I18nPluralPipe = I18nPluralPipe;
  exports.I18nSelectPipe = I18nSelectPipe;
  exports.JsonPipe = JsonPipe;
  exports.LowerCasePipe = LowerCasePipe;
  exports.CurrencyPipe = CurrencyPipe;
  exports.DecimalPipe = DecimalPipe;
  exports.PercentPipe = PercentPipe;
  exports.SlicePipe = SlicePipe;
  exports.UpperCasePipe = UpperCasePipe;
  exports.NgClass = NgClass;
  exports.NgFor = NgFor;
  exports.NgIf = NgIf;
  exports.NgPlural = NgPlural;
  exports.NgPluralCase = NgPluralCase;
  exports.NgStyle = NgStyle;
  exports.NgSwitch = NgSwitch;
  exports.NgSwitchCase = NgSwitchCase;
  exports.NgSwitchDefault = NgSwitchDefault;
  exports.NgTemplateOutlet = NgTemplateOutlet;
  exports.PlatformLocation = PlatformLocation;
  exports.LocationStrategy = LocationStrategy;
  exports.APP_BASE_HREF = APP_BASE_HREF;
  exports.HashLocationStrategy = HashLocationStrategy;
  exports.PathLocationStrategy = PathLocationStrategy;
  exports.Location = Location;
}));

})();
$__System.registerDynamic('8b', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when an action is invalid because the object has been
     * unsubscribed.
     *
     * @see {@link Subject}
     * @see {@link BehaviorSubject}
     *
     * @class ObjectUnsubscribedError
     */
    var ObjectUnsubscribedError = function (_super) {
        __extends(ObjectUnsubscribedError, _super);
        function ObjectUnsubscribedError() {
            var err = _super.call(this, 'object unsubscribed');
            this.name = err.name = 'ObjectUnsubscribedError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return ObjectUnsubscribedError;
    }(Error);
    exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
    

    return module.exports;
});
$__System.registerDynamic("8e", ["8f"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscription_1 = $__require("8f");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SubjectSubscription = function (_super) {
        __extends(SubjectSubscription, _super);
        function SubjectSubscription(subject, subscriber) {
            _super.call(this);
            this.subject = subject;
            this.subscriber = subscriber;
            this.closed = false;
        }
        SubjectSubscription.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.closed = true;
            var subject = this.subject;
            var observers = subject.observers;
            this.subject = null;
            if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
                return;
            }
            var subscriberIndex = observers.indexOf(this.subscriber);
            if (subscriberIndex !== -1) {
                observers.splice(subscriberIndex, 1);
            }
        };
        return SubjectSubscription;
    }(Subscription_1.Subscription);
    exports.SubjectSubscription = SubjectSubscription;
    

    return module.exports;
});
$__System.registerDynamic('34', ['63', '76', '8f', '8b', '8e', '90'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1 = $__require('63');
    var Subscriber_1 = $__require('76');
    var Subscription_1 = $__require('8f');
    var ObjectUnsubscribedError_1 = $__require('8b');
    var SubjectSubscription_1 = $__require('8e');
    var rxSubscriber_1 = $__require('90');
    /**
     * @class SubjectSubscriber<T>
     */
    var SubjectSubscriber = function (_super) {
        __extends(SubjectSubscriber, _super);
        function SubjectSubscriber(destination) {
            _super.call(this, destination);
            this.destination = destination;
        }
        return SubjectSubscriber;
    }(Subscriber_1.Subscriber);
    exports.SubjectSubscriber = SubjectSubscriber;
    /**
     * @class Subject<T>
     */
    var Subject = function (_super) {
        __extends(Subject, _super);
        function Subject() {
            _super.call(this);
            this.observers = [];
            this.closed = false;
            this.isStopped = false;
            this.hasError = false;
            this.thrownError = null;
        }
        Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
            return new SubjectSubscriber(this);
        };
        Subject.prototype.lift = function (operator) {
            var subject = new AnonymousSubject(this, this);
            subject.operator = operator;
            return subject;
        };
        Subject.prototype.next = function (value) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            if (!this.isStopped) {
                var observers = this.observers;
                var len = observers.length;
                var copy = observers.slice();
                for (var i = 0; i < len; i++) {
                    copy[i].next(value);
                }
            }
        };
        Subject.prototype.error = function (err) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            this.hasError = true;
            this.thrownError = err;
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].error(err);
            }
            this.observers.length = 0;
        };
        Subject.prototype.complete = function () {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].complete();
            }
            this.observers.length = 0;
        };
        Subject.prototype.unsubscribe = function () {
            this.isStopped = true;
            this.closed = true;
            this.observers = null;
        };
        Subject.prototype._subscribe = function (subscriber) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            } else if (this.hasError) {
                subscriber.error(this.thrownError);
                return Subscription_1.Subscription.EMPTY;
            } else if (this.isStopped) {
                subscriber.complete();
                return Subscription_1.Subscription.EMPTY;
            } else {
                this.observers.push(subscriber);
                return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
            }
        };
        Subject.prototype.asObservable = function () {
            var observable = new Observable_1.Observable();
            observable.source = this;
            return observable;
        };
        Subject.create = function (destination, source) {
            return new AnonymousSubject(destination, source);
        };
        return Subject;
    }(Observable_1.Observable);
    exports.Subject = Subject;
    /**
     * @class AnonymousSubject<T>
     */
    var AnonymousSubject = function (_super) {
        __extends(AnonymousSubject, _super);
        function AnonymousSubject(destination, source) {
            _super.call(this);
            this.destination = destination;
            this.source = source;
        }
        AnonymousSubject.prototype.next = function (value) {
            var destination = this.destination;
            if (destination && destination.next) {
                destination.next(value);
            }
        };
        AnonymousSubject.prototype.error = function (err) {
            var destination = this.destination;
            if (destination && destination.error) {
                this.destination.error(err);
            }
        };
        AnonymousSubject.prototype.complete = function () {
            var destination = this.destination;
            if (destination && destination.complete) {
                this.destination.complete();
            }
        };
        AnonymousSubject.prototype._subscribe = function (subscriber) {
            var source = this.source;
            if (source) {
                return this.source.subscribe(subscriber);
            } else {
                return Subscription_1.Subscription.EMPTY;
            }
        };
        return AnonymousSubject;
    }(Subject);
    exports.AnonymousSubject = AnonymousSubject;
    

    return module.exports;
});
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/Subject'), require('rxjs/Observable')) : typeof define === 'function' && define.amd ? define("3", ["exports", "34", "63"], factory) : (factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}), global.Rx, global.Rx));
}(this, function(exports, rxjs_Subject, rxjs_Observable) {
  'use strict';
  var globalScope;
  if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
      globalScope = self;
    } else {
      globalScope = global;
    }
  } else {
    globalScope = window;
  }
  function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
  }
  var global$1 = globalScope;
  function getTypeNameForDebugging(type) {
    if (type['name']) {
      return type['name'];
    }
    return typeof type;
  }
  var Math = global$1.Math;
  global$1.assert = function assert(condition) {};
  function isPresent(obj) {
    return obj !== undefined && obj !== null;
  }
  function isBlank(obj) {
    return obj === undefined || obj === null;
  }
  function isString(obj) {
    return typeof obj === 'string';
  }
  function isFunction(obj) {
    return typeof obj === 'function';
  }
  function isPromise(obj) {
    return isPresent(obj) && isFunction(obj.then);
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token === undefined || token === null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return token.overriddenName;
    }
    if (token.name) {
      return token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);
  }
  var StringWrapper = (function() {
    function StringWrapper() {}
    StringWrapper.fromCharCode = function(code) {
      return String.fromCharCode(code);
    };
    StringWrapper.charCodeAt = function(s, index) {
      return s.charCodeAt(index);
    };
    StringWrapper.split = function(s, regExp) {
      return s.split(regExp);
    };
    StringWrapper.equals = function(s, s2) {
      return s === s2;
    };
    StringWrapper.stripLeft = function(s, charVal) {
      if (s && s.length) {
        var pos = 0;
        for (var i = 0; i < s.length; i++) {
          if (s[i] != charVal)
            break;
          pos++;
        }
        s = s.substring(pos);
      }
      return s;
    };
    StringWrapper.stripRight = function(s, charVal) {
      if (s && s.length) {
        var pos = s.length;
        for (var i = s.length - 1; i >= 0; i--) {
          if (s[i] != charVal)
            break;
          pos--;
        }
        s = s.substring(0, pos);
      }
      return s;
    };
    StringWrapper.replace = function(s, from, replace) {
      return s.replace(from, replace);
    };
    StringWrapper.replaceAll = function(s, from, replace) {
      return s.replace(from, replace);
    };
    StringWrapper.slice = function(s, from, to) {
      if (from === void 0) {
        from = 0;
      }
      if (to === void 0) {
        to = null;
      }
      return s.slice(from, to === null ? undefined : to);
    };
    StringWrapper.replaceAllMapped = function(s, from, cb) {
      return s.replace(from, function() {
        var matches = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          matches[_i - 0] = arguments[_i];
        }
        matches.splice(-2, 2);
        return cb(matches);
      });
    };
    StringWrapper.contains = function(s, substr) {
      return s.indexOf(substr) != -1;
    };
    StringWrapper.compare = function(a, b) {
      if (a < b) {
        return -1;
      } else if (a > b) {
        return 1;
      } else {
        return 0;
      }
    };
    return StringWrapper;
  }());
  var NumberWrapper = (function() {
    function NumberWrapper() {}
    NumberWrapper.toFixed = function(n, fractionDigits) {
      return n.toFixed(fractionDigits);
    };
    NumberWrapper.equal = function(a, b) {
      return a === b;
    };
    NumberWrapper.parseIntAutoRadix = function(text) {
      var result = parseInt(text);
      if (isNaN(result)) {
        throw new Error('Invalid integer literal when parsing ' + text);
      }
      return result;
    };
    NumberWrapper.parseInt = function(text, radix) {
      if (radix == 10) {
        if (/^(\-|\+)?[0-9]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else if (radix == 16) {
        if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else {
        var result = parseInt(text, radix);
        if (!isNaN(result)) {
          return result;
        }
      }
      throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
    };
    NumberWrapper.parseFloat = function(text) {
      return parseFloat(text);
    };
    Object.defineProperty(NumberWrapper, "NaN", {
      get: function() {
        return NaN;
      },
      enumerable: true,
      configurable: true
    });
    NumberWrapper.isNumeric = function(value) {
      return !isNaN(value - parseFloat(value));
    };
    NumberWrapper.isNaN = function(value) {
      return isNaN(value);
    };
    NumberWrapper.isInteger = function(value) {
      return Number.isInteger(value);
    };
    return NumberWrapper;
  }());
  function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
  }
  function getMapKey(value) {
    return value;
  }
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
  }
  function print(obj) {
    console.log(obj);
  }
  function warn(obj) {
    console.warn(obj);
  }
  var _symbolIterator = null;
  function getSymbolIterator() {
    if (isBlank(_symbolIterator)) {
      if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
        _symbolIterator = Symbol.iterator;
      } else {
        var keys = Object.getOwnPropertyNames(Map.prototype);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
            _symbolIterator = key;
          }
        }
      }
    }
    return _symbolIterator;
  }
  function isPrimitive(obj) {
    return !isJsObject(obj);
  }
  function forwardRef(forwardRefFn) {
    forwardRefFn.__forward_ref__ = forwardRef;
    forwardRefFn.toString = function() {
      return stringify(this());
    };
    return forwardRefFn;
  }
  function resolveForwardRef(type) {
    if (isFunction(type) && type.hasOwnProperty('__forward_ref__') && type.__forward_ref__ === forwardRef) {
      return type();
    } else {
      return type;
    }
  }
  var InjectMetadata = (function() {
    function InjectMetadata(token) {
      this.token = token;
    }
    InjectMetadata.prototype.toString = function() {
      return "@Inject(" + stringify(this.token) + ")";
    };
    return InjectMetadata;
  }());
  var OptionalMetadata = (function() {
    function OptionalMetadata() {}
    OptionalMetadata.prototype.toString = function() {
      return "@Optional()";
    };
    return OptionalMetadata;
  }());
  var DependencyMetadata = (function() {
    function DependencyMetadata() {}
    Object.defineProperty(DependencyMetadata.prototype, "token", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    return DependencyMetadata;
  }());
  var InjectableMetadata = (function() {
    function InjectableMetadata() {}
    return InjectableMetadata;
  }());
  var SelfMetadata = (function() {
    function SelfMetadata() {}
    SelfMetadata.prototype.toString = function() {
      return "@Self()";
    };
    return SelfMetadata;
  }());
  var SkipSelfMetadata = (function() {
    function SkipSelfMetadata() {}
    SkipSelfMetadata.prototype.toString = function() {
      return "@SkipSelf()";
    };
    return SkipSelfMetadata;
  }());
  var HostMetadata = (function() {
    function HostMetadata() {}
    HostMetadata.prototype.toString = function() {
      return "@Host()";
    };
    return HostMetadata;
  }());
  var _nextClassId = 0;
  function extractAnnotation(annotation) {
    if (isFunction(annotation) && annotation.hasOwnProperty('annotation')) {
      annotation = annotation.annotation;
    }
    return annotation;
  }
  function applyParams(fnOrArray, key) {
    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array) {
      throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
    }
    if (isFunction(fnOrArray)) {
      return fnOrArray;
    } else if (fnOrArray instanceof Array) {
      var annotations = fnOrArray;
      var annoLength = annotations.length - 1;
      var fn = fnOrArray[annoLength];
      if (!isFunction(fn)) {
        throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
      }
      if (annoLength != fn.length) {
        throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
      }
      var paramsAnnotations = [];
      for (var i = 0,
          ii = annotations.length - 1; i < ii; i++) {
        var paramAnnotations = [];
        paramsAnnotations.push(paramAnnotations);
        var annotation = annotations[i];
        if (annotation instanceof Array) {
          for (var j = 0; j < annotation.length; j++) {
            paramAnnotations.push(extractAnnotation(annotation[j]));
          }
        } else if (isFunction(annotation)) {
          paramAnnotations.push(extractAnnotation(annotation));
        } else {
          paramAnnotations.push(annotation);
        }
      }
      Reflect.defineMetadata('parameters', paramsAnnotations, fn);
      return fn;
    } else {
      throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
    }
  }
  function Class(clsDef) {
    var constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
    var proto = constructor.prototype;
    if (clsDef.hasOwnProperty('extends')) {
      if (isFunction(clsDef.extends)) {
        constructor.prototype = proto = Object.create(clsDef.extends.prototype);
      } else {
        throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
      }
    }
    for (var key in clsDef) {
      if (key != 'extends' && key != 'prototype' && clsDef.hasOwnProperty(key)) {
        proto[key] = applyParams(clsDef[key], key);
      }
    }
    if (this && this.annotations instanceof Array) {
      Reflect.defineMetadata('annotations', this.annotations, constructor);
    }
    var constructorName = constructor['name'];
    if (!constructorName || constructorName === 'constructor') {
      constructor['overriddenName'] = "class" + _nextClassId++;
    }
    return constructor;
  }
  var Reflect = global$1.Reflect;
  function makeDecorator(annotationCls, chainFn) {
    if (chainFn === void 0) {
      chainFn = null;
    }
    function DecoratorFactory(objOrType) {
      if (!(Reflect && Reflect.getMetadata)) {
        throw 'reflect-metadata shim is required when using class decorators';
      }
      var annotationInstance = new annotationCls(objOrType);
      if (this instanceof annotationCls) {
        return annotationInstance;
      } else {
        var chainAnnotation = isFunction(this) && this.annotations instanceof Array ? this.annotations : [];
        chainAnnotation.push(annotationInstance);
        var TypeDecorator = function TypeDecorator(cls) {
          var annotations = Reflect.getOwnMetadata('annotations', cls) || [];
          annotations.push(annotationInstance);
          Reflect.defineMetadata('annotations', annotations, cls);
          return cls;
        };
        TypeDecorator.annotations = chainAnnotation;
        TypeDecorator.Class = Class;
        if (chainFn)
          chainFn(TypeDecorator);
        return TypeDecorator;
      }
    }
    DecoratorFactory.prototype = Object.create(annotationCls.prototype);
    DecoratorFactory.annotationCls = annotationCls;
    return DecoratorFactory;
  }
  function makeParamDecorator(annotationCls) {
    function ParamDecoratorFactory() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      var annotationInstance = Object.create(annotationCls.prototype);
      annotationCls.apply(annotationInstance, args);
      if (this instanceof annotationCls) {
        return annotationInstance;
      } else {
        ParamDecorator.annotation = annotationInstance;
        return ParamDecorator;
      }
      function ParamDecorator(cls, unusedKey, index) {
        var parameters = Reflect.getMetadata('parameters', cls) || [];
        while (parameters.length <= index) {
          parameters.push(null);
        }
        parameters[index] = parameters[index] || [];
        var annotationsForParam = parameters[index];
        annotationsForParam.push(annotationInstance);
        Reflect.defineMetadata('parameters', parameters, cls);
        return cls;
      }
    }
    ParamDecoratorFactory.prototype = Object.create(annotationCls.prototype);
    ParamDecoratorFactory.annotationCls = annotationCls;
    return ParamDecoratorFactory;
  }
  function makePropDecorator(annotationCls) {
    function PropDecoratorFactory() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      var decoratorInstance = Object.create(annotationCls.prototype);
      annotationCls.apply(decoratorInstance, args);
      if (this instanceof annotationCls) {
        return decoratorInstance;
      } else {
        return function PropDecorator(target, name) {
          var meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};
          meta[name] = meta[name] || [];
          meta[name].unshift(decoratorInstance);
          Reflect.defineMetadata('propMetadata', meta, target.constructor);
        };
      }
    }
    PropDecoratorFactory.prototype = Object.create(annotationCls.prototype);
    PropDecoratorFactory.annotationCls = annotationCls;
    return PropDecoratorFactory;
  }
  var Inject = makeParamDecorator(InjectMetadata);
  var Optional = makeParamDecorator(OptionalMetadata);
  var Injectable = makeDecorator(InjectableMetadata);
  var Self = makeParamDecorator(SelfMetadata);
  var Host = makeParamDecorator(HostMetadata);
  var SkipSelf = makeParamDecorator(SkipSelfMetadata);
  var OpaqueToken = (function() {
    function OpaqueToken(_desc) {
      this._desc = _desc;
    }
    OpaqueToken.prototype.toString = function() {
      return "Token " + this._desc;
    };
    OpaqueToken.decorators = [{type: Injectable}];
    OpaqueToken.ctorParameters = [null];
    return OpaqueToken;
  }());
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken('AnalyzeForEntryComponents');
  var AttributeMetadata = (function(_super) {
    __extends(AttributeMetadata, _super);
    function AttributeMetadata(attributeName) {
      _super.call(this);
      this.attributeName = attributeName;
    }
    Object.defineProperty(AttributeMetadata.prototype, "token", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    AttributeMetadata.prototype.toString = function() {
      return "@Attribute(" + stringify(this.attributeName) + ")";
    };
    return AttributeMetadata;
  }(DependencyMetadata));
  var QueryMetadata = (function(_super) {
    __extends(QueryMetadata, _super);
    function QueryMetadata(_selector, _a) {
      var _b = _a === void 0 ? {} : _a,
          _c = _b.descendants,
          descendants = _c === void 0 ? false : _c,
          _d = _b.first,
          first = _d === void 0 ? false : _d,
          _e = _b.read,
          read = _e === void 0 ? null : _e;
      _super.call(this);
      this._selector = _selector;
      this.descendants = descendants;
      this.first = first;
      this.read = read;
    }
    Object.defineProperty(QueryMetadata.prototype, "isViewQuery", {
      get: function() {
        return false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(QueryMetadata.prototype, "selector", {
      get: function() {
        return resolveForwardRef(this._selector);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(QueryMetadata.prototype, "isVarBindingQuery", {
      get: function() {
        return isString(this.selector);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(QueryMetadata.prototype, "varBindings", {
      get: function() {
        return StringWrapper.split(this.selector, /\s*,\s*/g);
      },
      enumerable: true,
      configurable: true
    });
    QueryMetadata.prototype.toString = function() {
      return "@Query(" + stringify(this.selector) + ")";
    };
    return QueryMetadata;
  }(DependencyMetadata));
  var ContentChildrenMetadata = (function(_super) {
    __extends(ContentChildrenMetadata, _super);
    function ContentChildrenMetadata(_selector, _a) {
      var _b = _a === void 0 ? {} : _a,
          _c = _b.descendants,
          descendants = _c === void 0 ? false : _c,
          _d = _b.read,
          read = _d === void 0 ? null : _d;
      _super.call(this, _selector, {
        descendants: descendants,
        read: read
      });
    }
    return ContentChildrenMetadata;
  }(QueryMetadata));
  var ContentChildMetadata = (function(_super) {
    __extends(ContentChildMetadata, _super);
    function ContentChildMetadata(_selector, _a) {
      var _b = (_a === void 0 ? {} : _a).read,
          read = _b === void 0 ? null : _b;
      _super.call(this, _selector, {
        descendants: true,
        first: true,
        read: read
      });
    }
    return ContentChildMetadata;
  }(QueryMetadata));
  var ViewQueryMetadata = (function(_super) {
    __extends(ViewQueryMetadata, _super);
    function ViewQueryMetadata(_selector, _a) {
      var _b = _a === void 0 ? {} : _a,
          _c = _b.descendants,
          descendants = _c === void 0 ? false : _c,
          _d = _b.first,
          first = _d === void 0 ? false : _d,
          _e = _b.read,
          read = _e === void 0 ? null : _e;
      _super.call(this, _selector, {
        descendants: descendants,
        first: first,
        read: read
      });
    }
    Object.defineProperty(ViewQueryMetadata.prototype, "isViewQuery", {
      get: function() {
        return true;
      },
      enumerable: true,
      configurable: true
    });
    return ViewQueryMetadata;
  }(QueryMetadata));
  var ViewChildrenMetadata = (function(_super) {
    __extends(ViewChildrenMetadata, _super);
    function ViewChildrenMetadata(_selector, _a) {
      var _b = (_a === void 0 ? {} : _a).read,
          read = _b === void 0 ? null : _b;
      _super.call(this, _selector, {
        descendants: true,
        read: read
      });
    }
    ViewChildrenMetadata.prototype.toString = function() {
      return "@ViewChildren(" + stringify(this.selector) + ")";
    };
    return ViewChildrenMetadata;
  }(ViewQueryMetadata));
  var ViewChildMetadata = (function(_super) {
    __extends(ViewChildMetadata, _super);
    function ViewChildMetadata(_selector, _a) {
      var _b = (_a === void 0 ? {} : _a).read,
          read = _b === void 0 ? null : _b;
      _super.call(this, _selector, {
        descendants: true,
        first: true,
        read: read
      });
    }
    return ViewChildMetadata;
  }(ViewQueryMetadata));
  exports.ChangeDetectionStrategy;
  (function(ChangeDetectionStrategy) {
    ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
    ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
  })(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));
  var ChangeDetectorStatus;
  (function(ChangeDetectorStatus) {
    ChangeDetectorStatus[ChangeDetectorStatus["CheckOnce"] = 0] = "CheckOnce";
    ChangeDetectorStatus[ChangeDetectorStatus["Checked"] = 1] = "Checked";
    ChangeDetectorStatus[ChangeDetectorStatus["CheckAlways"] = 2] = "CheckAlways";
    ChangeDetectorStatus[ChangeDetectorStatus["Detached"] = 3] = "Detached";
    ChangeDetectorStatus[ChangeDetectorStatus["Errored"] = 4] = "Errored";
    ChangeDetectorStatus[ChangeDetectorStatus["Destroyed"] = 5] = "Destroyed";
  })(ChangeDetectorStatus || (ChangeDetectorStatus = {}));
  var CHANGE_DETECTION_STRATEGY_VALUES = [exports.ChangeDetectionStrategy.OnPush, exports.ChangeDetectionStrategy.Default];
  function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
    return isBlank(changeDetectionStrategy) || changeDetectionStrategy === exports.ChangeDetectionStrategy.Default;
  }
  var __extends$2 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function unimplemented() {
    throw new Error('unimplemented');
  }
  var BaseError = (function(_super) {
    __extends$2(BaseError, _super);
    function BaseError(message) {
      var nativeError = _super.call(this, message);
      this._nativeError = nativeError;
    }
    Object.defineProperty(BaseError.prototype, "message", {
      get: function() {
        return this._nativeError.message;
      },
      set: function(message) {
        this._nativeError.message = message;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseError.prototype, "name", {
      get: function() {
        return this._nativeError.name;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseError.prototype, "stack", {
      get: function() {
        return this._nativeError.stack;
      },
      set: function(value) {
        this._nativeError.stack = value;
      },
      enumerable: true,
      configurable: true
    });
    BaseError.prototype.toString = function() {
      return this._nativeError.toString();
    };
    return BaseError;
  }(Error));
  var WrappedError = (function(_super) {
    __extends$2(WrappedError, _super);
    function WrappedError(message, error) {
      _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
      this.originalError = error;
    }
    Object.defineProperty(WrappedError.prototype, "stack", {
      get: function() {
        return (this.originalError instanceof Error ? this.originalError : this._nativeError).stack;
      },
      enumerable: true,
      configurable: true
    });
    return WrappedError;
  }(BaseError));
  var _THROW_IF_NOT_FOUND = new Object();
  var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
  var _NullInjector = (function() {
    function _NullInjector() {}
    _NullInjector.prototype.get = function(token, notFoundValue) {
      if (notFoundValue === void 0) {
        notFoundValue = _THROW_IF_NOT_FOUND;
      }
      if (notFoundValue === _THROW_IF_NOT_FOUND) {
        throw new Error("No provider for " + stringify(token) + "!");
      }
      return notFoundValue;
    };
    return _NullInjector;
  }());
  var Injector = (function() {
    function Injector() {}
    Injector.prototype.get = function(token, notFoundValue) {
      return unimplemented();
    };
    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
    Injector.NULL = new _NullInjector();
    return Injector;
  }());
  var Map$1 = global$1.Map;
  var Set = global$1.Set;
  var createMapFromPairs = (function() {
    try {
      if (new Map$1([[1, 2]]).size === 1) {
        return function createMapFromPairs(pairs) {
          return new Map$1(pairs);
        };
      }
    } catch (e) {}
    return function createMapAndPopulateFromPairs(pairs) {
      var map = new Map$1();
      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i];
        map.set(pair[0], pair[1]);
      }
      return map;
    };
  })();
  var createMapFromMap = (function() {
    try {
      if (new Map$1(new Map$1())) {
        return function createMapFromMap(m) {
          return new Map$1(m);
        };
      }
    } catch (e) {}
    return function createMapAndPopulateFromMap(m) {
      var map = new Map$1();
      m.forEach(function(v, k) {
        map.set(k, v);
      });
      return map;
    };
  })();
  var _clearValues = (function() {
    if ((new Map$1()).keys().next) {
      return function _clearValues(m) {
        var keyIterator = m.keys();
        var k;
        while (!((k = keyIterator.next()).done)) {
          m.set(k.value, null);
        }
      };
    } else {
      return function _clearValuesWithForeEach(m) {
        m.forEach(function(v, k) {
          m.set(k, null);
        });
      };
    }
  })();
  var _arrayFromMap = (function() {
    try {
      if ((new Map$1()).values().next) {
        return function createArrayFromMap(m, getValues) {
          return getValues ? Array.from(m.values()) : Array.from(m.keys());
        };
      }
    } catch (e) {}
    return function createArrayFromMapWithForeach(m, getValues) {
      var res = ListWrapper.createFixedSize(m.size),
          i = 0;
      m.forEach(function(v, k) {
        res[i] = getValues ? v : k;
        i++;
      });
      return res;
    };
  })();
  var MapWrapper = (function() {
    function MapWrapper() {}
    MapWrapper.clone = function(m) {
      return createMapFromMap(m);
    };
    MapWrapper.createFromStringMap = function(stringMap) {
      var result = new Map$1();
      for (var prop in stringMap) {
        result.set(prop, stringMap[prop]);
      }
      return result;
    };
    MapWrapper.toStringMap = function(m) {
      var r = {};
      m.forEach(function(v, k) {
        return r[k] = v;
      });
      return r;
    };
    MapWrapper.createFromPairs = function(pairs) {
      return createMapFromPairs(pairs);
    };
    MapWrapper.clearValues = function(m) {
      _clearValues(m);
    };
    MapWrapper.iterable = function(m) {
      return m;
    };
    MapWrapper.keys = function(m) {
      return _arrayFromMap(m, false);
    };
    MapWrapper.values = function(m) {
      return _arrayFromMap(m, true);
    };
    return MapWrapper;
  }());
  var StringMapWrapper = (function() {
    function StringMapWrapper() {}
    StringMapWrapper.create = function() {
      return {};
    };
    StringMapWrapper.contains = function(map, key) {
      return map.hasOwnProperty(key);
    };
    StringMapWrapper.get = function(map, key) {
      return map.hasOwnProperty(key) ? map[key] : undefined;
    };
    StringMapWrapper.set = function(map, key, value) {
      map[key] = value;
    };
    StringMapWrapper.keys = function(map) {
      return Object.keys(map);
    };
    StringMapWrapper.values = function(map) {
      return Object.keys(map).map(function(k) {
        return map[k];
      });
    };
    StringMapWrapper.isEmpty = function(map) {
      for (var prop in map) {
        return false;
      }
      return true;
    };
    StringMapWrapper.delete = function(map, key) {
      delete map[key];
    };
    StringMapWrapper.forEach = function(map, callback) {
      for (var _i = 0,
          _a = Object.keys(map); _i < _a.length; _i++) {
        var k = _a[_i];
        callback(map[k], k);
      }
    };
    StringMapWrapper.merge = function(m1, m2) {
      var m = {};
      for (var _i = 0,
          _a = Object.keys(m1); _i < _a.length; _i++) {
        var k = _a[_i];
        m[k] = m1[k];
      }
      for (var _b = 0,
          _c = Object.keys(m2); _b < _c.length; _b++) {
        var k = _c[_b];
        m[k] = m2[k];
      }
      return m;
    };
    StringMapWrapper.equals = function(m1, m2) {
      var k1 = Object.keys(m1);
      var k2 = Object.keys(m2);
      if (k1.length != k2.length) {
        return false;
      }
      var key;
      for (var i = 0; i < k1.length; i++) {
        key = k1[i];
        if (m1[key] !== m2[key]) {
          return false;
        }
      }
      return true;
    };
    return StringMapWrapper;
  }());
  var ListWrapper = (function() {
    function ListWrapper() {}
    ListWrapper.createFixedSize = function(size) {
      return new Array(size);
    };
    ListWrapper.createGrowableSize = function(size) {
      return new Array(size);
    };
    ListWrapper.clone = function(array) {
      return array.slice(0);
    };
    ListWrapper.forEachWithIndex = function(array, fn) {
      for (var i = 0; i < array.length; i++) {
        fn(array[i], i);
      }
    };
    ListWrapper.first = function(array) {
      if (!array)
        return null;
      return array[0];
    };
    ListWrapper.last = function(array) {
      if (!array || array.length == 0)
        return null;
      return array[array.length - 1];
    };
    ListWrapper.indexOf = function(array, value, startIndex) {
      if (startIndex === void 0) {
        startIndex = 0;
      }
      return array.indexOf(value, startIndex);
    };
    ListWrapper.contains = function(list, el) {
      return list.indexOf(el) !== -1;
    };
    ListWrapper.reversed = function(array) {
      var a = ListWrapper.clone(array);
      return a.reverse();
    };
    ListWrapper.concat = function(a, b) {
      return a.concat(b);
    };
    ListWrapper.insert = function(list, index, value) {
      list.splice(index, 0, value);
    };
    ListWrapper.removeAt = function(list, index) {
      var res = list[index];
      list.splice(index, 1);
      return res;
    };
    ListWrapper.removeAll = function(list, items) {
      for (var i = 0; i < items.length; ++i) {
        var index = list.indexOf(items[i]);
        list.splice(index, 1);
      }
    };
    ListWrapper.remove = function(list, el) {
      var index = list.indexOf(el);
      if (index > -1) {
        list.splice(index, 1);
        return true;
      }
      return false;
    };
    ListWrapper.clear = function(list) {
      list.length = 0;
    };
    ListWrapper.isEmpty = function(list) {
      return list.length == 0;
    };
    ListWrapper.fill = function(list, value, start, end) {
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = null;
      }
      list.fill(value, start, end === null ? list.length : end);
    };
    ListWrapper.equals = function(a, b) {
      if (a.length != b.length)
        return false;
      for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
          return false;
      }
      return true;
    };
    ListWrapper.slice = function(l, from, to) {
      if (from === void 0) {
        from = 0;
      }
      if (to === void 0) {
        to = null;
      }
      return l.slice(from, to === null ? undefined : to);
    };
    ListWrapper.splice = function(l, from, length) {
      return l.splice(from, length);
    };
    ListWrapper.sort = function(l, compareFn) {
      if (isPresent(compareFn)) {
        l.sort(compareFn);
      } else {
        l.sort();
      }
    };
    ListWrapper.toString = function(l) {
      return l.toString();
    };
    ListWrapper.toJSON = function(l) {
      return JSON.stringify(l);
    };
    ListWrapper.maximum = function(list, predicate) {
      if (list.length == 0) {
        return null;
      }
      var solution = null;
      var maxValue = -Infinity;
      for (var index = 0; index < list.length; index++) {
        var candidate = list[index];
        if (isBlank(candidate)) {
          continue;
        }
        var candidateValue = predicate(candidate);
        if (candidateValue > maxValue) {
          solution = candidate;
          maxValue = candidateValue;
        }
      }
      return solution;
    };
    ListWrapper.flatten = function(list) {
      var target = [];
      _flattenArray(list, target);
      return target;
    };
    ListWrapper.addAll = function(list, source) {
      for (var i = 0; i < source.length; i++) {
        list.push(source[i]);
      }
    };
    return ListWrapper;
  }());
  function _flattenArray(source, target) {
    if (isPresent(source)) {
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        if (isArray(item)) {
          _flattenArray(item, target);
        } else {
          target.push(item);
        }
      }
    }
    return target;
  }
  function isListLikeIterable(obj) {
    if (!isJsObject(obj))
      return false;
    return isArray(obj) || (!(obj instanceof Map$1) && getSymbolIterator() in obj);
  }
  function areIterablesEqual(a, b, comparator) {
    var iterator1 = a[getSymbolIterator()]();
    var iterator2 = b[getSymbolIterator()]();
    while (true) {
      var item1 = iterator1.next();
      var item2 = iterator2.next();
      if (item1.done && item2.done)
        return true;
      if (item1.done || item2.done)
        return false;
      if (!comparator(item1.value, item2.value))
        return false;
    }
  }
  function iterateListLike(obj, fn) {
    if (isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        fn(obj[i]);
      }
    } else {
      var iterator = obj[getSymbolIterator()]();
      var item;
      while (!((item = iterator.next()).done)) {
        fn(item.value);
      }
    }
  }
  var createSetFromList = (function() {
    var test = new Set([1, 2, 3]);
    if (test.size === 3) {
      return function createSetFromList(lst) {
        return new Set(lst);
      };
    } else {
      return function createSetAndPopulateFromList(lst) {
        var res = new Set(lst);
        if (res.size !== lst.length) {
          for (var i = 0; i < lst.length; i++) {
            res.add(lst[i]);
          }
        }
        return res;
      };
    }
  })();
  var SetWrapper = (function() {
    function SetWrapper() {}
    SetWrapper.createFromList = function(lst) {
      return createSetFromList(lst);
    };
    SetWrapper.has = function(s, key) {
      return s.has(key);
    };
    SetWrapper.delete = function(m, k) {
      m.delete(k);
    };
    return SetWrapper;
  }());
  var __extends$3 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function findFirstClosedCycle(keys) {
    var res = [];
    for (var i = 0; i < keys.length; ++i) {
      if (ListWrapper.contains(res, keys[i])) {
        res.push(keys[i]);
        return res;
      }
      res.push(keys[i]);
    }
    return res;
  }
  function constructResolvingPath(keys) {
    if (keys.length > 1) {
      var reversed = findFirstClosedCycle(ListWrapper.reversed(keys));
      var tokenStrs = reversed.map(function(k) {
        return stringify(k.token);
      });
      return ' (' + tokenStrs.join(' -> ') + ')';
    }
    return '';
  }
  var AbstractProviderError = (function(_super) {
    __extends$3(AbstractProviderError, _super);
    function AbstractProviderError(injector, key, constructResolvingMessage) {
      _super.call(this, 'DI Error');
      this.keys = [key];
      this.injectors = [injector];
      this.constructResolvingMessage = constructResolvingMessage;
      this.message = this.constructResolvingMessage(this.keys);
    }
    AbstractProviderError.prototype.addKey = function(injector, key) {
      this.injectors.push(injector);
      this.keys.push(key);
      this.message = this.constructResolvingMessage(this.keys);
    };
    return AbstractProviderError;
  }(BaseError));
  var NoProviderError = (function(_super) {
    __extends$3(NoProviderError, _super);
    function NoProviderError(injector, key) {
      _super.call(this, injector, key, function(keys) {
        var first = stringify(ListWrapper.first(keys).token);
        return "No provider for " + first + "!" + constructResolvingPath(keys);
      });
    }
    return NoProviderError;
  }(AbstractProviderError));
  var CyclicDependencyError = (function(_super) {
    __extends$3(CyclicDependencyError, _super);
    function CyclicDependencyError(injector, key) {
      _super.call(this, injector, key, function(keys) {
        return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
      });
    }
    return CyclicDependencyError;
  }(AbstractProviderError));
  var InstantiationError = (function(_super) {
    __extends$3(InstantiationError, _super);
    function InstantiationError(injector, originalException, originalStack, key) {
      _super.call(this, 'DI Error', originalException);
      this.keys = [key];
      this.injectors = [injector];
    }
    InstantiationError.prototype.addKey = function(injector, key) {
      this.injectors.push(injector);
      this.keys.push(key);
    };
    Object.defineProperty(InstantiationError.prototype, "message", {
      get: function() {
        var first = stringify(ListWrapper.first(this.keys).token);
        return this.originalError.message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(InstantiationError.prototype, "causeKey", {
      get: function() {
        return this.keys[0];
      },
      enumerable: true,
      configurable: true
    });
    return InstantiationError;
  }(WrappedError));
  var InvalidProviderError = (function(_super) {
    __extends$3(InvalidProviderError, _super);
    function InvalidProviderError(provider) {
      _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
    }
    return InvalidProviderError;
  }(BaseError));
  var NoAnnotationError = (function(_super) {
    __extends$3(NoAnnotationError, _super);
    function NoAnnotationError(typeOrFunc, params) {
      _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
    }
    NoAnnotationError._genMessage = function(typeOrFunc, params) {
      var signature = [];
      for (var i = 0,
          ii = params.length; i < ii; i++) {
        var parameter = params[i];
        if (isBlank(parameter) || parameter.length == 0) {
          signature.push('?');
        } else {
          signature.push(parameter.map(stringify).join(' '));
        }
      }
      return 'Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' + signature.join(', ') + '). ' + 'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' + stringify(typeOrFunc) + '\' is decorated with Injectable.';
    };
    return NoAnnotationError;
  }(BaseError));
  var OutOfBoundsError = (function(_super) {
    __extends$3(OutOfBoundsError, _super);
    function OutOfBoundsError(index) {
      _super.call(this, "Index " + index + " is out-of-bounds.");
    }
    return OutOfBoundsError;
  }(BaseError));
  var MixingMultiProvidersWithRegularProvidersError = (function(_super) {
    __extends$3(MixingMultiProvidersWithRegularProvidersError, _super);
    function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
      _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' + provider2.toString());
    }
    return MixingMultiProvidersWithRegularProvidersError;
  }(BaseError));
  var ReflectiveKey = (function() {
    function ReflectiveKey(token, id) {
      this.token = token;
      this.id = id;
      if (isBlank(token)) {
        throw new Error('Token must be defined!');
      }
    }
    Object.defineProperty(ReflectiveKey.prototype, "displayName", {
      get: function() {
        return stringify(this.token);
      },
      enumerable: true,
      configurable: true
    });
    ReflectiveKey.get = function(token) {
      return _globalKeyRegistry.get(resolveForwardRef(token));
    };
    Object.defineProperty(ReflectiveKey, "numberOfKeys", {
      get: function() {
        return _globalKeyRegistry.numberOfKeys;
      },
      enumerable: true,
      configurable: true
    });
    return ReflectiveKey;
  }());
  var KeyRegistry = (function() {
    function KeyRegistry() {
      this._allKeys = new Map();
    }
    KeyRegistry.prototype.get = function(token) {
      if (token instanceof ReflectiveKey)
        return token;
      if (this._allKeys.has(token)) {
        return this._allKeys.get(token);
      }
      var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
      this._allKeys.set(token, newKey);
      return newKey;
    };
    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
      get: function() {
        return this._allKeys.size;
      },
      enumerable: true,
      configurable: true
    });
    return KeyRegistry;
  }());
  var _globalKeyRegistry = new KeyRegistry();
  var Type = Function;
  var ReflectionCapabilities = (function() {
    function ReflectionCapabilities(reflect) {
      this._reflect = reflect || global$1.Reflect;
    }
    ReflectionCapabilities.prototype.isReflectionEnabled = function() {
      return true;
    };
    ReflectionCapabilities.prototype.factory = function(t) {
      var prototype = t.prototype;
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i - 0] = arguments[_i];
        }
        var instance = Object.create(prototype);
        t.apply(instance, args);
        return instance;
      };
    };
    ReflectionCapabilities.prototype._zipTypesAndAnnotations = function(paramTypes, paramAnnotations) {
      var result;
      if (typeof paramTypes === 'undefined') {
        result = new Array(paramAnnotations.length);
      } else {
        result = new Array(paramTypes.length);
      }
      for (var i = 0; i < result.length; i++) {
        if (typeof paramTypes === 'undefined') {
          result[i] = [];
        } else if (paramTypes[i] != Object) {
          result[i] = [paramTypes[i]];
        } else {
          result[i] = [];
        }
        if (isPresent(paramAnnotations) && isPresent(paramAnnotations[i])) {
          result[i] = result[i].concat(paramAnnotations[i]);
        }
      }
      return result;
    };
    ReflectionCapabilities.prototype.parameters = function(typeOrFunc) {
      if (isPresent(typeOrFunc.parameters)) {
        return typeOrFunc.parameters;
      }
      if (isPresent(typeOrFunc.ctorParameters)) {
        var ctorParameters = typeOrFunc.ctorParameters;
        var paramTypes_1 = ctorParameters.map(function(ctorParam) {
          return ctorParam && ctorParam.type;
        });
        var paramAnnotations_1 = ctorParameters.map(function(ctorParam) {
          return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
        });
        return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);
      }
      if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {
        var paramAnnotations = this._reflect.getMetadata('parameters', typeOrFunc);
        var paramTypes = this._reflect.getMetadata('design:paramtypes', typeOrFunc);
        if (isPresent(paramTypes) || isPresent(paramAnnotations)) {
          return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
        }
      }
      var parameters = new Array(typeOrFunc.length);
      parameters.fill(undefined);
      return parameters;
    };
    ReflectionCapabilities.prototype.annotations = function(typeOrFunc) {
      if (isPresent(typeOrFunc.annotations)) {
        var annotations = typeOrFunc.annotations;
        if (isFunction(annotations) && annotations.annotations) {
          annotations = annotations.annotations;
        }
        return annotations;
      }
      if (isPresent(typeOrFunc.decorators)) {
        return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
      }
      if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {
        var annotations = this._reflect.getMetadata('annotations', typeOrFunc);
        if (isPresent(annotations))
          return annotations;
      }
      return [];
    };
    ReflectionCapabilities.prototype.propMetadata = function(typeOrFunc) {
      if (isPresent(typeOrFunc.propMetadata)) {
        var propMetadata = typeOrFunc.propMetadata;
        if (isFunction(propMetadata) && propMetadata.propMetadata) {
          propMetadata = propMetadata.propMetadata;
        }
        return propMetadata;
      }
      if (isPresent(typeOrFunc.propDecorators)) {
        var propDecorators_1 = typeOrFunc.propDecorators;
        var propMetadata_1 = {};
        Object.keys(propDecorators_1).forEach(function(prop) {
          propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
        });
        return propMetadata_1;
      }
      if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {
        var propMetadata = this._reflect.getMetadata('propMetadata', typeOrFunc);
        if (isPresent(propMetadata))
          return propMetadata;
      }
      return {};
    };
    ReflectionCapabilities.prototype.interfaces = function(type) {
      return [];
    };
    ReflectionCapabilities.prototype.hasLifecycleHook = function(type, lcInterface, lcProperty) {
      if (!(type instanceof Type))
        return false;
      var proto = type.prototype;
      return !!proto[lcProperty];
    };
    ReflectionCapabilities.prototype.getter = function(name) {
      return new Function('o', 'return o.' + name + ';');
    };
    ReflectionCapabilities.prototype.setter = function(name) {
      return new Function('o', 'v', 'return o.' + name + ' = v;');
    };
    ReflectionCapabilities.prototype.method = function(name) {
      var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
      return new Function('o', 'args', functionBody);
    };
    ReflectionCapabilities.prototype.importUri = function(type) {
      if (typeof type === 'object' && type['filePath']) {
        return type['filePath'];
      }
      return "./" + stringify(type);
    };
    ReflectionCapabilities.prototype.resolveIdentifier = function(name, moduleUrl, runtime) {
      return runtime;
    };
    ReflectionCapabilities.prototype.resolveEnum = function(enumIdentifier, name) {
      return enumIdentifier[name];
    };
    return ReflectionCapabilities;
  }());
  function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
    if (!decoratorInvocations) {
      return [];
    }
    return decoratorInvocations.map(function(decoratorInvocation) {
      var decoratorType = decoratorInvocation.type;
      var annotationCls = decoratorType.annotationCls;
      var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
      var annotation = Object.create(annotationCls.prototype);
      annotationCls.apply(annotation, annotationArgs);
      return annotation;
    });
  }
  var ReflectorReader = (function() {
    function ReflectorReader() {}
    return ReflectorReader;
  }());
  var __extends$4 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Reflector = (function(_super) {
    __extends$4(Reflector, _super);
    function Reflector(reflectionCapabilities) {
      _super.call(this);
      this._injectableInfo = new Map$1();
      this._getters = new Map$1();
      this._setters = new Map$1();
      this._methods = new Map$1();
      this._usedKeys = null;
      this.reflectionCapabilities = reflectionCapabilities;
    }
    Reflector.prototype.updateCapabilities = function(caps) {
      this.reflectionCapabilities = caps;
    };
    Reflector.prototype.isReflectionEnabled = function() {
      return this.reflectionCapabilities.isReflectionEnabled();
    };
    Reflector.prototype.trackUsage = function() {
      this._usedKeys = new Set();
    };
    Reflector.prototype.listUnusedKeys = function() {
      var _this = this;
      if (this._usedKeys == null) {
        throw new Error('Usage tracking is disabled');
      }
      var allTypes = MapWrapper.keys(this._injectableInfo);
      return allTypes.filter(function(key) {
        return !SetWrapper.has(_this._usedKeys, key);
      });
    };
    Reflector.prototype.registerFunction = function(func, funcInfo) {
      this._injectableInfo.set(func, funcInfo);
    };
    Reflector.prototype.registerType = function(type, typeInfo) {
      this._injectableInfo.set(type, typeInfo);
    };
    Reflector.prototype.registerGetters = function(getters) {
      _mergeMaps(this._getters, getters);
    };
    Reflector.prototype.registerSetters = function(setters) {
      _mergeMaps(this._setters, setters);
    };
    Reflector.prototype.registerMethods = function(methods) {
      _mergeMaps(this._methods, methods);
    };
    Reflector.prototype.factory = function(type) {
      if (this._containsReflectionInfo(type)) {
        var res = this._getReflectionInfo(type).factory;
        return isPresent(res) ? res : null;
      } else {
        return this.reflectionCapabilities.factory(type);
      }
    };
    Reflector.prototype.parameters = function(typeOrFunc) {
      if (this._injectableInfo.has(typeOrFunc)) {
        var res = this._getReflectionInfo(typeOrFunc).parameters;
        return isPresent(res) ? res : [];
      } else {
        return this.reflectionCapabilities.parameters(typeOrFunc);
      }
    };
    Reflector.prototype.annotations = function(typeOrFunc) {
      if (this._injectableInfo.has(typeOrFunc)) {
        var res = this._getReflectionInfo(typeOrFunc).annotations;
        return isPresent(res) ? res : [];
      } else {
        return this.reflectionCapabilities.annotations(typeOrFunc);
      }
    };
    Reflector.prototype.propMetadata = function(typeOrFunc) {
      if (this._injectableInfo.has(typeOrFunc)) {
        var res = this._getReflectionInfo(typeOrFunc).propMetadata;
        return isPresent(res) ? res : {};
      } else {
        return this.reflectionCapabilities.propMetadata(typeOrFunc);
      }
    };
    Reflector.prototype.interfaces = function(type) {
      if (this._injectableInfo.has(type)) {
        var res = this._getReflectionInfo(type).interfaces;
        return isPresent(res) ? res : [];
      } else {
        return this.reflectionCapabilities.interfaces(type);
      }
    };
    Reflector.prototype.hasLifecycleHook = function(type, lcInterface, lcProperty) {
      var interfaces = this.interfaces(type);
      if (interfaces.indexOf(lcInterface) !== -1) {
        return true;
      } else {
        return this.reflectionCapabilities.hasLifecycleHook(type, lcInterface, lcProperty);
      }
    };
    Reflector.prototype.getter = function(name) {
      if (this._getters.has(name)) {
        return this._getters.get(name);
      } else {
        return this.reflectionCapabilities.getter(name);
      }
    };
    Reflector.prototype.setter = function(name) {
      if (this._setters.has(name)) {
        return this._setters.get(name);
      } else {
        return this.reflectionCapabilities.setter(name);
      }
    };
    Reflector.prototype.method = function(name) {
      if (this._methods.has(name)) {
        return this._methods.get(name);
      } else {
        return this.reflectionCapabilities.method(name);
      }
    };
    Reflector.prototype._getReflectionInfo = function(typeOrFunc) {
      if (isPresent(this._usedKeys)) {
        this._usedKeys.add(typeOrFunc);
      }
      return this._injectableInfo.get(typeOrFunc);
    };
    Reflector.prototype._containsReflectionInfo = function(typeOrFunc) {
      return this._injectableInfo.has(typeOrFunc);
    };
    Reflector.prototype.importUri = function(type) {
      return this.reflectionCapabilities.importUri(type);
    };
    Reflector.prototype.resolveIdentifier = function(name, moduleUrl, runtime) {
      return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime);
    };
    Reflector.prototype.resolveEnum = function(identifier, name) {
      return this.reflectionCapabilities.resolveEnum(identifier, name);
    };
    return Reflector;
  }(ReflectorReader));
  function _mergeMaps(target, config) {
    StringMapWrapper.forEach(config, function(v, k) {
      return target.set(k, v);
    });
  }
  var reflector = new Reflector(new ReflectionCapabilities());
  var ReflectiveDependency = (function() {
    function ReflectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
      this.key = key;
      this.optional = optional;
      this.lowerBoundVisibility = lowerBoundVisibility;
      this.upperBoundVisibility = upperBoundVisibility;
      this.properties = properties;
    }
    ReflectiveDependency.fromKey = function(key) {
      return new ReflectiveDependency(key, false, null, null, []);
    };
    return ReflectiveDependency;
  }());
  var _EMPTY_LIST = [];
  var ResolvedReflectiveProvider_ = (function() {
    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
      this.key = key;
      this.resolvedFactories = resolvedFactories;
      this.multiProvider = multiProvider;
    }
    Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
      get: function() {
        return this.resolvedFactories[0];
      },
      enumerable: true,
      configurable: true
    });
    return ResolvedReflectiveProvider_;
  }());
  var ResolvedReflectiveFactory = (function() {
    function ResolvedReflectiveFactory(factory, dependencies) {
      this.factory = factory;
      this.dependencies = dependencies;
    }
    return ResolvedReflectiveFactory;
  }());
  function resolveReflectiveFactory(provider) {
    var factoryFn;
    var resolvedDeps;
    if (isPresent(provider.useClass)) {
      var useClass = resolveForwardRef(provider.useClass);
      factoryFn = reflector.factory(useClass);
      resolvedDeps = _dependenciesFor(useClass);
    } else if (isPresent(provider.useExisting)) {
      factoryFn = function(aliasInstance) {
        return aliasInstance;
      };
      resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
    } else if (isPresent(provider.useFactory)) {
      factoryFn = provider.useFactory;
      resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
    } else {
      factoryFn = function() {
        return provider.useValue;
      };
      resolvedDeps = _EMPTY_LIST;
    }
    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
  }
  function resolveReflectiveProvider(provider) {
    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);
  }
  function resolveReflectiveProviders(providers) {
    var normalized = _normalizeProviders(providers, []);
    var resolved = normalized.map(resolveReflectiveProvider);
    return MapWrapper.values(mergeResolvedReflectiveProviders(resolved, new Map()));
  }
  function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
    for (var i = 0; i < providers.length; i++) {
      var provider = providers[i];
      var existing = normalizedProvidersMap.get(provider.key.id);
      if (isPresent(existing)) {
        if (provider.multiProvider !== existing.multiProvider) {
          throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);
        }
        if (provider.multiProvider) {
          for (var j = 0; j < provider.resolvedFactories.length; j++) {
            existing.resolvedFactories.push(provider.resolvedFactories[j]);
          }
        } else {
          normalizedProvidersMap.set(provider.key.id, provider);
        }
      } else {
        var resolvedProvider;
        if (provider.multiProvider) {
          resolvedProvider = new ResolvedReflectiveProvider_(provider.key, ListWrapper.clone(provider.resolvedFactories), provider.multiProvider);
        } else {
          resolvedProvider = provider;
        }
        normalizedProvidersMap.set(provider.key.id, resolvedProvider);
      }
    }
    return normalizedProvidersMap;
  }
  function _normalizeProviders(providers, res) {
    providers.forEach(function(b) {
      if (b instanceof Type) {
        res.push({
          provide: b,
          useClass: b
        });
      } else if (b && typeof b == 'object' && b.provide !== undefined) {
        res.push(b);
      } else if (b instanceof Array) {
        _normalizeProviders(b, res);
      } else {
        throw new InvalidProviderError(b);
      }
    });
    return res;
  }
  function constructDependencies(typeOrFunc, dependencies) {
    if (isBlank(dependencies)) {
      return _dependenciesFor(typeOrFunc);
    } else {
      var params = dependencies.map(function(t) {
        return [t];
      });
      return dependencies.map(function(t) {
        return _extractToken(typeOrFunc, t, params);
      });
    }
  }
  function _dependenciesFor(typeOrFunc) {
    var params = reflector.parameters(typeOrFunc);
    if (isBlank(params))
      return [];
    if (params.some(isBlank)) {
      throw new NoAnnotationError(typeOrFunc, params);
    }
    return params.map(function(p) {
      return _extractToken(typeOrFunc, p, params);
    });
  }
  function _extractToken(typeOrFunc, metadata, params) {
    var depProps = [];
    var token = null;
    var optional = false;
    if (!isArray(metadata)) {
      if (metadata instanceof InjectMetadata) {
        return _createDependency(metadata.token, optional, null, null, depProps);
      } else {
        return _createDependency(metadata, optional, null, null, depProps);
      }
    }
    var lowerBoundVisibility = null;
    var upperBoundVisibility = null;
    for (var i = 0; i < metadata.length; ++i) {
      var paramMetadata = metadata[i];
      if (paramMetadata instanceof Type) {
        token = paramMetadata;
      } else if (paramMetadata instanceof InjectMetadata) {
        token = paramMetadata.token;
      } else if (paramMetadata instanceof OptionalMetadata) {
        optional = true;
      } else if (paramMetadata instanceof SelfMetadata) {
        upperBoundVisibility = paramMetadata;
      } else if (paramMetadata instanceof HostMetadata) {
        upperBoundVisibility = paramMetadata;
      } else if (paramMetadata instanceof SkipSelfMetadata) {
        lowerBoundVisibility = paramMetadata;
      } else if (paramMetadata instanceof DependencyMetadata) {
        if (isPresent(paramMetadata.token)) {
          token = paramMetadata.token;
        }
        depProps.push(paramMetadata);
      }
    }
    token = resolveForwardRef(token);
    if (isPresent(token)) {
      return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
    } else {
      throw new NoAnnotationError(typeOrFunc, params);
    }
  }
  function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
    return new ReflectiveDependency(ReflectiveKey.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
  }
  var _MAX_CONSTRUCTION_COUNTER = 10;
  var UNDEFINED = new Object();
  var ReflectiveProtoInjectorInlineStrategy = (function() {
    function ReflectiveProtoInjectorInlineStrategy(protoEI, providers) {
      this.provider0 = null;
      this.provider1 = null;
      this.provider2 = null;
      this.provider3 = null;
      this.provider4 = null;
      this.provider5 = null;
      this.provider6 = null;
      this.provider7 = null;
      this.provider8 = null;
      this.provider9 = null;
      this.keyId0 = null;
      this.keyId1 = null;
      this.keyId2 = null;
      this.keyId3 = null;
      this.keyId4 = null;
      this.keyId5 = null;
      this.keyId6 = null;
      this.keyId7 = null;
      this.keyId8 = null;
      this.keyId9 = null;
      var length = providers.length;
      if (length > 0) {
        this.provider0 = providers[0];
        this.keyId0 = providers[0].key.id;
      }
      if (length > 1) {
        this.provider1 = providers[1];
        this.keyId1 = providers[1].key.id;
      }
      if (length > 2) {
        this.provider2 = providers[2];
        this.keyId2 = providers[2].key.id;
      }
      if (length > 3) {
        this.provider3 = providers[3];
        this.keyId3 = providers[3].key.id;
      }
      if (length > 4) {
        this.provider4 = providers[4];
        this.keyId4 = providers[4].key.id;
      }
      if (length > 5) {
        this.provider5 = providers[5];
        this.keyId5 = providers[5].key.id;
      }
      if (length > 6) {
        this.provider6 = providers[6];
        this.keyId6 = providers[6].key.id;
      }
      if (length > 7) {
        this.provider7 = providers[7];
        this.keyId7 = providers[7].key.id;
      }
      if (length > 8) {
        this.provider8 = providers[8];
        this.keyId8 = providers[8].key.id;
      }
      if (length > 9) {
        this.provider9 = providers[9];
        this.keyId9 = providers[9].key.id;
      }
    }
    ReflectiveProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function(index) {
      if (index == 0)
        return this.provider0;
      if (index == 1)
        return this.provider1;
      if (index == 2)
        return this.provider2;
      if (index == 3)
        return this.provider3;
      if (index == 4)
        return this.provider4;
      if (index == 5)
        return this.provider5;
      if (index == 6)
        return this.provider6;
      if (index == 7)
        return this.provider7;
      if (index == 8)
        return this.provider8;
      if (index == 9)
        return this.provider9;
      throw new OutOfBoundsError(index);
    };
    ReflectiveProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function(injector) {
      return new ReflectiveInjectorInlineStrategy(injector, this);
    };
    return ReflectiveProtoInjectorInlineStrategy;
  }());
  var ReflectiveProtoInjectorDynamicStrategy = (function() {
    function ReflectiveProtoInjectorDynamicStrategy(protoInj, providers) {
      this.providers = providers;
      var len = providers.length;
      this.keyIds = ListWrapper.createFixedSize(len);
      for (var i = 0; i < len; i++) {
        this.keyIds[i] = providers[i].key.id;
      }
    }
    ReflectiveProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function(index) {
      if (index < 0 || index >= this.providers.length) {
        throw new OutOfBoundsError(index);
      }
      return this.providers[index];
    };
    ReflectiveProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function(ei) {
      return new ReflectiveInjectorDynamicStrategy(this, ei);
    };
    return ReflectiveProtoInjectorDynamicStrategy;
  }());
  var ReflectiveProtoInjector = (function() {
    function ReflectiveProtoInjector(providers) {
      this.numberOfProviders = providers.length;
      this._strategy = providers.length > _MAX_CONSTRUCTION_COUNTER ? new ReflectiveProtoInjectorDynamicStrategy(this, providers) : new ReflectiveProtoInjectorInlineStrategy(this, providers);
    }
    ReflectiveProtoInjector.fromResolvedProviders = function(providers) {
      return new ReflectiveProtoInjector(providers);
    };
    ReflectiveProtoInjector.prototype.getProviderAtIndex = function(index) {
      return this._strategy.getProviderAtIndex(index);
    };
    return ReflectiveProtoInjector;
  }());
  var ReflectiveInjectorInlineStrategy = (function() {
    function ReflectiveInjectorInlineStrategy(injector, protoStrategy) {
      this.injector = injector;
      this.protoStrategy = protoStrategy;
      this.obj0 = UNDEFINED;
      this.obj1 = UNDEFINED;
      this.obj2 = UNDEFINED;
      this.obj3 = UNDEFINED;
      this.obj4 = UNDEFINED;
      this.obj5 = UNDEFINED;
      this.obj6 = UNDEFINED;
      this.obj7 = UNDEFINED;
      this.obj8 = UNDEFINED;
      this.obj9 = UNDEFINED;
    }
    ReflectiveInjectorInlineStrategy.prototype.resetConstructionCounter = function() {
      this.injector._constructionCounter = 0;
    };
    ReflectiveInjectorInlineStrategy.prototype.instantiateProvider = function(provider) {
      return this.injector._new(provider);
    };
    ReflectiveInjectorInlineStrategy.prototype.getObjByKeyId = function(keyId) {
      var p = this.protoStrategy;
      var inj = this.injector;
      if (p.keyId0 === keyId) {
        if (this.obj0 === UNDEFINED) {
          this.obj0 = inj._new(p.provider0);
        }
        return this.obj0;
      }
      if (p.keyId1 === keyId) {
        if (this.obj1 === UNDEFINED) {
          this.obj1 = inj._new(p.provider1);
        }
        return this.obj1;
      }
      if (p.keyId2 === keyId) {
        if (this.obj2 === UNDEFINED) {
          this.obj2 = inj._new(p.provider2);
        }
        return this.obj2;
      }
      if (p.keyId3 === keyId) {
        if (this.obj3 === UNDEFINED) {
          this.obj3 = inj._new(p.provider3);
        }
        return this.obj3;
      }
      if (p.keyId4 === keyId) {
        if (this.obj4 === UNDEFINED) {
          this.obj4 = inj._new(p.provider4);
        }
        return this.obj4;
      }
      if (p.keyId5 === keyId) {
        if (this.obj5 === UNDEFINED) {
          this.obj5 = inj._new(p.provider5);
        }
        return this.obj5;
      }
      if (p.keyId6 === keyId) {
        if (this.obj6 === UNDEFINED) {
          this.obj6 = inj._new(p.provider6);
        }
        return this.obj6;
      }
      if (p.keyId7 === keyId) {
        if (this.obj7 === UNDEFINED) {
          this.obj7 = inj._new(p.provider7);
        }
        return this.obj7;
      }
      if (p.keyId8 === keyId) {
        if (this.obj8 === UNDEFINED) {
          this.obj8 = inj._new(p.provider8);
        }
        return this.obj8;
      }
      if (p.keyId9 === keyId) {
        if (this.obj9 === UNDEFINED) {
          this.obj9 = inj._new(p.provider9);
        }
        return this.obj9;
      }
      return UNDEFINED;
    };
    ReflectiveInjectorInlineStrategy.prototype.getObjAtIndex = function(index) {
      if (index == 0)
        return this.obj0;
      if (index == 1)
        return this.obj1;
      if (index == 2)
        return this.obj2;
      if (index == 3)
        return this.obj3;
      if (index == 4)
        return this.obj4;
      if (index == 5)
        return this.obj5;
      if (index == 6)
        return this.obj6;
      if (index == 7)
        return this.obj7;
      if (index == 8)
        return this.obj8;
      if (index == 9)
        return this.obj9;
      throw new OutOfBoundsError(index);
    };
    ReflectiveInjectorInlineStrategy.prototype.getMaxNumberOfObjects = function() {
      return _MAX_CONSTRUCTION_COUNTER;
    };
    return ReflectiveInjectorInlineStrategy;
  }());
  var ReflectiveInjectorDynamicStrategy = (function() {
    function ReflectiveInjectorDynamicStrategy(protoStrategy, injector) {
      this.protoStrategy = protoStrategy;
      this.injector = injector;
      this.objs = ListWrapper.createFixedSize(protoStrategy.providers.length);
      ListWrapper.fill(this.objs, UNDEFINED);
    }
    ReflectiveInjectorDynamicStrategy.prototype.resetConstructionCounter = function() {
      this.injector._constructionCounter = 0;
    };
    ReflectiveInjectorDynamicStrategy.prototype.instantiateProvider = function(provider) {
      return this.injector._new(provider);
    };
    ReflectiveInjectorDynamicStrategy.prototype.getObjByKeyId = function(keyId) {
      var p = this.protoStrategy;
      for (var i = 0; i < p.keyIds.length; i++) {
        if (p.keyIds[i] === keyId) {
          if (this.objs[i] === UNDEFINED) {
            this.objs[i] = this.injector._new(p.providers[i]);
          }
          return this.objs[i];
        }
      }
      return UNDEFINED;
    };
    ReflectiveInjectorDynamicStrategy.prototype.getObjAtIndex = function(index) {
      if (index < 0 || index >= this.objs.length) {
        throw new OutOfBoundsError(index);
      }
      return this.objs[index];
    };
    ReflectiveInjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function() {
      return this.objs.length;
    };
    return ReflectiveInjectorDynamicStrategy;
  }());
  var ReflectiveInjector = (function() {
    function ReflectiveInjector() {}
    ReflectiveInjector.resolve = function(providers) {
      return resolveReflectiveProviders(providers);
    };
    ReflectiveInjector.resolveAndCreate = function(providers, parent) {
      if (parent === void 0) {
        parent = null;
      }
      var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
      return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
    };
    ReflectiveInjector.fromResolvedProviders = function(providers, parent) {
      if (parent === void 0) {
        parent = null;
      }
      return new ReflectiveInjector_(ReflectiveProtoInjector.fromResolvedProviders(providers), parent);
    };
    Object.defineProperty(ReflectiveInjector.prototype, "parent", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ReflectiveInjector.prototype.resolveAndCreateChild = function(providers) {
      return unimplemented();
    };
    ReflectiveInjector.prototype.createChildFromResolved = function(providers) {
      return unimplemented();
    };
    ReflectiveInjector.prototype.resolveAndInstantiate = function(provider) {
      return unimplemented();
    };
    ReflectiveInjector.prototype.instantiateResolved = function(provider) {
      return unimplemented();
    };
    return ReflectiveInjector;
  }());
  var ReflectiveInjector_ = (function() {
    function ReflectiveInjector_(_proto, _parent) {
      if (_parent === void 0) {
        _parent = null;
      }
      this._constructionCounter = 0;
      this._proto = _proto;
      this._parent = _parent;
      this._strategy = _proto._strategy.createInjectorStrategy(this);
    }
    ReflectiveInjector_.prototype.get = function(token, notFoundValue) {
      if (notFoundValue === void 0) {
        notFoundValue = THROW_IF_NOT_FOUND;
      }
      return this._getByKey(ReflectiveKey.get(token), null, null, notFoundValue);
    };
    ReflectiveInjector_.prototype.getAt = function(index) {
      return this._strategy.getObjAtIndex(index);
    };
    Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
      get: function() {
        return this._parent;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ReflectiveInjector_.prototype, "internalStrategy", {
      get: function() {
        return this._strategy;
      },
      enumerable: true,
      configurable: true
    });
    ReflectiveInjector_.prototype.resolveAndCreateChild = function(providers) {
      var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
      return this.createChildFromResolved(ResolvedReflectiveProviders);
    };
    ReflectiveInjector_.prototype.createChildFromResolved = function(providers) {
      var proto = new ReflectiveProtoInjector(providers);
      var inj = new ReflectiveInjector_(proto);
      inj._parent = this;
      return inj;
    };
    ReflectiveInjector_.prototype.resolveAndInstantiate = function(provider) {
      return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
    };
    ReflectiveInjector_.prototype.instantiateResolved = function(provider) {
      return this._instantiateProvider(provider);
    };
    ReflectiveInjector_.prototype._new = function(provider) {
      if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
        throw new CyclicDependencyError(this, provider.key);
      }
      return this._instantiateProvider(provider);
    };
    ReflectiveInjector_.prototype._instantiateProvider = function(provider) {
      if (provider.multiProvider) {
        var res = ListWrapper.createFixedSize(provider.resolvedFactories.length);
        for (var i = 0; i < provider.resolvedFactories.length; ++i) {
          res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
        }
        return res;
      } else {
        return this._instantiate(provider, provider.resolvedFactories[0]);
      }
    };
    ReflectiveInjector_.prototype._instantiate = function(provider, ResolvedReflectiveFactory) {
      var factory = ResolvedReflectiveFactory.factory;
      var deps = ResolvedReflectiveFactory.dependencies;
      var length = deps.length;
      var d0;
      var d1;
      var d2;
      var d3;
      var d4;
      var d5;
      var d6;
      var d7;
      var d8;
      var d9;
      var d10;
      var d11;
      var d12;
      var d13;
      var d14;
      var d15;
      var d16;
      var d17;
      var d18;
      var d19;
      try {
        d0 = length > 0 ? this._getByReflectiveDependency(provider, deps[0]) : null;
        d1 = length > 1 ? this._getByReflectiveDependency(provider, deps[1]) : null;
        d2 = length > 2 ? this._getByReflectiveDependency(provider, deps[2]) : null;
        d3 = length > 3 ? this._getByReflectiveDependency(provider, deps[3]) : null;
        d4 = length > 4 ? this._getByReflectiveDependency(provider, deps[4]) : null;
        d5 = length > 5 ? this._getByReflectiveDependency(provider, deps[5]) : null;
        d6 = length > 6 ? this._getByReflectiveDependency(provider, deps[6]) : null;
        d7 = length > 7 ? this._getByReflectiveDependency(provider, deps[7]) : null;
        d8 = length > 8 ? this._getByReflectiveDependency(provider, deps[8]) : null;
        d9 = length > 9 ? this._getByReflectiveDependency(provider, deps[9]) : null;
        d10 = length > 10 ? this._getByReflectiveDependency(provider, deps[10]) : null;
        d11 = length > 11 ? this._getByReflectiveDependency(provider, deps[11]) : null;
        d12 = length > 12 ? this._getByReflectiveDependency(provider, deps[12]) : null;
        d13 = length > 13 ? this._getByReflectiveDependency(provider, deps[13]) : null;
        d14 = length > 14 ? this._getByReflectiveDependency(provider, deps[14]) : null;
        d15 = length > 15 ? this._getByReflectiveDependency(provider, deps[15]) : null;
        d16 = length > 16 ? this._getByReflectiveDependency(provider, deps[16]) : null;
        d17 = length > 17 ? this._getByReflectiveDependency(provider, deps[17]) : null;
        d18 = length > 18 ? this._getByReflectiveDependency(provider, deps[18]) : null;
        d19 = length > 19 ? this._getByReflectiveDependency(provider, deps[19]) : null;
      } catch (e) {
        if (e instanceof AbstractProviderError || e instanceof InstantiationError) {
          e.addKey(this, provider.key);
        }
        throw e;
      }
      var obj;
      try {
        switch (length) {
          case 0:
            obj = factory();
            break;
          case 1:
            obj = factory(d0);
            break;
          case 2:
            obj = factory(d0, d1);
            break;
          case 3:
            obj = factory(d0, d1, d2);
            break;
          case 4:
            obj = factory(d0, d1, d2, d3);
            break;
          case 5:
            obj = factory(d0, d1, d2, d3, d4);
            break;
          case 6:
            obj = factory(d0, d1, d2, d3, d4, d5);
            break;
          case 7:
            obj = factory(d0, d1, d2, d3, d4, d5, d6);
            break;
          case 8:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
            break;
          case 9:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
            break;
          case 10:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
            break;
          case 11:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
            break;
          case 12:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
            break;
          case 13:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
            break;
          case 14:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
            break;
          case 15:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
            break;
          case 16:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
            break;
          case 17:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
            break;
          case 18:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
            break;
          case 19:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
            break;
          case 20:
            obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
            break;
          default:
            throw new Error("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
        }
      } catch (e) {
        throw new InstantiationError(this, e, e.stack, provider.key);
      }
      return obj;
    };
    ReflectiveInjector_.prototype._getByReflectiveDependency = function(provider, dep) {
      return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional ? null : THROW_IF_NOT_FOUND);
    };
    ReflectiveInjector_.prototype._getByKey = function(key, lowerBoundVisibility, upperBoundVisibility, notFoundValue) {
      if (key === INJECTOR_KEY) {
        return this;
      }
      if (upperBoundVisibility instanceof SelfMetadata) {
        return this._getByKeySelf(key, notFoundValue);
      } else {
        return this._getByKeyDefault(key, notFoundValue, lowerBoundVisibility);
      }
    };
    ReflectiveInjector_.prototype._throwOrNull = function(key, notFoundValue) {
      if (notFoundValue !== THROW_IF_NOT_FOUND) {
        return notFoundValue;
      } else {
        throw new NoProviderError(this, key);
      }
    };
    ReflectiveInjector_.prototype._getByKeySelf = function(key, notFoundValue) {
      var obj = this._strategy.getObjByKeyId(key.id);
      return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
    };
    ReflectiveInjector_.prototype._getByKeyDefault = function(key, notFoundValue, lowerBoundVisibility) {
      var inj;
      if (lowerBoundVisibility instanceof SkipSelfMetadata) {
        inj = this._parent;
      } else {
        inj = this;
      }
      while (inj instanceof ReflectiveInjector_) {
        var inj_ = inj;
        var obj = inj_._strategy.getObjByKeyId(key.id);
        if (obj !== UNDEFINED)
          return obj;
        inj = inj_._parent;
      }
      if (inj !== null) {
        return inj.get(key.token, notFoundValue);
      } else {
        return this._throwOrNull(key, notFoundValue);
      }
    };
    Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
      get: function() {
        var providers = _mapProviders(this, function(b) {
          return ' "' + b.key.displayName + '" ';
        }).join(', ');
        return "ReflectiveInjector(providers: [" + providers + "])";
      },
      enumerable: true,
      configurable: true
    });
    ReflectiveInjector_.prototype.toString = function() {
      return this.displayName;
    };
    return ReflectiveInjector_;
  }());
  var INJECTOR_KEY = ReflectiveKey.get(Injector);
  function _mapProviders(injector, fn) {
    var res = new Array(injector._proto.numberOfProviders);
    for (var i = 0; i < injector._proto.numberOfProviders; ++i) {
      res[i] = fn(injector._proto.getProviderAtIndex(i));
    }
    return res;
  }
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var DirectiveMetadata = (function(_super) {
    __extends$1(DirectiveMetadata, _super);
    function DirectiveMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          selector = _b.selector,
          inputs = _b.inputs,
          outputs = _b.outputs,
          host = _b.host,
          providers = _b.providers,
          exportAs = _b.exportAs,
          queries = _b.queries;
      _super.call(this);
      this.selector = selector;
      this._inputs = inputs;
      this._outputs = outputs;
      this.host = host;
      this.exportAs = exportAs;
      this.queries = queries;
      this._providers = providers;
    }
    Object.defineProperty(DirectiveMetadata.prototype, "inputs", {
      get: function() {
        return this._inputs;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DirectiveMetadata.prototype, "outputs", {
      get: function() {
        return this._outputs;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DirectiveMetadata.prototype, "providers", {
      get: function() {
        return this._providers;
      },
      enumerable: true,
      configurable: true
    });
    return DirectiveMetadata;
  }(InjectableMetadata));
  var ComponentMetadata = (function(_super) {
    __extends$1(ComponentMetadata, _super);
    function ComponentMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          selector = _b.selector,
          inputs = _b.inputs,
          outputs = _b.outputs,
          host = _b.host,
          exportAs = _b.exportAs,
          moduleId = _b.moduleId,
          providers = _b.providers,
          viewProviders = _b.viewProviders,
          _c = _b.changeDetection,
          changeDetection = _c === void 0 ? exports.ChangeDetectionStrategy.Default : _c,
          queries = _b.queries,
          templateUrl = _b.templateUrl,
          template = _b.template,
          styleUrls = _b.styleUrls,
          styles = _b.styles,
          animations = _b.animations,
          encapsulation = _b.encapsulation,
          interpolation = _b.interpolation,
          entryComponents = _b.entryComponents;
      _super.call(this, {
        selector: selector,
        inputs: inputs,
        outputs: outputs,
        host: host,
        exportAs: exportAs,
        providers: providers,
        queries: queries
      });
      this.changeDetection = changeDetection;
      this._viewProviders = viewProviders;
      this.templateUrl = templateUrl;
      this.template = template;
      this.styleUrls = styleUrls;
      this.styles = styles;
      this.encapsulation = encapsulation;
      this.moduleId = moduleId;
      this.animations = animations;
      this.interpolation = interpolation;
      this.entryComponents = entryComponents;
    }
    Object.defineProperty(ComponentMetadata.prototype, "viewProviders", {
      get: function() {
        return this._viewProviders;
      },
      enumerable: true,
      configurable: true
    });
    return ComponentMetadata;
  }(DirectiveMetadata));
  var PipeMetadata = (function(_super) {
    __extends$1(PipeMetadata, _super);
    function PipeMetadata(_a) {
      var name = _a.name,
          pure = _a.pure;
      _super.call(this);
      this.name = name;
      this._pure = pure;
    }
    Object.defineProperty(PipeMetadata.prototype, "pure", {
      get: function() {
        return isPresent(this._pure) ? this._pure : true;
      },
      enumerable: true,
      configurable: true
    });
    return PipeMetadata;
  }(InjectableMetadata));
  var InputMetadata = (function() {
    function InputMetadata(bindingPropertyName) {
      this.bindingPropertyName = bindingPropertyName;
    }
    return InputMetadata;
  }());
  var OutputMetadata = (function() {
    function OutputMetadata(bindingPropertyName) {
      this.bindingPropertyName = bindingPropertyName;
    }
    return OutputMetadata;
  }());
  var HostBindingMetadata = (function() {
    function HostBindingMetadata(hostPropertyName) {
      this.hostPropertyName = hostPropertyName;
    }
    return HostBindingMetadata;
  }());
  var HostListenerMetadata = (function() {
    function HostListenerMetadata(eventName, args) {
      this.eventName = eventName;
      this.args = args;
    }
    return HostListenerMetadata;
  }());
  var __extends$5 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var CUSTOM_ELEMENTS_SCHEMA = {name: 'custom-elements'};
  var NO_ERRORS_SCHEMA = {name: 'no-errors-schema'};
  var NgModuleMetadata = (function(_super) {
    __extends$5(NgModuleMetadata, _super);
    function NgModuleMetadata(options) {
      if (options === void 0) {
        options = {};
      }
      _super.call(this);
      this._providers = options.providers;
      this.declarations = options.declarations;
      this.imports = options.imports;
      this.exports = options.exports;
      this.entryComponents = options.entryComponents;
      this.bootstrap = options.bootstrap;
      this.schemas = options.schemas;
    }
    Object.defineProperty(NgModuleMetadata.prototype, "providers", {
      get: function() {
        return this._providers;
      },
      enumerable: true,
      configurable: true
    });
    return NgModuleMetadata;
  }(InjectableMetadata));
  var LifecycleHooks;
  (function(LifecycleHooks) {
    LifecycleHooks[LifecycleHooks["OnInit"] = 0] = "OnInit";
    LifecycleHooks[LifecycleHooks["OnDestroy"] = 1] = "OnDestroy";
    LifecycleHooks[LifecycleHooks["DoCheck"] = 2] = "DoCheck";
    LifecycleHooks[LifecycleHooks["OnChanges"] = 3] = "OnChanges";
    LifecycleHooks[LifecycleHooks["AfterContentInit"] = 4] = "AfterContentInit";
    LifecycleHooks[LifecycleHooks["AfterContentChecked"] = 5] = "AfterContentChecked";
    LifecycleHooks[LifecycleHooks["AfterViewInit"] = 6] = "AfterViewInit";
    LifecycleHooks[LifecycleHooks["AfterViewChecked"] = 7] = "AfterViewChecked";
  })(LifecycleHooks || (LifecycleHooks = {}));
  var LIFECYCLE_HOOKS_VALUES = [LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges, LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit, LifecycleHooks.AfterViewChecked];
  var OnChanges = (function() {
    function OnChanges() {}
    return OnChanges;
  }());
  var OnInit = (function() {
    function OnInit() {}
    return OnInit;
  }());
  var DoCheck = (function() {
    function DoCheck() {}
    return DoCheck;
  }());
  var OnDestroy = (function() {
    function OnDestroy() {}
    return OnDestroy;
  }());
  var AfterContentInit = (function() {
    function AfterContentInit() {}
    return AfterContentInit;
  }());
  var AfterContentChecked = (function() {
    function AfterContentChecked() {}
    return AfterContentChecked;
  }());
  var AfterViewInit = (function() {
    function AfterViewInit() {}
    return AfterViewInit;
  }());
  var AfterViewChecked = (function() {
    function AfterViewChecked() {}
    return AfterViewChecked;
  }());
  exports.ViewEncapsulation;
  (function(ViewEncapsulation) {
    ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
    ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
    ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
  })(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));
  var VIEW_ENCAPSULATION_VALUES = [exports.ViewEncapsulation.Emulated, exports.ViewEncapsulation.Native, exports.ViewEncapsulation.None];
  var ViewMetadata = (function() {
    function ViewMetadata(_a) {
      var _b = _a === void 0 ? {} : _a,
          templateUrl = _b.templateUrl,
          template = _b.template,
          encapsulation = _b.encapsulation,
          styles = _b.styles,
          styleUrls = _b.styleUrls,
          animations = _b.animations,
          interpolation = _b.interpolation;
      this.templateUrl = templateUrl;
      this.template = template;
      this.styleUrls = styleUrls;
      this.styles = styles;
      this.encapsulation = encapsulation;
      this.animations = animations;
      this.interpolation = interpolation;
    }
    return ViewMetadata;
  }());
  var Component = makeDecorator(ComponentMetadata);
  var Directive = makeDecorator(DirectiveMetadata);
  var Attribute = makeParamDecorator(AttributeMetadata);
  var ContentChildren = makePropDecorator(ContentChildrenMetadata);
  var ContentChild = makePropDecorator(ContentChildMetadata);
  var ViewChildren = makePropDecorator(ViewChildrenMetadata);
  var ViewChild = makePropDecorator(ViewChildMetadata);
  var Pipe = makeDecorator(PipeMetadata);
  var Input = makePropDecorator(InputMetadata);
  var Output = makePropDecorator(OutputMetadata);
  var HostBinding = makePropDecorator(HostBindingMetadata);
  var HostListener = makePropDecorator(HostListenerMetadata);
  var NgModule = makeDecorator(NgModuleMetadata);
  var ErrorHandler = (function() {
    function ErrorHandler(rethrowError) {
      if (rethrowError === void 0) {
        rethrowError = true;
      }
      this._console = console;
      this.rethrowError = rethrowError;
    }
    ErrorHandler.prototype.handleError = function(error) {
      var originalError = this._findOriginalError(error);
      var originalStack = this._findOriginalStack(error);
      var context = this._findContext(error);
      this._console.error("EXCEPTION: " + this._extractMessage(error));
      if (originalError) {
        this._console.error("ORIGINAL EXCEPTION: " + this._extractMessage(originalError));
      }
      if (originalStack) {
        this._console.error('ORIGINAL STACKTRACE:');
        this._console.error(originalStack);
      }
      if (context) {
        this._console.error('ERROR CONTEXT:');
        this._console.error(context);
      }
      if (this.rethrowError)
        throw error;
    };
    ErrorHandler.prototype._extractMessage = function(error) {
      return error instanceof Error ? error.message : error.toString();
    };
    ErrorHandler.prototype._findContext = function(error) {
      if (error) {
        return error.context ? error.context : this._findContext(error.originalError);
      } else {
        return null;
      }
    };
    ErrorHandler.prototype._findOriginalError = function(error) {
      var e = error.originalError;
      while (e && e.originalError) {
        e = e.originalError;
      }
      return e;
    };
    ErrorHandler.prototype._findOriginalStack = function(error) {
      if (!(error instanceof Error))
        return null;
      var e = error;
      var stack = e.stack;
      while (e instanceof Error && e.originalError) {
        e = e.originalError;
        if (e instanceof Error && e.stack) {
          stack = e.stack;
        }
      }
      return stack;
    };
    return ErrorHandler;
  }());
  var APP_INITIALIZER = new OpaqueToken('Application Initializer');
  var ApplicationInitStatus = (function() {
    function ApplicationInitStatus(appInits) {
      var _this = this;
      this._done = false;
      var asyncInitPromises = [];
      if (appInits) {
        for (var i = 0; i < appInits.length; i++) {
          var initResult = appInits[i]();
          if (isPromise(initResult)) {
            asyncInitPromises.push(initResult);
          }
        }
      }
      this._donePromise = Promise.all(asyncInitPromises).then(function() {
        _this._done = true;
      });
      if (asyncInitPromises.length === 0) {
        this._done = true;
      }
    }
    Object.defineProperty(ApplicationInitStatus.prototype, "done", {
      get: function() {
        return this._done;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
      get: function() {
        return this._donePromise;
      },
      enumerable: true,
      configurable: true
    });
    ApplicationInitStatus.decorators = [{type: Injectable}];
    ApplicationInitStatus.ctorParameters = [{
      type: Array,
      decorators: [{
        type: Inject,
        args: [APP_INITIALIZER]
      }, {type: Optional}]
    }];
    return ApplicationInitStatus;
  }());
  var APP_ID = new OpaqueToken('AppId');
  function _appIdRandomProviderFactory() {
    return "" + _randomChar() + _randomChar() + _randomChar();
  }
  var APP_ID_RANDOM_PROVIDER = {
    provide: APP_ID,
    useFactory: _appIdRandomProviderFactory,
    deps: []
  };
  function _randomChar() {
    return StringWrapper.fromCharCode(97 + Math.floor(Math.random() * 25));
  }
  var PLATFORM_INITIALIZER = new OpaqueToken('Platform Initializer');
  var APP_BOOTSTRAP_LISTENER = new OpaqueToken('appBootstrapListener');
  var PACKAGE_ROOT_URL = new OpaqueToken('Application Packages Root URL');
  var Console = (function() {
    function Console() {}
    Console.prototype.log = function(message) {
      print(message);
    };
    Console.prototype.warn = function(message) {
      warn(message);
    };
    Console.decorators = [{type: Injectable}];
    Console.ctorParameters = [];
    return Console;
  }());
  var __extends$7 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ComponentStillLoadingError = (function(_super) {
    __extends$7(ComponentStillLoadingError, _super);
    function ComponentStillLoadingError(compType) {
      _super.call(this, "Can't compile synchronously as " + stringify(compType) + " is still being loaded!");
      this.compType = compType;
    }
    return ComponentStillLoadingError;
  }(BaseError));
  var ModuleWithComponentFactories = (function() {
    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
      this.ngModuleFactory = ngModuleFactory;
      this.componentFactories = componentFactories;
    }
    return ModuleWithComponentFactories;
  }());
  function _throwError() {
    throw new Error("Runtime compiler is not loaded");
  }
  var Compiler = (function() {
    function Compiler() {}
    Compiler.prototype.compileModuleSync = function(moduleType) {
      throw _throwError();
    };
    Compiler.prototype.compileModuleAsync = function(moduleType) {
      throw _throwError();
    };
    Compiler.prototype.compileModuleAndAllComponentsSync = function(moduleType) {
      throw _throwError();
    };
    Compiler.prototype.compileModuleAndAllComponentsAsync = function(moduleType) {
      throw _throwError();
    };
    Compiler.prototype.clearCache = function() {};
    Compiler.prototype.clearCacheFor = function(type) {};
    return Compiler;
  }());
  var COMPILER_OPTIONS = new OpaqueToken('compilerOptions');
  var CompilerFactory = (function() {
    function CompilerFactory() {}
    return CompilerFactory;
  }());
  var DefaultIterableDifferFactory = (function() {
    function DefaultIterableDifferFactory() {}
    DefaultIterableDifferFactory.prototype.supports = function(obj) {
      return isListLikeIterable(obj);
    };
    DefaultIterableDifferFactory.prototype.create = function(cdRef, trackByFn) {
      return new DefaultIterableDiffer(trackByFn);
    };
    return DefaultIterableDifferFactory;
  }());
  var trackByIdentity = function(index, item) {
    return item;
  };
  var DefaultIterableDiffer = (function() {
    function DefaultIterableDiffer(_trackByFn) {
      this._trackByFn = _trackByFn;
      this._length = null;
      this._collection = null;
      this._linkedRecords = null;
      this._unlinkedRecords = null;
      this._previousItHead = null;
      this._itHead = null;
      this._itTail = null;
      this._additionsHead = null;
      this._additionsTail = null;
      this._movesHead = null;
      this._movesTail = null;
      this._removalsHead = null;
      this._removalsTail = null;
      this._identityChangesHead = null;
      this._identityChangesTail = null;
      this._trackByFn = isPresent(this._trackByFn) ? this._trackByFn : trackByIdentity;
    }
    Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
      get: function() {
        return this._collection;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
      get: function() {
        return this._length;
      },
      enumerable: true,
      configurable: true
    });
    DefaultIterableDiffer.prototype.forEachItem = function(fn) {
      var record;
      for (record = this._itHead; record !== null; record = record._next) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachOperation = function(fn) {
      var nextIt = this._itHead;
      var nextRemove = this._removalsHead;
      var addRemoveOffset = 0;
      var moveOffsets = null;
      while (nextIt || nextRemove) {
        var record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
        var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
        var currentIndex = record.currentIndex;
        if (record === nextRemove) {
          addRemoveOffset--;
          nextRemove = nextRemove._nextRemoved;
        } else {
          nextIt = nextIt._next;
          if (record.previousIndex == null) {
            addRemoveOffset++;
          } else {
            if (!moveOffsets)
              moveOffsets = [];
            var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
            var localCurrentIndex = currentIndex - addRemoveOffset;
            if (localMovePreviousIndex != localCurrentIndex) {
              for (var i = 0; i < localMovePreviousIndex; i++) {
                var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
                var index = offset + i;
                if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                  moveOffsets[i] = offset + 1;
                }
              }
              var previousIndex = record.previousIndex;
              moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
            }
          }
        }
        if (adjPreviousIndex !== currentIndex) {
          fn(record, adjPreviousIndex, currentIndex);
        }
      }
    };
    DefaultIterableDiffer.prototype.forEachPreviousItem = function(fn) {
      var record;
      for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachAddedItem = function(fn) {
      var record;
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachMovedItem = function(fn) {
      var record;
      for (record = this._movesHead; record !== null; record = record._nextMoved) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachRemovedItem = function(fn) {
      var record;
      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.forEachIdentityChange = function(fn) {
      var record;
      for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
        fn(record);
      }
    };
    DefaultIterableDiffer.prototype.diff = function(collection) {
      if (isBlank(collection))
        collection = [];
      if (!isListLikeIterable(collection)) {
        throw new Error("Error trying to diff '" + collection + "'");
      }
      if (this.check(collection)) {
        return this;
      } else {
        return null;
      }
    };
    DefaultIterableDiffer.prototype.onDestroy = function() {};
    DefaultIterableDiffer.prototype.check = function(collection) {
      var _this = this;
      this._reset();
      var record = this._itHead;
      var mayBeDirty = false;
      var index;
      var item;
      var itemTrackBy;
      if (isArray(collection)) {
        var list = collection;
        this._length = collection.length;
        for (index = 0; index < this._length; index++) {
          item = list[index];
          itemTrackBy = this._trackByFn(index, item);
          if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
            record = this._mismatch(record, item, itemTrackBy, index);
            mayBeDirty = true;
          } else {
            if (mayBeDirty) {
              record = this._verifyReinsertion(record, item, itemTrackBy, index);
            }
            if (!looseIdentical(record.item, item))
              this._addIdentityChange(record, item);
          }
          record = record._next;
        }
      } else {
        index = 0;
        iterateListLike(collection, function(item) {
          itemTrackBy = _this._trackByFn(index, item);
          if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
            record = _this._mismatch(record, item, itemTrackBy, index);
            mayBeDirty = true;
          } else {
            if (mayBeDirty) {
              record = _this._verifyReinsertion(record, item, itemTrackBy, index);
            }
            if (!looseIdentical(record.item, item))
              _this._addIdentityChange(record, item);
          }
          record = record._next;
          index++;
        });
        this._length = index;
      }
      this._truncate(record);
      this._collection = collection;
      return this.isDirty;
    };
    Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
      get: function() {
        return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
      },
      enumerable: true,
      configurable: true
    });
    DefaultIterableDiffer.prototype._reset = function() {
      if (this.isDirty) {
        var record;
        var nextRecord;
        for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
          record._nextPrevious = record._next;
        }
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
          record.previousIndex = record.currentIndex;
        }
        this._additionsHead = this._additionsTail = null;
        for (record = this._movesHead; record !== null; record = nextRecord) {
          record.previousIndex = record.currentIndex;
          nextRecord = record._nextMoved;
        }
        this._movesHead = this._movesTail = null;
        this._removalsHead = this._removalsTail = null;
        this._identityChangesHead = this._identityChangesTail = null;
      }
    };
    DefaultIterableDiffer.prototype._mismatch = function(record, item, itemTrackBy, index) {
      var previousRecord;
      if (record === null) {
        previousRecord = this._itTail;
      } else {
        previousRecord = record._prev;
        this._remove(record);
      }
      record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
      if (record !== null) {
        if (!looseIdentical(record.item, item))
          this._addIdentityChange(record, item);
        this._moveAfter(record, previousRecord, index);
      } else {
        record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
        if (record !== null) {
          if (!looseIdentical(record.item, item))
            this._addIdentityChange(record, item);
          this._reinsertAfter(record, previousRecord, index);
        } else {
          record = this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
        }
      }
      return record;
    };
    DefaultIterableDiffer.prototype._verifyReinsertion = function(record, item, itemTrackBy, index) {
      var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
      if (reinsertRecord !== null) {
        record = this._reinsertAfter(reinsertRecord, record._prev, index);
      } else if (record.currentIndex != index) {
        record.currentIndex = index;
        this._addToMoves(record, index);
      }
      return record;
    };
    DefaultIterableDiffer.prototype._truncate = function(record) {
      while (record !== null) {
        var nextRecord = record._next;
        this._addToRemovals(this._unlink(record));
        record = nextRecord;
      }
      if (this._unlinkedRecords !== null) {
        this._unlinkedRecords.clear();
      }
      if (this._additionsTail !== null) {
        this._additionsTail._nextAdded = null;
      }
      if (this._movesTail !== null) {
        this._movesTail._nextMoved = null;
      }
      if (this._itTail !== null) {
        this._itTail._next = null;
      }
      if (this._removalsTail !== null) {
        this._removalsTail._nextRemoved = null;
      }
      if (this._identityChangesTail !== null) {
        this._identityChangesTail._nextIdentityChange = null;
      }
    };
    DefaultIterableDiffer.prototype._reinsertAfter = function(record, prevRecord, index) {
      if (this._unlinkedRecords !== null) {
        this._unlinkedRecords.remove(record);
      }
      var prev = record._prevRemoved;
      var next = record._nextRemoved;
      if (prev === null) {
        this._removalsHead = next;
      } else {
        prev._nextRemoved = next;
      }
      if (next === null) {
        this._removalsTail = prev;
      } else {
        next._prevRemoved = prev;
      }
      this._insertAfter(record, prevRecord, index);
      this._addToMoves(record, index);
      return record;
    };
    DefaultIterableDiffer.prototype._moveAfter = function(record, prevRecord, index) {
      this._unlink(record);
      this._insertAfter(record, prevRecord, index);
      this._addToMoves(record, index);
      return record;
    };
    DefaultIterableDiffer.prototype._addAfter = function(record, prevRecord, index) {
      this._insertAfter(record, prevRecord, index);
      if (this._additionsTail === null) {
        this._additionsTail = this._additionsHead = record;
      } else {
        this._additionsTail = this._additionsTail._nextAdded = record;
      }
      return record;
    };
    DefaultIterableDiffer.prototype._insertAfter = function(record, prevRecord, index) {
      var next = prevRecord === null ? this._itHead : prevRecord._next;
      record._next = next;
      record._prev = prevRecord;
      if (next === null) {
        this._itTail = record;
      } else {
        next._prev = record;
      }
      if (prevRecord === null) {
        this._itHead = record;
      } else {
        prevRecord._next = record;
      }
      if (this._linkedRecords === null) {
        this._linkedRecords = new _DuplicateMap();
      }
      this._linkedRecords.put(record);
      record.currentIndex = index;
      return record;
    };
    DefaultIterableDiffer.prototype._remove = function(record) {
      return this._addToRemovals(this._unlink(record));
    };
    DefaultIterableDiffer.prototype._unlink = function(record) {
      if (this._linkedRecords !== null) {
        this._linkedRecords.remove(record);
      }
      var prev = record._prev;
      var next = record._next;
      if (prev === null) {
        this._itHead = next;
      } else {
        prev._next = next;
      }
      if (next === null) {
        this._itTail = prev;
      } else {
        next._prev = prev;
      }
      return record;
    };
    DefaultIterableDiffer.prototype._addToMoves = function(record, toIndex) {
      if (record.previousIndex === toIndex) {
        return record;
      }
      if (this._movesTail === null) {
        this._movesTail = this._movesHead = record;
      } else {
        this._movesTail = this._movesTail._nextMoved = record;
      }
      return record;
    };
    DefaultIterableDiffer.prototype._addToRemovals = function(record) {
      if (this._unlinkedRecords === null) {
        this._unlinkedRecords = new _DuplicateMap();
      }
      this._unlinkedRecords.put(record);
      record.currentIndex = null;
      record._nextRemoved = null;
      if (this._removalsTail === null) {
        this._removalsTail = this._removalsHead = record;
        record._prevRemoved = null;
      } else {
        record._prevRemoved = this._removalsTail;
        this._removalsTail = this._removalsTail._nextRemoved = record;
      }
      return record;
    };
    DefaultIterableDiffer.prototype._addIdentityChange = function(record, item) {
      record.item = item;
      if (this._identityChangesTail === null) {
        this._identityChangesTail = this._identityChangesHead = record;
      } else {
        this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
      }
      return record;
    };
    DefaultIterableDiffer.prototype.toString = function() {
      var list = [];
      this.forEachItem(function(record) {
        return list.push(record);
      });
      var previous = [];
      this.forEachPreviousItem(function(record) {
        return previous.push(record);
      });
      var additions = [];
      this.forEachAddedItem(function(record) {
        return additions.push(record);
      });
      var moves = [];
      this.forEachMovedItem(function(record) {
        return moves.push(record);
      });
      var removals = [];
      this.forEachRemovedItem(function(record) {
        return removals.push(record);
      });
      var identityChanges = [];
      this.forEachIdentityChange(function(record) {
        return identityChanges.push(record);
      });
      return 'collection: ' + list.join(', ') + '\n' + 'previous: ' + previous.join(', ') + '\n' + 'additions: ' + additions.join(', ') + '\n' + 'moves: ' + moves.join(', ') + '\n' + 'removals: ' + removals.join(', ') + '\n' + 'identityChanges: ' + identityChanges.join(', ') + '\n';
    };
    return DefaultIterableDiffer;
  }());
  var CollectionChangeRecord = (function() {
    function CollectionChangeRecord(item, trackById) {
      this.item = item;
      this.trackById = trackById;
      this.currentIndex = null;
      this.previousIndex = null;
      this._nextPrevious = null;
      this._prev = null;
      this._next = null;
      this._prevDup = null;
      this._nextDup = null;
      this._prevRemoved = null;
      this._nextRemoved = null;
      this._nextAdded = null;
      this._nextMoved = null;
      this._nextIdentityChange = null;
    }
    CollectionChangeRecord.prototype.toString = function() {
      return this.previousIndex === this.currentIndex ? stringify(this.item) : stringify(this.item) + '[' + stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
    };
    return CollectionChangeRecord;
  }());
  var _DuplicateItemRecordList = (function() {
    function _DuplicateItemRecordList() {
      this._head = null;
      this._tail = null;
    }
    _DuplicateItemRecordList.prototype.add = function(record) {
      if (this._head === null) {
        this._head = this._tail = record;
        record._nextDup = null;
        record._prevDup = null;
      } else {
        this._tail._nextDup = record;
        record._prevDup = this._tail;
        record._nextDup = null;
        this._tail = record;
      }
    };
    _DuplicateItemRecordList.prototype.get = function(trackById, afterIndex) {
      var record;
      for (record = this._head; record !== null; record = record._nextDup) {
        if ((afterIndex === null || afterIndex < record.currentIndex) && looseIdentical(record.trackById, trackById)) {
          return record;
        }
      }
      return null;
    };
    _DuplicateItemRecordList.prototype.remove = function(record) {
      var prev = record._prevDup;
      var next = record._nextDup;
      if (prev === null) {
        this._head = next;
      } else {
        prev._nextDup = next;
      }
      if (next === null) {
        this._tail = prev;
      } else {
        next._prevDup = prev;
      }
      return this._head === null;
    };
    return _DuplicateItemRecordList;
  }());
  var _DuplicateMap = (function() {
    function _DuplicateMap() {
      this.map = new Map();
    }
    _DuplicateMap.prototype.put = function(record) {
      var key = getMapKey(record.trackById);
      var duplicates = this.map.get(key);
      if (!isPresent(duplicates)) {
        duplicates = new _DuplicateItemRecordList();
        this.map.set(key, duplicates);
      }
      duplicates.add(record);
    };
    _DuplicateMap.prototype.get = function(trackById, afterIndex) {
      if (afterIndex === void 0) {
        afterIndex = null;
      }
      var key = getMapKey(trackById);
      var recordList = this.map.get(key);
      return isBlank(recordList) ? null : recordList.get(trackById, afterIndex);
    };
    _DuplicateMap.prototype.remove = function(record) {
      var key = getMapKey(record.trackById);
      var recordList = this.map.get(key);
      if (recordList.remove(record)) {
        this.map.delete(key);
      }
      return record;
    };
    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
      get: function() {
        return this.map.size === 0;
      },
      enumerable: true,
      configurable: true
    });
    _DuplicateMap.prototype.clear = function() {
      this.map.clear();
    };
    _DuplicateMap.prototype.toString = function() {
      return '_DuplicateMap(' + stringify(this.map) + ')';
    };
    return _DuplicateMap;
  }());
  function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
    var previousIndex = item.previousIndex;
    if (previousIndex === null)
      return previousIndex;
    var moveOffset = 0;
    if (moveOffsets && previousIndex < moveOffsets.length) {
      moveOffset = moveOffsets[previousIndex];
    }
    return previousIndex + addRemoveOffset + moveOffset;
  }
  var DefaultKeyValueDifferFactory = (function() {
    function DefaultKeyValueDifferFactory() {}
    DefaultKeyValueDifferFactory.prototype.supports = function(obj) {
      return obj instanceof Map || isJsObject(obj);
    };
    DefaultKeyValueDifferFactory.prototype.create = function(cdRef) {
      return new DefaultKeyValueDiffer();
    };
    return DefaultKeyValueDifferFactory;
  }());
  var DefaultKeyValueDiffer = (function() {
    function DefaultKeyValueDiffer() {
      this._records = new Map();
      this._mapHead = null;
      this._previousMapHead = null;
      this._changesHead = null;
      this._changesTail = null;
      this._additionsHead = null;
      this._additionsTail = null;
      this._removalsHead = null;
      this._removalsTail = null;
    }
    Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
      get: function() {
        return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
      },
      enumerable: true,
      configurable: true
    });
    DefaultKeyValueDiffer.prototype.forEachItem = function(fn) {
      var record;
      for (record = this._mapHead; record !== null; record = record._next) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function(fn) {
      var record;
      for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.forEachChangedItem = function(fn) {
      var record;
      for (record = this._changesHead; record !== null; record = record._nextChanged) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.forEachAddedItem = function(fn) {
      var record;
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function(fn) {
      var record;
      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        fn(record);
      }
    };
    DefaultKeyValueDiffer.prototype.diff = function(map) {
      if (!map) {
        map = new Map();
      } else if (!(map instanceof Map || isJsObject(map))) {
        throw new Error("Error trying to diff '" + map + "'");
      }
      return this.check(map) ? this : null;
    };
    DefaultKeyValueDiffer.prototype.onDestroy = function() {};
    DefaultKeyValueDiffer.prototype.check = function(map) {
      var _this = this;
      this._reset();
      var records = this._records;
      var oldSeqRecord = this._mapHead;
      var lastOldSeqRecord = null;
      var lastNewSeqRecord = null;
      var seqChanged = false;
      this._forEach(map, function(value, key) {
        var newSeqRecord;
        if (oldSeqRecord && key === oldSeqRecord.key) {
          newSeqRecord = oldSeqRecord;
          _this._maybeAddToChanges(newSeqRecord, value);
        } else {
          seqChanged = true;
          if (oldSeqRecord !== null) {
            _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
            _this._addToRemovals(oldSeqRecord);
          }
          if (records.has(key)) {
            newSeqRecord = records.get(key);
            _this._maybeAddToChanges(newSeqRecord, value);
          } else {
            newSeqRecord = new KeyValueChangeRecord(key);
            records.set(key, newSeqRecord);
            newSeqRecord.currentValue = value;
            _this._addToAdditions(newSeqRecord);
          }
        }
        if (seqChanged) {
          if (_this._isInRemovals(newSeqRecord)) {
            _this._removeFromRemovals(newSeqRecord);
          }
          if (lastNewSeqRecord == null) {
            _this._mapHead = newSeqRecord;
          } else {
            lastNewSeqRecord._next = newSeqRecord;
          }
        }
        lastOldSeqRecord = oldSeqRecord;
        lastNewSeqRecord = newSeqRecord;
        oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
      });
      this._truncate(lastOldSeqRecord, oldSeqRecord);
      return this.isDirty;
    };
    DefaultKeyValueDiffer.prototype._reset = function() {
      if (this.isDirty) {
        var record = void 0;
        for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
          record._nextPrevious = record._next;
        }
        for (record = this._changesHead; record !== null; record = record._nextChanged) {
          record.previousValue = record.currentValue;
        }
        for (record = this._additionsHead; record != null; record = record._nextAdded) {
          record.previousValue = record.currentValue;
        }
        this._changesHead = this._changesTail = null;
        this._additionsHead = this._additionsTail = null;
        this._removalsHead = this._removalsTail = null;
      }
    };
    DefaultKeyValueDiffer.prototype._truncate = function(lastRecord, record) {
      while (record !== null) {
        if (lastRecord === null) {
          this._mapHead = null;
        } else {
          lastRecord._next = null;
        }
        var nextRecord = record._next;
        this._addToRemovals(record);
        lastRecord = record;
        record = nextRecord;
      }
      for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
        rec.previousValue = rec.currentValue;
        rec.currentValue = null;
        this._records.delete(rec.key);
      }
    };
    DefaultKeyValueDiffer.prototype._maybeAddToChanges = function(record, newValue) {
      if (!looseIdentical(newValue, record.currentValue)) {
        record.previousValue = record.currentValue;
        record.currentValue = newValue;
        this._addToChanges(record);
      }
    };
    DefaultKeyValueDiffer.prototype._isInRemovals = function(record) {
      return record === this._removalsHead || record._nextRemoved !== null || record._prevRemoved !== null;
    };
    DefaultKeyValueDiffer.prototype._addToRemovals = function(record) {
      if (this._removalsHead === null) {
        this._removalsHead = this._removalsTail = record;
      } else {
        this._removalsTail._nextRemoved = record;
        record._prevRemoved = this._removalsTail;
        this._removalsTail = record;
      }
    };
    DefaultKeyValueDiffer.prototype._removeFromSeq = function(prev, record) {
      var next = record._next;
      if (prev === null) {
        this._mapHead = next;
      } else {
        prev._next = next;
      }
      record._next = null;
    };
    DefaultKeyValueDiffer.prototype._removeFromRemovals = function(record) {
      var prev = record._prevRemoved;
      var next = record._nextRemoved;
      if (prev === null) {
        this._removalsHead = next;
      } else {
        prev._nextRemoved = next;
      }
      if (next === null) {
        this._removalsTail = prev;
      } else {
        next._prevRemoved = prev;
      }
      record._prevRemoved = record._nextRemoved = null;
    };
    DefaultKeyValueDiffer.prototype._addToAdditions = function(record) {
      if (this._additionsHead === null) {
        this._additionsHead = this._additionsTail = record;
      } else {
        this._additionsTail._nextAdded = record;
        this._additionsTail = record;
      }
    };
    DefaultKeyValueDiffer.prototype._addToChanges = function(record) {
      if (this._changesHead === null) {
        this._changesHead = this._changesTail = record;
      } else {
        this._changesTail._nextChanged = record;
        this._changesTail = record;
      }
    };
    DefaultKeyValueDiffer.prototype.toString = function() {
      var items = [];
      var previous = [];
      var changes = [];
      var additions = [];
      var removals = [];
      var record;
      for (record = this._mapHead; record !== null; record = record._next) {
        items.push(stringify(record));
      }
      for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
        previous.push(stringify(record));
      }
      for (record = this._changesHead; record !== null; record = record._nextChanged) {
        changes.push(stringify(record));
      }
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        additions.push(stringify(record));
      }
      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        removals.push(stringify(record));
      }
      return 'map: ' + items.join(', ') + '\n' + 'previous: ' + previous.join(', ') + '\n' + 'additions: ' + additions.join(', ') + '\n' + 'changes: ' + changes.join(', ') + '\n' + 'removals: ' + removals.join(', ') + '\n';
    };
    DefaultKeyValueDiffer.prototype._forEach = function(obj, fn) {
      if (obj instanceof Map) {
        obj.forEach(fn);
      } else {
        StringMapWrapper.forEach(obj, fn);
      }
    };
    return DefaultKeyValueDiffer;
  }());
  var KeyValueChangeRecord = (function() {
    function KeyValueChangeRecord(key) {
      this.key = key;
      this.previousValue = null;
      this.currentValue = null;
      this._nextPrevious = null;
      this._next = null;
      this._nextAdded = null;
      this._nextRemoved = null;
      this._prevRemoved = null;
      this._nextChanged = null;
    }
    KeyValueChangeRecord.prototype.toString = function() {
      return looseIdentical(this.previousValue, this.currentValue) ? stringify(this.key) : (stringify(this.key) + '[' + stringify(this.previousValue) + '->' + stringify(this.currentValue) + ']');
    };
    return KeyValueChangeRecord;
  }());
  var IterableDiffers = (function() {
    function IterableDiffers(factories) {
      this.factories = factories;
    }
    IterableDiffers.create = function(factories, parent) {
      if (isPresent(parent)) {
        var copied = ListWrapper.clone(parent.factories);
        factories = factories.concat(copied);
        return new IterableDiffers(factories);
      } else {
        return new IterableDiffers(factories);
      }
    };
    IterableDiffers.extend = function(factories) {
      return {
        provide: IterableDiffers,
        useFactory: function(parent) {
          if (isBlank(parent)) {
            throw new Error('Cannot extend IterableDiffers without a parent injector');
          }
          return IterableDiffers.create(factories, parent);
        },
        deps: [[IterableDiffers, new SkipSelfMetadata(), new OptionalMetadata()]]
      };
    };
    IterableDiffers.prototype.find = function(iterable) {
      var factory = this.factories.find(function(f) {
        return f.supports(iterable);
      });
      if (isPresent(factory)) {
        return factory;
      } else {
        throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
      }
    };
    return IterableDiffers;
  }());
  var KeyValueDiffers = (function() {
    function KeyValueDiffers(factories) {
      this.factories = factories;
    }
    KeyValueDiffers.create = function(factories, parent) {
      if (isPresent(parent)) {
        var copied = ListWrapper.clone(parent.factories);
        factories = factories.concat(copied);
        return new KeyValueDiffers(factories);
      } else {
        return new KeyValueDiffers(factories);
      }
    };
    KeyValueDiffers.extend = function(factories) {
      return {
        provide: KeyValueDiffers,
        useFactory: function(parent) {
          if (isBlank(parent)) {
            throw new Error('Cannot extend KeyValueDiffers without a parent injector');
          }
          return KeyValueDiffers.create(factories, parent);
        },
        deps: [[KeyValueDiffers, new SkipSelfMetadata(), new OptionalMetadata()]]
      };
    };
    KeyValueDiffers.prototype.find = function(kv) {
      var factory = this.factories.find(function(f) {
        return f.supports(kv);
      });
      if (isPresent(factory)) {
        return factory;
      } else {
        throw new Error("Cannot find a differ supporting object '" + kv + "'");
      }
    };
    return KeyValueDiffers;
  }());
  var UNINITIALIZED = {toString: function() {
      return 'CD_INIT_VALUE';
    }};
  function devModeEqual(a, b) {
    if (isListLikeIterable(a) && isListLikeIterable(b)) {
      return areIterablesEqual(a, b, devModeEqual);
    } else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {
      return true;
    } else {
      return looseIdentical(a, b);
    }
  }
  var WrappedValue = (function() {
    function WrappedValue(wrapped) {
      this.wrapped = wrapped;
    }
    WrappedValue.wrap = function(value) {
      return new WrappedValue(value);
    };
    return WrappedValue;
  }());
  var ValueUnwrapper = (function() {
    function ValueUnwrapper() {
      this.hasWrappedValue = false;
    }
    ValueUnwrapper.prototype.unwrap = function(value) {
      if (value instanceof WrappedValue) {
        this.hasWrappedValue = true;
        return value.wrapped;
      }
      return value;
    };
    ValueUnwrapper.prototype.reset = function() {
      this.hasWrappedValue = false;
    };
    return ValueUnwrapper;
  }());
  var SimpleChange = (function() {
    function SimpleChange(previousValue, currentValue) {
      this.previousValue = previousValue;
      this.currentValue = currentValue;
    }
    SimpleChange.prototype.isFirstChange = function() {
      return this.previousValue === UNINITIALIZED;
    };
    return SimpleChange;
  }());
  var ChangeDetectorRef = (function() {
    function ChangeDetectorRef() {}
    return ChangeDetectorRef;
  }());
  var keyValDiff = [new DefaultKeyValueDifferFactory()];
  var iterableDiff = [new DefaultIterableDifferFactory()];
  var defaultIterableDiffers = new IterableDiffers(iterableDiff);
  var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
  var RenderComponentType = (function() {
    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
      this.id = id;
      this.templateUrl = templateUrl;
      this.slotCount = slotCount;
      this.encapsulation = encapsulation;
      this.styles = styles;
      this.animations = animations;
    }
    return RenderComponentType;
  }());
  var RenderDebugInfo = (function() {
    function RenderDebugInfo() {}
    Object.defineProperty(RenderDebugInfo.prototype, "injector", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "component", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "providerTokens", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "references", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "context", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "source", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    return RenderDebugInfo;
  }());
  var Renderer = (function() {
    function Renderer() {}
    return Renderer;
  }());
  var RootRenderer = (function() {
    function RootRenderer() {}
    return RootRenderer;
  }());
  exports.SecurityContext;
  (function(SecurityContext) {
    SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
    SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
    SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
    SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
    SecurityContext[SecurityContext["URL"] = 4] = "URL";
    SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
  })(exports.SecurityContext || (exports.SecurityContext = {}));
  var Sanitizer = (function() {
    function Sanitizer() {}
    return Sanitizer;
  }());
  var ElementRef = (function() {
    function ElementRef(nativeElement) {
      this.nativeElement = nativeElement;
    }
    return ElementRef;
  }());
  var trace;
  var events;
  function detectWTF() {
    var wtf = global$1['wtf'];
    if (wtf) {
      trace = wtf['trace'];
      if (trace) {
        events = trace['events'];
        return true;
      }
    }
    return false;
  }
  function createScope(signature, flags) {
    if (flags === void 0) {
      flags = null;
    }
    return events.createScope(signature, flags);
  }
  function leave(scope, returnValue) {
    trace.leaveScope(scope, returnValue);
    return returnValue;
  }
  function startTimeRange(rangeType, action) {
    return trace.beginTimeRange(rangeType, action);
  }
  function endTimeRange(range) {
    trace.endTimeRange(range);
  }
  var wtfEnabled = detectWTF();
  function noopScope(arg0, arg1) {
    return null;
  }
  var wtfCreateScope = wtfEnabled ? createScope : function(signature, flags) {
    return noopScope;
  };
  var wtfLeave = wtfEnabled ? leave : function(s, r) {
    return r;
  };
  var wtfStartTimeRange = wtfEnabled ? startTimeRange : function(rangeType, action) {
    return null;
  };
  var wtfEndTimeRange = wtfEnabled ? endTimeRange : function(r) {
    return null;
  };
  var ViewContainerRef = (function() {
    function ViewContainerRef() {}
    Object.defineProperty(ViewContainerRef.prototype, "element", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainerRef.prototype, "injector", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainerRef.prototype, "parentInjector", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainerRef.prototype, "length", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ;
    return ViewContainerRef;
  }());
  var ViewContainerRef_ = (function() {
    function ViewContainerRef_(_element) {
      this._element = _element;
      this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');
      this._insertScope = wtfCreateScope('ViewContainerRef#insert()');
      this._removeScope = wtfCreateScope('ViewContainerRef#remove()');
      this._detachScope = wtfCreateScope('ViewContainerRef#detach()');
    }
    ViewContainerRef_.prototype.get = function(index) {
      return this._element.nestedViews[index].ref;
    };
    Object.defineProperty(ViewContainerRef_.prototype, "length", {
      get: function() {
        var views = this._element.nestedViews;
        return isPresent(views) ? views.length : 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "element", {
      get: function() {
        return this._element.elementRef;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "injector", {
      get: function() {
        return this._element.injector;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
      get: function() {
        return this._element.parentInjector;
      },
      enumerable: true,
      configurable: true
    });
    ViewContainerRef_.prototype.createEmbeddedView = function(templateRef, context, index) {
      if (context === void 0) {
        context = null;
      }
      if (index === void 0) {
        index = -1;
      }
      var viewRef = templateRef.createEmbeddedView(context);
      this.insert(viewRef, index);
      return viewRef;
    };
    ViewContainerRef_.prototype.createComponent = function(componentFactory, index, injector, projectableNodes) {
      if (index === void 0) {
        index = -1;
      }
      if (injector === void 0) {
        injector = null;
      }
      if (projectableNodes === void 0) {
        projectableNodes = null;
      }
      var s = this._createComponentInContainerScope();
      var contextInjector = isPresent(injector) ? injector : this._element.parentInjector;
      var componentRef = componentFactory.create(contextInjector, projectableNodes);
      this.insert(componentRef.hostView, index);
      return wtfLeave(s, componentRef);
    };
    ViewContainerRef_.prototype.insert = function(viewRef, index) {
      if (index === void 0) {
        index = -1;
      }
      var s = this._insertScope();
      if (index == -1)
        index = this.length;
      var viewRef_ = viewRef;
      this._element.attachView(viewRef_.internalView, index);
      return wtfLeave(s, viewRef_);
    };
    ViewContainerRef_.prototype.move = function(viewRef, currentIndex) {
      var s = this._insertScope();
      if (currentIndex == -1)
        return;
      var viewRef_ = viewRef;
      this._element.moveView(viewRef_.internalView, currentIndex);
      return wtfLeave(s, viewRef_);
    };
    ViewContainerRef_.prototype.indexOf = function(viewRef) {
      return ListWrapper.indexOf(this._element.nestedViews, viewRef.internalView);
    };
    ViewContainerRef_.prototype.remove = function(index) {
      if (index === void 0) {
        index = -1;
      }
      var s = this._removeScope();
      if (index == -1)
        index = this.length - 1;
      var view = this._element.detachView(index);
      view.destroy();
      wtfLeave(s);
    };
    ViewContainerRef_.prototype.detach = function(index) {
      if (index === void 0) {
        index = -1;
      }
      var s = this._detachScope();
      if (index == -1)
        index = this.length - 1;
      var view = this._element.detachView(index);
      return wtfLeave(s, view.ref);
    };
    ViewContainerRef_.prototype.clear = function() {
      for (var i = this.length - 1; i >= 0; i--) {
        this.remove(i);
      }
    };
    return ViewContainerRef_;
  }());
  var ViewType;
  (function(ViewType) {
    ViewType[ViewType["HOST"] = 0] = "HOST";
    ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
    ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
  })(ViewType || (ViewType = {}));
  var AppElement = (function() {
    function AppElement(index, parentIndex, parentView, nativeElement) {
      this.index = index;
      this.parentIndex = parentIndex;
      this.parentView = parentView;
      this.nativeElement = nativeElement;
      this.nestedViews = null;
      this.componentView = null;
    }
    Object.defineProperty(AppElement.prototype, "elementRef", {
      get: function() {
        return new ElementRef(this.nativeElement);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AppElement.prototype, "vcRef", {
      get: function() {
        return new ViewContainerRef_(this);
      },
      enumerable: true,
      configurable: true
    });
    AppElement.prototype.initComponent = function(component, componentConstructorViewQueries, view) {
      this.component = component;
      this.componentConstructorViewQueries = componentConstructorViewQueries;
      this.componentView = view;
    };
    Object.defineProperty(AppElement.prototype, "parentInjector", {
      get: function() {
        return this.parentView.injector(this.parentIndex);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AppElement.prototype, "injector", {
      get: function() {
        return this.parentView.injector(this.index);
      },
      enumerable: true,
      configurable: true
    });
    AppElement.prototype.mapNestedViews = function(nestedViewClass, callback) {
      var result = [];
      if (isPresent(this.nestedViews)) {
        this.nestedViews.forEach(function(nestedView) {
          if (nestedView.clazz === nestedViewClass) {
            result.push(callback(nestedView));
          }
        });
      }
      return result;
    };
    AppElement.prototype.moveView = function(view, currentIndex) {
      var previousIndex = this.nestedViews.indexOf(view);
      if (view.type === ViewType.COMPONENT) {
        throw new Error("Component views can't be moved!");
      }
      var nestedViews = this.nestedViews;
      if (nestedViews == null) {
        nestedViews = [];
        this.nestedViews = nestedViews;
      }
      ListWrapper.removeAt(nestedViews, previousIndex);
      ListWrapper.insert(nestedViews, currentIndex, view);
      var refRenderNode;
      if (currentIndex > 0) {
        var prevView = nestedViews[currentIndex - 1];
        refRenderNode = prevView.lastRootNode;
      } else {
        refRenderNode = this.nativeElement;
      }
      if (isPresent(refRenderNode)) {
        view.renderer.attachViewAfter(refRenderNode, view.flatRootNodes);
      }
      view.markContentChildAsMoved(this);
    };
    AppElement.prototype.attachView = function(view, viewIndex) {
      if (view.type === ViewType.COMPONENT) {
        throw new Error("Component views can't be moved!");
      }
      var nestedViews = this.nestedViews;
      if (nestedViews == null) {
        nestedViews = [];
        this.nestedViews = nestedViews;
      }
      ListWrapper.insert(nestedViews, viewIndex, view);
      var refRenderNode;
      if (viewIndex > 0) {
        var prevView = nestedViews[viewIndex - 1];
        refRenderNode = prevView.lastRootNode;
      } else {
        refRenderNode = this.nativeElement;
      }
      if (isPresent(refRenderNode)) {
        view.renderer.attachViewAfter(refRenderNode, view.flatRootNodes);
      }
      view.addToContentChildren(this);
    };
    AppElement.prototype.detachView = function(viewIndex) {
      var view = ListWrapper.removeAt(this.nestedViews, viewIndex);
      if (view.type === ViewType.COMPONENT) {
        throw new Error("Component views can't be moved!");
      }
      view.detach();
      view.removeFromContentChildren(this);
      return view;
    };
    return AppElement;
  }());
  var __extends$9 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ExpressionChangedAfterItHasBeenCheckedError = (function(_super) {
    __extends$9(ExpressionChangedAfterItHasBeenCheckedError, _super);
    function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) {
      var msg = "Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
      if (oldValue === UNINITIALIZED) {
        msg += " It seems like the view has been created after its parent and its children have been dirty checked." + " Has it been created in a change detection hook ?";
      }
      _super.call(this, msg);
    }
    return ExpressionChangedAfterItHasBeenCheckedError;
  }(BaseError));
  var ViewWrappedError = (function(_super) {
    __extends$9(ViewWrappedError, _super);
    function ViewWrappedError(originalError, context) {
      _super.call(this, "Error in " + context.source, originalError);
      this.context = context;
    }
    return ViewWrappedError;
  }(WrappedError));
  var ViewDestroyedError = (function(_super) {
    __extends$9(ViewDestroyedError, _super);
    function ViewDestroyedError(details) {
      _super.call(this, "Attempt to use a destroyed view: " + details);
    }
    return ViewDestroyedError;
  }(BaseError));
  var ViewUtils = (function() {
    function ViewUtils(_renderer, _appId, sanitizer) {
      this._renderer = _renderer;
      this._appId = _appId;
      this._nextCompTypeId = 0;
      this.sanitizer = sanitizer;
    }
    ViewUtils.prototype.createRenderComponentType = function(templateUrl, slotCount, encapsulation, styles, animations) {
      return new RenderComponentType(this._appId + "-" + this._nextCompTypeId++, templateUrl, slotCount, encapsulation, styles, animations);
    };
    ViewUtils.prototype.renderComponent = function(renderComponentType) {
      return this._renderer.renderComponent(renderComponentType);
    };
    ViewUtils.decorators = [{type: Injectable}];
    ViewUtils.ctorParameters = [{type: RootRenderer}, {
      type: undefined,
      decorators: [{
        type: Inject,
        args: [APP_ID]
      }]
    }, {type: Sanitizer}];
    return ViewUtils;
  }());
  function flattenNestedViewRenderNodes(nodes) {
    return _flattenNestedViewRenderNodes(nodes, []);
  }
  function _flattenNestedViewRenderNodes(nodes, renderNodes) {
    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      if (node instanceof AppElement) {
        var appEl = node;
        renderNodes.push(appEl.nativeElement);
        if (isPresent(appEl.nestedViews)) {
          for (var k = 0; k < appEl.nestedViews.length; k++) {
            _flattenNestedViewRenderNodes(appEl.nestedViews[k].rootNodesOrAppElements, renderNodes);
          }
        }
      } else {
        renderNodes.push(node);
      }
    }
    return renderNodes;
  }
  var EMPTY_ARR = [];
  function ensureSlotCount(projectableNodes, expectedSlotCount) {
    var res;
    if (isBlank(projectableNodes)) {
      res = EMPTY_ARR;
    } else if (projectableNodes.length < expectedSlotCount) {
      var givenSlotCount = projectableNodes.length;
      res = ListWrapper.createFixedSize(expectedSlotCount);
      for (var i = 0; i < expectedSlotCount; i++) {
        res[i] = (i < givenSlotCount) ? projectableNodes[i] : EMPTY_ARR;
      }
    } else {
      res = projectableNodes;
    }
    return res;
  }
  var MAX_INTERPOLATION_VALUES = 9;
  function interpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
    switch (valueCount) {
      case 1:
        return c0 + _toStringWithNull(a1) + c1;
      case 2:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
      case 3:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;
      case 4:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;
      case 5:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
      case 6:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
      case 7:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;
      case 8:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
      case 9:
        return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
      default:
        throw new Error("Does not support more than 9 expressions");
    }
  }
  function _toStringWithNull(v) {
    return v != null ? v.toString() : '';
  }
  function checkBinding(throwOnChange, oldValue, newValue) {
    if (throwOnChange) {
      if (!devModeEqual(oldValue, newValue)) {
        throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);
      }
      return false;
    } else {
      return !looseIdentical(oldValue, newValue);
    }
  }
  function castByValue(input, value) {
    return input;
  }
  var EMPTY_ARRAY = [];
  var EMPTY_MAP = {};
  function pureProxy1(fn) {
    var result;
    var v0 = UNINITIALIZED;
    return function(p0) {
      if (!looseIdentical(v0, p0)) {
        v0 = p0;
        result = fn(p0);
      }
      return result;
    };
  }
  function pureProxy2(fn) {
    var result;
    var v0 = UNINITIALIZED;
    var v1 = UNINITIALIZED;
    return function(p0, p1) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {
        v0 = p0;
        v1 = p1;
        result = fn(p0, p1);
      }
      return result;
    };
  }
  function pureProxy3(fn) {
    var result;
    var v0 = UNINITIALIZED;
    var v1 = UNINITIALIZED;
    var v2 = UNINITIALIZED;
    return function(p0, p1, p2) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        result = fn(p0, p1, p2);
      }
      return result;
    };
  }
  function pureProxy4(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3;
    v0 = v1 = v2 = v3 = UNINITIALIZED;
    return function(p0, p1, p2, p3) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        result = fn(p0, p1, p2, p3);
      }
      return result;
    };
  }
  function pureProxy5(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4;
    v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        result = fn(p0, p1, p2, p3, p4);
      }
      return result;
    };
  }
  function pureProxy6(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5;
    v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        result = fn(p0, p1, p2, p3, p4, p5);
      }
      return result;
    };
  }
  function pureProxy7(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5, p6) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        v6 = p6;
        result = fn(p0, p1, p2, p3, p4, p5, p6);
      }
      return result;
    };
  }
  function pureProxy8(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5, p6, p7) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        v6 = p6;
        v7 = p7;
        result = fn(p0, p1, p2, p3, p4, p5, p6, p7);
      }
      return result;
    };
  }
  function pureProxy9(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7,
        v8;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        v6 = p6;
        v7 = p7;
        v8 = p8;
        result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);
      }
      return result;
    };
  }
  function pureProxy10(fn) {
    var result;
    var v0,
        v1,
        v2,
        v3,
        v4,
        v5,
        v6,
        v7,
        v8,
        v9;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;
    return function(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
      if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) || !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) || !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) || !looseIdentical(v9, p9)) {
        v0 = p0;
        v1 = p1;
        v2 = p2;
        v3 = p3;
        v4 = p4;
        v5 = p5;
        v6 = p6;
        v7 = p7;
        v8 = p8;
        v9 = p9;
        result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
      }
      return result;
    };
  }
  var __extends$8 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ComponentRef = (function() {
    function ComponentRef() {}
    Object.defineProperty(ComponentRef.prototype, "location", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ComponentRef.prototype, "injector", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ComponentRef.prototype, "instance", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(ComponentRef.prototype, "hostView", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(ComponentRef.prototype, "changeDetectorRef", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ComponentRef.prototype, "componentType", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    return ComponentRef;
  }());
  var ComponentRef_ = (function(_super) {
    __extends$8(ComponentRef_, _super);
    function ComponentRef_(_hostElement, _componentType) {
      _super.call(this);
      this._hostElement = _hostElement;
      this._componentType = _componentType;
    }
    Object.defineProperty(ComponentRef_.prototype, "location", {
      get: function() {
        return this._hostElement.elementRef;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ComponentRef_.prototype, "injector", {
      get: function() {
        return this._hostElement.injector;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ComponentRef_.prototype, "instance", {
      get: function() {
        return this._hostElement.component;
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(ComponentRef_.prototype, "hostView", {
      get: function() {
        return this._hostElement.parentView.ref;
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
      get: function() {
        return this._hostElement.parentView.ref;
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(ComponentRef_.prototype, "componentType", {
      get: function() {
        return this._componentType;
      },
      enumerable: true,
      configurable: true
    });
    ComponentRef_.prototype.destroy = function() {
      this._hostElement.parentView.destroy();
    };
    ComponentRef_.prototype.onDestroy = function(callback) {
      this.hostView.onDestroy(callback);
    };
    return ComponentRef_;
  }(ComponentRef));
  var EMPTY_CONTEXT = new Object();
  var ComponentFactory = (function() {
    function ComponentFactory(selector, _viewFactory, _componentType) {
      this.selector = selector;
      this._viewFactory = _viewFactory;
      this._componentType = _componentType;
    }
    Object.defineProperty(ComponentFactory.prototype, "componentType", {
      get: function() {
        return this._componentType;
      },
      enumerable: true,
      configurable: true
    });
    ComponentFactory.prototype.create = function(injector, projectableNodes, rootSelectorOrNode) {
      if (projectableNodes === void 0) {
        projectableNodes = null;
      }
      if (rootSelectorOrNode === void 0) {
        rootSelectorOrNode = null;
      }
      var vu = injector.get(ViewUtils);
      if (isBlank(projectableNodes)) {
        projectableNodes = [];
      }
      var hostView = this._viewFactory(vu, injector, null);
      var hostElement = hostView.create(EMPTY_CONTEXT, projectableNodes, rootSelectorOrNode);
      return new ComponentRef_(hostElement, this._componentType);
    };
    return ComponentFactory;
  }());
  var __extends$10 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var NoComponentFactoryError = (function(_super) {
    __extends$10(NoComponentFactoryError, _super);
    function NoComponentFactoryError(component) {
      _super.call(this, "No component factory found for " + stringify(component));
      this.component = component;
    }
    return NoComponentFactoryError;
  }(BaseError));
  var _NullComponentFactoryResolver = (function() {
    function _NullComponentFactoryResolver() {}
    _NullComponentFactoryResolver.prototype.resolveComponentFactory = function(component) {
      throw new NoComponentFactoryError(component);
    };
    return _NullComponentFactoryResolver;
  }());
  var ComponentFactoryResolver = (function() {
    function ComponentFactoryResolver() {}
    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
    return ComponentFactoryResolver;
  }());
  var CodegenComponentFactoryResolver = (function() {
    function CodegenComponentFactoryResolver(factories, _parent) {
      this._parent = _parent;
      this._factories = new Map();
      for (var i = 0; i < factories.length; i++) {
        var factory = factories[i];
        this._factories.set(factory.componentType, factory);
      }
    }
    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function(component) {
      var result = this._factories.get(component);
      if (!result) {
        result = this._parent.resolveComponentFactory(component);
      }
      return result;
    };
    return CodegenComponentFactoryResolver;
  }());
  var __extends$11 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var EventEmitter = (function(_super) {
    __extends$11(EventEmitter, _super);
    function EventEmitter(isAsync) {
      if (isAsync === void 0) {
        isAsync = false;
      }
      _super.call(this);
      this.__isAsync = isAsync;
    }
    EventEmitter.prototype.emit = function(value) {
      _super.prototype.next.call(this, value);
    };
    EventEmitter.prototype.subscribe = function(generatorOrNext, error, complete) {
      var schedulerFn;
      var errorFn = function(err) {
        return null;
      };
      var completeFn = function() {
        return null;
      };
      if (generatorOrNext && typeof generatorOrNext === 'object') {
        schedulerFn = this.__isAsync ? function(value) {
          setTimeout(function() {
            return generatorOrNext.next(value);
          });
        } : function(value) {
          generatorOrNext.next(value);
        };
        if (generatorOrNext.error) {
          errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return generatorOrNext.error(err);
            });
          } : function(err) {
            generatorOrNext.error(err);
          };
        }
        if (generatorOrNext.complete) {
          completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return generatorOrNext.complete();
            });
          } : function() {
            generatorOrNext.complete();
          };
        }
      } else {
        schedulerFn = this.__isAsync ? function(value) {
          setTimeout(function() {
            return generatorOrNext(value);
          });
        } : function(value) {
          generatorOrNext(value);
        };
        if (error) {
          errorFn = this.__isAsync ? function(err) {
            setTimeout(function() {
              return error(err);
            });
          } : function(err) {
            error(err);
          };
        }
        if (complete) {
          completeFn = this.__isAsync ? function() {
            setTimeout(function() {
              return complete();
            });
          } : function() {
            complete();
          };
        }
      }
      return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
    };
    return EventEmitter;
  }(rxjs_Subject.Subject));
  var NgZoneImpl = (function() {
    function NgZoneImpl(_a) {
      var _this = this;
      var trace = _a.trace,
          onEnter = _a.onEnter,
          onLeave = _a.onLeave,
          setMicrotask = _a.setMicrotask,
          setMacrotask = _a.setMacrotask,
          onError = _a.onError;
      this.onEnter = onEnter;
      this.onLeave = onLeave;
      this.setMicrotask = setMicrotask;
      this.setMacrotask = setMacrotask;
      this.onError = onError;
      if (Zone) {
        this.outer = this.inner = Zone.current;
        if (Zone['wtfZoneSpec']) {
          this.inner = this.inner.fork(Zone['wtfZoneSpec']);
        }
        if (trace && Zone['longStackTraceZoneSpec']) {
          this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
        }
        this.inner = this.inner.fork({
          name: 'angular',
          properties: {'isAngularZone': true},
          onInvokeTask: function(delegate, current, target, task, applyThis, applyArgs) {
            try {
              _this.onEnter();
              return delegate.invokeTask(target, task, applyThis, applyArgs);
            } finally {
              _this.onLeave();
            }
          },
          onInvoke: function(delegate, current, target, callback, applyThis, applyArgs, source) {
            try {
              _this.onEnter();
              return delegate.invoke(target, callback, applyThis, applyArgs, source);
            } finally {
              _this.onLeave();
            }
          },
          onHasTask: function(delegate, current, target, hasTaskState) {
            delegate.hasTask(target, hasTaskState);
            if (current == target) {
              if (hasTaskState.change == 'microTask') {
                _this.setMicrotask(hasTaskState.microTask);
              } else if (hasTaskState.change == 'macroTask') {
                _this.setMacrotask(hasTaskState.macroTask);
              }
            }
          },
          onHandleError: function(delegate, current, target, error) {
            delegate.handleError(target, error);
            _this.onError(error);
            return false;
          }
        });
      } else {
        throw new Error('Angular requires Zone.js polyfill.');
      }
    }
    NgZoneImpl.isInAngularZone = function() {
      return Zone.current.get('isAngularZone') === true;
    };
    NgZoneImpl.prototype.runInner = function(fn) {
      return this.inner.run(fn);
    };
    ;
    NgZoneImpl.prototype.runInnerGuarded = function(fn) {
      return this.inner.runGuarded(fn);
    };
    ;
    NgZoneImpl.prototype.runOuter = function(fn) {
      return this.outer.run(fn);
    };
    ;
    return NgZoneImpl;
  }());
  var NgZone = (function() {
    function NgZone(_a) {
      var _this = this;
      var _b = _a.enableLongStackTrace,
          enableLongStackTrace = _b === void 0 ? false : _b;
      this._hasPendingMicrotasks = false;
      this._hasPendingMacrotasks = false;
      this._isStable = true;
      this._nesting = 0;
      this._onUnstable = new EventEmitter(false);
      this._onMicrotaskEmpty = new EventEmitter(false);
      this._onStable = new EventEmitter(false);
      this._onErrorEvents = new EventEmitter(false);
      this._zoneImpl = new NgZoneImpl({
        trace: enableLongStackTrace,
        onEnter: function() {
          _this._nesting++;
          if (_this._isStable) {
            _this._isStable = false;
            _this._onUnstable.emit(null);
          }
        },
        onLeave: function() {
          _this._nesting--;
          _this._checkStable();
        },
        setMicrotask: function(hasMicrotasks) {
          _this._hasPendingMicrotasks = hasMicrotasks;
          _this._checkStable();
        },
        setMacrotask: function(hasMacrotasks) {
          _this._hasPendingMacrotasks = hasMacrotasks;
        },
        onError: function(error) {
          return _this._onErrorEvents.emit(error);
        }
      });
    }
    NgZone.isInAngularZone = function() {
      return NgZoneImpl.isInAngularZone();
    };
    NgZone.assertInAngularZone = function() {
      if (!NgZoneImpl.isInAngularZone()) {
        throw new Error('Expected to be in Angular Zone, but it is not!');
      }
    };
    NgZone.assertNotInAngularZone = function() {
      if (NgZoneImpl.isInAngularZone()) {
        throw new Error('Expected to not be in Angular Zone, but it is!');
      }
    };
    NgZone.prototype._checkStable = function() {
      var _this = this;
      if (this._nesting == 0) {
        if (!this._hasPendingMicrotasks && !this._isStable) {
          try {
            this._nesting++;
            this._onMicrotaskEmpty.emit(null);
          } finally {
            this._nesting--;
            if (!this._hasPendingMicrotasks) {
              try {
                this.runOutsideAngular(function() {
                  return _this._onStable.emit(null);
                });
              } finally {
                this._isStable = true;
              }
            }
          }
        }
      }
    };
    ;
    Object.defineProperty(NgZone.prototype, "onUnstable", {
      get: function() {
        return this._onUnstable;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
      get: function() {
        return this._onMicrotaskEmpty;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgZone.prototype, "onStable", {
      get: function() {
        return this._onStable;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgZone.prototype, "onError", {
      get: function() {
        return this._onErrorEvents;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgZone.prototype, "isStable", {
      get: function() {
        return this._isStable;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
      get: function() {
        return this._hasPendingMicrotasks;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
      get: function() {
        return this._hasPendingMacrotasks;
      },
      enumerable: true,
      configurable: true
    });
    NgZone.prototype.run = function(fn) {
      return this._zoneImpl.runInner(fn);
    };
    NgZone.prototype.runGuarded = function(fn) {
      return this._zoneImpl.runInnerGuarded(fn);
    };
    NgZone.prototype.runOutsideAngular = function(fn) {
      return this._zoneImpl.runOuter(fn);
    };
    return NgZone;
  }());
  var Testability = (function() {
    function Testability(_ngZone) {
      this._ngZone = _ngZone;
      this._pendingCount = 0;
      this._isZoneStable = true;
      this._didWork = false;
      this._callbacks = [];
      this._watchAngularEvents();
    }
    Testability.prototype._watchAngularEvents = function() {
      var _this = this;
      this._ngZone.onUnstable.subscribe({next: function() {
          _this._didWork = true;
          _this._isZoneStable = false;
        }});
      this._ngZone.runOutsideAngular(function() {
        _this._ngZone.onStable.subscribe({next: function() {
            NgZone.assertNotInAngularZone();
            scheduleMicroTask(function() {
              _this._isZoneStable = true;
              _this._runCallbacksIfReady();
            });
          }});
      });
    };
    Testability.prototype.increasePendingRequestCount = function() {
      this._pendingCount += 1;
      this._didWork = true;
      return this._pendingCount;
    };
    Testability.prototype.decreasePendingRequestCount = function() {
      this._pendingCount -= 1;
      if (this._pendingCount < 0) {
        throw new Error('pending async requests below zero');
      }
      this._runCallbacksIfReady();
      return this._pendingCount;
    };
    Testability.prototype.isStable = function() {
      return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
    };
    Testability.prototype._runCallbacksIfReady = function() {
      var _this = this;
      if (this.isStable()) {
        scheduleMicroTask(function() {
          while (_this._callbacks.length !== 0) {
            (_this._callbacks.pop())(_this._didWork);
          }
          _this._didWork = false;
        });
      } else {
        this._didWork = true;
      }
    };
    Testability.prototype.whenStable = function(callback) {
      this._callbacks.push(callback);
      this._runCallbacksIfReady();
    };
    Testability.prototype.getPendingRequestCount = function() {
      return this._pendingCount;
    };
    Testability.prototype.findBindings = function(using, provider, exactMatch) {
      return [];
    };
    Testability.prototype.findProviders = function(using, provider, exactMatch) {
      return [];
    };
    Testability.decorators = [{type: Injectable}];
    Testability.ctorParameters = [{type: NgZone}];
    return Testability;
  }());
  var TestabilityRegistry = (function() {
    function TestabilityRegistry() {
      this._applications = new Map$1();
      _testabilityGetter.addToWindow(this);
    }
    TestabilityRegistry.prototype.registerApplication = function(token, testability) {
      this._applications.set(token, testability);
    };
    TestabilityRegistry.prototype.getTestability = function(elem) {
      return this._applications.get(elem);
    };
    TestabilityRegistry.prototype.getAllTestabilities = function() {
      return MapWrapper.values(this._applications);
    };
    TestabilityRegistry.prototype.getAllRootElements = function() {
      return MapWrapper.keys(this._applications);
    };
    TestabilityRegistry.prototype.findTestabilityInTree = function(elem, findInAncestors) {
      if (findInAncestors === void 0) {
        findInAncestors = true;
      }
      return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
    };
    TestabilityRegistry.decorators = [{type: Injectable}];
    TestabilityRegistry.ctorParameters = [];
    return TestabilityRegistry;
  }());
  var _NoopGetTestability = (function() {
    function _NoopGetTestability() {}
    _NoopGetTestability.prototype.addToWindow = function(registry) {};
    _NoopGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
      return null;
    };
    return _NoopGetTestability;
  }());
  function setTestabilityGetter(getter) {
    _testabilityGetter = getter;
  }
  var _testabilityGetter = new _NoopGetTestability();
  var __extends$6 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var _devMode = true;
  var _runModeLocked = false;
  var _platform;
  function enableProdMode() {
    if (_runModeLocked) {
      throw new Error('Cannot enable prod mode after platform setup.');
    }
    _devMode = false;
  }
  function isDevMode() {
    _runModeLocked = true;
    return _devMode;
  }
  function createPlatform(injector) {
    if (isPresent(_platform) && !_platform.destroyed) {
      throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
    }
    _platform = injector.get(PlatformRef);
    var inits = injector.get(PLATFORM_INITIALIZER, null);
    if (isPresent(inits))
      inits.forEach(function(init) {
        return init();
      });
    return _platform;
  }
  function createPlatformFactory(parentPlaformFactory, name, providers) {
    if (providers === void 0) {
      providers = [];
    }
    var marker = new OpaqueToken("Platform: " + name);
    return function(extraProviders) {
      if (extraProviders === void 0) {
        extraProviders = [];
      }
      if (!getPlatform()) {
        if (parentPlaformFactory) {
          parentPlaformFactory(providers.concat(extraProviders).concat({
            provide: marker,
            useValue: true
          }));
        } else {
          createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({
            provide: marker,
            useValue: true
          })));
        }
      }
      return assertPlatform(marker);
    };
  }
  function assertPlatform(requiredToken) {
    var platform = getPlatform();
    if (isBlank(platform)) {
      throw new Error('No platform exists!');
    }
    if (isPresent(platform) && isBlank(platform.injector.get(requiredToken, null))) {
      throw new Error('A platform with a different configuration has been created. Please destroy it first.');
    }
    return platform;
  }
  function destroyPlatform() {
    if (isPresent(_platform) && !_platform.destroyed) {
      _platform.destroy();
    }
  }
  function getPlatform() {
    return isPresent(_platform) && !_platform.destroyed ? _platform : null;
  }
  var PlatformRef = (function() {
    function PlatformRef() {}
    PlatformRef.prototype.bootstrapModuleFactory = function(moduleFactory) {
      throw unimplemented();
    };
    PlatformRef.prototype.bootstrapModule = function(moduleType, compilerOptions) {
      if (compilerOptions === void 0) {
        compilerOptions = [];
      }
      throw unimplemented();
    };
    Object.defineProperty(PlatformRef.prototype, "injector", {
      get: function() {
        throw unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(PlatformRef.prototype, "destroyed", {
      get: function() {
        throw unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    return PlatformRef;
  }());
  function _callAndReportToErrorHandler(errorHandler, callback) {
    try {
      var result = callback();
      if (isPromise(result)) {
        return result.catch(function(e) {
          errorHandler.handleError(e);
          throw e;
        });
      } else {
        return result;
      }
    } catch (e) {
      errorHandler.handleError(e);
      throw e;
    }
  }
  var PlatformRef_ = (function(_super) {
    __extends$6(PlatformRef_, _super);
    function PlatformRef_(_injector) {
      _super.call(this);
      this._injector = _injector;
      this._modules = [];
      this._destroyListeners = [];
      this._destroyed = false;
    }
    PlatformRef_.prototype.onDestroy = function(callback) {
      this._destroyListeners.push(callback);
    };
    Object.defineProperty(PlatformRef_.prototype, "injector", {
      get: function() {
        return this._injector;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(PlatformRef_.prototype, "destroyed", {
      get: function() {
        return this._destroyed;
      },
      enumerable: true,
      configurable: true
    });
    PlatformRef_.prototype.destroy = function() {
      if (this._destroyed) {
        throw new Error('The platform has already been destroyed!');
      }
      ListWrapper.clone(this._modules).forEach(function(app) {
        return app.destroy();
      });
      this._destroyListeners.forEach(function(dispose) {
        return dispose();
      });
      this._destroyed = true;
    };
    PlatformRef_.prototype.bootstrapModuleFactory = function(moduleFactory) {
      return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
    };
    PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function(moduleFactory, ngZone) {
      var _this = this;
      if (!ngZone)
        ngZone = new NgZone({enableLongStackTrace: isDevMode()});
      return ngZone.run(function() {
        var ngZoneInjector = ReflectiveInjector.resolveAndCreate([{
          provide: NgZone,
          useValue: ngZone
        }], _this.injector);
        var moduleRef = moduleFactory.create(ngZoneInjector);
        var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
        if (!exceptionHandler) {
          throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
        }
        moduleRef.onDestroy(function() {
          return ListWrapper.remove(_this._modules, moduleRef);
        });
        ngZone.onError.subscribe({next: function(error) {
            exceptionHandler.handleError(error);
          }});
        return _callAndReportToErrorHandler(exceptionHandler, function() {
          var initStatus = moduleRef.injector.get(ApplicationInitStatus);
          return initStatus.donePromise.then(function() {
            _this._moduleDoBootstrap(moduleRef);
            return moduleRef;
          });
        });
      });
    };
    PlatformRef_.prototype.bootstrapModule = function(moduleType, compilerOptions) {
      if (compilerOptions === void 0) {
        compilerOptions = [];
      }
      return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
    };
    PlatformRef_.prototype._bootstrapModuleWithZone = function(moduleType, compilerOptions, ngZone, componentFactoryCallback) {
      var _this = this;
      if (compilerOptions === void 0) {
        compilerOptions = [];
      }
      var compilerFactory = this.injector.get(CompilerFactory);
      var compiler = compilerFactory.createCompiler(compilerOptions instanceof Array ? compilerOptions : [compilerOptions]);
      if (componentFactoryCallback) {
        return compiler.compileModuleAndAllComponentsAsync(moduleType).then(function(_a) {
          var ngModuleFactory = _a.ngModuleFactory,
              componentFactories = _a.componentFactories;
          componentFactoryCallback(componentFactories);
          return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);
        });
      }
      return compiler.compileModuleAsync(moduleType).then(function(moduleFactory) {
        return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone);
      });
    };
    PlatformRef_.prototype._moduleDoBootstrap = function(moduleRef) {
      var appRef = moduleRef.injector.get(ApplicationRef);
      if (moduleRef.bootstrapFactories.length > 0) {
        moduleRef.bootstrapFactories.forEach(function(compFactory) {
          return appRef.bootstrap(compFactory);
        });
      } else if (moduleRef.instance.ngDoBootstrap) {
        moduleRef.instance.ngDoBootstrap(appRef);
      } else {
        throw new Error(("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ") + "Please define one of these.");
      }
    };
    PlatformRef_.decorators = [{type: Injectable}];
    PlatformRef_.ctorParameters = [{type: Injector}];
    return PlatformRef_;
  }(PlatformRef));
  var ApplicationRef = (function() {
    function ApplicationRef() {}
    Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ;
    Object.defineProperty(ApplicationRef.prototype, "components", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ;
    return ApplicationRef;
  }());
  var ApplicationRef_ = (function(_super) {
    __extends$6(ApplicationRef_, _super);
    function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {
      var _this = this;
      _super.call(this);
      this._zone = _zone;
      this._console = _console;
      this._injector = _injector;
      this._exceptionHandler = _exceptionHandler;
      this._componentFactoryResolver = _componentFactoryResolver;
      this._initStatus = _initStatus;
      this._testabilityRegistry = _testabilityRegistry;
      this._testability = _testability;
      this._bootstrapListeners = [];
      this._rootComponents = [];
      this._rootComponentTypes = [];
      this._changeDetectorRefs = [];
      this._runningTick = false;
      this._enforceNoNewChanges = false;
      this._enforceNoNewChanges = isDevMode();
      this._zone.onMicrotaskEmpty.subscribe({next: function() {
          _this._zone.run(function() {
            _this.tick();
          });
        }});
    }
    ApplicationRef_.prototype.registerChangeDetector = function(changeDetector) {
      this._changeDetectorRefs.push(changeDetector);
    };
    ApplicationRef_.prototype.unregisterChangeDetector = function(changeDetector) {
      ListWrapper.remove(this._changeDetectorRefs, changeDetector);
    };
    ApplicationRef_.prototype.bootstrap = function(componentOrFactory) {
      var _this = this;
      if (!this._initStatus.done) {
        throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
      }
      var componentFactory;
      if (componentOrFactory instanceof ComponentFactory) {
        componentFactory = componentOrFactory;
      } else {
        componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
      }
      this._rootComponentTypes.push(componentFactory.componentType);
      var compRef = componentFactory.create(this._injector, [], componentFactory.selector);
      compRef.onDestroy(function() {
        _this._unloadComponent(compRef);
      });
      var testability = compRef.injector.get(Testability, null);
      if (isPresent(testability)) {
        compRef.injector.get(TestabilityRegistry).registerApplication(compRef.location.nativeElement, testability);
      }
      this._loadComponent(compRef);
      if (isDevMode()) {
        this._console.log("Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode.");
      }
      return compRef;
    };
    ApplicationRef_.prototype._loadComponent = function(componentRef) {
      this._changeDetectorRefs.push(componentRef.changeDetectorRef);
      this.tick();
      this._rootComponents.push(componentRef);
      var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
      listeners.forEach(function(listener) {
        return listener(componentRef);
      });
    };
    ApplicationRef_.prototype._unloadComponent = function(componentRef) {
      if (!ListWrapper.contains(this._rootComponents, componentRef)) {
        return;
      }
      this.unregisterChangeDetector(componentRef.changeDetectorRef);
      ListWrapper.remove(this._rootComponents, componentRef);
    };
    ApplicationRef_.prototype.tick = function() {
      if (this._runningTick) {
        throw new Error('ApplicationRef.tick is called recursively');
      }
      var s = ApplicationRef_._tickScope();
      try {
        this._runningTick = true;
        this._changeDetectorRefs.forEach(function(detector) {
          return detector.detectChanges();
        });
        if (this._enforceNoNewChanges) {
          this._changeDetectorRefs.forEach(function(detector) {
            return detector.checkNoChanges();
          });
        }
      } finally {
        this._runningTick = false;
        wtfLeave(s);
      }
    };
    ApplicationRef_.prototype.ngOnDestroy = function() {
      ListWrapper.clone(this._rootComponents).forEach(function(ref) {
        return ref.destroy();
      });
    };
    Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
      get: function() {
        return this._rootComponentTypes;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ApplicationRef_.prototype, "components", {
      get: function() {
        return this._rootComponents;
      },
      enumerable: true,
      configurable: true
    });
    ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
    ApplicationRef_.decorators = [{type: Injectable}];
    ApplicationRef_.ctorParameters = [{type: NgZone}, {type: Console}, {type: Injector}, {type: ErrorHandler}, {type: ComponentFactoryResolver}, {type: ApplicationInitStatus}, {
      type: TestabilityRegistry,
      decorators: [{type: Optional}]
    }, {
      type: Testability,
      decorators: [{type: Optional}]
    }];
    return ApplicationRef_;
  }(ApplicationRef));
  var __extends$12 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var NgModuleRef = (function() {
    function NgModuleRef() {}
    Object.defineProperty(NgModuleRef.prototype, "injector", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModuleRef.prototype, "componentFactoryResolver", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModuleRef.prototype, "instance", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    return NgModuleRef;
  }());
  var NgModuleFactory = (function() {
    function NgModuleFactory(_injectorClass, _moduleType) {
      this._injectorClass = _injectorClass;
      this._moduleType = _moduleType;
    }
    Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
      get: function() {
        return this._moduleType;
      },
      enumerable: true,
      configurable: true
    });
    NgModuleFactory.prototype.create = function(parentInjector) {
      if (!parentInjector) {
        parentInjector = Injector.NULL;
      }
      var instance = new this._injectorClass(parentInjector);
      instance.create();
      return instance;
    };
    return NgModuleFactory;
  }());
  var _UNDEFINED = new Object();
  var NgModuleInjector = (function(_super) {
    __extends$12(NgModuleInjector, _super);
    function NgModuleInjector(parent, factories, bootstrapFactories) {
      _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));
      this.parent = parent;
      this.bootstrapFactories = bootstrapFactories;
      this._destroyListeners = [];
      this._destroyed = false;
    }
    NgModuleInjector.prototype.create = function() {
      this.instance = this.createInternal();
    };
    NgModuleInjector.prototype.get = function(token, notFoundValue) {
      if (notFoundValue === void 0) {
        notFoundValue = THROW_IF_NOT_FOUND;
      }
      if (token === Injector || token === ComponentFactoryResolver) {
        return this;
      }
      var result = this.getInternal(token, _UNDEFINED);
      return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
    };
    Object.defineProperty(NgModuleInjector.prototype, "injector", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    NgModuleInjector.prototype.destroy = function() {
      if (this._destroyed) {
        throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
      }
      this._destroyed = true;
      this.destroyInternal();
      this._destroyListeners.forEach(function(listener) {
        return listener();
      });
    };
    NgModuleInjector.prototype.onDestroy = function(callback) {
      this._destroyListeners.push(callback);
    };
    return NgModuleInjector;
  }(CodegenComponentFactoryResolver));
  var NgModuleFactoryLoader = (function() {
    function NgModuleFactoryLoader() {}
    return NgModuleFactoryLoader;
  }());
  var QueryList = (function() {
    function QueryList() {
      this._dirty = true;
      this._results = [];
      this._emitter = new EventEmitter();
    }
    Object.defineProperty(QueryList.prototype, "changes", {
      get: function() {
        return this._emitter;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(QueryList.prototype, "length", {
      get: function() {
        return this._results.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(QueryList.prototype, "first", {
      get: function() {
        return this._results[0];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(QueryList.prototype, "last", {
      get: function() {
        return this._results[this.length - 1];
      },
      enumerable: true,
      configurable: true
    });
    QueryList.prototype.map = function(fn) {
      return this._results.map(fn);
    };
    QueryList.prototype.filter = function(fn) {
      return this._results.filter(fn);
    };
    QueryList.prototype.reduce = function(fn, init) {
      return this._results.reduce(fn, init);
    };
    QueryList.prototype.forEach = function(fn) {
      this._results.forEach(fn);
    };
    QueryList.prototype.some = function(fn) {
      return this._results.some(fn);
    };
    QueryList.prototype.toArray = function() {
      return this._results.slice();
    };
    QueryList.prototype[getSymbolIterator()] = function() {
      return this._results[getSymbolIterator()]();
    };
    QueryList.prototype.toString = function() {
      return this._results.toString();
    };
    QueryList.prototype.reset = function(res) {
      this._results = ListWrapper.flatten(res);
      this._dirty = false;
    };
    QueryList.prototype.notifyOnChanges = function() {
      this._emitter.emit(this);
    };
    QueryList.prototype.setDirty = function() {
      this._dirty = true;
    };
    Object.defineProperty(QueryList.prototype, "dirty", {
      get: function() {
        return this._dirty;
      },
      enumerable: true,
      configurable: true
    });
    return QueryList;
  }());
  var _SEPARATOR = '#';
  var FACTORY_CLASS_SUFFIX = 'NgFactory';
  var SystemJsNgModuleLoaderConfig = (function() {
    function SystemJsNgModuleLoaderConfig() {}
    return SystemJsNgModuleLoaderConfig;
  }());
  var DEFAULT_CONFIG = {
    factoryPathPrefix: '',
    factoryPathSuffix: '.ngfactory'
  };
  var SystemJsNgModuleLoader = (function() {
    function SystemJsNgModuleLoader(_compiler, config) {
      this._compiler = _compiler;
      this._system = function() {
        return System;
      };
      this._config = config || DEFAULT_CONFIG;
    }
    SystemJsNgModuleLoader.prototype.load = function(path) {
      var offlineMode = this._compiler instanceof Compiler;
      return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
    };
    SystemJsNgModuleLoader.prototype.loadAndCompile = function(path) {
      var _this = this;
      var _a = path.split(_SEPARATOR),
          module = _a[0],
          exportName = _a[1];
      if (exportName === undefined)
        exportName = 'default';
      return this._system().import(module).then(function(module) {
        return module[exportName];
      }).then(function(type) {
        return checkNotEmpty(type, module, exportName);
      }).then(function(type) {
        return _this._compiler.compileModuleAsync(type);
      });
    };
    SystemJsNgModuleLoader.prototype.loadFactory = function(path) {
      var _a = path.split(_SEPARATOR),
          module = _a[0],
          exportName = _a[1];
      var factoryClassSuffix = FACTORY_CLASS_SUFFIX;
      if (exportName === undefined) {
        exportName = 'default';
        factoryClassSuffix = '';
      }
      return this._system().import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix).then(function(module) {
        return module[exportName + factoryClassSuffix];
      }).then(function(factory) {
        return checkNotEmpty(factory, module, exportName);
      });
    };
    SystemJsNgModuleLoader.decorators = [{type: Injectable}];
    SystemJsNgModuleLoader.ctorParameters = [{type: Compiler}, {
      type: SystemJsNgModuleLoaderConfig,
      decorators: [{type: Optional}]
    }];
    return SystemJsNgModuleLoader;
  }());
  function checkNotEmpty(value, modulePath, exportName) {
    if (!value) {
      throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
    }
    return value;
  }
  var __extends$13 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var TemplateRef = (function() {
    function TemplateRef() {}
    Object.defineProperty(TemplateRef.prototype, "elementRef", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    return TemplateRef;
  }());
  var TemplateRef_ = (function(_super) {
    __extends$13(TemplateRef_, _super);
    function TemplateRef_(_appElement, _viewFactory) {
      _super.call(this);
      this._appElement = _appElement;
      this._viewFactory = _viewFactory;
    }
    TemplateRef_.prototype.createEmbeddedView = function(context) {
      var view = this._viewFactory(this._appElement.parentView.viewUtils, this._appElement.parentInjector, this._appElement);
      view.create(context || {}, null, null);
      return view.ref;
    };
    Object.defineProperty(TemplateRef_.prototype, "elementRef", {
      get: function() {
        return this._appElement.elementRef;
      },
      enumerable: true,
      configurable: true
    });
    return TemplateRef_;
  }(TemplateRef));
  var __extends$14 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ViewRef = (function() {
    function ViewRef() {}
    Object.defineProperty(ViewRef.prototype, "destroyed", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    return ViewRef;
  }());
  var EmbeddedViewRef = (function(_super) {
    __extends$14(EmbeddedViewRef, _super);
    function EmbeddedViewRef() {
      _super.apply(this, arguments);
    }
    Object.defineProperty(EmbeddedViewRef.prototype, "context", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
      get: function() {
        return unimplemented();
      },
      enumerable: true,
      configurable: true
    });
    ;
    return EmbeddedViewRef;
  }(ViewRef));
  var ViewRef_ = (function() {
    function ViewRef_(_view) {
      this._view = _view;
      this._view = _view;
      this._originalMode = this._view.cdMode;
    }
    Object.defineProperty(ViewRef_.prototype, "internalView", {
      get: function() {
        return this._view;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "rootNodes", {
      get: function() {
        return this._view.flatRootNodes;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "context", {
      get: function() {
        return this._view.context;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "destroyed", {
      get: function() {
        return this._view.destroyed;
      },
      enumerable: true,
      configurable: true
    });
    ViewRef_.prototype.markForCheck = function() {
      this._view.markPathToRootAsCheckOnce();
    };
    ViewRef_.prototype.detach = function() {
      this._view.cdMode = ChangeDetectorStatus.Detached;
    };
    ViewRef_.prototype.detectChanges = function() {
      this._view.detectChanges(false);
    };
    ViewRef_.prototype.checkNoChanges = function() {
      this._view.detectChanges(true);
    };
    ViewRef_.prototype.reattach = function() {
      this._view.cdMode = this._originalMode;
      this.markForCheck();
    };
    ViewRef_.prototype.onDestroy = function(callback) {
      this._view.disposables.push(callback);
    };
    ViewRef_.prototype.destroy = function() {
      this._view.destroy();
    };
    return ViewRef_;
  }());
  var __extends$15 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var EventListener = (function() {
    function EventListener(name, callback) {
      this.name = name;
      this.callback = callback;
    }
    ;
    return EventListener;
  }());
  var DebugNode = (function() {
    function DebugNode(nativeNode, parent, _debugInfo) {
      this._debugInfo = _debugInfo;
      this.nativeNode = nativeNode;
      if (isPresent(parent) && parent instanceof DebugElement) {
        parent.addChild(this);
      } else {
        this.parent = null;
      }
      this.listeners = [];
    }
    Object.defineProperty(DebugNode.prototype, "injector", {
      get: function() {
        return isPresent(this._debugInfo) ? this._debugInfo.injector : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "componentInstance", {
      get: function() {
        return isPresent(this._debugInfo) ? this._debugInfo.component : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "context", {
      get: function() {
        return isPresent(this._debugInfo) ? this._debugInfo.context : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "references", {
      get: function() {
        return isPresent(this._debugInfo) ? this._debugInfo.references : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "providerTokens", {
      get: function() {
        return isPresent(this._debugInfo) ? this._debugInfo.providerTokens : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "source", {
      get: function() {
        return isPresent(this._debugInfo) ? this._debugInfo.source : null;
      },
      enumerable: true,
      configurable: true
    });
    return DebugNode;
  }());
  var DebugElement = (function(_super) {
    __extends$15(DebugElement, _super);
    function DebugElement(nativeNode, parent, _debugInfo) {
      _super.call(this, nativeNode, parent, _debugInfo);
      this.properties = {};
      this.attributes = {};
      this.classes = {};
      this.styles = {};
      this.childNodes = [];
      this.nativeElement = nativeNode;
    }
    DebugElement.prototype.addChild = function(child) {
      if (isPresent(child)) {
        this.childNodes.push(child);
        child.parent = this;
      }
    };
    DebugElement.prototype.removeChild = function(child) {
      var childIndex = this.childNodes.indexOf(child);
      if (childIndex !== -1) {
        child.parent = null;
        this.childNodes.splice(childIndex, 1);
      }
    };
    DebugElement.prototype.insertChildrenAfter = function(child, newChildren) {
      var siblingIndex = this.childNodes.indexOf(child);
      if (siblingIndex !== -1) {
        var previousChildren = this.childNodes.slice(0, siblingIndex + 1);
        var nextChildren = this.childNodes.slice(siblingIndex + 1);
        this.childNodes = ListWrapper.concat(ListWrapper.concat(previousChildren, newChildren), nextChildren);
        for (var i = 0; i < newChildren.length; ++i) {
          var newChild = newChildren[i];
          if (isPresent(newChild.parent)) {
            newChild.parent.removeChild(newChild);
          }
          newChild.parent = this;
        }
      }
    };
    DebugElement.prototype.query = function(predicate) {
      var results = this.queryAll(predicate);
      return results.length > 0 ? results[0] : null;
    };
    DebugElement.prototype.queryAll = function(predicate) {
      var matches = [];
      _queryElementChildren(this, predicate, matches);
      return matches;
    };
    DebugElement.prototype.queryAllNodes = function(predicate) {
      var matches = [];
      _queryNodeChildren(this, predicate, matches);
      return matches;
    };
    Object.defineProperty(DebugElement.prototype, "children", {
      get: function() {
        var children = [];
        this.childNodes.forEach(function(node) {
          if (node instanceof DebugElement) {
            children.push(node);
          }
        });
        return children;
      },
      enumerable: true,
      configurable: true
    });
    DebugElement.prototype.triggerEventHandler = function(eventName, eventObj) {
      this.listeners.forEach(function(listener) {
        if (listener.name == eventName) {
          listener.callback(eventObj);
        }
      });
    };
    return DebugElement;
  }(DebugNode));
  function asNativeElements(debugEls) {
    return debugEls.map(function(el) {
      return el.nativeElement;
    });
  }
  function _queryElementChildren(element, predicate, matches) {
    element.childNodes.forEach(function(node) {
      if (node instanceof DebugElement) {
        if (predicate(node)) {
          matches.push(node);
        }
        _queryElementChildren(node, predicate, matches);
      }
    });
  }
  function _queryNodeChildren(parentNode, predicate, matches) {
    if (parentNode instanceof DebugElement) {
      parentNode.childNodes.forEach(function(node) {
        if (predicate(node)) {
          matches.push(node);
        }
        if (node instanceof DebugElement) {
          _queryNodeChildren(node, predicate, matches);
        }
      });
    }
  }
  var _nativeNodeToDebugNode = new Map();
  function getDebugNode(nativeNode) {
    return _nativeNodeToDebugNode.get(nativeNode);
  }
  function indexDebugNode(node) {
    _nativeNodeToDebugNode.set(node.nativeNode, node);
  }
  function removeDebugNodeFromIndex(node) {
    _nativeNodeToDebugNode.delete(node.nativeNode);
  }
  function _reflector() {
    return reflector;
  }
  var _CORE_PLATFORM_PROVIDERS = [PlatformRef_, {
    provide: PlatformRef,
    useExisting: PlatformRef_
  }, {
    provide: Reflector,
    useFactory: _reflector,
    deps: []
  }, {
    provide: ReflectorReader,
    useExisting: Reflector
  }, TestabilityRegistry, Console];
  var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);
  var LOCALE_ID = new OpaqueToken('LocaleId');
  var TRANSLATIONS = new OpaqueToken('Translations');
  var TRANSLATIONS_FORMAT = new OpaqueToken('TranslationsFormat');
  function _iterableDiffersFactory() {
    return defaultIterableDiffers;
  }
  function _keyValueDiffersFactory() {
    return defaultKeyValueDiffers;
  }
  var ApplicationModule = (function() {
    function ApplicationModule() {}
    ApplicationModule.decorators = [{
      type: NgModule,
      args: [{providers: [ApplicationRef_, {
          provide: ApplicationRef,
          useExisting: ApplicationRef_
        }, ApplicationInitStatus, Compiler, APP_ID_RANDOM_PROVIDER, ViewUtils, {
          provide: IterableDiffers,
          useFactory: _iterableDiffersFactory
        }, {
          provide: KeyValueDiffers,
          useFactory: _keyValueDiffersFactory
        }, {
          provide: LOCALE_ID,
          useValue: 'en-US'
        }]}]
    }];
    ApplicationModule.ctorParameters = [];
    return ApplicationModule;
  }());
  var FILL_STYLE_FLAG = 'true';
  var ANY_STATE = '*';
  var DEFAULT_STATE = '*';
  var EMPTY_STATE = 'void';
  var Math$1 = global$1.Math;
  var AnimationGroupPlayer = (function() {
    function AnimationGroupPlayer(_players) {
      var _this = this;
      this._players = _players;
      this._onDoneFns = [];
      this._onStartFns = [];
      this._finished = false;
      this._started = false;
      this.parentPlayer = null;
      var count = 0;
      var total = this._players.length;
      if (total == 0) {
        scheduleMicroTask(function() {
          return _this._onFinish();
        });
      } else {
        this._players.forEach(function(player) {
          player.parentPlayer = _this;
          player.onDone(function() {
            if (++count >= total) {
              _this._onFinish();
            }
          });
        });
      }
    }
    AnimationGroupPlayer.prototype._onFinish = function() {
      if (!this._finished) {
        this._finished = true;
        if (!isPresent(this.parentPlayer)) {
          this.destroy();
        }
        this._onDoneFns.forEach(function(fn) {
          return fn();
        });
        this._onDoneFns = [];
      }
    };
    AnimationGroupPlayer.prototype.init = function() {
      this._players.forEach(function(player) {
        return player.init();
      });
    };
    AnimationGroupPlayer.prototype.onStart = function(fn) {
      this._onStartFns.push(fn);
    };
    AnimationGroupPlayer.prototype.onDone = function(fn) {
      this._onDoneFns.push(fn);
    };
    AnimationGroupPlayer.prototype.hasStarted = function() {
      return this._started;
    };
    AnimationGroupPlayer.prototype.play = function() {
      if (!isPresent(this.parentPlayer)) {
        this.init();
      }
      if (!this.hasStarted()) {
        this._onStartFns.forEach(function(fn) {
          return fn();
        });
        this._onStartFns = [];
        this._started = true;
      }
      this._players.forEach(function(player) {
        return player.play();
      });
    };
    AnimationGroupPlayer.prototype.pause = function() {
      this._players.forEach(function(player) {
        return player.pause();
      });
    };
    AnimationGroupPlayer.prototype.restart = function() {
      this._players.forEach(function(player) {
        return player.restart();
      });
    };
    AnimationGroupPlayer.prototype.finish = function() {
      this._onFinish();
      this._players.forEach(function(player) {
        return player.finish();
      });
    };
    AnimationGroupPlayer.prototype.destroy = function() {
      this._onFinish();
      this._players.forEach(function(player) {
        return player.destroy();
      });
    };
    AnimationGroupPlayer.prototype.reset = function() {
      this._players.forEach(function(player) {
        return player.reset();
      });
    };
    AnimationGroupPlayer.prototype.setPosition = function(p) {
      this._players.forEach(function(player) {
        player.setPosition(p);
      });
    };
    AnimationGroupPlayer.prototype.getPosition = function() {
      var min = 0;
      this._players.forEach(function(player) {
        var p = player.getPosition();
        min = Math$1.min(p, min);
      });
      return min;
    };
    return AnimationGroupPlayer;
  }());
  var AnimationKeyframe = (function() {
    function AnimationKeyframe(offset, styles) {
      this.offset = offset;
      this.styles = styles;
    }
    return AnimationKeyframe;
  }());
  var AnimationOutput = (function() {
    function AnimationOutput(name, phase, fullPropertyName) {
      this.name = name;
      this.phase = phase;
      this.fullPropertyName = fullPropertyName;
    }
    return AnimationOutput;
  }());
  var AnimationPlayer = (function() {
    function AnimationPlayer() {}
    Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
      get: function() {
        throw new Error('NOT IMPLEMENTED: Base Class');
      },
      set: function(player) {
        throw new Error('NOT IMPLEMENTED: Base Class');
      },
      enumerable: true,
      configurable: true
    });
    return AnimationPlayer;
  }());
  var NoOpAnimationPlayer = (function() {
    function NoOpAnimationPlayer() {
      var _this = this;
      this._onDoneFns = [];
      this._onStartFns = [];
      this._started = false;
      this.parentPlayer = null;
      scheduleMicroTask(function() {
        return _this._onFinish();
      });
    }
    NoOpAnimationPlayer.prototype._onFinish = function() {
      this._onDoneFns.forEach(function(fn) {
        return fn();
      });
      this._onDoneFns = [];
    };
    NoOpAnimationPlayer.prototype.onStart = function(fn) {
      this._onStartFns.push(fn);
    };
    NoOpAnimationPlayer.prototype.onDone = function(fn) {
      this._onDoneFns.push(fn);
    };
    NoOpAnimationPlayer.prototype.hasStarted = function() {
      return this._started;
    };
    NoOpAnimationPlayer.prototype.init = function() {};
    NoOpAnimationPlayer.prototype.play = function() {
      if (!this.hasStarted()) {
        this._onStartFns.forEach(function(fn) {
          return fn();
        });
        this._onStartFns = [];
      }
      this._started = true;
    };
    NoOpAnimationPlayer.prototype.pause = function() {};
    NoOpAnimationPlayer.prototype.restart = function() {};
    NoOpAnimationPlayer.prototype.finish = function() {
      this._onFinish();
    };
    NoOpAnimationPlayer.prototype.destroy = function() {};
    NoOpAnimationPlayer.prototype.reset = function() {};
    NoOpAnimationPlayer.prototype.setPosition = function(p) {};
    NoOpAnimationPlayer.prototype.getPosition = function() {
      return 0;
    };
    return NoOpAnimationPlayer;
  }());
  var AnimationSequencePlayer = (function() {
    function AnimationSequencePlayer(_players) {
      var _this = this;
      this._players = _players;
      this._currentIndex = 0;
      this._onDoneFns = [];
      this._onStartFns = [];
      this._finished = false;
      this._started = false;
      this.parentPlayer = null;
      this._players.forEach(function(player) {
        player.parentPlayer = _this;
      });
      this._onNext(false);
    }
    AnimationSequencePlayer.prototype._onNext = function(start) {
      var _this = this;
      if (this._finished)
        return;
      if (this._players.length == 0) {
        this._activePlayer = new NoOpAnimationPlayer();
        scheduleMicroTask(function() {
          return _this._onFinish();
        });
      } else if (this._currentIndex >= this._players.length) {
        this._activePlayer = new NoOpAnimationPlayer();
        this._onFinish();
      } else {
        var player = this._players[this._currentIndex++];
        player.onDone(function() {
          return _this._onNext(true);
        });
        this._activePlayer = player;
        if (start) {
          player.play();
        }
      }
    };
    AnimationSequencePlayer.prototype._onFinish = function() {
      if (!this._finished) {
        this._finished = true;
        if (!isPresent(this.parentPlayer)) {
          this.destroy();
        }
        this._onDoneFns.forEach(function(fn) {
          return fn();
        });
        this._onDoneFns = [];
      }
    };
    AnimationSequencePlayer.prototype.init = function() {
      this._players.forEach(function(player) {
        return player.init();
      });
    };
    AnimationSequencePlayer.prototype.onStart = function(fn) {
      this._onStartFns.push(fn);
    };
    AnimationSequencePlayer.prototype.onDone = function(fn) {
      this._onDoneFns.push(fn);
    };
    AnimationSequencePlayer.prototype.hasStarted = function() {
      return this._started;
    };
    AnimationSequencePlayer.prototype.play = function() {
      if (!isPresent(this.parentPlayer)) {
        this.init();
      }
      if (!this.hasStarted()) {
        this._onStartFns.forEach(function(fn) {
          return fn();
        });
        this._onStartFns = [];
        this._started = true;
      }
      this._activePlayer.play();
    };
    AnimationSequencePlayer.prototype.pause = function() {
      this._activePlayer.pause();
    };
    AnimationSequencePlayer.prototype.restart = function() {
      if (this._players.length > 0) {
        this.reset();
        this._players[0].restart();
      }
    };
    AnimationSequencePlayer.prototype.reset = function() {
      this._players.forEach(function(player) {
        return player.reset();
      });
    };
    AnimationSequencePlayer.prototype.finish = function() {
      this._onFinish();
      this._players.forEach(function(player) {
        return player.finish();
      });
    };
    AnimationSequencePlayer.prototype.destroy = function() {
      this._onFinish();
      this._players.forEach(function(player) {
        return player.destroy();
      });
    };
    AnimationSequencePlayer.prototype.setPosition = function(p) {
      this._players[0].setPosition(p);
    };
    AnimationSequencePlayer.prototype.getPosition = function() {
      return this._players[0].getPosition();
    };
    return AnimationSequencePlayer;
  }());
  var __extends$16 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var AUTO_STYLE = '*';
  var AnimationEntryMetadata = (function() {
    function AnimationEntryMetadata(name, definitions) {
      this.name = name;
      this.definitions = definitions;
    }
    return AnimationEntryMetadata;
  }());
  var AnimationStateMetadata = (function() {
    function AnimationStateMetadata() {}
    return AnimationStateMetadata;
  }());
  var AnimationStateDeclarationMetadata = (function(_super) {
    __extends$16(AnimationStateDeclarationMetadata, _super);
    function AnimationStateDeclarationMetadata(stateNameExpr, styles) {
      _super.call(this);
      this.stateNameExpr = stateNameExpr;
      this.styles = styles;
    }
    return AnimationStateDeclarationMetadata;
  }(AnimationStateMetadata));
  var AnimationStateTransitionMetadata = (function(_super) {
    __extends$16(AnimationStateTransitionMetadata, _super);
    function AnimationStateTransitionMetadata(stateChangeExpr, steps) {
      _super.call(this);
      this.stateChangeExpr = stateChangeExpr;
      this.steps = steps;
    }
    return AnimationStateTransitionMetadata;
  }(AnimationStateMetadata));
  var AnimationMetadata = (function() {
    function AnimationMetadata() {}
    return AnimationMetadata;
  }());
  var AnimationKeyframesSequenceMetadata = (function(_super) {
    __extends$16(AnimationKeyframesSequenceMetadata, _super);
    function AnimationKeyframesSequenceMetadata(steps) {
      _super.call(this);
      this.steps = steps;
    }
    return AnimationKeyframesSequenceMetadata;
  }(AnimationMetadata));
  var AnimationStyleMetadata = (function(_super) {
    __extends$16(AnimationStyleMetadata, _super);
    function AnimationStyleMetadata(styles, offset) {
      if (offset === void 0) {
        offset = null;
      }
      _super.call(this);
      this.styles = styles;
      this.offset = offset;
    }
    return AnimationStyleMetadata;
  }(AnimationMetadata));
  var AnimationAnimateMetadata = (function(_super) {
    __extends$16(AnimationAnimateMetadata, _super);
    function AnimationAnimateMetadata(timings, styles) {
      _super.call(this);
      this.timings = timings;
      this.styles = styles;
    }
    return AnimationAnimateMetadata;
  }(AnimationMetadata));
  var AnimationWithStepsMetadata = (function(_super) {
    __extends$16(AnimationWithStepsMetadata, _super);
    function AnimationWithStepsMetadata() {
      _super.call(this);
    }
    Object.defineProperty(AnimationWithStepsMetadata.prototype, "steps", {
      get: function() {
        throw new Error('NOT IMPLEMENTED: Base Class');
      },
      enumerable: true,
      configurable: true
    });
    return AnimationWithStepsMetadata;
  }(AnimationMetadata));
  var AnimationSequenceMetadata = (function(_super) {
    __extends$16(AnimationSequenceMetadata, _super);
    function AnimationSequenceMetadata(_steps) {
      _super.call(this);
      this._steps = _steps;
    }
    Object.defineProperty(AnimationSequenceMetadata.prototype, "steps", {
      get: function() {
        return this._steps;
      },
      enumerable: true,
      configurable: true
    });
    return AnimationSequenceMetadata;
  }(AnimationWithStepsMetadata));
  var AnimationGroupMetadata = (function(_super) {
    __extends$16(AnimationGroupMetadata, _super);
    function AnimationGroupMetadata(_steps) {
      _super.call(this);
      this._steps = _steps;
    }
    Object.defineProperty(AnimationGroupMetadata.prototype, "steps", {
      get: function() {
        return this._steps;
      },
      enumerable: true,
      configurable: true
    });
    return AnimationGroupMetadata;
  }(AnimationWithStepsMetadata));
  function animate(timing, styles) {
    if (styles === void 0) {
      styles = null;
    }
    var stylesEntry = styles;
    if (!isPresent(stylesEntry)) {
      var EMPTY_STYLE = {};
      stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);
    }
    return new AnimationAnimateMetadata(timing, stylesEntry);
  }
  function group(steps) {
    return new AnimationGroupMetadata(steps);
  }
  function sequence(steps) {
    return new AnimationSequenceMetadata(steps);
  }
  function style(tokens) {
    var input;
    var offset = null;
    if (isString(tokens)) {
      input = [tokens];
    } else {
      if (isArray(tokens)) {
        input = tokens;
      } else {
        input = [tokens];
      }
      input.forEach(function(entry) {
        var entryOffset = entry['offset'];
        if (isPresent(entryOffset)) {
          offset = offset == null ? NumberWrapper.parseFloat(entryOffset) : offset;
        }
      });
    }
    return new AnimationStyleMetadata(input, offset);
  }
  function state(stateNameExpr, styles) {
    return new AnimationStateDeclarationMetadata(stateNameExpr, styles);
  }
  function keyframes(steps) {
    return new AnimationKeyframesSequenceMetadata(steps);
  }
  function transition(stateChangeExpr, steps) {
    var animationData = isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;
    return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);
  }
  function trigger(name, animation) {
    return new AnimationEntryMetadata(name, animation);
  }
  function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {
    if (nullValue === void 0) {
      nullValue = null;
    }
    var finalStyles = {};
    StringMapWrapper.forEach(newStyles, function(value, prop) {
      finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();
    });
    StringMapWrapper.forEach(previousStyles, function(value, prop) {
      if (!isPresent(finalStyles[prop])) {
        finalStyles[prop] = nullValue;
      }
    });
    return finalStyles;
  }
  function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {
    var limit = keyframes.length - 1;
    var firstKeyframe = keyframes[0];
    var flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);
    var extraFirstKeyframeStyles = {};
    var hasExtraFirstStyles = false;
    StringMapWrapper.forEach(collectedStyles, function(value, prop) {
      if (!flatenedFirstKeyframeStyles[prop]) {
        flatenedFirstKeyframeStyles[prop] = value;
        extraFirstKeyframeStyles[prop] = value;
        hasExtraFirstStyles = true;
      }
    });
    var keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);
    var finalKeyframe = keyframes[limit];
    ListWrapper.insert(finalKeyframe.styles.styles, 0, finalStateStyles);
    var flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);
    var extraFinalKeyframeStyles = {};
    var hasExtraFinalStyles = false;
    StringMapWrapper.forEach(keyframeCollectedStyles, function(value, prop) {
      if (!isPresent(flatenedFinalKeyframeStyles[prop])) {
        extraFinalKeyframeStyles[prop] = AUTO_STYLE;
        hasExtraFinalStyles = true;
      }
    });
    if (hasExtraFinalStyles) {
      finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);
    }
    StringMapWrapper.forEach(flatenedFinalKeyframeStyles, function(value, prop) {
      if (!isPresent(flatenedFirstKeyframeStyles[prop])) {
        extraFirstKeyframeStyles[prop] = AUTO_STYLE;
        hasExtraFirstStyles = true;
      }
    });
    if (hasExtraFirstStyles) {
      firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);
    }
    return keyframes;
  }
  function clearStyles(styles) {
    var finalStyles = {};
    StringMapWrapper.keys(styles).forEach(function(key) {
      finalStyles[key] = null;
    });
    return finalStyles;
  }
  function collectAndResolveStyles(collection, styles) {
    return styles.map(function(entry) {
      var stylesObj = {};
      StringMapWrapper.forEach(entry, function(value, prop) {
        if (value == FILL_STYLE_FLAG) {
          value = collection[prop];
          if (!isPresent(value)) {
            value = AUTO_STYLE;
          }
        }
        collection[prop] = value;
        stylesObj[prop] = value;
      });
      return stylesObj;
    });
  }
  function renderStyles(element, renderer, styles) {
    StringMapWrapper.forEach(styles, function(value, prop) {
      renderer.setElementStyle(element, prop, value);
    });
  }
  function flattenStyles(styles) {
    var finalStyles = {};
    styles.forEach(function(entry) {
      StringMapWrapper.forEach(entry, function(value, prop) {
        finalStyles[prop] = value;
      });
    });
    return finalStyles;
  }
  var AnimationStyles = (function() {
    function AnimationStyles(styles) {
      this.styles = styles;
    }
    return AnimationStyles;
  }());
  var DebugDomRootRenderer = (function() {
    function DebugDomRootRenderer(_delegate) {
      this._delegate = _delegate;
    }
    DebugDomRootRenderer.prototype.renderComponent = function(componentProto) {
      return new DebugDomRenderer(this._delegate.renderComponent(componentProto));
    };
    return DebugDomRootRenderer;
  }());
  var DebugDomRenderer = (function() {
    function DebugDomRenderer(_delegate) {
      this._delegate = _delegate;
    }
    DebugDomRenderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {
      var nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);
      var debugEl = new DebugElement(nativeEl, null, debugInfo);
      indexDebugNode(debugEl);
      return nativeEl;
    };
    DebugDomRenderer.prototype.createElement = function(parentElement, name, debugInfo) {
      var nativeEl = this._delegate.createElement(parentElement, name, debugInfo);
      var debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);
      debugEl.name = name;
      indexDebugNode(debugEl);
      return nativeEl;
    };
    DebugDomRenderer.prototype.createViewRoot = function(hostElement) {
      return this._delegate.createViewRoot(hostElement);
    };
    DebugDomRenderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {
      var comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);
      var debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);
      indexDebugNode(debugEl);
      return comment;
    };
    DebugDomRenderer.prototype.createText = function(parentElement, value, debugInfo) {
      var text = this._delegate.createText(parentElement, value, debugInfo);
      var debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);
      indexDebugNode(debugEl);
      return text;
    };
    DebugDomRenderer.prototype.projectNodes = function(parentElement, nodes) {
      var debugParent = getDebugNode(parentElement);
      if (isPresent(debugParent) && debugParent instanceof DebugElement) {
        var debugElement_1 = debugParent;
        nodes.forEach(function(node) {
          debugElement_1.addChild(getDebugNode(node));
        });
      }
      this._delegate.projectNodes(parentElement, nodes);
    };
    DebugDomRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
      var debugNode = getDebugNode(node);
      if (isPresent(debugNode)) {
        var debugParent = debugNode.parent;
        if (viewRootNodes.length > 0 && isPresent(debugParent)) {
          var debugViewRootNodes = [];
          viewRootNodes.forEach(function(rootNode) {
            return debugViewRootNodes.push(getDebugNode(rootNode));
          });
          debugParent.insertChildrenAfter(debugNode, debugViewRootNodes);
        }
      }
      this._delegate.attachViewAfter(node, viewRootNodes);
    };
    DebugDomRenderer.prototype.detachView = function(viewRootNodes) {
      viewRootNodes.forEach(function(node) {
        var debugNode = getDebugNode(node);
        if (isPresent(debugNode) && isPresent(debugNode.parent)) {
          debugNode.parent.removeChild(debugNode);
        }
      });
      this._delegate.detachView(viewRootNodes);
    };
    DebugDomRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
      viewAllNodes.forEach(function(node) {
        removeDebugNodeFromIndex(getDebugNode(node));
      });
      this._delegate.destroyView(hostElement, viewAllNodes);
    };
    DebugDomRenderer.prototype.listen = function(renderElement, name, callback) {
      var debugEl = getDebugNode(renderElement);
      if (isPresent(debugEl)) {
        debugEl.listeners.push(new EventListener(name, callback));
      }
      return this._delegate.listen(renderElement, name, callback);
    };
    DebugDomRenderer.prototype.listenGlobal = function(target, name, callback) {
      return this._delegate.listenGlobal(target, name, callback);
    };
    DebugDomRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
      var debugEl = getDebugNode(renderElement);
      if (isPresent(debugEl) && debugEl instanceof DebugElement) {
        debugEl.properties[propertyName] = propertyValue;
      }
      this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
    };
    DebugDomRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
      var debugEl = getDebugNode(renderElement);
      if (isPresent(debugEl) && debugEl instanceof DebugElement) {
        debugEl.attributes[attributeName] = attributeValue;
      }
      this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
    };
    DebugDomRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
      this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
    };
    DebugDomRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
      var debugEl = getDebugNode(renderElement);
      if (isPresent(debugEl) && debugEl instanceof DebugElement) {
        debugEl.classes[className] = isAdd;
      }
      this._delegate.setElementClass(renderElement, className, isAdd);
    };
    DebugDomRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
      var debugEl = getDebugNode(renderElement);
      if (isPresent(debugEl) && debugEl instanceof DebugElement) {
        debugEl.styles[styleName] = styleValue;
      }
      this._delegate.setElementStyle(renderElement, styleName, styleValue);
    };
    DebugDomRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
      this._delegate.invokeElementMethod(renderElement, methodName, args);
    };
    DebugDomRenderer.prototype.setText = function(renderNode, text) {
      this._delegate.setText(renderNode, text);
    };
    DebugDomRenderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
      return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing);
    };
    return DebugDomRenderer;
  }());
  var StaticNodeDebugInfo = (function() {
    function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {
      this.providerTokens = providerTokens;
      this.componentToken = componentToken;
      this.refTokens = refTokens;
    }
    return StaticNodeDebugInfo;
  }());
  var DebugContext = (function() {
    function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {
      this._view = _view;
      this._nodeIndex = _nodeIndex;
      this._tplRow = _tplRow;
      this._tplCol = _tplCol;
    }
    Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", {
      get: function() {
        return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "context", {
      get: function() {
        return this._view.context;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "component", {
      get: function() {
        var staticNodeInfo = this._staticNodeInfo;
        if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {
          return this.injector.get(staticNodeInfo.componentToken);
        }
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "componentRenderElement", {
      get: function() {
        var componentView = this._view;
        while (isPresent(componentView.declarationAppElement) && componentView.type !== ViewType.COMPONENT) {
          componentView = componentView.declarationAppElement.parentView;
        }
        return isPresent(componentView.declarationAppElement) ? componentView.declarationAppElement.nativeElement : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "injector", {
      get: function() {
        return this._view.injector(this._nodeIndex);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "renderNode", {
      get: function() {
        if (isPresent(this._nodeIndex) && this._view.allNodes) {
          return this._view.allNodes[this._nodeIndex];
        } else {
          return null;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "providerTokens", {
      get: function() {
        var staticNodeInfo = this._staticNodeInfo;
        return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "source", {
      get: function() {
        return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "references", {
      get: function() {
        var _this = this;
        var varValues = {};
        var staticNodeInfo = this._staticNodeInfo;
        if (isPresent(staticNodeInfo)) {
          var refs = staticNodeInfo.refTokens;
          StringMapWrapper.forEach(refs, function(refToken, refName) {
            var varValue;
            if (isBlank(refToken)) {
              varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;
            } else {
              varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);
            }
            varValues[refName] = varValue;
          });
        }
        return varValues;
      },
      enumerable: true,
      configurable: true
    });
    return DebugContext;
  }());
  var AnimationTransitionEvent = (function() {
    function AnimationTransitionEvent(_a) {
      var fromState = _a.fromState,
          toState = _a.toState,
          totalTime = _a.totalTime;
      this.fromState = fromState;
      this.toState = toState;
      this.totalTime = totalTime;
    }
    return AnimationTransitionEvent;
  }());
  var ViewAnimationMap = (function() {
    function ViewAnimationMap() {
      this._map = new Map$1();
      this._allPlayers = [];
    }
    Object.defineProperty(ViewAnimationMap.prototype, "length", {
      get: function() {
        return this.getAllPlayers().length;
      },
      enumerable: true,
      configurable: true
    });
    ViewAnimationMap.prototype.find = function(element, animationName) {
      var playersByAnimation = this._map.get(element);
      if (isPresent(playersByAnimation)) {
        return playersByAnimation[animationName];
      }
    };
    ViewAnimationMap.prototype.findAllPlayersByElement = function(element) {
      var el = this._map.get(element);
      return el ? StringMapWrapper.values(el) : [];
    };
    ViewAnimationMap.prototype.set = function(element, animationName, player) {
      var playersByAnimation = this._map.get(element);
      if (!isPresent(playersByAnimation)) {
        playersByAnimation = {};
      }
      var existingEntry = playersByAnimation[animationName];
      if (isPresent(existingEntry)) {
        this.remove(element, animationName);
      }
      playersByAnimation[animationName] = player;
      this._allPlayers.push(player);
      this._map.set(element, playersByAnimation);
    };
    ViewAnimationMap.prototype.getAllPlayers = function() {
      return this._allPlayers;
    };
    ViewAnimationMap.prototype.remove = function(element, animationName) {
      var playersByAnimation = this._map.get(element);
      if (isPresent(playersByAnimation)) {
        var player = playersByAnimation[animationName];
        delete playersByAnimation[animationName];
        var index = this._allPlayers.indexOf(player);
        ListWrapper.removeAt(this._allPlayers, index);
        if (StringMapWrapper.isEmpty(playersByAnimation)) {
          this._map.delete(element);
        }
      }
    };
    return ViewAnimationMap;
  }());
  var __extends$18 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var _UNDEFINED$1 = new Object();
  var ElementInjector = (function(_super) {
    __extends$18(ElementInjector, _super);
    function ElementInjector(_view, _nodeIndex) {
      _super.call(this);
      this._view = _view;
      this._nodeIndex = _nodeIndex;
    }
    ElementInjector.prototype.get = function(token, notFoundValue) {
      if (notFoundValue === void 0) {
        notFoundValue = THROW_IF_NOT_FOUND;
      }
      var result = _UNDEFINED$1;
      if (result === _UNDEFINED$1) {
        result = this._view.injectorGet(token, this._nodeIndex, _UNDEFINED$1);
      }
      if (result === _UNDEFINED$1) {
        result = this._view.parentInjector.get(token, notFoundValue);
      }
      return result;
    };
    return ElementInjector;
  }(Injector));
  var __extends$17 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var _scope_check = wtfCreateScope("AppView#check(ascii id)");
  var AppView = (function() {
    function AppView(clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode) {
      this.clazz = clazz;
      this.componentType = componentType;
      this.type = type;
      this.viewUtils = viewUtils;
      this.parentInjector = parentInjector;
      this.declarationAppElement = declarationAppElement;
      this.cdMode = cdMode;
      this.contentChildren = [];
      this.viewChildren = [];
      this.viewContainerElement = null;
      this.numberOfChecks = 0;
      this.animationPlayers = new ViewAnimationMap();
      this._animationListeners = new Map();
      this.ref = new ViewRef_(this);
      if (type === ViewType.COMPONENT || type === ViewType.HOST) {
        this.renderer = viewUtils.renderComponent(componentType);
      } else {
        this.renderer = declarationAppElement.parentView.renderer;
      }
    }
    Object.defineProperty(AppView.prototype, "destroyed", {
      get: function() {
        return this.cdMode === ChangeDetectorStatus.Destroyed;
      },
      enumerable: true,
      configurable: true
    });
    AppView.prototype.cancelActiveAnimation = function(element, animationName, removeAllAnimations) {
      if (removeAllAnimations === void 0) {
        removeAllAnimations = false;
      }
      if (removeAllAnimations) {
        this.animationPlayers.findAllPlayersByElement(element).forEach(function(player) {
          return player.destroy();
        });
      } else {
        var player = this.animationPlayers.find(element, animationName);
        if (isPresent(player)) {
          player.destroy();
        }
      }
    };
    AppView.prototype.queueAnimation = function(element, animationName, player, totalTime, fromState, toState) {
      var _this = this;
      var event = new AnimationTransitionEvent({
        'fromState': fromState,
        'toState': toState,
        'totalTime': totalTime
      });
      this.animationPlayers.set(element, animationName, player);
      player.onDone(function() {
        _this.triggerAnimationOutput(element, animationName, 'done', event);
        _this.animationPlayers.remove(element, animationName);
      });
      player.onStart(function() {
        _this.triggerAnimationOutput(element, animationName, 'start', event);
      });
    };
    AppView.prototype.triggerQueuedAnimations = function() {
      this.animationPlayers.getAllPlayers().forEach(function(player) {
        if (!player.hasStarted()) {
          player.play();
        }
      });
    };
    AppView.prototype.triggerAnimationOutput = function(element, animationName, phase, event) {
      var listeners = this._animationListeners.get(element);
      if (isPresent(listeners) && listeners.length) {
        for (var i = 0; i < listeners.length; i++) {
          var listener = listeners[i];
          if (listener.output.name == animationName && listener.output.phase == phase) {
            listener.handler(event);
            break;
          }
        }
      }
    };
    AppView.prototype.registerAnimationOutput = function(element, outputEvent, eventHandler) {
      var entry = new _AnimationOutputWithHandler(outputEvent, eventHandler);
      var animations = this._animationListeners.get(element);
      if (!isPresent(animations)) {
        this._animationListeners.set(element, animations = []);
      }
      animations.push(entry);
    };
    AppView.prototype.create = function(context, givenProjectableNodes, rootSelectorOrNode) {
      this.context = context;
      var projectableNodes;
      switch (this.type) {
        case ViewType.COMPONENT:
          projectableNodes = ensureSlotCount(givenProjectableNodes, this.componentType.slotCount);
          break;
        case ViewType.EMBEDDED:
          projectableNodes = this.declarationAppElement.parentView.projectableNodes;
          break;
        case ViewType.HOST:
          projectableNodes = givenProjectableNodes;
          break;
      }
      this._hasExternalHostElement = isPresent(rootSelectorOrNode);
      this.projectableNodes = projectableNodes;
      return this.createInternal(rootSelectorOrNode);
    };
    AppView.prototype.createInternal = function(rootSelectorOrNode) {
      return null;
    };
    AppView.prototype.init = function(rootNodesOrAppElements, allNodes, disposables, subscriptions) {
      this.rootNodesOrAppElements = rootNodesOrAppElements;
      this.allNodes = allNodes;
      this.disposables = disposables;
      this.subscriptions = subscriptions;
      if (this.type === ViewType.COMPONENT) {
        this.declarationAppElement.parentView.viewChildren.push(this);
        this.dirtyParentQueriesInternal();
      }
    };
    AppView.prototype.selectOrCreateHostElement = function(elementName, rootSelectorOrNode, debugInfo) {
      var hostElement;
      if (isPresent(rootSelectorOrNode)) {
        hostElement = this.renderer.selectRootElement(rootSelectorOrNode, debugInfo);
      } else {
        hostElement = this.renderer.createElement(null, elementName, debugInfo);
      }
      return hostElement;
    };
    AppView.prototype.injectorGet = function(token, nodeIndex, notFoundResult) {
      return this.injectorGetInternal(token, nodeIndex, notFoundResult);
    };
    AppView.prototype.injectorGetInternal = function(token, nodeIndex, notFoundResult) {
      return notFoundResult;
    };
    AppView.prototype.injector = function(nodeIndex) {
      if (isPresent(nodeIndex)) {
        return new ElementInjector(this, nodeIndex);
      } else {
        return this.parentInjector;
      }
    };
    AppView.prototype.destroy = function() {
      if (this._hasExternalHostElement) {
        this.renderer.detachView(this.flatRootNodes);
      } else if (isPresent(this.viewContainerElement)) {
        this.viewContainerElement.detachView(this.viewContainerElement.nestedViews.indexOf(this));
      }
      this._destroyRecurse();
    };
    AppView.prototype._destroyRecurse = function() {
      if (this.cdMode === ChangeDetectorStatus.Destroyed) {
        return;
      }
      var children = this.contentChildren;
      for (var i = 0; i < children.length; i++) {
        children[i]._destroyRecurse();
      }
      children = this.viewChildren;
      for (var i = 0; i < children.length; i++) {
        children[i]._destroyRecurse();
      }
      this.destroyLocal();
      this.cdMode = ChangeDetectorStatus.Destroyed;
    };
    AppView.prototype.destroyLocal = function() {
      var _this = this;
      var hostElement = this.type === ViewType.COMPONENT ? this.declarationAppElement.nativeElement : null;
      for (var i = 0; i < this.disposables.length; i++) {
        this.disposables[i]();
      }
      for (var i = 0; i < this.subscriptions.length; i++) {
        this.subscriptions[i].unsubscribe();
      }
      this.destroyInternal();
      this.dirtyParentQueriesInternal();
      if (this.animationPlayers.length == 0) {
        this.renderer.destroyView(hostElement, this.allNodes);
      } else {
        var player = new AnimationGroupPlayer(this.animationPlayers.getAllPlayers());
        player.onDone(function() {
          _this.renderer.destroyView(hostElement, _this.allNodes);
        });
      }
    };
    AppView.prototype.destroyInternal = function() {};
    AppView.prototype.detachInternal = function() {};
    AppView.prototype.detach = function() {
      var _this = this;
      this.detachInternal();
      if (this.animationPlayers.length == 0) {
        this.renderer.detachView(this.flatRootNodes);
      } else {
        var player = new AnimationGroupPlayer(this.animationPlayers.getAllPlayers());
        player.onDone(function() {
          _this.renderer.detachView(_this.flatRootNodes);
        });
      }
    };
    Object.defineProperty(AppView.prototype, "changeDetectorRef", {
      get: function() {
        return this.ref;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AppView.prototype, "parent", {
      get: function() {
        return isPresent(this.declarationAppElement) ? this.declarationAppElement.parentView : null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AppView.prototype, "flatRootNodes", {
      get: function() {
        return flattenNestedViewRenderNodes(this.rootNodesOrAppElements);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AppView.prototype, "lastRootNode", {
      get: function() {
        var lastNode = this.rootNodesOrAppElements.length > 0 ? this.rootNodesOrAppElements[this.rootNodesOrAppElements.length - 1] : null;
        return _findLastRenderNode(lastNode);
      },
      enumerable: true,
      configurable: true
    });
    AppView.prototype.dirtyParentQueriesInternal = function() {};
    AppView.prototype.detectChanges = function(throwOnChange) {
      var s = _scope_check(this.clazz);
      if (this.cdMode === ChangeDetectorStatus.Checked || this.cdMode === ChangeDetectorStatus.Errored)
        return;
      if (this.cdMode === ChangeDetectorStatus.Destroyed) {
        this.throwDestroyedError('detectChanges');
      }
      this.detectChangesInternal(throwOnChange);
      if (this.cdMode === ChangeDetectorStatus.CheckOnce)
        this.cdMode = ChangeDetectorStatus.Checked;
      this.numberOfChecks++;
      wtfLeave(s);
    };
    AppView.prototype.detectChangesInternal = function(throwOnChange) {
      this.detectContentChildrenChanges(throwOnChange);
      this.detectViewChildrenChanges(throwOnChange);
    };
    AppView.prototype.detectContentChildrenChanges = function(throwOnChange) {
      for (var i = 0; i < this.contentChildren.length; ++i) {
        var child = this.contentChildren[i];
        if (child.cdMode === ChangeDetectorStatus.Detached)
          continue;
        child.detectChanges(throwOnChange);
      }
    };
    AppView.prototype.detectViewChildrenChanges = function(throwOnChange) {
      for (var i = 0; i < this.viewChildren.length; ++i) {
        var child = this.viewChildren[i];
        if (child.cdMode === ChangeDetectorStatus.Detached)
          continue;
        child.detectChanges(throwOnChange);
      }
    };
    AppView.prototype.markContentChildAsMoved = function(renderAppElement) {
      this.dirtyParentQueriesInternal();
    };
    AppView.prototype.addToContentChildren = function(renderAppElement) {
      renderAppElement.parentView.contentChildren.push(this);
      this.viewContainerElement = renderAppElement;
      this.dirtyParentQueriesInternal();
    };
    AppView.prototype.removeFromContentChildren = function(renderAppElement) {
      ListWrapper.remove(renderAppElement.parentView.contentChildren, this);
      this.dirtyParentQueriesInternal();
      this.viewContainerElement = null;
    };
    AppView.prototype.markAsCheckOnce = function() {
      this.cdMode = ChangeDetectorStatus.CheckOnce;
    };
    AppView.prototype.markPathToRootAsCheckOnce = function() {
      var c = this;
      while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {
        if (c.cdMode === ChangeDetectorStatus.Checked) {
          c.cdMode = ChangeDetectorStatus.CheckOnce;
        }
        var parentEl = c.type === ViewType.COMPONENT ? c.declarationAppElement : c.viewContainerElement;
        c = isPresent(parentEl) ? parentEl.parentView : null;
      }
    };
    AppView.prototype.eventHandler = function(cb) {
      return cb;
    };
    AppView.prototype.throwDestroyedError = function(details) {
      throw new ViewDestroyedError(details);
    };
    return AppView;
  }());
  var DebugAppView = (function(_super) {
    __extends$17(DebugAppView, _super);
    function DebugAppView(clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode, staticNodeDebugInfos) {
      _super.call(this, clazz, componentType, type, viewUtils, parentInjector, declarationAppElement, cdMode);
      this.staticNodeDebugInfos = staticNodeDebugInfos;
      this._currentDebugContext = null;
    }
    DebugAppView.prototype.create = function(context, givenProjectableNodes, rootSelectorOrNode) {
      this._resetDebug();
      try {
        return _super.prototype.create.call(this, context, givenProjectableNodes, rootSelectorOrNode);
      } catch (e) {
        this._rethrowWithContext(e);
        throw e;
      }
    };
    DebugAppView.prototype.injectorGet = function(token, nodeIndex, notFoundResult) {
      this._resetDebug();
      try {
        return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
      } catch (e) {
        this._rethrowWithContext(e);
        throw e;
      }
    };
    DebugAppView.prototype.detach = function() {
      this._resetDebug();
      try {
        _super.prototype.detach.call(this);
      } catch (e) {
        this._rethrowWithContext(e);
        throw e;
      }
    };
    DebugAppView.prototype.destroyLocal = function() {
      this._resetDebug();
      try {
        _super.prototype.destroyLocal.call(this);
      } catch (e) {
        this._rethrowWithContext(e);
        throw e;
      }
    };
    DebugAppView.prototype.detectChanges = function(throwOnChange) {
      this._resetDebug();
      try {
        _super.prototype.detectChanges.call(this, throwOnChange);
      } catch (e) {
        this._rethrowWithContext(e);
        throw e;
      }
    };
    DebugAppView.prototype._resetDebug = function() {
      this._currentDebugContext = null;
    };
    DebugAppView.prototype.debug = function(nodeIndex, rowNum, colNum) {
      return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);
    };
    DebugAppView.prototype._rethrowWithContext = function(e) {
      if (!(e instanceof ViewWrappedError)) {
        if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {
          this.cdMode = ChangeDetectorStatus.Errored;
        }
        if (isPresent(this._currentDebugContext)) {
          throw new ViewWrappedError(e, this._currentDebugContext);
        }
      }
    };
    DebugAppView.prototype.eventHandler = function(cb) {
      var _this = this;
      var superHandler = _super.prototype.eventHandler.call(this, cb);
      return function(event) {
        _this._resetDebug();
        try {
          return superHandler(event);
        } catch (e) {
          _this._rethrowWithContext(e);
          throw e;
        }
      };
    };
    return DebugAppView;
  }(AppView));
  function _findLastRenderNode(node) {
    var lastNode;
    if (node instanceof AppElement) {
      var appEl = node;
      lastNode = appEl.nativeElement;
      if (isPresent(appEl.nestedViews)) {
        for (var i = appEl.nestedViews.length - 1; i >= 0; i--) {
          var nestedView = appEl.nestedViews[i];
          if (nestedView.rootNodesOrAppElements.length > 0) {
            lastNode = _findLastRenderNode(nestedView.rootNodesOrAppElements[nestedView.rootNodesOrAppElements.length - 1]);
          }
        }
      }
    } else {
      lastNode = node;
    }
    return lastNode;
  }
  var _AnimationOutputWithHandler = (function() {
    function _AnimationOutputWithHandler(output, handler) {
      this.output = output;
      this.handler = handler;
    }
    return _AnimationOutputWithHandler;
  }());
  var __core_private__ = {
    isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,
    ChangeDetectorStatus: ChangeDetectorStatus,
    CHANGE_DETECTION_STRATEGY_VALUES: CHANGE_DETECTION_STRATEGY_VALUES,
    constructDependencies: constructDependencies,
    LifecycleHooks: LifecycleHooks,
    LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,
    ReflectorReader: ReflectorReader,
    CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,
    AppElement: AppElement,
    AppView: AppView,
    DebugAppView: DebugAppView,
    NgModuleInjector: NgModuleInjector,
    ViewType: ViewType,
    MAX_INTERPOLATION_VALUES: MAX_INTERPOLATION_VALUES,
    checkBinding: checkBinding,
    flattenNestedViewRenderNodes: flattenNestedViewRenderNodes,
    interpolate: interpolate,
    ViewUtils: ViewUtils,
    VIEW_ENCAPSULATION_VALUES: VIEW_ENCAPSULATION_VALUES,
    ViewMetadata: ViewMetadata,
    DebugContext: DebugContext,
    StaticNodeDebugInfo: StaticNodeDebugInfo,
    devModeEqual: devModeEqual,
    UNINITIALIZED: UNINITIALIZED,
    ValueUnwrapper: ValueUnwrapper,
    RenderDebugInfo: RenderDebugInfo,
    TemplateRef_: TemplateRef_,
    ReflectionCapabilities: ReflectionCapabilities,
    makeDecorator: makeDecorator,
    DebugDomRootRenderer: DebugDomRootRenderer,
    EMPTY_ARRAY: EMPTY_ARRAY,
    EMPTY_MAP: EMPTY_MAP,
    pureProxy1: pureProxy1,
    pureProxy2: pureProxy2,
    pureProxy3: pureProxy3,
    pureProxy4: pureProxy4,
    pureProxy5: pureProxy5,
    pureProxy6: pureProxy6,
    pureProxy7: pureProxy7,
    pureProxy8: pureProxy8,
    pureProxy9: pureProxy9,
    pureProxy10: pureProxy10,
    castByValue: castByValue,
    Console: Console,
    reflector: reflector,
    Reflector: Reflector,
    NoOpAnimationPlayer: NoOpAnimationPlayer,
    AnimationPlayer: AnimationPlayer,
    AnimationSequencePlayer: AnimationSequencePlayer,
    AnimationGroupPlayer: AnimationGroupPlayer,
    AnimationKeyframe: AnimationKeyframe,
    prepareFinalAnimationStyles: prepareFinalAnimationStyles,
    balanceAnimationKeyframes: balanceAnimationKeyframes,
    flattenStyles: flattenStyles,
    clearStyles: clearStyles,
    renderStyles: renderStyles,
    collectAndResolveStyles: collectAndResolveStyles,
    AnimationStyles: AnimationStyles,
    AnimationOutput: AnimationOutput,
    ANY_STATE: ANY_STATE,
    DEFAULT_STATE: DEFAULT_STATE,
    EMPTY_STATE: EMPTY_STATE,
    FILL_STYLE_FLAG: FILL_STYLE_FLAG,
    ComponentStillLoadingError: ComponentStillLoadingError
  };
  exports.createPlatform = createPlatform;
  exports.assertPlatform = assertPlatform;
  exports.destroyPlatform = destroyPlatform;
  exports.getPlatform = getPlatform;
  exports.PlatformRef = PlatformRef;
  exports.ApplicationRef = ApplicationRef;
  exports.enableProdMode = enableProdMode;
  exports.isDevMode = isDevMode;
  exports.createPlatformFactory = createPlatformFactory;
  exports.APP_ID = APP_ID;
  exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;
  exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;
  exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;
  exports.APP_INITIALIZER = APP_INITIALIZER;
  exports.ApplicationInitStatus = ApplicationInitStatus;
  exports.DebugElement = DebugElement;
  exports.DebugNode = DebugNode;
  exports.asNativeElements = asNativeElements;
  exports.getDebugNode = getDebugNode;
  exports.Testability = Testability;
  exports.TestabilityRegistry = TestabilityRegistry;
  exports.setTestabilityGetter = setTestabilityGetter;
  exports.TRANSLATIONS = TRANSLATIONS;
  exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;
  exports.LOCALE_ID = LOCALE_ID;
  exports.ApplicationModule = ApplicationModule;
  exports.wtfCreateScope = wtfCreateScope;
  exports.wtfLeave = wtfLeave;
  exports.wtfStartTimeRange = wtfStartTimeRange;
  exports.wtfEndTimeRange = wtfEndTimeRange;
  exports.Type = Type;
  exports.EventEmitter = EventEmitter;
  exports.ErrorHandler = ErrorHandler;
  exports.AnimationTransitionEvent = AnimationTransitionEvent;
  exports.AnimationPlayer = AnimationPlayer;
  exports.Sanitizer = Sanitizer;
  exports.Component = Component;
  exports.Directive = Directive;
  exports.Attribute = Attribute;
  exports.ContentChildren = ContentChildren;
  exports.ContentChild = ContentChild;
  exports.ViewChildren = ViewChildren;
  exports.ViewChild = ViewChild;
  exports.Pipe = Pipe;
  exports.Input = Input;
  exports.Output = Output;
  exports.HostBinding = HostBinding;
  exports.HostListener = HostListener;
  exports.NgModule = NgModule;
  exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;
  exports.AttributeMetadata = AttributeMetadata;
  exports.ContentChildMetadata = ContentChildMetadata;
  exports.ContentChildrenMetadata = ContentChildrenMetadata;
  exports.QueryMetadata = QueryMetadata;
  exports.ViewChildMetadata = ViewChildMetadata;
  exports.ViewChildrenMetadata = ViewChildrenMetadata;
  exports.ViewQueryMetadata = ViewQueryMetadata;
  exports.ComponentMetadata = ComponentMetadata;
  exports.DirectiveMetadata = DirectiveMetadata;
  exports.HostBindingMetadata = HostBindingMetadata;
  exports.HostListenerMetadata = HostListenerMetadata;
  exports.InputMetadata = InputMetadata;
  exports.OutputMetadata = OutputMetadata;
  exports.PipeMetadata = PipeMetadata;
  exports.AfterContentChecked = AfterContentChecked;
  exports.AfterContentInit = AfterContentInit;
  exports.AfterViewChecked = AfterViewChecked;
  exports.AfterViewInit = AfterViewInit;
  exports.DoCheck = DoCheck;
  exports.OnChanges = OnChanges;
  exports.OnDestroy = OnDestroy;
  exports.OnInit = OnInit;
  exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;
  exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;
  exports.NgModuleMetadata = NgModuleMetadata;
  exports.Class = Class;
  exports.HostMetadata = HostMetadata;
  exports.InjectMetadata = InjectMetadata;
  exports.InjectableMetadata = InjectableMetadata;
  exports.OptionalMetadata = OptionalMetadata;
  exports.SelfMetadata = SelfMetadata;
  exports.SkipSelfMetadata = SkipSelfMetadata;
  exports.forwardRef = forwardRef;
  exports.resolveForwardRef = resolveForwardRef;
  exports.Injector = Injector;
  exports.ReflectiveInjector = ReflectiveInjector;
  exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;
  exports.ReflectiveKey = ReflectiveKey;
  exports.OpaqueToken = OpaqueToken;
  exports.Inject = Inject;
  exports.Optional = Optional;
  exports.Injectable = Injectable;
  exports.Self = Self;
  exports.Host = Host;
  exports.SkipSelf = SkipSelf;
  exports.NgZone = NgZone;
  exports.RenderComponentType = RenderComponentType;
  exports.Renderer = Renderer;
  exports.RootRenderer = RootRenderer;
  exports.COMPILER_OPTIONS = COMPILER_OPTIONS;
  exports.Compiler = Compiler;
  exports.CompilerFactory = CompilerFactory;
  exports.ModuleWithComponentFactories = ModuleWithComponentFactories;
  exports.ComponentFactory = ComponentFactory;
  exports.ComponentRef = ComponentRef;
  exports.ComponentFactoryResolver = ComponentFactoryResolver;
  exports.ElementRef = ElementRef;
  exports.NgModuleFactory = NgModuleFactory;
  exports.NgModuleRef = NgModuleRef;
  exports.NgModuleFactoryLoader = NgModuleFactoryLoader;
  exports.QueryList = QueryList;
  exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;
  exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;
  exports.TemplateRef = TemplateRef;
  exports.ViewContainerRef = ViewContainerRef;
  exports.EmbeddedViewRef = EmbeddedViewRef;
  exports.ViewRef = ViewRef;
  exports.ChangeDetectorRef = ChangeDetectorRef;
  exports.CollectionChangeRecord = CollectionChangeRecord;
  exports.DefaultIterableDiffer = DefaultIterableDiffer;
  exports.IterableDiffers = IterableDiffers;
  exports.KeyValueChangeRecord = KeyValueChangeRecord;
  exports.KeyValueDiffers = KeyValueDiffers;
  exports.SimpleChange = SimpleChange;
  exports.WrappedValue = WrappedValue;
  exports.platformCore = platformCore;
  exports.__core_private__ = __core_private__;
  exports.AUTO_STYLE = AUTO_STYLE;
  exports.AnimationEntryMetadata = AnimationEntryMetadata;
  exports.AnimationStateMetadata = AnimationStateMetadata;
  exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata;
  exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata;
  exports.AnimationMetadata = AnimationMetadata;
  exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata;
  exports.AnimationStyleMetadata = AnimationStyleMetadata;
  exports.AnimationAnimateMetadata = AnimationAnimateMetadata;
  exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata;
  exports.AnimationSequenceMetadata = AnimationSequenceMetadata;
  exports.AnimationGroupMetadata = AnimationGroupMetadata;
  exports.animate = animate;
  exports.group = group;
  exports.sequence = sequence;
  exports.style = style;
  exports.state = state;
  exports.keyframes = keyframes;
  exports.transition = transition;
  exports.trigger = trigger;
}));

})();
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core')) : typeof define === 'function' && define.amd ? define("5", ["exports", "9", "3"], factory) : (factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}), global.ng.common, global.ng.core));
}(this, function(exports, _angular_common, _angular_core) {
  'use strict';
  var DebugDomRootRenderer = _angular_core.__core_private__.DebugDomRootRenderer;
  var NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer;
  var _NoOpAnimationDriver = (function() {
    function _NoOpAnimationDriver() {}
    _NoOpAnimationDriver.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
      return new NoOpAnimationPlayer();
    };
    return _NoOpAnimationDriver;
  }());
  var AnimationDriver = (function() {
    function AnimationDriver() {}
    AnimationDriver.NOOP = new _NoOpAnimationDriver();
    return AnimationDriver;
  }());
  var globalScope;
  if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
      globalScope = self;
    } else {
      globalScope = global;
    }
  } else {
    globalScope = window;
  }
  var global$1 = globalScope;
  var Date = global$1.Date;
  global$1.assert = function assert(condition) {};
  function isPresent(obj) {
    return obj !== undefined && obj !== null;
  }
  function isBlank(obj) {
    return obj === undefined || obj === null;
  }
  function isNumber(obj) {
    return typeof obj === 'number';
  }
  function isString(obj) {
    return typeof obj === 'string';
  }
  function isFunction(obj) {
    return typeof obj === 'function';
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token === undefined || token === null) {
      return '' + token;
    }
    if (token.overriddenName) {
      return token.overriddenName;
    }
    if (token.name) {
      return token.name;
    }
    var res = token.toString();
    var newLineIndex = res.indexOf('\n');
    return (newLineIndex === -1) ? res : res.substring(0, newLineIndex);
  }
  var StringWrapper = (function() {
    function StringWrapper() {}
    StringWrapper.fromCharCode = function(code) {
      return String.fromCharCode(code);
    };
    StringWrapper.charCodeAt = function(s, index) {
      return s.charCodeAt(index);
    };
    StringWrapper.split = function(s, regExp) {
      return s.split(regExp);
    };
    StringWrapper.equals = function(s, s2) {
      return s === s2;
    };
    StringWrapper.stripLeft = function(s, charVal) {
      if (s && s.length) {
        var pos = 0;
        for (var i = 0; i < s.length; i++) {
          if (s[i] != charVal)
            break;
          pos++;
        }
        s = s.substring(pos);
      }
      return s;
    };
    StringWrapper.stripRight = function(s, charVal) {
      if (s && s.length) {
        var pos = s.length;
        for (var i = s.length - 1; i >= 0; i--) {
          if (s[i] != charVal)
            break;
          pos--;
        }
        s = s.substring(0, pos);
      }
      return s;
    };
    StringWrapper.replace = function(s, from, replace) {
      return s.replace(from, replace);
    };
    StringWrapper.replaceAll = function(s, from, replace) {
      return s.replace(from, replace);
    };
    StringWrapper.slice = function(s, from, to) {
      if (from === void 0) {
        from = 0;
      }
      if (to === void 0) {
        to = null;
      }
      return s.slice(from, to === null ? undefined : to);
    };
    StringWrapper.replaceAllMapped = function(s, from, cb) {
      return s.replace(from, function() {
        var matches = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          matches[_i - 0] = arguments[_i];
        }
        matches.splice(-2, 2);
        return cb(matches);
      });
    };
    StringWrapper.contains = function(s, substr) {
      return s.indexOf(substr) != -1;
    };
    StringWrapper.compare = function(a, b) {
      if (a < b) {
        return -1;
      } else if (a > b) {
        return 1;
      } else {
        return 0;
      }
    };
    return StringWrapper;
  }());
  var NumberWrapper = (function() {
    function NumberWrapper() {}
    NumberWrapper.toFixed = function(n, fractionDigits) {
      return n.toFixed(fractionDigits);
    };
    NumberWrapper.equal = function(a, b) {
      return a === b;
    };
    NumberWrapper.parseIntAutoRadix = function(text) {
      var result = parseInt(text);
      if (isNaN(result)) {
        throw new Error('Invalid integer literal when parsing ' + text);
      }
      return result;
    };
    NumberWrapper.parseInt = function(text, radix) {
      if (radix == 10) {
        if (/^(\-|\+)?[0-9]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else if (radix == 16) {
        if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else {
        var result = parseInt(text, radix);
        if (!isNaN(result)) {
          return result;
        }
      }
      throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
    };
    NumberWrapper.parseFloat = function(text) {
      return parseFloat(text);
    };
    Object.defineProperty(NumberWrapper, "NaN", {
      get: function() {
        return NaN;
      },
      enumerable: true,
      configurable: true
    });
    NumberWrapper.isNumeric = function(value) {
      return !isNaN(value - parseFloat(value));
    };
    NumberWrapper.isNaN = function(value) {
      return isNaN(value);
    };
    NumberWrapper.isInteger = function(value) {
      return Number.isInteger(value);
    };
    return NumberWrapper;
  }());
  var Json = (function() {
    function Json() {}
    Json.parse = function(s) {
      return global$1.JSON.parse(s);
    };
    Json.stringify = function(data) {
      return global$1.JSON.stringify(data, null, 2);
    };
    return Json;
  }());
  var DateWrapper = (function() {
    function DateWrapper() {}
    DateWrapper.create = function(year, month, day, hour, minutes, seconds, milliseconds) {
      if (month === void 0) {
        month = 1;
      }
      if (day === void 0) {
        day = 1;
      }
      if (hour === void 0) {
        hour = 0;
      }
      if (minutes === void 0) {
        minutes = 0;
      }
      if (seconds === void 0) {
        seconds = 0;
      }
      if (milliseconds === void 0) {
        milliseconds = 0;
      }
      return new Date(year, month - 1, day, hour, minutes, seconds, milliseconds);
    };
    DateWrapper.fromISOString = function(str) {
      return new Date(str);
    };
    DateWrapper.fromMillis = function(ms) {
      return new Date(ms);
    };
    DateWrapper.toMillis = function(date) {
      return date.getTime();
    };
    DateWrapper.now = function() {
      return new Date();
    };
    DateWrapper.toJson = function(date) {
      return date.toJSON();
    };
    return DateWrapper;
  }());
  function setValueOnPath(global, path, value) {
    var parts = path.split('.');
    var obj = global;
    while (parts.length > 1) {
      var name = parts.shift();
      if (obj.hasOwnProperty(name) && isPresent(obj[name])) {
        obj = obj[name];
      } else {
        obj = obj[name] = {};
      }
    }
    if (obj === undefined || obj === null) {
      obj = {};
    }
    obj[parts.shift()] = value;
  }
  var Map$1 = global$1.Map;
  var Set$1 = global$1.Set;
  var createMapFromPairs = (function() {
    try {
      if (new Map$1([[1, 2]]).size === 1) {
        return function createMapFromPairs(pairs) {
          return new Map$1(pairs);
        };
      }
    } catch (e) {}
    return function createMapAndPopulateFromPairs(pairs) {
      var map = new Map$1();
      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i];
        map.set(pair[0], pair[1]);
      }
      return map;
    };
  })();
  var createMapFromMap = (function() {
    try {
      if (new Map$1(new Map$1())) {
        return function createMapFromMap(m) {
          return new Map$1(m);
        };
      }
    } catch (e) {}
    return function createMapAndPopulateFromMap(m) {
      var map = new Map$1();
      m.forEach(function(v, k) {
        map.set(k, v);
      });
      return map;
    };
  })();
  var _clearValues = (function() {
    if ((new Map$1()).keys().next) {
      return function _clearValues(m) {
        var keyIterator = m.keys();
        var k;
        while (!((k = keyIterator.next()).done)) {
          m.set(k.value, null);
        }
      };
    } else {
      return function _clearValuesWithForeEach(m) {
        m.forEach(function(v, k) {
          m.set(k, null);
        });
      };
    }
  })();
  var _arrayFromMap = (function() {
    try {
      if ((new Map$1()).values().next) {
        return function createArrayFromMap(m, getValues) {
          return getValues ? Array.from(m.values()) : Array.from(m.keys());
        };
      }
    } catch (e) {}
    return function createArrayFromMapWithForeach(m, getValues) {
      var res = ListWrapper.createFixedSize(m.size),
          i = 0;
      m.forEach(function(v, k) {
        res[i] = getValues ? v : k;
        i++;
      });
      return res;
    };
  })();
  var StringMapWrapper = (function() {
    function StringMapWrapper() {}
    StringMapWrapper.create = function() {
      return {};
    };
    StringMapWrapper.contains = function(map, key) {
      return map.hasOwnProperty(key);
    };
    StringMapWrapper.get = function(map, key) {
      return map.hasOwnProperty(key) ? map[key] : undefined;
    };
    StringMapWrapper.set = function(map, key, value) {
      map[key] = value;
    };
    StringMapWrapper.keys = function(map) {
      return Object.keys(map);
    };
    StringMapWrapper.values = function(map) {
      return Object.keys(map).map(function(k) {
        return map[k];
      });
    };
    StringMapWrapper.isEmpty = function(map) {
      for (var prop in map) {
        return false;
      }
      return true;
    };
    StringMapWrapper.delete = function(map, key) {
      delete map[key];
    };
    StringMapWrapper.forEach = function(map, callback) {
      for (var _i = 0,
          _a = Object.keys(map); _i < _a.length; _i++) {
        var k = _a[_i];
        callback(map[k], k);
      }
    };
    StringMapWrapper.merge = function(m1, m2) {
      var m = {};
      for (var _i = 0,
          _a = Object.keys(m1); _i < _a.length; _i++) {
        var k = _a[_i];
        m[k] = m1[k];
      }
      for (var _b = 0,
          _c = Object.keys(m2); _b < _c.length; _b++) {
        var k = _c[_b];
        m[k] = m2[k];
      }
      return m;
    };
    StringMapWrapper.equals = function(m1, m2) {
      var k1 = Object.keys(m1);
      var k2 = Object.keys(m2);
      if (k1.length != k2.length) {
        return false;
      }
      var key;
      for (var i = 0; i < k1.length; i++) {
        key = k1[i];
        if (m1[key] !== m2[key]) {
          return false;
        }
      }
      return true;
    };
    return StringMapWrapper;
  }());
  var ListWrapper = (function() {
    function ListWrapper() {}
    ListWrapper.createFixedSize = function(size) {
      return new Array(size);
    };
    ListWrapper.createGrowableSize = function(size) {
      return new Array(size);
    };
    ListWrapper.clone = function(array) {
      return array.slice(0);
    };
    ListWrapper.forEachWithIndex = function(array, fn) {
      for (var i = 0; i < array.length; i++) {
        fn(array[i], i);
      }
    };
    ListWrapper.first = function(array) {
      if (!array)
        return null;
      return array[0];
    };
    ListWrapper.last = function(array) {
      if (!array || array.length == 0)
        return null;
      return array[array.length - 1];
    };
    ListWrapper.indexOf = function(array, value, startIndex) {
      if (startIndex === void 0) {
        startIndex = 0;
      }
      return array.indexOf(value, startIndex);
    };
    ListWrapper.contains = function(list, el) {
      return list.indexOf(el) !== -1;
    };
    ListWrapper.reversed = function(array) {
      var a = ListWrapper.clone(array);
      return a.reverse();
    };
    ListWrapper.concat = function(a, b) {
      return a.concat(b);
    };
    ListWrapper.insert = function(list, index, value) {
      list.splice(index, 0, value);
    };
    ListWrapper.removeAt = function(list, index) {
      var res = list[index];
      list.splice(index, 1);
      return res;
    };
    ListWrapper.removeAll = function(list, items) {
      for (var i = 0; i < items.length; ++i) {
        var index = list.indexOf(items[i]);
        list.splice(index, 1);
      }
    };
    ListWrapper.remove = function(list, el) {
      var index = list.indexOf(el);
      if (index > -1) {
        list.splice(index, 1);
        return true;
      }
      return false;
    };
    ListWrapper.clear = function(list) {
      list.length = 0;
    };
    ListWrapper.isEmpty = function(list) {
      return list.length == 0;
    };
    ListWrapper.fill = function(list, value, start, end) {
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = null;
      }
      list.fill(value, start, end === null ? list.length : end);
    };
    ListWrapper.equals = function(a, b) {
      if (a.length != b.length)
        return false;
      for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
          return false;
      }
      return true;
    };
    ListWrapper.slice = function(l, from, to) {
      if (from === void 0) {
        from = 0;
      }
      if (to === void 0) {
        to = null;
      }
      return l.slice(from, to === null ? undefined : to);
    };
    ListWrapper.splice = function(l, from, length) {
      return l.splice(from, length);
    };
    ListWrapper.sort = function(l, compareFn) {
      if (isPresent(compareFn)) {
        l.sort(compareFn);
      } else {
        l.sort();
      }
    };
    ListWrapper.toString = function(l) {
      return l.toString();
    };
    ListWrapper.toJSON = function(l) {
      return JSON.stringify(l);
    };
    ListWrapper.maximum = function(list, predicate) {
      if (list.length == 0) {
        return null;
      }
      var solution = null;
      var maxValue = -Infinity;
      for (var index = 0; index < list.length; index++) {
        var candidate = list[index];
        if (isBlank(candidate)) {
          continue;
        }
        var candidateValue = predicate(candidate);
        if (candidateValue > maxValue) {
          solution = candidate;
          maxValue = candidateValue;
        }
      }
      return solution;
    };
    ListWrapper.flatten = function(list) {
      var target = [];
      _flattenArray(list, target);
      return target;
    };
    ListWrapper.addAll = function(list, source) {
      for (var i = 0; i < source.length; i++) {
        list.push(source[i]);
      }
    };
    return ListWrapper;
  }());
  function _flattenArray(source, target) {
    if (isPresent(source)) {
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        if (isArray(item)) {
          _flattenArray(item, target);
        } else {
          target.push(item);
        }
      }
    }
    return target;
  }
  var createSetFromList = (function() {
    var test = new Set$1([1, 2, 3]);
    if (test.size === 3) {
      return function createSetFromList(lst) {
        return new Set$1(lst);
      };
    } else {
      return function createSetAndPopulateFromList(lst) {
        var res = new Set$1(lst);
        if (res.size !== lst.length) {
          for (var i = 0; i < lst.length; i++) {
            res.add(lst[i]);
          }
        }
        return res;
      };
    }
  })();
  var CAMEL_CASE_REGEXP = /([A-Z])/g;
  var DASH_CASE_REGEXP = /-([a-z])/g;
  function camelCaseToDashCase(input) {
    return StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function(m) {
      return '-' + m[1].toLowerCase();
    });
  }
  function dashCaseToCamelCase(input) {
    return StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function(m) {
      return m[1].toUpperCase();
    });
  }
  var _DOM = null;
  function getDOM() {
    return _DOM;
  }
  function setRootDomAdapter(adapter) {
    if (isBlank(_DOM)) {
      _DOM = adapter;
    }
  }
  var DomAdapter = (function() {
    function DomAdapter() {
      this.resourceLoaderType = null;
    }
    Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
      get: function() {
        return this._attrToPropMap;
      },
      set: function(value) {
        this._attrToPropMap = value;
      },
      enumerable: true,
      configurable: true
    });
    ;
    ;
    return DomAdapter;
  }());
  var WebAnimationsPlayer = (function() {
    function WebAnimationsPlayer(element, keyframes, options) {
      this.element = element;
      this.keyframes = keyframes;
      this.options = options;
      this._onDoneFns = [];
      this._onStartFns = [];
      this._finished = false;
      this._initialized = false;
      this._started = false;
      this.parentPlayer = null;
      this._duration = options['duration'];
    }
    WebAnimationsPlayer.prototype._onFinish = function() {
      if (!this._finished) {
        this._finished = true;
        if (!isPresent(this.parentPlayer)) {
          this.destroy();
        }
        this._onDoneFns.forEach(function(fn) {
          return fn();
        });
        this._onDoneFns = [];
      }
    };
    WebAnimationsPlayer.prototype.init = function() {
      var _this = this;
      if (this._initialized)
        return;
      this._initialized = true;
      var keyframes = this.keyframes.map(function(styles) {
        var formattedKeyframe = {};
        StringMapWrapper.forEach(styles, function(value, prop) {
          formattedKeyframe[prop] = value == _angular_core.AUTO_STYLE ? _computeStyle(_this.element, prop) : value;
        });
        return formattedKeyframe;
      });
      this._player = this._triggerWebAnimation(this.element, keyframes, this.options);
      this.reset();
      this._player.onfinish = function() {
        return _this._onFinish();
      };
    };
    WebAnimationsPlayer.prototype._triggerWebAnimation = function(element, keyframes, options) {
      return element.animate(keyframes, options);
    };
    WebAnimationsPlayer.prototype.onStart = function(fn) {
      this._onStartFns.push(fn);
    };
    WebAnimationsPlayer.prototype.onDone = function(fn) {
      this._onDoneFns.push(fn);
    };
    WebAnimationsPlayer.prototype.play = function() {
      this.init();
      if (!this.hasStarted()) {
        this._onStartFns.forEach(function(fn) {
          return fn();
        });
        this._onStartFns = [];
        this._started = true;
      }
      this._player.play();
    };
    WebAnimationsPlayer.prototype.pause = function() {
      this.init();
      this._player.pause();
    };
    WebAnimationsPlayer.prototype.finish = function() {
      this.init();
      this._onFinish();
      this._player.finish();
    };
    WebAnimationsPlayer.prototype.reset = function() {
      this._player.cancel();
    };
    WebAnimationsPlayer.prototype.restart = function() {
      this.reset();
      this.play();
    };
    WebAnimationsPlayer.prototype.hasStarted = function() {
      return this._started;
    };
    WebAnimationsPlayer.prototype.destroy = function() {
      this.reset();
      this._onFinish();
    };
    Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", {
      get: function() {
        return this._duration;
      },
      enumerable: true,
      configurable: true
    });
    WebAnimationsPlayer.prototype.setPosition = function(p) {
      this._player.currentTime = p * this.totalTime;
    };
    WebAnimationsPlayer.prototype.getPosition = function() {
      return this._player.currentTime / this.totalTime;
    };
    return WebAnimationsPlayer;
  }());
  function _computeStyle(element, prop) {
    return getDOM().getComputedStyle(element)[prop];
  }
  var WebAnimationsDriver = (function() {
    function WebAnimationsDriver() {}
    WebAnimationsDriver.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
      var formattedSteps = [];
      var startingStyleLookup = {};
      if (isPresent(startingStyles) && startingStyles.styles.length > 0) {
        startingStyleLookup = _populateStyles(element, startingStyles, {});
        startingStyleLookup['offset'] = 0;
        formattedSteps.push(startingStyleLookup);
      }
      keyframes.forEach(function(keyframe) {
        var data = _populateStyles(element, keyframe.styles, startingStyleLookup);
        data['offset'] = keyframe.offset;
        formattedSteps.push(data);
      });
      if (formattedSteps.length == 1) {
        var start = formattedSteps[0];
        start['offset'] = null;
        formattedSteps = [start, start];
      }
      var playerOptions = {
        'duration': duration,
        'delay': delay,
        'fill': 'both'
      };
      if (easing) {
        playerOptions['easing'] = easing;
      }
      return new WebAnimationsPlayer(element, formattedSteps, playerOptions);
    };
    return WebAnimationsDriver;
  }());
  function _populateStyles(element, styles, defaultStyles) {
    var data = {};
    styles.styles.forEach(function(entry) {
      StringMapWrapper.forEach(entry, function(val, prop) {
        var formattedProp = dashCaseToCamelCase(prop);
        data[formattedProp] = val == _angular_core.AUTO_STYLE ? val : val.toString() + _resolveStyleUnit(val, prop, formattedProp);
      });
    });
    StringMapWrapper.forEach(defaultStyles, function(value, prop) {
      if (!isPresent(data[prop])) {
        data[prop] = value;
      }
    });
    return data;
  }
  function _resolveStyleUnit(val, userProvidedProp, formattedProp) {
    var unit = '';
    if (_isPixelDimensionStyle(formattedProp) && val != 0 && val != '0') {
      if (isNumber(val)) {
        unit = 'px';
      } else if (_findDimensionalSuffix(val.toString()).length == 0) {
        throw new Error('Please provide a CSS unit value for ' + userProvidedProp + ':' + val);
      }
    }
    return unit;
  }
  var _$0 = 48;
  var _$9 = 57;
  var _$PERIOD = 46;
  function _findDimensionalSuffix(value) {
    for (var i = 0; i < value.length; i++) {
      var c = StringWrapper.charCodeAt(value, i);
      if ((c >= _$0 && c <= _$9) || c == _$PERIOD)
        continue;
      return value.substring(i, value.length);
    }
    return '';
  }
  function _isPixelDimensionStyle(prop) {
    switch (prop) {
      case 'width':
      case 'height':
      case 'minWidth':
      case 'minHeight':
      case 'maxWidth':
      case 'maxHeight':
      case 'left':
      case 'top':
      case 'bottom':
      case 'right':
      case 'fontSize':
      case 'outlineWidth':
      case 'outlineOffset':
      case 'paddingTop':
      case 'paddingLeft':
      case 'paddingBottom':
      case 'paddingRight':
      case 'marginTop':
      case 'marginLeft':
      case 'marginBottom':
      case 'marginRight':
      case 'borderRadius':
      case 'borderWidth':
      case 'borderTopWidth':
      case 'borderLeftWidth':
      case 'borderRightWidth':
      case 'borderBottomWidth':
      case 'textIndent':
        return true;
      default:
        return false;
    }
  }
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var GenericBrowserDomAdapter = (function(_super) {
    __extends$1(GenericBrowserDomAdapter, _super);
    function GenericBrowserDomAdapter() {
      var _this = this;
      _super.call(this);
      this._animationPrefix = null;
      this._transitionEnd = null;
      try {
        var element = this.createElement('div', this.defaultDoc());
        if (isPresent(this.getStyle(element, 'animationName'))) {
          this._animationPrefix = '';
        } else {
          var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
          for (var i = 0; i < domPrefixes.length; i++) {
            if (isPresent(this.getStyle(element, domPrefixes[i] + 'AnimationName'))) {
              this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
              break;
            }
          }
        }
        var transEndEventNames = {
          WebkitTransition: 'webkitTransitionEnd',
          MozTransition: 'transitionend',
          OTransition: 'oTransitionEnd otransitionend',
          transition: 'transitionend'
        };
        StringMapWrapper.forEach(transEndEventNames, function(value, key) {
          if (isPresent(_this.getStyle(element, key))) {
            _this._transitionEnd = value;
          }
        });
      } catch (e) {
        this._animationPrefix = null;
        this._transitionEnd = null;
      }
    }
    GenericBrowserDomAdapter.prototype.getDistributedNodes = function(el) {
      return el.getDistributedNodes();
    };
    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function(el, baseUrl, href) {
      el.href = href == null ? baseUrl : baseUrl + '/../' + href;
    };
    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function() {
      return true;
    };
    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function() {
      return isFunction(this.defaultDoc().body.createShadowRoot);
    };
    GenericBrowserDomAdapter.prototype.getAnimationPrefix = function() {
      return isPresent(this._animationPrefix) ? this._animationPrefix : '';
    };
    GenericBrowserDomAdapter.prototype.getTransitionEnd = function() {
      return isPresent(this._transitionEnd) ? this._transitionEnd : '';
    };
    GenericBrowserDomAdapter.prototype.supportsAnimation = function() {
      return isPresent(this._animationPrefix) && isPresent(this._transitionEnd);
    };
    return GenericBrowserDomAdapter;
  }(DomAdapter));
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var _attrToPropMap = {
    'class': 'className',
    'innerHtml': 'innerHTML',
    'readonly': 'readOnly',
    'tabindex': 'tabIndex'
  };
  var DOM_KEY_LOCATION_NUMPAD = 3;
  var _keyMap = {
    '\b': 'Backspace',
    '\t': 'Tab',
    '\x7F': 'Delete',
    '\x1B': 'Escape',
    'Del': 'Delete',
    'Esc': 'Escape',
    'Left': 'ArrowLeft',
    'Right': 'ArrowRight',
    'Up': 'ArrowUp',
    'Down': 'ArrowDown',
    'Menu': 'ContextMenu',
    'Scroll': 'ScrollLock',
    'Win': 'OS'
  };
  var _chromeNumKeyPadMap = {
    'A': '1',
    'B': '2',
    'C': '3',
    'D': '4',
    'E': '5',
    'F': '6',
    'G': '7',
    'H': '8',
    'I': '9',
    'J': '*',
    'K': '+',
    'M': '-',
    'N': '.',
    'O': '/',
    '\x60': '0',
    '\x90': 'NumLock'
  };
  var BrowserDomAdapter = (function(_super) {
    __extends(BrowserDomAdapter, _super);
    function BrowserDomAdapter() {
      _super.apply(this, arguments);
    }
    BrowserDomAdapter.prototype.parse = function(templateHtml) {
      throw new Error('parse not implemented');
    };
    BrowserDomAdapter.makeCurrent = function() {
      setRootDomAdapter(new BrowserDomAdapter());
    };
    BrowserDomAdapter.prototype.hasProperty = function(element, name) {
      return name in element;
    };
    BrowserDomAdapter.prototype.setProperty = function(el, name, value) {
      el[name] = value;
    };
    BrowserDomAdapter.prototype.getProperty = function(el, name) {
      return el[name];
    };
    BrowserDomAdapter.prototype.invoke = function(el, methodName, args) {
      el[methodName].apply(el, args);
    };
    BrowserDomAdapter.prototype.logError = function(error) {
      if (window.console.error) {
        window.console.error(error);
      } else {
        window.console.log(error);
      }
    };
    BrowserDomAdapter.prototype.log = function(error) {
      window.console.log(error);
    };
    BrowserDomAdapter.prototype.logGroup = function(error) {
      if (window.console.group) {
        window.console.group(error);
        this.logError(error);
      } else {
        window.console.log(error);
      }
    };
    BrowserDomAdapter.prototype.logGroupEnd = function() {
      if (window.console.groupEnd) {
        window.console.groupEnd();
      }
    };
    Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
      get: function() {
        return _attrToPropMap;
      },
      enumerable: true,
      configurable: true
    });
    BrowserDomAdapter.prototype.query = function(selector) {
      return document.querySelector(selector);
    };
    BrowserDomAdapter.prototype.querySelector = function(el, selector) {
      return el.querySelector(selector);
    };
    BrowserDomAdapter.prototype.querySelectorAll = function(el, selector) {
      return el.querySelectorAll(selector);
    };
    BrowserDomAdapter.prototype.on = function(el, evt, listener) {
      el.addEventListener(evt, listener, false);
    };
    BrowserDomAdapter.prototype.onAndCancel = function(el, evt, listener) {
      el.addEventListener(evt, listener, false);
      return function() {
        el.removeEventListener(evt, listener, false);
      };
    };
    BrowserDomAdapter.prototype.dispatchEvent = function(el, evt) {
      el.dispatchEvent(evt);
    };
    BrowserDomAdapter.prototype.createMouseEvent = function(eventType) {
      var evt = document.createEvent('MouseEvent');
      evt.initEvent(eventType, true, true);
      return evt;
    };
    BrowserDomAdapter.prototype.createEvent = function(eventType) {
      var evt = document.createEvent('Event');
      evt.initEvent(eventType, true, true);
      return evt;
    };
    BrowserDomAdapter.prototype.preventDefault = function(evt) {
      evt.preventDefault();
      evt.returnValue = false;
    };
    BrowserDomAdapter.prototype.isPrevented = function(evt) {
      return evt.defaultPrevented || isPresent(evt.returnValue) && !evt.returnValue;
    };
    BrowserDomAdapter.prototype.getInnerHTML = function(el) {
      return el.innerHTML;
    };
    BrowserDomAdapter.prototype.getTemplateContent = function(el) {
      return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
    };
    BrowserDomAdapter.prototype.getOuterHTML = function(el) {
      return el.outerHTML;
    };
    BrowserDomAdapter.prototype.nodeName = function(node) {
      return node.nodeName;
    };
    BrowserDomAdapter.prototype.nodeValue = function(node) {
      return node.nodeValue;
    };
    BrowserDomAdapter.prototype.type = function(node) {
      return node.type;
    };
    BrowserDomAdapter.prototype.content = function(node) {
      if (this.hasProperty(node, 'content')) {
        return node.content;
      } else {
        return node;
      }
    };
    BrowserDomAdapter.prototype.firstChild = function(el) {
      return el.firstChild;
    };
    BrowserDomAdapter.prototype.nextSibling = function(el) {
      return el.nextSibling;
    };
    BrowserDomAdapter.prototype.parentElement = function(el) {
      return el.parentNode;
    };
    BrowserDomAdapter.prototype.childNodes = function(el) {
      return el.childNodes;
    };
    BrowserDomAdapter.prototype.childNodesAsList = function(el) {
      var childNodes = el.childNodes;
      var res = ListWrapper.createFixedSize(childNodes.length);
      for (var i = 0; i < childNodes.length; i++) {
        res[i] = childNodes[i];
      }
      return res;
    };
    BrowserDomAdapter.prototype.clearNodes = function(el) {
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
    };
    BrowserDomAdapter.prototype.appendChild = function(el, node) {
      el.appendChild(node);
    };
    BrowserDomAdapter.prototype.removeChild = function(el, node) {
      el.removeChild(node);
    };
    BrowserDomAdapter.prototype.replaceChild = function(el, newChild, oldChild) {
      el.replaceChild(newChild, oldChild);
    };
    BrowserDomAdapter.prototype.remove = function(node) {
      if (node.parentNode) {
        node.parentNode.removeChild(node);
      }
      return node;
    };
    BrowserDomAdapter.prototype.insertBefore = function(el, node) {
      el.parentNode.insertBefore(node, el);
    };
    BrowserDomAdapter.prototype.insertAllBefore = function(el, nodes) {
      nodes.forEach(function(n) {
        return el.parentNode.insertBefore(n, el);
      });
    };
    BrowserDomAdapter.prototype.insertAfter = function(el, node) {
      el.parentNode.insertBefore(node, el.nextSibling);
    };
    BrowserDomAdapter.prototype.setInnerHTML = function(el, value) {
      el.innerHTML = value;
    };
    BrowserDomAdapter.prototype.getText = function(el) {
      return el.textContent;
    };
    BrowserDomAdapter.prototype.setText = function(el, value) {
      el.textContent = value;
    };
    BrowserDomAdapter.prototype.getValue = function(el) {
      return el.value;
    };
    BrowserDomAdapter.prototype.setValue = function(el, value) {
      el.value = value;
    };
    BrowserDomAdapter.prototype.getChecked = function(el) {
      return el.checked;
    };
    BrowserDomAdapter.prototype.setChecked = function(el, value) {
      el.checked = value;
    };
    BrowserDomAdapter.prototype.createComment = function(text) {
      return document.createComment(text);
    };
    BrowserDomAdapter.prototype.createTemplate = function(html) {
      var t = document.createElement('template');
      t.innerHTML = html;
      return t;
    };
    BrowserDomAdapter.prototype.createElement = function(tagName, doc) {
      if (doc === void 0) {
        doc = document;
      }
      return doc.createElement(tagName);
    };
    BrowserDomAdapter.prototype.createElementNS = function(ns, tagName, doc) {
      if (doc === void 0) {
        doc = document;
      }
      return doc.createElementNS(ns, tagName);
    };
    BrowserDomAdapter.prototype.createTextNode = function(text, doc) {
      if (doc === void 0) {
        doc = document;
      }
      return doc.createTextNode(text);
    };
    BrowserDomAdapter.prototype.createScriptTag = function(attrName, attrValue, doc) {
      if (doc === void 0) {
        doc = document;
      }
      var el = doc.createElement('SCRIPT');
      el.setAttribute(attrName, attrValue);
      return el;
    };
    BrowserDomAdapter.prototype.createStyleElement = function(css, doc) {
      if (doc === void 0) {
        doc = document;
      }
      var style = doc.createElement('style');
      this.appendChild(style, this.createTextNode(css));
      return style;
    };
    BrowserDomAdapter.prototype.createShadowRoot = function(el) {
      return el.createShadowRoot();
    };
    BrowserDomAdapter.prototype.getShadowRoot = function(el) {
      return el.shadowRoot;
    };
    BrowserDomAdapter.prototype.getHost = function(el) {
      return el.host;
    };
    BrowserDomAdapter.prototype.clone = function(node) {
      return node.cloneNode(true);
    };
    BrowserDomAdapter.prototype.getElementsByClassName = function(element, name) {
      return element.getElementsByClassName(name);
    };
    BrowserDomAdapter.prototype.getElementsByTagName = function(element, name) {
      return element.getElementsByTagName(name);
    };
    BrowserDomAdapter.prototype.classList = function(element) {
      return Array.prototype.slice.call(element.classList, 0);
    };
    BrowserDomAdapter.prototype.addClass = function(element, className) {
      element.classList.add(className);
    };
    BrowserDomAdapter.prototype.removeClass = function(element, className) {
      element.classList.remove(className);
    };
    BrowserDomAdapter.prototype.hasClass = function(element, className) {
      return element.classList.contains(className);
    };
    BrowserDomAdapter.prototype.setStyle = function(element, styleName, styleValue) {
      element.style[styleName] = styleValue;
    };
    BrowserDomAdapter.prototype.removeStyle = function(element, stylename) {
      element.style[stylename] = null;
    };
    BrowserDomAdapter.prototype.getStyle = function(element, stylename) {
      return element.style[stylename];
    };
    BrowserDomAdapter.prototype.hasStyle = function(element, styleName, styleValue) {
      if (styleValue === void 0) {
        styleValue = null;
      }
      var value = this.getStyle(element, styleName) || '';
      return styleValue ? value == styleValue : value.length > 0;
    };
    BrowserDomAdapter.prototype.tagName = function(element) {
      return element.tagName;
    };
    BrowserDomAdapter.prototype.attributeMap = function(element) {
      var res = new Map();
      var elAttrs = element.attributes;
      for (var i = 0; i < elAttrs.length; i++) {
        var attrib = elAttrs[i];
        res.set(attrib.name, attrib.value);
      }
      return res;
    };
    BrowserDomAdapter.prototype.hasAttribute = function(element, attribute) {
      return element.hasAttribute(attribute);
    };
    BrowserDomAdapter.prototype.hasAttributeNS = function(element, ns, attribute) {
      return element.hasAttributeNS(ns, attribute);
    };
    BrowserDomAdapter.prototype.getAttribute = function(element, attribute) {
      return element.getAttribute(attribute);
    };
    BrowserDomAdapter.prototype.getAttributeNS = function(element, ns, name) {
      return element.getAttributeNS(ns, name);
    };
    BrowserDomAdapter.prototype.setAttribute = function(element, name, value) {
      element.setAttribute(name, value);
    };
    BrowserDomAdapter.prototype.setAttributeNS = function(element, ns, name, value) {
      element.setAttributeNS(ns, name, value);
    };
    BrowserDomAdapter.prototype.removeAttribute = function(element, attribute) {
      element.removeAttribute(attribute);
    };
    BrowserDomAdapter.prototype.removeAttributeNS = function(element, ns, name) {
      element.removeAttributeNS(ns, name);
    };
    BrowserDomAdapter.prototype.templateAwareRoot = function(el) {
      return this.isTemplateElement(el) ? this.content(el) : el;
    };
    BrowserDomAdapter.prototype.createHtmlDocument = function() {
      return document.implementation.createHTMLDocument('fakeTitle');
    };
    BrowserDomAdapter.prototype.defaultDoc = function() {
      return document;
    };
    BrowserDomAdapter.prototype.getBoundingClientRect = function(el) {
      try {
        return el.getBoundingClientRect();
      } catch (e) {
        return {
          top: 0,
          bottom: 0,
          left: 0,
          right: 0,
          width: 0,
          height: 0
        };
      }
    };
    BrowserDomAdapter.prototype.getTitle = function() {
      return document.title;
    };
    BrowserDomAdapter.prototype.setTitle = function(newTitle) {
      document.title = newTitle || '';
    };
    BrowserDomAdapter.prototype.elementMatches = function(n, selector) {
      var matches = false;
      if (n instanceof HTMLElement) {
        if (n.matches) {
          matches = n.matches(selector);
        } else if (n.msMatchesSelector) {
          matches = n.msMatchesSelector(selector);
        } else if (n.webkitMatchesSelector) {
          matches = n.webkitMatchesSelector(selector);
        }
      }
      return matches;
    };
    BrowserDomAdapter.prototype.isTemplateElement = function(el) {
      return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
    };
    BrowserDomAdapter.prototype.isTextNode = function(node) {
      return node.nodeType === Node.TEXT_NODE;
    };
    BrowserDomAdapter.prototype.isCommentNode = function(node) {
      return node.nodeType === Node.COMMENT_NODE;
    };
    BrowserDomAdapter.prototype.isElementNode = function(node) {
      return node.nodeType === Node.ELEMENT_NODE;
    };
    BrowserDomAdapter.prototype.hasShadowRoot = function(node) {
      return isPresent(node.shadowRoot) && node instanceof HTMLElement;
    };
    BrowserDomAdapter.prototype.isShadowRoot = function(node) {
      return node instanceof DocumentFragment;
    };
    BrowserDomAdapter.prototype.importIntoDoc = function(node) {
      var toImport = node;
      if (this.isTemplateElement(node)) {
        toImport = this.content(node);
      }
      return document.importNode(toImport, true);
    };
    BrowserDomAdapter.prototype.adoptNode = function(node) {
      return document.adoptNode(node);
    };
    BrowserDomAdapter.prototype.getHref = function(el) {
      return el.href;
    };
    BrowserDomAdapter.prototype.getEventKey = function(event) {
      var key = event.key;
      if (isBlank(key)) {
        key = event.keyIdentifier;
        if (isBlank(key)) {
          return 'Unidentified';
        }
        if (key.startsWith('U+')) {
          key = String.fromCharCode(parseInt(key.substring(2), 16));
          if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
            key = _chromeNumKeyPadMap[key];
          }
        }
      }
      if (_keyMap.hasOwnProperty(key)) {
        key = _keyMap[key];
      }
      return key;
    };
    BrowserDomAdapter.prototype.getGlobalEventTarget = function(target) {
      if (target == 'window') {
        return window;
      } else if (target == 'document') {
        return document;
      } else if (target == 'body') {
        return document.body;
      }
    };
    BrowserDomAdapter.prototype.getHistory = function() {
      return window.history;
    };
    BrowserDomAdapter.prototype.getLocation = function() {
      return window.location;
    };
    BrowserDomAdapter.prototype.getBaseHref = function() {
      var href = getBaseElementHref();
      if (isBlank(href)) {
        return null;
      }
      return relativePath(href);
    };
    BrowserDomAdapter.prototype.resetBaseElement = function() {
      baseElement = null;
    };
    BrowserDomAdapter.prototype.getUserAgent = function() {
      return window.navigator.userAgent;
    };
    BrowserDomAdapter.prototype.setData = function(element, name, value) {
      this.setAttribute(element, 'data-' + name, value);
    };
    BrowserDomAdapter.prototype.getData = function(element, name) {
      return this.getAttribute(element, 'data-' + name);
    };
    BrowserDomAdapter.prototype.getComputedStyle = function(element) {
      return getComputedStyle(element);
    };
    BrowserDomAdapter.prototype.setGlobalVar = function(path, value) {
      setValueOnPath(global$1, path, value);
    };
    BrowserDomAdapter.prototype.supportsWebAnimation = function() {
      return isFunction(Element.prototype['animate']);
    };
    BrowserDomAdapter.prototype.performanceNow = function() {
      if (isPresent(window.performance) && isPresent(window.performance.now)) {
        return window.performance.now();
      } else {
        return DateWrapper.toMillis(DateWrapper.now());
      }
    };
    BrowserDomAdapter.prototype.supportsCookies = function() {
      return true;
    };
    BrowserDomAdapter.prototype.getCookie = function(name) {
      return parseCookieValue(document.cookie, name);
    };
    BrowserDomAdapter.prototype.setCookie = function(name, value) {
      document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
    };
    return BrowserDomAdapter;
  }(GenericBrowserDomAdapter));
  var baseElement = null;
  function getBaseElementHref() {
    if (isBlank(baseElement)) {
      baseElement = document.querySelector('base');
      if (isBlank(baseElement)) {
        return null;
      }
    }
    return baseElement.getAttribute('href');
  }
  var urlParsingNode = null;
  function relativePath(url) {
    if (isBlank(urlParsingNode)) {
      urlParsingNode = document.createElement('a');
    }
    urlParsingNode.setAttribute('href', url);
    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname : '/' + urlParsingNode.pathname;
  }
  function parseCookieValue(cookieStr, name) {
    name = encodeURIComponent(name);
    for (var _i = 0,
        _a = cookieStr.split(';'); _i < _a.length; _i++) {
      var cookie = _a[_i];
      var eqIndex = cookie.indexOf('=');
      var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)],
          cookieName = _b[0],
          cookieValue = _b[1];
      if (cookieName.trim() === name) {
        return decodeURIComponent(cookieValue);
      }
    }
    return null;
  }
  function supportsState() {
    return !!window.history.pushState;
  }
  var __extends$2 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var BrowserPlatformLocation = (function(_super) {
    __extends$2(BrowserPlatformLocation, _super);
    function BrowserPlatformLocation() {
      _super.call(this);
      this._init();
    }
    BrowserPlatformLocation.prototype._init = function() {
      this._location = getDOM().getLocation();
      this._history = getDOM().getHistory();
    };
    Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
      get: function() {
        return this._location;
      },
      enumerable: true,
      configurable: true
    });
    BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function() {
      return getDOM().getBaseHref();
    };
    BrowserPlatformLocation.prototype.onPopState = function(fn) {
      getDOM().getGlobalEventTarget('window').addEventListener('popstate', fn, false);
    };
    BrowserPlatformLocation.prototype.onHashChange = function(fn) {
      getDOM().getGlobalEventTarget('window').addEventListener('hashchange', fn, false);
    };
    Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
      get: function() {
        return this._location.pathname;
      },
      set: function(newPath) {
        this._location.pathname = newPath;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
      get: function() {
        return this._location.search;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
      get: function() {
        return this._location.hash;
      },
      enumerable: true,
      configurable: true
    });
    BrowserPlatformLocation.prototype.pushState = function(state, title, url) {
      if (supportsState()) {
        this._history.pushState(state, title, url);
      } else {
        this._location.hash = url;
      }
    };
    BrowserPlatformLocation.prototype.replaceState = function(state, title, url) {
      if (supportsState()) {
        this._history.replaceState(state, title, url);
      } else {
        this._location.hash = url;
      }
    };
    BrowserPlatformLocation.prototype.forward = function() {
      this._history.forward();
    };
    BrowserPlatformLocation.prototype.back = function() {
      this._history.back();
    };
    BrowserPlatformLocation.decorators = [{type: _angular_core.Injectable}];
    BrowserPlatformLocation.ctorParameters = [];
    return BrowserPlatformLocation;
  }(_angular_common.PlatformLocation));
  var BrowserGetTestability = (function() {
    function BrowserGetTestability() {}
    BrowserGetTestability.init = function() {
      _angular_core.setTestabilityGetter(new BrowserGetTestability());
    };
    BrowserGetTestability.prototype.addToWindow = function(registry) {
      global$1.getAngularTestability = function(elem, findInAncestors) {
        if (findInAncestors === void 0) {
          findInAncestors = true;
        }
        var testability = registry.findTestabilityInTree(elem, findInAncestors);
        if (testability == null) {
          throw new Error('Could not find testability for element.');
        }
        return testability;
      };
      global$1.getAllAngularTestabilities = function() {
        return registry.getAllTestabilities();
      };
      global$1.getAllAngularRootElements = function() {
        return registry.getAllRootElements();
      };
      var whenAllStable = function(callback) {
        var testabilities = global$1.getAllAngularTestabilities();
        var count = testabilities.length;
        var didWork = false;
        var decrement = function(didWork_) {
          didWork = didWork || didWork_;
          count--;
          if (count == 0) {
            callback(didWork);
          }
        };
        testabilities.forEach(function(testability) {
          testability.whenStable(decrement);
        });
      };
      if (!global$1['frameworkStabilizers']) {
        global$1['frameworkStabilizers'] = ListWrapper.createGrowableSize(0);
      }
      global$1['frameworkStabilizers'].push(whenAllStable);
    };
    BrowserGetTestability.prototype.findTestabilityInTree = function(registry, elem, findInAncestors) {
      if (elem == null) {
        return null;
      }
      var t = registry.getTestability(elem);
      if (isPresent(t)) {
        return t;
      } else if (!findInAncestors) {
        return null;
      }
      if (getDOM().isShadowRoot(elem)) {
        return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
      }
      return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
    };
    return BrowserGetTestability;
  }());
  var DOCUMENT = new _angular_core.OpaqueToken('DocumentToken');
  var EVENT_MANAGER_PLUGINS = new _angular_core.OpaqueToken('EventManagerPlugins');
  var EventManager = (function() {
    function EventManager(plugins, _zone) {
      var _this = this;
      this._zone = _zone;
      plugins.forEach(function(p) {
        return p.manager = _this;
      });
      this._plugins = ListWrapper.reversed(plugins);
    }
    EventManager.prototype.addEventListener = function(element, eventName, handler) {
      var plugin = this._findPluginFor(eventName);
      return plugin.addEventListener(element, eventName, handler);
    };
    EventManager.prototype.addGlobalEventListener = function(target, eventName, handler) {
      var plugin = this._findPluginFor(eventName);
      return plugin.addGlobalEventListener(target, eventName, handler);
    };
    EventManager.prototype.getZone = function() {
      return this._zone;
    };
    EventManager.prototype._findPluginFor = function(eventName) {
      var plugins = this._plugins;
      for (var i = 0; i < plugins.length; i++) {
        var plugin = plugins[i];
        if (plugin.supports(eventName)) {
          return plugin;
        }
      }
      throw new Error("No event manager plugin found for event " + eventName);
    };
    EventManager.decorators = [{type: _angular_core.Injectable}];
    EventManager.ctorParameters = [{
      type: Array,
      decorators: [{
        type: _angular_core.Inject,
        args: [EVENT_MANAGER_PLUGINS]
      }]
    }, {type: _angular_core.NgZone}];
    return EventManager;
  }());
  var EventManagerPlugin = (function() {
    function EventManagerPlugin() {}
    EventManagerPlugin.prototype.supports = function(eventName) {
      return false;
    };
    EventManagerPlugin.prototype.addEventListener = function(element, eventName, handler) {
      throw 'not implemented';
    };
    EventManagerPlugin.prototype.addGlobalEventListener = function(element, eventName, handler) {
      throw 'not implemented';
    };
    return EventManagerPlugin;
  }());
  var __extends$4 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var SharedStylesHost = (function() {
    function SharedStylesHost() {
      this._styles = [];
      this._stylesSet = new Set();
    }
    SharedStylesHost.prototype.addStyles = function(styles) {
      var _this = this;
      var additions = [];
      styles.forEach(function(style) {
        if (!_this._stylesSet.has(style)) {
          _this._stylesSet.add(style);
          _this._styles.push(style);
          additions.push(style);
        }
      });
      this.onStylesAdded(additions);
    };
    SharedStylesHost.prototype.onStylesAdded = function(additions) {};
    SharedStylesHost.prototype.getAllStyles = function() {
      return this._styles;
    };
    SharedStylesHost.decorators = [{type: _angular_core.Injectable}];
    SharedStylesHost.ctorParameters = [];
    return SharedStylesHost;
  }());
  var DomSharedStylesHost = (function(_super) {
    __extends$4(DomSharedStylesHost, _super);
    function DomSharedStylesHost(doc) {
      _super.call(this);
      this._hostNodes = new Set();
      this._hostNodes.add(doc.head);
    }
    DomSharedStylesHost.prototype._addStylesToHost = function(styles, host) {
      for (var i = 0; i < styles.length; i++) {
        var style = styles[i];
        getDOM().appendChild(host, getDOM().createStyleElement(style));
      }
    };
    DomSharedStylesHost.prototype.addHost = function(hostNode) {
      this._addStylesToHost(this._styles, hostNode);
      this._hostNodes.add(hostNode);
    };
    DomSharedStylesHost.prototype.removeHost = function(hostNode) {
      this._hostNodes.delete(hostNode);
    };
    DomSharedStylesHost.prototype.onStylesAdded = function(additions) {
      var _this = this;
      this._hostNodes.forEach(function(hostNode) {
        _this._addStylesToHost(additions, hostNode);
      });
    };
    DomSharedStylesHost.decorators = [{type: _angular_core.Injectable}];
    DomSharedStylesHost.ctorParameters = [{
      type: undefined,
      decorators: [{
        type: _angular_core.Inject,
        args: [DOCUMENT]
      }]
    }];
    return DomSharedStylesHost;
  }(SharedStylesHost));
  var __extends$3 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var NAMESPACE_URIS = {
    'xlink': 'http://www.w3.org/1999/xlink',
    'svg': 'http://www.w3.org/2000/svg',
    'xhtml': 'http://www.w3.org/1999/xhtml'
  };
  var TEMPLATE_COMMENT_TEXT = 'template bindings={}';
  var TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/;
  var DomRootRenderer = (function() {
    function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver) {
      this.document = document;
      this.eventManager = eventManager;
      this.sharedStylesHost = sharedStylesHost;
      this.animationDriver = animationDriver;
      this.registeredComponents = new Map();
    }
    DomRootRenderer.prototype.renderComponent = function(componentProto) {
      var renderer = this.registeredComponents.get(componentProto.id);
      if (isBlank(renderer)) {
        renderer = new DomRenderer(this, componentProto, this.animationDriver);
        this.registeredComponents.set(componentProto.id, renderer);
      }
      return renderer;
    };
    return DomRootRenderer;
  }());
  var DomRootRenderer_ = (function(_super) {
    __extends$3(DomRootRenderer_, _super);
    function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver) {
      _super.call(this, _document, _eventManager, sharedStylesHost, animationDriver);
    }
    DomRootRenderer_.decorators = [{type: _angular_core.Injectable}];
    DomRootRenderer_.ctorParameters = [{
      type: undefined,
      decorators: [{
        type: _angular_core.Inject,
        args: [DOCUMENT]
      }]
    }, {type: EventManager}, {type: DomSharedStylesHost}, {type: AnimationDriver}];
    return DomRootRenderer_;
  }(DomRootRenderer));
  var DomRenderer = (function() {
    function DomRenderer(_rootRenderer, componentProto, _animationDriver) {
      this._rootRenderer = _rootRenderer;
      this.componentProto = componentProto;
      this._animationDriver = _animationDriver;
      this._styles = _flattenStyles(componentProto.id, componentProto.styles, []);
      if (componentProto.encapsulation !== _angular_core.ViewEncapsulation.Native) {
        this._rootRenderer.sharedStylesHost.addStyles(this._styles);
      }
      if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Emulated) {
        this._contentAttr = _shimContentAttribute(componentProto.id);
        this._hostAttr = _shimHostAttribute(componentProto.id);
      } else {
        this._contentAttr = null;
        this._hostAttr = null;
      }
    }
    DomRenderer.prototype.selectRootElement = function(selectorOrNode, debugInfo) {
      var el;
      if (isString(selectorOrNode)) {
        el = getDOM().querySelector(this._rootRenderer.document, selectorOrNode);
        if (isBlank(el)) {
          throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
        }
      } else {
        el = selectorOrNode;
      }
      getDOM().clearNodes(el);
      return el;
    };
    DomRenderer.prototype.createElement = function(parent, name, debugInfo) {
      var nsAndName = splitNamespace(name);
      var el = isPresent(nsAndName[0]) ? getDOM().createElementNS(NAMESPACE_URIS[nsAndName[0]], nsAndName[1]) : getDOM().createElement(nsAndName[1]);
      if (isPresent(this._contentAttr)) {
        getDOM().setAttribute(el, this._contentAttr, '');
      }
      if (isPresent(parent)) {
        getDOM().appendChild(parent, el);
      }
      return el;
    };
    DomRenderer.prototype.createViewRoot = function(hostElement) {
      var nodesParent;
      if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Native) {
        nodesParent = getDOM().createShadowRoot(hostElement);
        this._rootRenderer.sharedStylesHost.addHost(nodesParent);
        for (var i = 0; i < this._styles.length; i++) {
          getDOM().appendChild(nodesParent, getDOM().createStyleElement(this._styles[i]));
        }
      } else {
        if (isPresent(this._hostAttr)) {
          getDOM().setAttribute(hostElement, this._hostAttr, '');
        }
        nodesParent = hostElement;
      }
      return nodesParent;
    };
    DomRenderer.prototype.createTemplateAnchor = function(parentElement, debugInfo) {
      var comment = getDOM().createComment(TEMPLATE_COMMENT_TEXT);
      if (isPresent(parentElement)) {
        getDOM().appendChild(parentElement, comment);
      }
      return comment;
    };
    DomRenderer.prototype.createText = function(parentElement, value, debugInfo) {
      var node = getDOM().createTextNode(value);
      if (isPresent(parentElement)) {
        getDOM().appendChild(parentElement, node);
      }
      return node;
    };
    DomRenderer.prototype.projectNodes = function(parentElement, nodes) {
      if (isBlank(parentElement))
        return;
      appendNodes(parentElement, nodes);
    };
    DomRenderer.prototype.attachViewAfter = function(node, viewRootNodes) {
      moveNodesAfterSibling(node, viewRootNodes);
    };
    DomRenderer.prototype.detachView = function(viewRootNodes) {
      for (var i = 0; i < viewRootNodes.length; i++) {
        getDOM().remove(viewRootNodes[i]);
      }
    };
    DomRenderer.prototype.destroyView = function(hostElement, viewAllNodes) {
      if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Native && isPresent(hostElement)) {
        this._rootRenderer.sharedStylesHost.removeHost(getDOM().getShadowRoot(hostElement));
      }
    };
    DomRenderer.prototype.listen = function(renderElement, name, callback) {
      return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
    };
    DomRenderer.prototype.listenGlobal = function(target, name, callback) {
      return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
    };
    DomRenderer.prototype.setElementProperty = function(renderElement, propertyName, propertyValue) {
      getDOM().setProperty(renderElement, propertyName, propertyValue);
    };
    DomRenderer.prototype.setElementAttribute = function(renderElement, attributeName, attributeValue) {
      var attrNs;
      var nsAndName = splitNamespace(attributeName);
      if (isPresent(nsAndName[0])) {
        attributeName = nsAndName[0] + ':' + nsAndName[1];
        attrNs = NAMESPACE_URIS[nsAndName[0]];
      }
      if (isPresent(attributeValue)) {
        if (isPresent(attrNs)) {
          getDOM().setAttributeNS(renderElement, attrNs, attributeName, attributeValue);
        } else {
          getDOM().setAttribute(renderElement, attributeName, attributeValue);
        }
      } else {
        if (isPresent(attrNs)) {
          getDOM().removeAttributeNS(renderElement, attrNs, nsAndName[1]);
        } else {
          getDOM().removeAttribute(renderElement, attributeName);
        }
      }
    };
    DomRenderer.prototype.setBindingDebugInfo = function(renderElement, propertyName, propertyValue) {
      var dashCasedPropertyName = camelCaseToDashCase(propertyName);
      if (getDOM().isCommentNode(renderElement)) {
        var existingBindings = StringWrapper.replaceAll(getDOM().getText(renderElement), /\n/g, '').match(TEMPLATE_BINDINGS_EXP);
        var parsedBindings = Json.parse(existingBindings[1]);
        parsedBindings[dashCasedPropertyName] = propertyValue;
        getDOM().setText(renderElement, StringWrapper.replace(TEMPLATE_COMMENT_TEXT, '{}', Json.stringify(parsedBindings)));
      } else {
        this.setElementAttribute(renderElement, propertyName, propertyValue);
      }
    };
    DomRenderer.prototype.setElementClass = function(renderElement, className, isAdd) {
      if (isAdd) {
        getDOM().addClass(renderElement, className);
      } else {
        getDOM().removeClass(renderElement, className);
      }
    };
    DomRenderer.prototype.setElementStyle = function(renderElement, styleName, styleValue) {
      if (isPresent(styleValue)) {
        getDOM().setStyle(renderElement, styleName, stringify(styleValue));
      } else {
        getDOM().removeStyle(renderElement, styleName);
      }
    };
    DomRenderer.prototype.invokeElementMethod = function(renderElement, methodName, args) {
      getDOM().invoke(renderElement, methodName, args);
    };
    DomRenderer.prototype.setText = function(renderNode, text) {
      getDOM().setText(renderNode, text);
    };
    DomRenderer.prototype.animate = function(element, startingStyles, keyframes, duration, delay, easing) {
      return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing);
    };
    return DomRenderer;
  }());
  function moveNodesAfterSibling(sibling, nodes) {
    var parent = getDOM().parentElement(sibling);
    if (nodes.length > 0 && isPresent(parent)) {
      var nextSibling = getDOM().nextSibling(sibling);
      if (isPresent(nextSibling)) {
        for (var i = 0; i < nodes.length; i++) {
          getDOM().insertBefore(nextSibling, nodes[i]);
        }
      } else {
        for (var i = 0; i < nodes.length; i++) {
          getDOM().appendChild(parent, nodes[i]);
        }
      }
    }
  }
  function appendNodes(parent, nodes) {
    for (var i = 0; i < nodes.length; i++) {
      getDOM().appendChild(parent, nodes[i]);
    }
  }
  function decoratePreventDefault(eventHandler) {
    return function(event) {
      var allowDefaultBehavior = eventHandler(event);
      if (allowDefaultBehavior === false) {
        getDOM().preventDefault(event);
      }
    };
  }
  var COMPONENT_REGEX = /%COMP%/g;
  var COMPONENT_VARIABLE = '%COMP%';
  var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
  var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
  function _shimContentAttribute(componentShortId) {
    return StringWrapper.replaceAll(CONTENT_ATTR, COMPONENT_REGEX, componentShortId);
  }
  function _shimHostAttribute(componentShortId) {
    return StringWrapper.replaceAll(HOST_ATTR, COMPONENT_REGEX, componentShortId);
  }
  function _flattenStyles(compId, styles, target) {
    for (var i = 0; i < styles.length; i++) {
      var style = styles[i];
      if (isArray(style)) {
        _flattenStyles(compId, style, target);
      } else {
        style = StringWrapper.replaceAll(style, COMPONENT_REGEX, compId);
        target.push(style);
      }
    }
    return target;
  }
  var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
  function splitNamespace(name) {
    if (name[0] != ':') {
      return [null, name];
    }
    var match = name.match(NS_PREFIX_RE);
    return [match[1], match[2]];
  }
  var CORE_TOKENS = {
    'ApplicationRef': _angular_core.ApplicationRef,
    'NgZone': _angular_core.NgZone
  };
  var INSPECT_GLOBAL_NAME = 'ng.probe';
  var CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
  function inspectNativeElement(element) {
    return _angular_core.getDebugNode(element);
  }
  var NgProbeToken = (function() {
    function NgProbeToken(name, token) {
      this.name = name;
      this.token = token;
    }
    return NgProbeToken;
  }());
  function _createConditionalRootRenderer(rootRenderer, extraTokens) {
    if (_angular_core.isDevMode()) {
      return _createRootRenderer(rootRenderer, extraTokens);
    }
    return rootRenderer;
  }
  function _createRootRenderer(rootRenderer, extraTokens) {
    getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
    getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, StringMapWrapper.merge(CORE_TOKENS, _ngProbeTokensToMap(extraTokens || [])));
    return new DebugDomRootRenderer(rootRenderer);
  }
  function _ngProbeTokensToMap(tokens) {
    return tokens.reduce(function(prev, t) {
      return (prev[t.name] = t.token, prev);
    }, {});
  }
  var ELEMENT_PROBE_PROVIDERS = [{
    provide: _angular_core.RootRenderer,
    useFactory: _createConditionalRootRenderer,
    deps: [DomRootRenderer, [NgProbeToken, new _angular_core.Optional()]]
  }];
  var ELEMENT_PROBE_PROVIDERS_PROD_MODE = [{
    provide: _angular_core.RootRenderer,
    useFactory: _createRootRenderer,
    deps: [DomRootRenderer, [NgProbeToken, new _angular_core.Optional()]]
  }];
  var __extends$5 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var DomEventsPlugin = (function(_super) {
    __extends$5(DomEventsPlugin, _super);
    function DomEventsPlugin() {
      _super.apply(this, arguments);
    }
    DomEventsPlugin.prototype.supports = function(eventName) {
      return true;
    };
    DomEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
      var zone = this.manager.getZone();
      var outsideHandler = function(event) {
        return zone.runGuarded(function() {
          return handler(event);
        });
      };
      return this.manager.getZone().runOutsideAngular(function() {
        return getDOM().onAndCancel(element, eventName, outsideHandler);
      });
    };
    DomEventsPlugin.prototype.addGlobalEventListener = function(target, eventName, handler) {
      var element = getDOM().getGlobalEventTarget(target);
      var zone = this.manager.getZone();
      var outsideHandler = function(event) {
        return zone.runGuarded(function() {
          return handler(event);
        });
      };
      return this.manager.getZone().runOutsideAngular(function() {
        return getDOM().onAndCancel(element, eventName, outsideHandler);
      });
    };
    DomEventsPlugin.decorators = [{type: _angular_core.Injectable}];
    DomEventsPlugin.ctorParameters = [];
    return DomEventsPlugin;
  }(EventManagerPlugin));
  var __extends$7 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var _eventNames = {
    'pan': true,
    'panstart': true,
    'panmove': true,
    'panend': true,
    'pancancel': true,
    'panleft': true,
    'panright': true,
    'panup': true,
    'pandown': true,
    'pinch': true,
    'pinchstart': true,
    'pinchmove': true,
    'pinchend': true,
    'pinchcancel': true,
    'pinchin': true,
    'pinchout': true,
    'press': true,
    'pressup': true,
    'rotate': true,
    'rotatestart': true,
    'rotatemove': true,
    'rotateend': true,
    'rotatecancel': true,
    'swipe': true,
    'swipeleft': true,
    'swiperight': true,
    'swipeup': true,
    'swipedown': true,
    'tap': true
  };
  var HammerGesturesPluginCommon = (function(_super) {
    __extends$7(HammerGesturesPluginCommon, _super);
    function HammerGesturesPluginCommon() {
      _super.call(this);
    }
    HammerGesturesPluginCommon.prototype.supports = function(eventName) {
      eventName = eventName.toLowerCase();
      return StringMapWrapper.contains(_eventNames, eventName);
    };
    return HammerGesturesPluginCommon;
  }(EventManagerPlugin));
  var __extends$6 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var HAMMER_GESTURE_CONFIG = new _angular_core.OpaqueToken('HammerGestureConfig');
  var HammerGestureConfig = (function() {
    function HammerGestureConfig() {
      this.events = [];
      this.overrides = {};
    }
    HammerGestureConfig.prototype.buildHammer = function(element) {
      var mc = new Hammer(element);
      mc.get('pinch').set({enable: true});
      mc.get('rotate').set({enable: true});
      for (var eventName in this.overrides) {
        mc.get(eventName).set(this.overrides[eventName]);
      }
      return mc;
    };
    HammerGestureConfig.decorators = [{type: _angular_core.Injectable}];
    HammerGestureConfig.ctorParameters = [];
    return HammerGestureConfig;
  }());
  var HammerGesturesPlugin = (function(_super) {
    __extends$6(HammerGesturesPlugin, _super);
    function HammerGesturesPlugin(_config) {
      _super.call(this);
      this._config = _config;
    }
    HammerGesturesPlugin.prototype.supports = function(eventName) {
      if (!_super.prototype.supports.call(this, eventName) && !this.isCustomEvent(eventName))
        return false;
      if (!isPresent(window['Hammer'])) {
        throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
      }
      return true;
    };
    HammerGesturesPlugin.prototype.addEventListener = function(element, eventName, handler) {
      var _this = this;
      var zone = this.manager.getZone();
      eventName = eventName.toLowerCase();
      return zone.runOutsideAngular(function() {
        var mc = _this._config.buildHammer(element);
        var callback = function(eventObj) {
          zone.runGuarded(function() {
            handler(eventObj);
          });
        };
        mc.on(eventName, callback);
        return function() {
          mc.off(eventName, callback);
        };
      });
    };
    HammerGesturesPlugin.prototype.isCustomEvent = function(eventName) {
      return this._config.events.indexOf(eventName) > -1;
    };
    HammerGesturesPlugin.decorators = [{type: _angular_core.Injectable}];
    HammerGesturesPlugin.ctorParameters = [{
      type: HammerGestureConfig,
      decorators: [{
        type: _angular_core.Inject,
        args: [HAMMER_GESTURE_CONFIG]
      }]
    }];
    return HammerGesturesPlugin;
  }(HammerGesturesPluginCommon));
  var __extends$8 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var modifierKeys = ['alt', 'control', 'meta', 'shift'];
  var modifierKeyGetters = {
    'alt': function(event) {
      return event.altKey;
    },
    'control': function(event) {
      return event.ctrlKey;
    },
    'meta': function(event) {
      return event.metaKey;
    },
    'shift': function(event) {
      return event.shiftKey;
    }
  };
  var KeyEventsPlugin = (function(_super) {
    __extends$8(KeyEventsPlugin, _super);
    function KeyEventsPlugin() {
      _super.call(this);
    }
    KeyEventsPlugin.prototype.supports = function(eventName) {
      return isPresent(KeyEventsPlugin.parseEventName(eventName));
    };
    KeyEventsPlugin.prototype.addEventListener = function(element, eventName, handler) {
      var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
      var outsideHandler = KeyEventsPlugin.eventCallback(element, StringMapWrapper.get(parsedEvent, 'fullKey'), handler, this.manager.getZone());
      return this.manager.getZone().runOutsideAngular(function() {
        return getDOM().onAndCancel(element, StringMapWrapper.get(parsedEvent, 'domEventName'), outsideHandler);
      });
    };
    KeyEventsPlugin.parseEventName = function(eventName) {
      var parts = eventName.toLowerCase().split('.');
      var domEventName = parts.shift();
      if ((parts.length === 0) || !(StringWrapper.equals(domEventName, 'keydown') || StringWrapper.equals(domEventName, 'keyup'))) {
        return null;
      }
      var key = KeyEventsPlugin._normalizeKey(parts.pop());
      var fullKey = '';
      modifierKeys.forEach(function(modifierName) {
        if (ListWrapper.contains(parts, modifierName)) {
          ListWrapper.remove(parts, modifierName);
          fullKey += modifierName + '.';
        }
      });
      fullKey += key;
      if (parts.length != 0 || key.length === 0) {
        return null;
      }
      var result = StringMapWrapper.create();
      StringMapWrapper.set(result, 'domEventName', domEventName);
      StringMapWrapper.set(result, 'fullKey', fullKey);
      return result;
    };
    KeyEventsPlugin.getEventFullKey = function(event) {
      var fullKey = '';
      var key = getDOM().getEventKey(event);
      key = key.toLowerCase();
      if (StringWrapper.equals(key, ' ')) {
        key = 'space';
      } else if (StringWrapper.equals(key, '.')) {
        key = 'dot';
      }
      modifierKeys.forEach(function(modifierName) {
        if (modifierName != key) {
          var modifierGetter = StringMapWrapper.get(modifierKeyGetters, modifierName);
          if (modifierGetter(event)) {
            fullKey += modifierName + '.';
          }
        }
      });
      fullKey += key;
      return fullKey;
    };
    KeyEventsPlugin.eventCallback = function(element, fullKey, handler, zone) {
      return function(event) {
        if (StringWrapper.equals(KeyEventsPlugin.getEventFullKey(event), fullKey)) {
          zone.runGuarded(function() {
            return handler(event);
          });
        }
      };
    };
    KeyEventsPlugin._normalizeKey = function(keyName) {
      switch (keyName) {
        case 'esc':
          return 'escape';
        default:
          return keyName;
      }
    };
    KeyEventsPlugin.decorators = [{type: _angular_core.Injectable}];
    KeyEventsPlugin.ctorParameters = [];
    return KeyEventsPlugin;
  }(EventManagerPlugin));
  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
  var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
  function sanitizeUrl(url) {
    url = String(url);
    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
      return url;
    if (_angular_core.isDevMode()) {
      getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
    }
    return 'unsafe:' + url;
  }
  function sanitizeSrcset(srcset) {
    srcset = String(srcset);
    return srcset.split(',').map(function(srcset) {
      return sanitizeUrl(srcset.trim());
    }).join(', ');
  }
  var inertElement = null;
  var DOM = null;
  function getInertElement() {
    if (inertElement)
      return inertElement;
    DOM = getDOM();
    var templateEl = DOM.createElement('template');
    if ('content' in templateEl)
      return templateEl;
    var doc = DOM.createHtmlDocument();
    inertElement = DOM.querySelector(doc, 'body');
    if (inertElement == null) {
      var html = DOM.createElement('html', doc);
      inertElement = DOM.createElement('body', doc);
      DOM.appendChild(html, inertElement);
      DOM.appendChild(doc, html);
    }
    return inertElement;
  }
  function tagSet(tags) {
    var res = {};
    for (var _i = 0,
        _a = tags.split(','); _i < _a.length; _i++) {
      var t = _a[_i];
      res[t] = true;
    }
    return res;
  }
  function merge() {
    var sets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      sets[_i - 0] = arguments[_i];
    }
    var res = {};
    for (var _a = 0,
        sets_1 = sets; _a < sets_1.length; _a++) {
      var s = sets_1[_a];
      for (var v in s) {
        if (s.hasOwnProperty(v))
          res[v] = true;
      }
    }
    return res;
  }
  var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
  var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
  var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
  var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
  var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
  var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
  var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
  var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
  var SRCSET_ATTRS = tagSet('srcset');
  var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width');
  var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
  var SanitizingHtmlSerializer = (function() {
    function SanitizingHtmlSerializer() {
      this.sanitizedSomething = false;
      this.buf = [];
    }
    SanitizingHtmlSerializer.prototype.sanitizeChildren = function(el) {
      var current = el.firstChild;
      while (current) {
        if (DOM.isElementNode(current)) {
          this.startElement(current);
        } else if (DOM.isTextNode(current)) {
          this.chars(DOM.nodeValue(current));
        } else {
          this.sanitizedSomething = true;
        }
        if (DOM.firstChild(current)) {
          current = DOM.firstChild(current);
          continue;
        }
        while (current) {
          if (DOM.isElementNode(current)) {
            this.endElement(current);
          }
          if (DOM.nextSibling(current)) {
            current = DOM.nextSibling(current);
            break;
          }
          current = DOM.parentElement(current);
        }
      }
      return this.buf.join('');
    };
    SanitizingHtmlSerializer.prototype.startElement = function(element) {
      var _this = this;
      var tagName = DOM.nodeName(element).toLowerCase();
      if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
        this.sanitizedSomething = true;
        return;
      }
      this.buf.push('<');
      this.buf.push(tagName);
      DOM.attributeMap(element).forEach(function(value, attrName) {
        var lower = attrName.toLowerCase();
        if (!VALID_ATTRS.hasOwnProperty(lower)) {
          _this.sanitizedSomething = true;
          return;
        }
        if (URI_ATTRS[lower])
          value = sanitizeUrl(value);
        if (SRCSET_ATTRS[lower])
          value = sanitizeSrcset(value);
        _this.buf.push(' ');
        _this.buf.push(attrName);
        _this.buf.push('="');
        _this.buf.push(encodeEntities(value));
        _this.buf.push('"');
      });
      this.buf.push('>');
    };
    SanitizingHtmlSerializer.prototype.endElement = function(current) {
      var tagName = DOM.nodeName(current).toLowerCase();
      if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
        this.buf.push('</');
        this.buf.push(tagName);
        this.buf.push('>');
      }
    };
    SanitizingHtmlSerializer.prototype.chars = function(chars) {
      this.buf.push(encodeEntities(chars));
    };
    return SanitizingHtmlSerializer;
  }());
  var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
  var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
  function encodeEntities(value) {
    return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function(match) {
      var hi = match.charCodeAt(0);
      var low = match.charCodeAt(1);
      return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
    }).replace(NON_ALPHANUMERIC_REGEXP, function(match) {
      return '&#' + match.charCodeAt(0) + ';';
    }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }
  function stripCustomNsAttrs(el) {
    DOM.attributeMap(el).forEach(function(_, attrName) {
      if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
        DOM.removeAttribute(el, attrName);
      }
    });
    for (var _i = 0,
        _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
      var n = _a[_i];
      if (DOM.isElementNode(n))
        stripCustomNsAttrs(n);
    }
  }
  function sanitizeHtml(unsafeHtmlInput) {
    try {
      var containerEl = getInertElement();
      var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
      var mXSSAttempts = 5;
      var parsedHtml = unsafeHtml;
      do {
        if (mXSSAttempts === 0) {
          throw new Error('Failed to sanitize html because the input is unstable');
        }
        mXSSAttempts--;
        unsafeHtml = parsedHtml;
        DOM.setInnerHTML(containerEl, unsafeHtml);
        if (DOM.defaultDoc().documentMode) {
          stripCustomNsAttrs(containerEl);
        }
        parsedHtml = DOM.getInnerHTML(containerEl);
      } while (unsafeHtml !== parsedHtml);
      var sanitizer = new SanitizingHtmlSerializer();
      var safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
      var parent_1 = DOM.getTemplateContent(containerEl) || containerEl;
      for (var _i = 0,
          _a = DOM.childNodesAsList(parent_1); _i < _a.length; _i++) {
        var child = _a[_i];
        DOM.removeChild(parent_1, child);
      }
      if (_angular_core.isDevMode() && sanitizer.sanitizedSomething) {
        DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
      }
      return safeHtml;
    } catch (e) {
      inertElement = null;
      throw e;
    }
  }
  var VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
  var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
  var COLOR_FNS = '(?:rgb|hsl)a?';
  var FN_ARGS = '\\([-0-9.%, a-zA-Z]+\\)';
  var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + ")" + FN_ARGS + ")$", 'g');
  var URL_RE = /^url\(([^)]+)\)$/;
  function hasBalancedQuotes(value) {
    var outsideSingle = true;
    var outsideDouble = true;
    for (var i = 0; i < value.length; i++) {
      var c = value.charAt(i);
      if (c === '\'' && outsideDouble) {
        outsideSingle = !outsideSingle;
      } else if (c === '"' && outsideSingle) {
        outsideDouble = !outsideDouble;
      }
    }
    return outsideSingle && outsideDouble;
  }
  function sanitizeStyle(value) {
    value = String(value).trim();
    if (!value)
      return '';
    var urlMatch = value.match(URL_RE);
    if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) || value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
      return value;
    }
    if (_angular_core.isDevMode()) {
      getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
    }
    return 'unsafe';
  }
  var __extends$9 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var DomSanitizer = (function() {
    function DomSanitizer() {}
    return DomSanitizer;
  }());
  var DomSanitizerImpl = (function(_super) {
    __extends$9(DomSanitizerImpl, _super);
    function DomSanitizerImpl() {
      _super.apply(this, arguments);
    }
    DomSanitizerImpl.prototype.sanitize = function(ctx, value) {
      if (value == null)
        return null;
      switch (ctx) {
        case _angular_core.SecurityContext.NONE:
          return value;
        case _angular_core.SecurityContext.HTML:
          if (value instanceof SafeHtmlImpl)
            return value.changingThisBreaksApplicationSecurity;
          this.checkNotSafeValue(value, 'HTML');
          return sanitizeHtml(String(value));
        case _angular_core.SecurityContext.STYLE:
          if (value instanceof SafeStyleImpl)
            return value.changingThisBreaksApplicationSecurity;
          this.checkNotSafeValue(value, 'Style');
          return sanitizeStyle(value);
        case _angular_core.SecurityContext.SCRIPT:
          if (value instanceof SafeScriptImpl)
            return value.changingThisBreaksApplicationSecurity;
          this.checkNotSafeValue(value, 'Script');
          throw new Error('unsafe value used in a script context');
        case _angular_core.SecurityContext.URL:
          if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
            return value.changingThisBreaksApplicationSecurity;
          }
          this.checkNotSafeValue(value, 'URL');
          return sanitizeUrl(String(value));
        case _angular_core.SecurityContext.RESOURCE_URL:
          if (value instanceof SafeResourceUrlImpl) {
            return value.changingThisBreaksApplicationSecurity;
          }
          this.checkNotSafeValue(value, 'ResourceURL');
          throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
        default:
          throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
      }
    };
    DomSanitizerImpl.prototype.checkNotSafeValue = function(value, expectedType) {
      if (value instanceof SafeValueImpl) {
        throw new Error(("Required a safe " + expectedType + ", got a " + value.getTypeName() + " ") + "(see http://g.co/ng/security#xss)");
      }
    };
    DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function(value) {
      return new SafeHtmlImpl(value);
    };
    DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function(value) {
      return new SafeStyleImpl(value);
    };
    DomSanitizerImpl.prototype.bypassSecurityTrustScript = function(value) {
      return new SafeScriptImpl(value);
    };
    DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function(value) {
      return new SafeUrlImpl(value);
    };
    DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function(value) {
      return new SafeResourceUrlImpl(value);
    };
    DomSanitizerImpl.decorators = [{type: _angular_core.Injectable}];
    DomSanitizerImpl.ctorParameters = [];
    return DomSanitizerImpl;
  }(DomSanitizer));
  var SafeValueImpl = (function() {
    function SafeValueImpl(changingThisBreaksApplicationSecurity) {
      this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
    }
    SafeValueImpl.prototype.toString = function() {
      return ("SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity) + " (see http://g.co/ng/security#xss)";
    };
    return SafeValueImpl;
  }());
  var SafeHtmlImpl = (function(_super) {
    __extends$9(SafeHtmlImpl, _super);
    function SafeHtmlImpl() {
      _super.apply(this, arguments);
    }
    SafeHtmlImpl.prototype.getTypeName = function() {
      return 'HTML';
    };
    return SafeHtmlImpl;
  }(SafeValueImpl));
  var SafeStyleImpl = (function(_super) {
    __extends$9(SafeStyleImpl, _super);
    function SafeStyleImpl() {
      _super.apply(this, arguments);
    }
    SafeStyleImpl.prototype.getTypeName = function() {
      return 'Style';
    };
    return SafeStyleImpl;
  }(SafeValueImpl));
  var SafeScriptImpl = (function(_super) {
    __extends$9(SafeScriptImpl, _super);
    function SafeScriptImpl() {
      _super.apply(this, arguments);
    }
    SafeScriptImpl.prototype.getTypeName = function() {
      return 'Script';
    };
    return SafeScriptImpl;
  }(SafeValueImpl));
  var SafeUrlImpl = (function(_super) {
    __extends$9(SafeUrlImpl, _super);
    function SafeUrlImpl() {
      _super.apply(this, arguments);
    }
    SafeUrlImpl.prototype.getTypeName = function() {
      return 'URL';
    };
    return SafeUrlImpl;
  }(SafeValueImpl));
  var SafeResourceUrlImpl = (function(_super) {
    __extends$9(SafeResourceUrlImpl, _super);
    function SafeResourceUrlImpl() {
      _super.apply(this, arguments);
    }
    SafeResourceUrlImpl.prototype.getTypeName = function() {
      return 'ResourceURL';
    };
    return SafeResourceUrlImpl;
  }(SafeValueImpl));
  var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{
    provide: _angular_core.PLATFORM_INITIALIZER,
    useValue: initDomAdapter,
    multi: true
  }, {
    provide: _angular_common.PlatformLocation,
    useClass: BrowserPlatformLocation
  }];
  var BROWSER_SANITIZATION_PROVIDERS = [{
    provide: _angular_core.Sanitizer,
    useExisting: DomSanitizer
  }, {
    provide: DomSanitizer,
    useClass: DomSanitizerImpl
  }];
  var platformBrowser = _angular_core.createPlatformFactory(_angular_core.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
  function initDomAdapter() {
    BrowserDomAdapter.makeCurrent();
    BrowserGetTestability.init();
  }
  function errorHandler() {
    return new _angular_core.ErrorHandler();
  }
  function _document() {
    return getDOM().defaultDoc();
  }
  function _resolveDefaultAnimationDriver() {
    if (getDOM().supportsWebAnimation()) {
      return new WebAnimationsDriver();
    }
    return AnimationDriver.NOOP;
  }
  var BrowserModule = (function() {
    function BrowserModule(parentModule) {
      if (parentModule) {
        throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
      }
    }
    BrowserModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{
        providers: [BROWSER_SANITIZATION_PROVIDERS, {
          provide: _angular_core.ErrorHandler,
          useFactory: errorHandler,
          deps: []
        }, {
          provide: DOCUMENT,
          useFactory: _document,
          deps: []
        }, {
          provide: EVENT_MANAGER_PLUGINS,
          useClass: DomEventsPlugin,
          multi: true
        }, {
          provide: EVENT_MANAGER_PLUGINS,
          useClass: KeyEventsPlugin,
          multi: true
        }, {
          provide: EVENT_MANAGER_PLUGINS,
          useClass: HammerGesturesPlugin,
          multi: true
        }, {
          provide: HAMMER_GESTURE_CONFIG,
          useClass: HammerGestureConfig
        }, {
          provide: DomRootRenderer,
          useClass: DomRootRenderer_
        }, {
          provide: _angular_core.RootRenderer,
          useExisting: DomRootRenderer
        }, {
          provide: SharedStylesHost,
          useExisting: DomSharedStylesHost
        }, {
          provide: AnimationDriver,
          useFactory: _resolveDefaultAnimationDriver
        }, DomSharedStylesHost, _angular_core.Testability, EventManager, ELEMENT_PROBE_PROVIDERS],
        exports: [_angular_common.CommonModule, _angular_core.ApplicationModule]
      }]
    }];
    BrowserModule.ctorParameters = [{
      type: BrowserModule,
      decorators: [{type: _angular_core.Optional}, {type: _angular_core.SkipSelf}]
    }];
    return BrowserModule;
  }());
  var Title = (function() {
    function Title() {}
    Title.prototype.getTitle = function() {
      return getDOM().getTitle();
    };
    Title.prototype.setTitle = function(newTitle) {
      getDOM().setTitle(newTitle);
    };
    return Title;
  }());
  var win = typeof window !== 'undefined' && window || {};
  var ChangeDetectionPerfRecord = (function() {
    function ChangeDetectionPerfRecord(msPerTick, numTicks) {
      this.msPerTick = msPerTick;
      this.numTicks = numTicks;
    }
    return ChangeDetectionPerfRecord;
  }());
  var AngularTools = (function() {
    function AngularTools(ref) {
      this.profiler = new AngularProfiler(ref);
    }
    return AngularTools;
  }());
  var AngularProfiler = (function() {
    function AngularProfiler(ref) {
      this.appRef = ref.injector.get(_angular_core.ApplicationRef);
    }
    AngularProfiler.prototype.timeChangeDetection = function(config) {
      var record = isPresent(config) && config['record'];
      var profileName = 'Change Detection';
      var isProfilerAvailable = isPresent(win.console.profile);
      if (record && isProfilerAvailable) {
        win.console.profile(profileName);
      }
      var start = getDOM().performanceNow();
      var numTicks = 0;
      while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {
        this.appRef.tick();
        numTicks++;
      }
      var end = getDOM().performanceNow();
      if (record && isProfilerAvailable) {
        win.console.profileEnd(profileName);
      }
      var msPerTick = (end - start) / numTicks;
      win.console.log("ran " + numTicks + " change detection cycles");
      win.console.log(NumberWrapper.toFixed(msPerTick, 2) + " ms per check");
      return new ChangeDetectionPerfRecord(msPerTick, numTicks);
    };
    return AngularProfiler;
  }());
  var context = global$1;
  function enableDebugTools(ref) {
    context.ng = new AngularTools(ref);
    return ref;
  }
  function disableDebugTools() {
    delete context.ng;
  }
  var By = (function() {
    function By() {}
    By.all = function() {
      return function(debugElement) {
        return true;
      };
    };
    By.css = function(selector) {
      return function(debugElement) {
        return isPresent(debugElement.nativeElement) ? getDOM().elementMatches(debugElement.nativeElement, selector) : false;
      };
    };
    By.directive = function(type) {
      return function(debugElement) {
        return debugElement.providerTokens.indexOf(type) !== -1;
      };
    };
    return By;
  }());
  var __platform_browser_private__ = {
    BrowserPlatformLocation: BrowserPlatformLocation,
    DomAdapter: DomAdapter,
    BrowserDomAdapter: BrowserDomAdapter,
    BrowserGetTestability: BrowserGetTestability,
    getDOM: getDOM,
    setRootDomAdapter: setRootDomAdapter,
    DomRootRenderer_: DomRootRenderer_,
    DomRootRenderer: DomRootRenderer,
    DomSharedStylesHost: DomSharedStylesHost,
    SharedStylesHost: SharedStylesHost,
    ELEMENT_PROBE_PROVIDERS: ELEMENT_PROBE_PROVIDERS,
    DomEventsPlugin: DomEventsPlugin,
    KeyEventsPlugin: KeyEventsPlugin,
    HammerGesturesPlugin: HammerGesturesPlugin,
    initDomAdapter: initDomAdapter,
    INTERNAL_BROWSER_PLATFORM_PROVIDERS: INTERNAL_BROWSER_PLATFORM_PROVIDERS,
    BROWSER_SANITIZATION_PROVIDERS: BROWSER_SANITIZATION_PROVIDERS
  };
  exports.BrowserModule = BrowserModule;
  exports.platformBrowser = platformBrowser;
  exports.Title = Title;
  exports.disableDebugTools = disableDebugTools;
  exports.enableDebugTools = enableDebugTools;
  exports.AnimationDriver = AnimationDriver;
  exports.By = By;
  exports.NgProbeToken = NgProbeToken;
  exports.DOCUMENT = DOCUMENT;
  exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS;
  exports.EventManager = EventManager;
  exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG;
  exports.HammerGestureConfig = HammerGestureConfig;
  exports.DomSanitizer = DomSanitizer;
  exports.__platform_browser_private__ = __platform_browser_private__;
}));

})();
(function() {
var define = $__System.amdDefine;
(function(global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/Observable'), require('@angular/platform-browser')) : typeof define === 'function' && define.amd ? define("67", ["exports", "3", "63", "5"], factory) : (factory((global.ng = global.ng || {}, global.ng.http = global.ng.http || {}), global.ng.core, global.Rx, global.ng.platformBrowser));
}(this, function(exports, _angular_core, rxjs_Observable, _angular_platformBrowser) {
  'use strict';
  var BrowserXhr = (function() {
    function BrowserXhr() {}
    BrowserXhr.prototype.build = function() {
      return (new XMLHttpRequest());
    };
    BrowserXhr.decorators = [{type: _angular_core.Injectable}];
    BrowserXhr.ctorParameters = [];
    return BrowserXhr;
  }());
  var globalScope;
  if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
      globalScope = self;
    } else {
      globalScope = global;
    }
  } else {
    globalScope = window;
  }
  var global$1 = globalScope;
  global$1.assert = function assert(condition) {};
  function isPresent(obj) {
    return obj !== undefined && obj !== null;
  }
  function isBlank(obj) {
    return obj === undefined || obj === null;
  }
  function isString(obj) {
    return typeof obj === 'string';
  }
  function isArray(obj) {
    return Array.isArray(obj);
  }
  var StringWrapper = (function() {
    function StringWrapper() {}
    StringWrapper.fromCharCode = function(code) {
      return String.fromCharCode(code);
    };
    StringWrapper.charCodeAt = function(s, index) {
      return s.charCodeAt(index);
    };
    StringWrapper.split = function(s, regExp) {
      return s.split(regExp);
    };
    StringWrapper.equals = function(s, s2) {
      return s === s2;
    };
    StringWrapper.stripLeft = function(s, charVal) {
      if (s && s.length) {
        var pos = 0;
        for (var i = 0; i < s.length; i++) {
          if (s[i] != charVal)
            break;
          pos++;
        }
        s = s.substring(pos);
      }
      return s;
    };
    StringWrapper.stripRight = function(s, charVal) {
      if (s && s.length) {
        var pos = s.length;
        for (var i = s.length - 1; i >= 0; i--) {
          if (s[i] != charVal)
            break;
          pos--;
        }
        s = s.substring(0, pos);
      }
      return s;
    };
    StringWrapper.replace = function(s, from, replace) {
      return s.replace(from, replace);
    };
    StringWrapper.replaceAll = function(s, from, replace) {
      return s.replace(from, replace);
    };
    StringWrapper.slice = function(s, from, to) {
      if (from === void 0) {
        from = 0;
      }
      if (to === void 0) {
        to = null;
      }
      return s.slice(from, to === null ? undefined : to);
    };
    StringWrapper.replaceAllMapped = function(s, from, cb) {
      return s.replace(from, function() {
        var matches = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          matches[_i - 0] = arguments[_i];
        }
        matches.splice(-2, 2);
        return cb(matches);
      });
    };
    StringWrapper.contains = function(s, substr) {
      return s.indexOf(substr) != -1;
    };
    StringWrapper.compare = function(a, b) {
      if (a < b) {
        return -1;
      } else if (a > b) {
        return 1;
      } else {
        return 0;
      }
    };
    return StringWrapper;
  }());
  var NumberWrapper = (function() {
    function NumberWrapper() {}
    NumberWrapper.toFixed = function(n, fractionDigits) {
      return n.toFixed(fractionDigits);
    };
    NumberWrapper.equal = function(a, b) {
      return a === b;
    };
    NumberWrapper.parseIntAutoRadix = function(text) {
      var result = parseInt(text);
      if (isNaN(result)) {
        throw new Error('Invalid integer literal when parsing ' + text);
      }
      return result;
    };
    NumberWrapper.parseInt = function(text, radix) {
      if (radix == 10) {
        if (/^(\-|\+)?[0-9]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else if (radix == 16) {
        if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else {
        var result = parseInt(text, radix);
        if (!isNaN(result)) {
          return result;
        }
      }
      throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);
    };
    NumberWrapper.parseFloat = function(text) {
      return parseFloat(text);
    };
    Object.defineProperty(NumberWrapper, "NaN", {
      get: function() {
        return NaN;
      },
      enumerable: true,
      configurable: true
    });
    NumberWrapper.isNumeric = function(value) {
      return !isNaN(value - parseFloat(value));
    };
    NumberWrapper.isNaN = function(value) {
      return isNaN(value);
    };
    NumberWrapper.isInteger = function(value) {
      return Number.isInteger(value);
    };
    return NumberWrapper;
  }());
  function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
  }
  var Json = (function() {
    function Json() {}
    Json.parse = function(s) {
      return global$1.JSON.parse(s);
    };
    Json.stringify = function(data) {
      return global$1.JSON.stringify(data, null, 2);
    };
    return Json;
  }());
  var _symbolIterator = null;
  function getSymbolIterator() {
    if (isBlank(_symbolIterator)) {
      if (isPresent(globalScope.Symbol) && isPresent(Symbol.iterator)) {
        _symbolIterator = Symbol.iterator;
      } else {
        var keys = Object.getOwnPropertyNames(Map.prototype);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {
            _symbolIterator = key;
          }
        }
      }
    }
    return _symbolIterator;
  }
  exports.RequestMethod;
  (function(RequestMethod) {
    RequestMethod[RequestMethod["Get"] = 0] = "Get";
    RequestMethod[RequestMethod["Post"] = 1] = "Post";
    RequestMethod[RequestMethod["Put"] = 2] = "Put";
    RequestMethod[RequestMethod["Delete"] = 3] = "Delete";
    RequestMethod[RequestMethod["Options"] = 4] = "Options";
    RequestMethod[RequestMethod["Head"] = 5] = "Head";
    RequestMethod[RequestMethod["Patch"] = 6] = "Patch";
  })(exports.RequestMethod || (exports.RequestMethod = {}));
  exports.ReadyState;
  (function(ReadyState) {
    ReadyState[ReadyState["Unsent"] = 0] = "Unsent";
    ReadyState[ReadyState["Open"] = 1] = "Open";
    ReadyState[ReadyState["HeadersReceived"] = 2] = "HeadersReceived";
    ReadyState[ReadyState["Loading"] = 3] = "Loading";
    ReadyState[ReadyState["Done"] = 4] = "Done";
    ReadyState[ReadyState["Cancelled"] = 5] = "Cancelled";
  })(exports.ReadyState || (exports.ReadyState = {}));
  exports.ResponseType;
  (function(ResponseType) {
    ResponseType[ResponseType["Basic"] = 0] = "Basic";
    ResponseType[ResponseType["Cors"] = 1] = "Cors";
    ResponseType[ResponseType["Default"] = 2] = "Default";
    ResponseType[ResponseType["Error"] = 3] = "Error";
    ResponseType[ResponseType["Opaque"] = 4] = "Opaque";
  })(exports.ResponseType || (exports.ResponseType = {}));
  var ContentType;
  (function(ContentType) {
    ContentType[ContentType["NONE"] = 0] = "NONE";
    ContentType[ContentType["JSON"] = 1] = "JSON";
    ContentType[ContentType["FORM"] = 2] = "FORM";
    ContentType[ContentType["FORM_DATA"] = 3] = "FORM_DATA";
    ContentType[ContentType["TEXT"] = 4] = "TEXT";
    ContentType[ContentType["BLOB"] = 5] = "BLOB";
    ContentType[ContentType["ARRAY_BUFFER"] = 6] = "ARRAY_BUFFER";
  })(ContentType || (ContentType = {}));
  exports.ResponseContentType;
  (function(ResponseContentType) {
    ResponseContentType[ResponseContentType["Text"] = 0] = "Text";
    ResponseContentType[ResponseContentType["Json"] = 1] = "Json";
    ResponseContentType[ResponseContentType["ArrayBuffer"] = 2] = "ArrayBuffer";
    ResponseContentType[ResponseContentType["Blob"] = 3] = "Blob";
  })(exports.ResponseContentType || (exports.ResponseContentType = {}));
  var Map$1 = global$1.Map;
  var Set = global$1.Set;
  var createMapFromPairs = (function() {
    try {
      if (new Map$1([[1, 2]]).size === 1) {
        return function createMapFromPairs(pairs) {
          return new Map$1(pairs);
        };
      }
    } catch (e) {}
    return function createMapAndPopulateFromPairs(pairs) {
      var map = new Map$1();
      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i];
        map.set(pair[0], pair[1]);
      }
      return map;
    };
  })();
  var createMapFromMap = (function() {
    try {
      if (new Map$1(new Map$1())) {
        return function createMapFromMap(m) {
          return new Map$1(m);
        };
      }
    } catch (e) {}
    return function createMapAndPopulateFromMap(m) {
      var map = new Map$1();
      m.forEach(function(v, k) {
        map.set(k, v);
      });
      return map;
    };
  })();
  var _clearValues = (function() {
    if ((new Map$1()).keys().next) {
      return function _clearValues(m) {
        var keyIterator = m.keys();
        var k;
        while (!((k = keyIterator.next()).done)) {
          m.set(k.value, null);
        }
      };
    } else {
      return function _clearValuesWithForeEach(m) {
        m.forEach(function(v, k) {
          m.set(k, null);
        });
      };
    }
  })();
  var _arrayFromMap = (function() {
    try {
      if ((new Map$1()).values().next) {
        return function createArrayFromMap(m, getValues) {
          return getValues ? Array.from(m.values()) : Array.from(m.keys());
        };
      }
    } catch (e) {}
    return function createArrayFromMapWithForeach(m, getValues) {
      var res = ListWrapper.createFixedSize(m.size),
          i = 0;
      m.forEach(function(v, k) {
        res[i] = getValues ? v : k;
        i++;
      });
      return res;
    };
  })();
  var MapWrapper = (function() {
    function MapWrapper() {}
    MapWrapper.clone = function(m) {
      return createMapFromMap(m);
    };
    MapWrapper.createFromStringMap = function(stringMap) {
      var result = new Map$1();
      for (var prop in stringMap) {
        result.set(prop, stringMap[prop]);
      }
      return result;
    };
    MapWrapper.toStringMap = function(m) {
      var r = {};
      m.forEach(function(v, k) {
        return r[k] = v;
      });
      return r;
    };
    MapWrapper.createFromPairs = function(pairs) {
      return createMapFromPairs(pairs);
    };
    MapWrapper.clearValues = function(m) {
      _clearValues(m);
    };
    MapWrapper.iterable = function(m) {
      return m;
    };
    MapWrapper.keys = function(m) {
      return _arrayFromMap(m, false);
    };
    MapWrapper.values = function(m) {
      return _arrayFromMap(m, true);
    };
    return MapWrapper;
  }());
  var StringMapWrapper = (function() {
    function StringMapWrapper() {}
    StringMapWrapper.create = function() {
      return {};
    };
    StringMapWrapper.contains = function(map, key) {
      return map.hasOwnProperty(key);
    };
    StringMapWrapper.get = function(map, key) {
      return map.hasOwnProperty(key) ? map[key] : undefined;
    };
    StringMapWrapper.set = function(map, key, value) {
      map[key] = value;
    };
    StringMapWrapper.keys = function(map) {
      return Object.keys(map);
    };
    StringMapWrapper.values = function(map) {
      return Object.keys(map).map(function(k) {
        return map[k];
      });
    };
    StringMapWrapper.isEmpty = function(map) {
      for (var prop in map) {
        return false;
      }
      return true;
    };
    StringMapWrapper.delete = function(map, key) {
      delete map[key];
    };
    StringMapWrapper.forEach = function(map, callback) {
      for (var _i = 0,
          _a = Object.keys(map); _i < _a.length; _i++) {
        var k = _a[_i];
        callback(map[k], k);
      }
    };
    StringMapWrapper.merge = function(m1, m2) {
      var m = {};
      for (var _i = 0,
          _a = Object.keys(m1); _i < _a.length; _i++) {
        var k = _a[_i];
        m[k] = m1[k];
      }
      for (var _b = 0,
          _c = Object.keys(m2); _b < _c.length; _b++) {
        var k = _c[_b];
        m[k] = m2[k];
      }
      return m;
    };
    StringMapWrapper.equals = function(m1, m2) {
      var k1 = Object.keys(m1);
      var k2 = Object.keys(m2);
      if (k1.length != k2.length) {
        return false;
      }
      var key;
      for (var i = 0; i < k1.length; i++) {
        key = k1[i];
        if (m1[key] !== m2[key]) {
          return false;
        }
      }
      return true;
    };
    return StringMapWrapper;
  }());
  var ListWrapper = (function() {
    function ListWrapper() {}
    ListWrapper.createFixedSize = function(size) {
      return new Array(size);
    };
    ListWrapper.createGrowableSize = function(size) {
      return new Array(size);
    };
    ListWrapper.clone = function(array) {
      return array.slice(0);
    };
    ListWrapper.forEachWithIndex = function(array, fn) {
      for (var i = 0; i < array.length; i++) {
        fn(array[i], i);
      }
    };
    ListWrapper.first = function(array) {
      if (!array)
        return null;
      return array[0];
    };
    ListWrapper.last = function(array) {
      if (!array || array.length == 0)
        return null;
      return array[array.length - 1];
    };
    ListWrapper.indexOf = function(array, value, startIndex) {
      if (startIndex === void 0) {
        startIndex = 0;
      }
      return array.indexOf(value, startIndex);
    };
    ListWrapper.contains = function(list, el) {
      return list.indexOf(el) !== -1;
    };
    ListWrapper.reversed = function(array) {
      var a = ListWrapper.clone(array);
      return a.reverse();
    };
    ListWrapper.concat = function(a, b) {
      return a.concat(b);
    };
    ListWrapper.insert = function(list, index, value) {
      list.splice(index, 0, value);
    };
    ListWrapper.removeAt = function(list, index) {
      var res = list[index];
      list.splice(index, 1);
      return res;
    };
    ListWrapper.removeAll = function(list, items) {
      for (var i = 0; i < items.length; ++i) {
        var index = list.indexOf(items[i]);
        list.splice(index, 1);
      }
    };
    ListWrapper.remove = function(list, el) {
      var index = list.indexOf(el);
      if (index > -1) {
        list.splice(index, 1);
        return true;
      }
      return false;
    };
    ListWrapper.clear = function(list) {
      list.length = 0;
    };
    ListWrapper.isEmpty = function(list) {
      return list.length == 0;
    };
    ListWrapper.fill = function(list, value, start, end) {
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = null;
      }
      list.fill(value, start, end === null ? list.length : end);
    };
    ListWrapper.equals = function(a, b) {
      if (a.length != b.length)
        return false;
      for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
          return false;
      }
      return true;
    };
    ListWrapper.slice = function(l, from, to) {
      if (from === void 0) {
        from = 0;
      }
      if (to === void 0) {
        to = null;
      }
      return l.slice(from, to === null ? undefined : to);
    };
    ListWrapper.splice = function(l, from, length) {
      return l.splice(from, length);
    };
    ListWrapper.sort = function(l, compareFn) {
      if (isPresent(compareFn)) {
        l.sort(compareFn);
      } else {
        l.sort();
      }
    };
    ListWrapper.toString = function(l) {
      return l.toString();
    };
    ListWrapper.toJSON = function(l) {
      return JSON.stringify(l);
    };
    ListWrapper.maximum = function(list, predicate) {
      if (list.length == 0) {
        return null;
      }
      var solution = null;
      var maxValue = -Infinity;
      for (var index = 0; index < list.length; index++) {
        var candidate = list[index];
        if (isBlank(candidate)) {
          continue;
        }
        var candidateValue = predicate(candidate);
        if (candidateValue > maxValue) {
          solution = candidate;
          maxValue = candidateValue;
        }
      }
      return solution;
    };
    ListWrapper.flatten = function(list) {
      var target = [];
      _flattenArray(list, target);
      return target;
    };
    ListWrapper.addAll = function(list, source) {
      for (var i = 0; i < source.length; i++) {
        list.push(source[i]);
      }
    };
    return ListWrapper;
  }());
  function _flattenArray(source, target) {
    if (isPresent(source)) {
      for (var i = 0; i < source.length; i++) {
        var item = source[i];
        if (isArray(item)) {
          _flattenArray(item, target);
        } else {
          target.push(item);
        }
      }
    }
    return target;
  }
  function isListLikeIterable(obj) {
    if (!isJsObject(obj))
      return false;
    return isArray(obj) || (!(obj instanceof Map$1) && getSymbolIterator() in obj);
  }
  function iterateListLike(obj, fn) {
    if (isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        fn(obj[i]);
      }
    } else {
      var iterator = obj[getSymbolIterator()]();
      var item;
      while (!((item = iterator.next()).done)) {
        fn(item.value);
      }
    }
  }
  var createSetFromList = (function() {
    var test = new Set([1, 2, 3]);
    if (test.size === 3) {
      return function createSetFromList(lst) {
        return new Set(lst);
      };
    } else {
      return function createSetAndPopulateFromList(lst) {
        var res = new Set(lst);
        if (res.size !== lst.length) {
          for (var i = 0; i < lst.length; i++) {
            res.add(lst[i]);
          }
        }
        return res;
      };
    }
  })();
  var Headers = (function() {
    function Headers(headers) {
      var _this = this;
      if (headers instanceof Headers) {
        this._headersMap = new Map$1(headers._headersMap);
        return;
      }
      this._headersMap = new Map$1();
      if (isBlank(headers)) {
        return;
      }
      StringMapWrapper.forEach(headers, function(v, k) {
        _this._headersMap.set(normalize(k), isListLikeIterable(v) ? v : [v]);
      });
    }
    Headers.fromResponseHeaderString = function(headersString) {
      var headers = new Headers();
      headersString.split('\n').forEach(function(line) {
        var index = line.indexOf(':');
        if (index > 0) {
          var key = line.substring(0, index);
          var value = line.substring(index + 1).trim();
          headers.set(key, value);
        }
      });
      return headers;
    };
    Headers.prototype.append = function(name, value) {
      name = normalize(name);
      var mapName = this._headersMap.get(name);
      var list = isListLikeIterable(mapName) ? mapName : [];
      list.push(value);
      this._headersMap.set(name, list);
    };
    Headers.prototype.delete = function(name) {
      this._headersMap.delete(normalize(name));
    };
    Headers.prototype.forEach = function(fn) {
      this._headersMap.forEach(fn);
    };
    Headers.prototype.get = function(header) {
      return ListWrapper.first(this._headersMap.get(normalize(header)));
    };
    Headers.prototype.has = function(header) {
      return this._headersMap.has(normalize(header));
    };
    Headers.prototype.keys = function() {
      return MapWrapper.keys(this._headersMap);
    };
    Headers.prototype.set = function(header, value) {
      var list = [];
      if (isListLikeIterable(value)) {
        var pushValue = value.join(',');
        list.push(pushValue);
      } else {
        list.push(value);
      }
      this._headersMap.set(normalize(header), list);
    };
    Headers.prototype.values = function() {
      return MapWrapper.values(this._headersMap);
    };
    Headers.prototype.toJSON = function() {
      var serializableHeaders = {};
      this._headersMap.forEach(function(values, name) {
        var list = [];
        iterateListLike(values, function(val) {
          return list = ListWrapper.concat(list, val.split(','));
        });
        serializableHeaders[normalize(name)] = list;
      });
      return serializableHeaders;
    };
    Headers.prototype.getAll = function(header) {
      var headers = this._headersMap.get(normalize(header));
      return isListLikeIterable(headers) ? headers : [];
    };
    Headers.prototype.entries = function() {
      throw new Error('"entries" method is not implemented on Headers class');
    };
    return Headers;
  }());
  function normalize(name) {
    return name.toLowerCase();
  }
  var __extends$1 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var ResponseOptions = (function() {
    function ResponseOptions(_a) {
      var _b = _a === void 0 ? {} : _a,
          body = _b.body,
          status = _b.status,
          headers = _b.headers,
          statusText = _b.statusText,
          type = _b.type,
          url = _b.url;
      this.body = isPresent(body) ? body : null;
      this.status = isPresent(status) ? status : null;
      this.headers = isPresent(headers) ? headers : null;
      this.statusText = isPresent(statusText) ? statusText : null;
      this.type = isPresent(type) ? type : null;
      this.url = isPresent(url) ? url : null;
    }
    ResponseOptions.prototype.merge = function(options) {
      return new ResponseOptions({
        body: isPresent(options) && isPresent(options.body) ? options.body : this.body,
        status: isPresent(options) && isPresent(options.status) ? options.status : this.status,
        headers: isPresent(options) && isPresent(options.headers) ? options.headers : this.headers,
        statusText: isPresent(options) && isPresent(options.statusText) ? options.statusText : this.statusText,
        type: isPresent(options) && isPresent(options.type) ? options.type : this.type,
        url: isPresent(options) && isPresent(options.url) ? options.url : this.url
      });
    };
    return ResponseOptions;
  }());
  var BaseResponseOptions = (function(_super) {
    __extends$1(BaseResponseOptions, _super);
    function BaseResponseOptions() {
      _super.call(this, {
        status: 200,
        statusText: 'Ok',
        type: exports.ResponseType.Default,
        headers: new Headers()
      });
    }
    BaseResponseOptions.decorators = [{type: _angular_core.Injectable}];
    BaseResponseOptions.ctorParameters = [];
    return BaseResponseOptions;
  }(ResponseOptions));
  var ConnectionBackend = (function() {
    function ConnectionBackend() {}
    return ConnectionBackend;
  }());
  var Connection = (function() {
    function Connection() {}
    return Connection;
  }());
  var XSRFStrategy = (function() {
    function XSRFStrategy() {}
    return XSRFStrategy;
  }());
  function normalizeMethodName(method) {
    if (isString(method)) {
      var originalMethod = method;
      method = method.replace(/(\w)(\w*)/g, function(g0, g1, g2) {
        return g1.toUpperCase() + g2.toLowerCase();
      });
      method = exports.RequestMethod[method];
      if (typeof method !== 'number')
        throw new Error("Invalid request method. The method \"" + originalMethod + "\" is not supported.");
    }
    return method;
  }
  var isSuccess = function(status) {
    return (status >= 200 && status < 300);
  };
  function getResponseURL(xhr) {
    if ('responseURL' in xhr) {
      return xhr.responseURL;
    }
    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
      return xhr.getResponseHeader('X-Request-URL');
    }
    return;
  }
  function stringToArrayBuffer(input) {
    var view = new Uint16Array(input.length);
    for (var i = 0,
        strLen = input.length; i < strLen; i++) {
      view[i] = input.charCodeAt(i);
    }
    return view.buffer;
  }
  function paramParser(rawParams) {
    if (rawParams === void 0) {
      rawParams = '';
    }
    var map = new Map$1();
    if (rawParams.length > 0) {
      var params = rawParams.split('&');
      params.forEach(function(param) {
        var eqIdx = param.indexOf('=');
        var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)],
            key = _a[0],
            val = _a[1];
        var list = map.get(key) || [];
        list.push(val);
        map.set(key, list);
      });
    }
    return map;
  }
  var QueryEncoder = (function() {
    function QueryEncoder() {}
    QueryEncoder.prototype.encodeKey = function(k) {
      return standardEncoding(k);
    };
    QueryEncoder.prototype.encodeValue = function(v) {
      return standardEncoding(v);
    };
    return QueryEncoder;
  }());
  function standardEncoding(v) {
    return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');
  }
  var URLSearchParams = (function() {
    function URLSearchParams(rawParams, queryEncoder) {
      if (rawParams === void 0) {
        rawParams = '';
      }
      if (queryEncoder === void 0) {
        queryEncoder = new QueryEncoder();
      }
      this.rawParams = rawParams;
      this.queryEncoder = queryEncoder;
      this.paramsMap = paramParser(rawParams);
    }
    URLSearchParams.prototype.clone = function() {
      var clone = new URLSearchParams('', this.queryEncoder);
      clone.appendAll(this);
      return clone;
    };
    URLSearchParams.prototype.has = function(param) {
      return this.paramsMap.has(param);
    };
    URLSearchParams.prototype.get = function(param) {
      var storedParam = this.paramsMap.get(param);
      if (isListLikeIterable(storedParam)) {
        return ListWrapper.first(storedParam);
      } else {
        return null;
      }
    };
    URLSearchParams.prototype.getAll = function(param) {
      var mapParam = this.paramsMap.get(param);
      return isPresent(mapParam) ? mapParam : [];
    };
    URLSearchParams.prototype.set = function(param, val) {
      var mapParam = this.paramsMap.get(param);
      var list = isPresent(mapParam) ? mapParam : [];
      ListWrapper.clear(list);
      list.push(val);
      this.paramsMap.set(param, list);
    };
    URLSearchParams.prototype.setAll = function(searchParams) {
      var _this = this;
      searchParams.paramsMap.forEach(function(value, param) {
        var mapParam = _this.paramsMap.get(param);
        var list = isPresent(mapParam) ? mapParam : [];
        ListWrapper.clear(list);
        list.push(value[0]);
        _this.paramsMap.set(param, list);
      });
    };
    URLSearchParams.prototype.append = function(param, val) {
      var mapParam = this.paramsMap.get(param);
      var list = isPresent(mapParam) ? mapParam : [];
      list.push(val);
      this.paramsMap.set(param, list);
    };
    URLSearchParams.prototype.appendAll = function(searchParams) {
      var _this = this;
      searchParams.paramsMap.forEach(function(value, param) {
        var mapParam = _this.paramsMap.get(param);
        var list = isPresent(mapParam) ? mapParam : [];
        for (var i = 0; i < value.length; ++i) {
          list.push(value[i]);
        }
        _this.paramsMap.set(param, list);
      });
    };
    URLSearchParams.prototype.replaceAll = function(searchParams) {
      var _this = this;
      searchParams.paramsMap.forEach(function(value, param) {
        var mapParam = _this.paramsMap.get(param);
        var list = isPresent(mapParam) ? mapParam : [];
        ListWrapper.clear(list);
        for (var i = 0; i < value.length; ++i) {
          list.push(value[i]);
        }
        _this.paramsMap.set(param, list);
      });
    };
    URLSearchParams.prototype.toString = function() {
      var _this = this;
      var paramsList = [];
      this.paramsMap.forEach(function(values, k) {
        values.forEach(function(v) {
          return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v));
        });
      });
      return paramsList.join('&');
    };
    URLSearchParams.prototype.delete = function(param) {
      this.paramsMap.delete(param);
    };
    return URLSearchParams;
  }());
  var Body = (function() {
    function Body() {}
    Body.prototype.json = function() {
      if (isString(this._body)) {
        return Json.parse(this._body);
      }
      if (this._body instanceof ArrayBuffer) {
        return Json.parse(this.text());
      }
      return this._body;
    };
    Body.prototype.text = function() {
      if (this._body instanceof URLSearchParams) {
        return this._body.toString();
      }
      if (this._body instanceof ArrayBuffer) {
        return String.fromCharCode.apply(null, new Uint16Array(this._body));
      }
      if (this._body === null) {
        return '';
      }
      if (isJsObject(this._body)) {
        return Json.stringify(this._body);
      }
      return this._body.toString();
    };
    Body.prototype.arrayBuffer = function() {
      if (this._body instanceof ArrayBuffer) {
        return this._body;
      }
      return stringToArrayBuffer(this.text());
    };
    Body.prototype.blob = function() {
      if (this._body instanceof Blob) {
        return this._body;
      }
      if (this._body instanceof ArrayBuffer) {
        return new Blob([this._body]);
      }
      throw new Error('The request body isn\'t either a blob or an array buffer');
    };
    return Body;
  }());
  var __extends$2 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Response = (function(_super) {
    __extends$2(Response, _super);
    function Response(responseOptions) {
      _super.call(this);
      this._body = responseOptions.body;
      this.status = responseOptions.status;
      this.ok = (this.status >= 200 && this.status <= 299);
      this.statusText = responseOptions.statusText;
      this.headers = responseOptions.headers;
      this.type = responseOptions.type;
      this.url = responseOptions.url;
    }
    Response.prototype.toString = function() {
      return "Response with status: " + this.status + " " + this.statusText + " for URL: " + this.url;
    };
    return Response;
  }(Body));
  var _nextRequestId = 0;
  var JSONP_HOME = '__ng_jsonp__';
  var _jsonpConnections = null;
  function _getJsonpConnections() {
    if (_jsonpConnections === null) {
      _jsonpConnections = global$1[JSONP_HOME] = {};
    }
    return _jsonpConnections;
  }
  var BrowserJsonp = (function() {
    function BrowserJsonp() {}
    BrowserJsonp.prototype.build = function(url) {
      var node = document.createElement('script');
      node.src = url;
      return node;
    };
    BrowserJsonp.prototype.nextRequestID = function() {
      return "__req" + _nextRequestId++;
    };
    BrowserJsonp.prototype.requestCallback = function(id) {
      return JSONP_HOME + "." + id + ".finished";
    };
    BrowserJsonp.prototype.exposeConnection = function(id, connection) {
      var connections = _getJsonpConnections();
      connections[id] = connection;
    };
    BrowserJsonp.prototype.removeConnection = function(id) {
      var connections = _getJsonpConnections();
      connections[id] = null;
    };
    BrowserJsonp.prototype.send = function(node) {
      document.body.appendChild((node));
    };
    BrowserJsonp.prototype.cleanup = function(node) {
      if (node.parentNode) {
        node.parentNode.removeChild((node));
      }
    };
    BrowserJsonp.decorators = [{type: _angular_core.Injectable}];
    BrowserJsonp.ctorParameters = [];
    return BrowserJsonp;
  }());
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
  var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';
  var JSONPConnection = (function() {
    function JSONPConnection() {}
    return JSONPConnection;
  }());
  var JSONPConnection_ = (function(_super) {
    __extends(JSONPConnection_, _super);
    function JSONPConnection_(req, _dom, baseResponseOptions) {
      var _this = this;
      _super.call(this);
      this._dom = _dom;
      this.baseResponseOptions = baseResponseOptions;
      this._finished = false;
      if (req.method !== exports.RequestMethod.Get) {
        throw new TypeError(JSONP_ERR_WRONG_METHOD);
      }
      this.request = req;
      this.response = new rxjs_Observable.Observable(function(responseObserver) {
        _this.readyState = exports.ReadyState.Loading;
        var id = _this._id = _dom.nextRequestID();
        _dom.exposeConnection(id, _this);
        var callback = _dom.requestCallback(_this._id);
        var url = req.url;
        if (url.indexOf('=JSONP_CALLBACK&') > -1) {
          url = StringWrapper.replace(url, '=JSONP_CALLBACK&', "=" + callback + "&");
        } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {
          url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + ("=" + callback);
        }
        var script = _this._script = _dom.build(url);
        var onLoad = function(event) {
          if (_this.readyState === exports.ReadyState.Cancelled)
            return;
          _this.readyState = exports.ReadyState.Done;
          _dom.cleanup(script);
          if (!_this._finished) {
            var responseOptions_1 = new ResponseOptions({
              body: JSONP_ERR_NO_CALLBACK,
              type: exports.ResponseType.Error,
              url: url
            });
            if (isPresent(baseResponseOptions)) {
              responseOptions_1 = baseResponseOptions.merge(responseOptions_1);
            }
            responseObserver.error(new Response(responseOptions_1));
            return;
          }
          var responseOptions = new ResponseOptions({
            body: _this._responseData,
            url: url
          });
          if (isPresent(_this.baseResponseOptions)) {
            responseOptions = _this.baseResponseOptions.merge(responseOptions);
          }
          responseObserver.next(new Response(responseOptions));
          responseObserver.complete();
        };
        var onError = function(error) {
          if (_this.readyState === exports.ReadyState.Cancelled)
            return;
          _this.readyState = exports.ReadyState.Done;
          _dom.cleanup(script);
          var responseOptions = new ResponseOptions({
            body: error.message,
            type: exports.ResponseType.Error
          });
          if (isPresent(baseResponseOptions)) {
            responseOptions = baseResponseOptions.merge(responseOptions);
          }
          responseObserver.error(new Response(responseOptions));
        };
        script.addEventListener('load', onLoad);
        script.addEventListener('error', onError);
        _dom.send(script);
        return function() {
          _this.readyState = exports.ReadyState.Cancelled;
          script.removeEventListener('load', onLoad);
          script.removeEventListener('error', onError);
          if (isPresent(script)) {
            _this._dom.cleanup(script);
          }
        };
      });
    }
    JSONPConnection_.prototype.finished = function(data) {
      this._finished = true;
      this._dom.removeConnection(this._id);
      if (this.readyState === exports.ReadyState.Cancelled)
        return;
      this._responseData = data;
    };
    return JSONPConnection_;
  }(JSONPConnection));
  var JSONPBackend = (function(_super) {
    __extends(JSONPBackend, _super);
    function JSONPBackend() {
      _super.apply(this, arguments);
    }
    return JSONPBackend;
  }(ConnectionBackend));
  var JSONPBackend_ = (function(_super) {
    __extends(JSONPBackend_, _super);
    function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
      _super.call(this);
      this._browserJSONP = _browserJSONP;
      this._baseResponseOptions = _baseResponseOptions;
    }
    JSONPBackend_.prototype.createConnection = function(request) {
      return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
    };
    JSONPBackend_.decorators = [{type: _angular_core.Injectable}];
    JSONPBackend_.ctorParameters = [{type: BrowserJsonp}, {type: ResponseOptions}];
    return JSONPBackend_;
  }(JSONPBackend));
  var XSSI_PREFIX = /^\)\]\}',?\n/;
  var XHRConnection = (function() {
    function XHRConnection(req, browserXHR, baseResponseOptions) {
      var _this = this;
      this.request = req;
      this.response = new rxjs_Observable.Observable(function(responseObserver) {
        var _xhr = browserXHR.build();
        _xhr.open(exports.RequestMethod[req.method].toUpperCase(), req.url);
        if (isPresent(req.withCredentials)) {
          _xhr.withCredentials = req.withCredentials;
        }
        var onLoad = function() {
          var body = isPresent(_xhr.response) ? _xhr.response : _xhr.responseText;
          if (isString(body))
            body = body.replace(XSSI_PREFIX, '');
          var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());
          var url = getResponseURL(_xhr);
          var status = _xhr.status === 1223 ? 204 : _xhr.status;
          if (status === 0) {
            status = body ? 200 : 0;
          }
          var statusText = _xhr.statusText || 'OK';
          var responseOptions = new ResponseOptions({
            body: body,
            status: status,
            headers: headers,
            statusText: statusText,
            url: url
          });
          if (isPresent(baseResponseOptions)) {
            responseOptions = baseResponseOptions.merge(responseOptions);
          }
          var response = new Response(responseOptions);
          response.ok = isSuccess(status);
          if (response.ok) {
            responseObserver.next(response);
            responseObserver.complete();
            return;
          }
          responseObserver.error(response);
        };
        var onError = function(err) {
          var responseOptions = new ResponseOptions({
            body: err,
            type: exports.ResponseType.Error,
            status: _xhr.status,
            statusText: _xhr.statusText
          });
          if (isPresent(baseResponseOptions)) {
            responseOptions = baseResponseOptions.merge(responseOptions);
          }
          responseObserver.error(new Response(responseOptions));
        };
        _this.setDetectedContentType(req, _xhr);
        if (isPresent(req.headers)) {
          req.headers.forEach(function(values, name) {
            return _xhr.setRequestHeader(name, values.join(','));
          });
        }
        if (isPresent(req.responseType) && isPresent(_xhr.responseType)) {
          switch (req.responseType) {
            case exports.ResponseContentType.ArrayBuffer:
              _xhr.responseType = 'arraybuffer';
              break;
            case exports.ResponseContentType.Json:
              _xhr.responseType = 'json';
              break;
            case exports.ResponseContentType.Text:
              _xhr.responseType = 'text';
              break;
            case exports.ResponseContentType.Blob:
              _xhr.responseType = 'blob';
              break;
            default:
              throw new Error('The selected responseType is not supported');
          }
        }
        _xhr.addEventListener('load', onLoad);
        _xhr.addEventListener('error', onError);
        _xhr.send(_this.request.getBody());
        return function() {
          _xhr.removeEventListener('load', onLoad);
          _xhr.removeEventListener('error', onError);
          _xhr.abort();
        };
      });
    }
    XHRConnection.prototype.setDetectedContentType = function(req, _xhr) {
      if (isPresent(req.headers) && isPresent(req.headers.get('Content-Type'))) {
        return;
      }
      switch (req.contentType) {
        case ContentType.NONE:
          break;
        case ContentType.JSON:
          _xhr.setRequestHeader('content-type', 'application/json');
          break;
        case ContentType.FORM:
          _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          break;
        case ContentType.TEXT:
          _xhr.setRequestHeader('content-type', 'text/plain');
          break;
        case ContentType.BLOB:
          var blob = req.blob();
          if (blob.type) {
            _xhr.setRequestHeader('content-type', blob.type);
          }
          break;
      }
    };
    return XHRConnection;
  }());
  var CookieXSRFStrategy = (function() {
    function CookieXSRFStrategy(_cookieName, _headerName) {
      if (_cookieName === void 0) {
        _cookieName = 'XSRF-TOKEN';
      }
      if (_headerName === void 0) {
        _headerName = 'X-XSRF-TOKEN';
      }
      this._cookieName = _cookieName;
      this._headerName = _headerName;
    }
    CookieXSRFStrategy.prototype.configureRequest = function(req) {
      var xsrfToken = _angular_platformBrowser.__platform_browser_private__.getDOM().getCookie(this._cookieName);
      if (xsrfToken && !req.headers.has(this._headerName)) {
        req.headers.set(this._headerName, xsrfToken);
      }
    };
    return CookieXSRFStrategy;
  }());
  var XHRBackend = (function() {
    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {
      this._browserXHR = _browserXHR;
      this._baseResponseOptions = _baseResponseOptions;
      this._xsrfStrategy = _xsrfStrategy;
    }
    XHRBackend.prototype.createConnection = function(request) {
      this._xsrfStrategy.configureRequest(request);
      return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
    };
    XHRBackend.decorators = [{type: _angular_core.Injectable}];
    XHRBackend.ctorParameters = [{type: BrowserXhr}, {type: ResponseOptions}, {type: XSRFStrategy}];
    return XHRBackend;
  }());
  var __extends$3 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var RequestOptions = (function() {
    function RequestOptions(_a) {
      var _b = _a === void 0 ? {} : _a,
          method = _b.method,
          headers = _b.headers,
          body = _b.body,
          url = _b.url,
          search = _b.search,
          withCredentials = _b.withCredentials,
          responseType = _b.responseType;
      this.method = isPresent(method) ? normalizeMethodName(method) : null;
      this.headers = isPresent(headers) ? headers : null;
      this.body = isPresent(body) ? body : null;
      this.url = isPresent(url) ? url : null;
      this.search = isPresent(search) ? (isString(search) ? new URLSearchParams((search)) : (search)) : null;
      this.withCredentials = isPresent(withCredentials) ? withCredentials : null;
      this.responseType = isPresent(responseType) ? responseType : null;
    }
    RequestOptions.prototype.merge = function(options) {
      return new RequestOptions({
        method: isPresent(options) && isPresent(options.method) ? options.method : this.method,
        headers: isPresent(options) && isPresent(options.headers) ? options.headers : this.headers,
        body: isPresent(options) && isPresent(options.body) ? options.body : this.body,
        url: isPresent(options) && isPresent(options.url) ? options.url : this.url,
        search: isPresent(options) && isPresent(options.search) ? (isString(options.search) ? new URLSearchParams((options.search)) : (options.search).clone()) : this.search,
        withCredentials: isPresent(options) && isPresent(options.withCredentials) ? options.withCredentials : this.withCredentials,
        responseType: isPresent(options) && isPresent(options.responseType) ? options.responseType : this.responseType
      });
    };
    return RequestOptions;
  }());
  var BaseRequestOptions = (function(_super) {
    __extends$3(BaseRequestOptions, _super);
    function BaseRequestOptions() {
      _super.call(this, {
        method: exports.RequestMethod.Get,
        headers: new Headers()
      });
    }
    BaseRequestOptions.decorators = [{type: _angular_core.Injectable}];
    BaseRequestOptions.ctorParameters = [];
    return BaseRequestOptions;
  }(RequestOptions));
  var __extends$5 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  var Request = (function(_super) {
    __extends$5(Request, _super);
    function Request(requestOptions) {
      _super.call(this);
      var url = requestOptions.url;
      this.url = requestOptions.url;
      if (isPresent(requestOptions.search)) {
        var search = requestOptions.search.toString();
        if (search.length > 0) {
          var prefix = '?';
          if (StringWrapper.contains(this.url, '?')) {
            prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';
          }
          this.url = url + prefix + search;
        }
      }
      this._body = requestOptions.body;
      this.method = normalizeMethodName(requestOptions.method);
      this.headers = new Headers(requestOptions.headers);
      this.contentType = this.detectContentType();
      this.withCredentials = requestOptions.withCredentials;
      this.responseType = requestOptions.responseType;
    }
    Request.prototype.detectContentType = function() {
      switch (this.headers.get('content-type')) {
        case 'application/json':
          return ContentType.JSON;
        case 'application/x-www-form-urlencoded':
          return ContentType.FORM;
        case 'multipart/form-data':
          return ContentType.FORM_DATA;
        case 'text/plain':
        case 'text/html':
          return ContentType.TEXT;
        case 'application/octet-stream':
          return ContentType.BLOB;
        default:
          return this.detectContentTypeFromBody();
      }
    };
    Request.prototype.detectContentTypeFromBody = function() {
      if (this._body == null) {
        return ContentType.NONE;
      } else if (this._body instanceof URLSearchParams) {
        return ContentType.FORM;
      } else if (this._body instanceof FormData) {
        return ContentType.FORM_DATA;
      } else if (this._body instanceof Blob$1) {
        return ContentType.BLOB;
      } else if (this._body instanceof ArrayBuffer$1) {
        return ContentType.ARRAY_BUFFER;
      } else if (this._body && typeof this._body == 'object') {
        return ContentType.JSON;
      } else {
        return ContentType.TEXT;
      }
    };
    Request.prototype.getBody = function() {
      switch (this.contentType) {
        case ContentType.JSON:
          return this.text();
        case ContentType.FORM:
          return this.text();
        case ContentType.FORM_DATA:
          return this._body;
        case ContentType.TEXT:
          return this.text();
        case ContentType.BLOB:
          return this.blob();
        case ContentType.ARRAY_BUFFER:
          return this.arrayBuffer();
        default:
          return null;
      }
    };
    return Request;
  }(Body));
  var noop$1 = function() {};
  var w = typeof window == 'object' ? window : noop$1;
  var FormData = w['FormData'] || noop$1;
  var Blob$1 = w['Blob'] || noop$1;
  var ArrayBuffer$1 = w['ArrayBuffer'] || noop$1;
  var __extends$4 = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
  function httpRequest(backend, request) {
    return backend.createConnection(request).response;
  }
  function mergeOptions(defaultOpts, providedOpts, method, url) {
    var newOptions = defaultOpts;
    if (isPresent(providedOpts)) {
      return newOptions.merge(new RequestOptions({
        method: providedOpts.method || method,
        url: providedOpts.url || url,
        search: providedOpts.search,
        headers: providedOpts.headers,
        body: providedOpts.body,
        withCredentials: providedOpts.withCredentials,
        responseType: providedOpts.responseType
      }));
    }
    if (isPresent(method)) {
      return newOptions.merge(new RequestOptions({
        method: method,
        url: url
      }));
    } else {
      return newOptions.merge(new RequestOptions({url: url}));
    }
  }
  var Http = (function() {
    function Http(_backend, _defaultOptions) {
      this._backend = _backend;
      this._defaultOptions = _defaultOptions;
    }
    Http.prototype.request = function(url, options) {
      var responseObservable;
      if (isString(url)) {
        responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url)));
      } else if (url instanceof Request) {
        responseObservable = httpRequest(this._backend, url);
      } else {
        throw new Error('First argument must be a url string or Request instance.');
      }
      return responseObservable;
    };
    Http.prototype.get = function(url, options) {
      return httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url)));
    };
    Http.prototype.post = function(url, body, options) {
      return httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body: body})), options, exports.RequestMethod.Post, url)));
    };
    Http.prototype.put = function(url, body, options) {
      return httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body: body})), options, exports.RequestMethod.Put, url)));
    };
    Http.prototype.delete = function(url, options) {
      return httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Delete, url)));
    };
    Http.prototype.patch = function(url, body, options) {
      return httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({body: body})), options, exports.RequestMethod.Patch, url)));
    };
    Http.prototype.head = function(url, options) {
      return httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Head, url)));
    };
    Http.prototype.options = function(url, options) {
      return httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Options, url)));
    };
    Http.decorators = [{type: _angular_core.Injectable}];
    Http.ctorParameters = [{type: ConnectionBackend}, {type: RequestOptions}];
    return Http;
  }());
  var Jsonp = (function(_super) {
    __extends$4(Jsonp, _super);
    function Jsonp(backend, defaultOptions) {
      _super.call(this, backend, defaultOptions);
    }
    Jsonp.prototype.request = function(url, options) {
      var responseObservable;
      if (isString(url)) {
        url = new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url));
      }
      if (url instanceof Request) {
        if (url.method !== exports.RequestMethod.Get) {
          throw new Error('JSONP requests must use GET request method.');
        }
        responseObservable = httpRequest(this._backend, url);
      } else {
        throw new Error('First argument must be a url string or Request instance.');
      }
      return responseObservable;
    };
    Jsonp.decorators = [{type: _angular_core.Injectable}];
    Jsonp.ctorParameters = [{type: ConnectionBackend}, {type: RequestOptions}];
    return Jsonp;
  }(Http));
  function _createDefaultCookieXSRFStrategy() {
    return new CookieXSRFStrategy();
  }
  function httpFactory(xhrBackend, requestOptions) {
    return new Http(xhrBackend, requestOptions);
  }
  function jsonpFactory(jsonpBackend, requestOptions) {
    return new Jsonp(jsonpBackend, requestOptions);
  }
  var HttpModule = (function() {
    function HttpModule() {}
    HttpModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{providers: [{
          provide: Http,
          useFactory: httpFactory,
          deps: [XHRBackend, RequestOptions]
        }, BrowserXhr, {
          provide: RequestOptions,
          useClass: BaseRequestOptions
        }, {
          provide: ResponseOptions,
          useClass: BaseResponseOptions
        }, XHRBackend, {
          provide: XSRFStrategy,
          useFactory: _createDefaultCookieXSRFStrategy
        }]}]
    }];
    HttpModule.ctorParameters = [];
    return HttpModule;
  }());
  var JsonpModule = (function() {
    function JsonpModule() {}
    JsonpModule.decorators = [{
      type: _angular_core.NgModule,
      args: [{providers: [{
          provide: Jsonp,
          useFactory: jsonpFactory,
          deps: [JSONPBackend, RequestOptions]
        }, BrowserJsonp, {
          provide: RequestOptions,
          useClass: BaseRequestOptions
        }, {
          provide: ResponseOptions,
          useClass: BaseResponseOptions
        }, {
          provide: JSONPBackend,
          useClass: JSONPBackend_
        }]}]
    }];
    JsonpModule.ctorParameters = [];
    return JsonpModule;
  }());
  exports.BrowserXhr = BrowserXhr;
  exports.JSONPBackend = JSONPBackend;
  exports.JSONPConnection = JSONPConnection;
  exports.CookieXSRFStrategy = CookieXSRFStrategy;
  exports.XHRBackend = XHRBackend;
  exports.XHRConnection = XHRConnection;
  exports.BaseRequestOptions = BaseRequestOptions;
  exports.RequestOptions = RequestOptions;
  exports.BaseResponseOptions = BaseResponseOptions;
  exports.ResponseOptions = ResponseOptions;
  exports.Headers = Headers;
  exports.Http = Http;
  exports.Jsonp = Jsonp;
  exports.HttpModule = HttpModule;
  exports.JsonpModule = JsonpModule;
  exports.Connection = Connection;
  exports.ConnectionBackend = ConnectionBackend;
  exports.XSRFStrategy = XSRFStrategy;
  exports.Request = Request;
  exports.Response = Response;
  exports.QueryEncoder = QueryEncoder;
  exports.URLSearchParams = URLSearchParams;
}));

})();
$__System.registerDynamic('8c', ['76'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require('76');
    /**
     * Applies a given `project` function to each value emitted by the source
     * Observable, and emits the resulting values as an Observable.
     *
     * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
     * it passes each source value through a transformation function to get
     * corresponding output values.</span>
     *
     * <img src="./img/map.png" width="100%">
     *
     * Similar to the well known `Array.prototype.map` function, this operator
     * applies a projection to each value and emits that projection in the output
     * Observable.
     *
     * @example <caption>Map every every click to the clientX position of that click</caption>
     * var clicks = Rx.Observable.fromEvent(document, 'click');
     * var positions = clicks.map(ev => ev.clientX);
     * positions.subscribe(x => console.log(x));
     *
     * @see {@link mapTo}
     * @see {@link pluck}
     *
     * @param {function(value: T, index: number): R} project The function to apply
     * to each `value` emitted by the source Observable. The `index` parameter is
     * the number `i` for the i-th emission that has happened since the
     * subscription, starting from the number `0`.
     * @param {any} [thisArg] An optional argument to define what `this` is in the
     * `project` function.
     * @return {Observable<R>} An Observable that emits the values from the source
     * Observable transformed by the given `project` function.
     * @method map
     * @owner Observable
     */
    function map(project, thisArg) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return this.lift(new MapOperator(project, thisArg));
    }
    exports.map = map;
    var MapOperator = function () {
        function MapOperator(project, thisArg) {
            this.project = project;
            this.thisArg = thisArg;
        }
        MapOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
        };
        return MapOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var MapSubscriber = function (_super) {
        __extends(MapSubscriber, _super);
        function MapSubscriber(destination, project, thisArg) {
            _super.call(this, destination);
            this.project = project;
            this.count = 0;
            this.thisArg = thisArg || this;
        }
        // NOTE: This looks unoptimized, but it's actually purposefully NOT
        // using try/catch optimizations.
        MapSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.project.call(this.thisArg, value, this.count++);
            } catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return MapSubscriber;
    }(Subscriber_1.Subscriber);
    

    return module.exports;
});
$__System.registerDynamic('68', ['63', '8c'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('63');
  var map_1 = $__require('8c');
  Observable_1.Observable.prototype.map = map_1.map;
  

  return module.exports;
});
$__System.registerDynamic("83", ["76"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("76");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var OuterSubscriber = function (_super) {
        __extends(OuterSubscriber, _super);
        function OuterSubscriber() {
            _super.apply(this, arguments);
        }
        OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        OuterSubscriber.prototype.notifyError = function (error, innerSub) {
            this.destination.error(error);
        };
        OuterSubscriber.prototype.notifyComplete = function (innerSub) {
            this.destination.complete();
        };
        return OuterSubscriber;
    }(Subscriber_1.Subscriber);
    exports.OuterSubscriber = OuterSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('79', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isPromise(value) {
        return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
    }
    exports.isPromise = isPromise;
    

    return module.exports;
});
$__System.registerDynamic('91', ['76', '90'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var Subscriber_1 = $__require('76');
    var rxSubscriber_1 = $__require('90');
    function toSubscriber(nextOrObserver, error, complete) {
        if (nextOrObserver) {
            if (nextOrObserver instanceof Subscriber_1.Subscriber) {
                return nextOrObserver;
            }
            if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {
                return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
            }
        }
        if (!nextOrObserver && !error && !complete) {
            return new Subscriber_1.Subscriber();
        }
        return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
    }
    exports.toSubscriber = toSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('63', ['62', '91', '7c'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('62');
    var toSubscriber_1 = $__require('91');
    var observable_1 = $__require('7c');
    /**
     * A representation of any set of values over any amount of time. This the most basic building block
     * of RxJS.
     *
     * @class Observable<T>
     */
    var Observable = function () {
        /**
         * @constructor
         * @param {Function} subscribe the function that is  called when the Observable is
         * initially subscribed to. This function is given a Subscriber, to which new values
         * can be `next`ed, or an `error` method can be called to raise an error, or
         * `complete` can be called to notify of a successful completion.
         */
        function Observable(subscribe) {
            this._isScalar = false;
            if (subscribe) {
                this._subscribe = subscribe;
            }
        }
        /**
         * Creates a new Observable, with this Observable as the source, and the passed
         * operator defined as the new observable's operator.
         * @method lift
         * @param {Operator} operator the operator defining the operation to take on the observable
         * @return {Observable} a new observable with the Operator applied
         */
        Observable.prototype.lift = function (operator) {
            var observable = new Observable();
            observable.source = this;
            observable.operator = operator;
            return observable;
        };
        /**
         * Registers handlers for handling emitted values, error and completions from the observable, and
         *  executes the observable's subscriber function, which will take action to set up the underlying data stream
         * @method subscribe
         * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,
         *  or the first of three possible handlers, which is the handler for each value emitted from the observable.
         * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,
         *  the error will be thrown as unhandled
         * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.
         * @return {ISubscription} a subscription reference to the registered handlers
         */
        Observable.prototype.subscribe = function (observerOrNext, error, complete) {
            var operator = this.operator;
            var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
            if (operator) {
                operator.call(sink, this);
            } else {
                sink.add(this._subscribe(sink));
            }
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
            return sink;
        };
        /**
         * @method forEach
         * @param {Function} next a handler for each value emitted by the observable
         * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
         * @return {Promise} a promise that either resolves on observable completion or
         *  rejects with the handled error
         */
        Observable.prototype.forEach = function (next, PromiseCtor) {
            var _this = this;
            if (!PromiseCtor) {
                if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                    PromiseCtor = root_1.root.Rx.config.Promise;
                } else if (root_1.root.Promise) {
                    PromiseCtor = root_1.root.Promise;
                }
            }
            if (!PromiseCtor) {
                throw new Error('no Promise impl found');
            }
            return new PromiseCtor(function (resolve, reject) {
                var subscription = _this.subscribe(function (value) {
                    if (subscription) {
                        // if there is a subscription, then we can surmise
                        // the next handling is asynchronous. Any errors thrown
                        // need to be rejected explicitly and unsubscribe must be
                        // called manually
                        try {
                            next(value);
                        } catch (err) {
                            reject(err);
                            subscription.unsubscribe();
                        }
                    } else {
                        // if there is NO subscription, then we're getting a nexted
                        // value synchronously during subscription. We can just call it.
                        // If it errors, Observable's `subscribe` will ensure the
                        // unsubscription logic is called, then synchronously rethrow the error.
                        // After that, Promise will trap the error and send it
                        // down the rejection path.
                        next(value);
                    }
                }, reject, resolve);
            });
        };
        Observable.prototype._subscribe = function (subscriber) {
            return this.source.subscribe(subscriber);
        };
        /**
         * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
         * @method Symbol.observable
         * @return {Observable} this instance of the observable
         */
        Observable.prototype[observable_1.$$observable] = function () {
            return this;
        };
        // HACK: Since TypeScript inherits static properties too, we have to
        // fight against TypeScript here so Subject can have a different static create signature
        /**
         * Creates a new cold Observable by calling the Observable constructor
         * @static true
         * @owner Observable
         * @method create
         * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
         * @return {Observable} a new cold observable
         */
        Observable.create = function (subscribe) {
            return new Observable(subscribe);
        };
        return Observable;
    }();
    exports.Observable = Observable;
    

    return module.exports;
});
$__System.registerDynamic('70', ['62'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('62');
    var Symbol = root_1.root.Symbol;
    if (typeof Symbol === 'function') {
        if (Symbol.iterator) {
            exports.$$iterator = Symbol.iterator;
        } else if (typeof Symbol.for === 'function') {
            exports.$$iterator = Symbol.for('iterator');
        }
    } else {
        if (root_1.root.Set && typeof new root_1.root.Set()['@@iterator'] === 'function') {
            // Bug for mozilla version
            exports.$$iterator = '@@iterator';
        } else if (root_1.root.Map) {
            // es6-shim specific logic
            var keys = Object.getOwnPropertyNames(root_1.root.Map.prototype);
            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (key !== 'entries' && key !== 'size' && root_1.root.Map.prototype[key] === root_1.root.Map.prototype['entries']) {
                    exports.$$iterator = key;
                    break;
                }
            }
        } else {
            exports.$$iterator = '@@iterator';
        }
    }
    

    return module.exports;
});
$__System.registerDynamic("78", [], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  exports.isArray = Array.isArray || function (x) {
    return x && typeof x.length === 'number';
  };
  

  return module.exports;
});
$__System.registerDynamic("92", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isObject(x) {
        return x != null && typeof x === 'object';
    }
    exports.isObject = isObject;
    

    return module.exports;
});
$__System.registerDynamic("93", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function isFunction(x) {
        return typeof x === 'function';
    }
    exports.isFunction = isFunction;
    

    return module.exports;
});
$__System.registerDynamic("94", ["95"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var errorObject_1 = $__require("95");
    var tryCatchTarget;
    function tryCatcher() {
        try {
            return tryCatchTarget.apply(this, arguments);
        } catch (e) {
            errorObject_1.errorObject.e = e;
            return errorObject_1.errorObject;
        }
    }
    function tryCatch(fn) {
        tryCatchTarget = fn;
        return tryCatcher;
    }
    exports.tryCatch = tryCatch;
    ;
    

    return module.exports;
});
$__System.registerDynamic("95", [], true, function ($__require, exports, module) {
  "use strict";
  // typeof any so that it we don't have to cast when comparing a result to the error object

  var define,
      global = this || self,
      GLOBAL = global;
  exports.errorObject = { e: {} };
  

  return module.exports;
});
$__System.registerDynamic("96", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /**
     * An error thrown when one or more errors have occurred during the
     * `unsubscribe` of a {@link Subscription}.
     */
    var UnsubscriptionError = function (_super) {
        __extends(UnsubscriptionError, _super);
        function UnsubscriptionError(errors) {
            _super.call(this);
            this.errors = errors;
            var err = Error.call(this, errors ? errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) {
                return i + 1 + ") " + err.toString();
            }).join('\n  ') : '');
            this.name = err.name = 'UnsubscriptionError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return UnsubscriptionError;
    }(Error);
    exports.UnsubscriptionError = UnsubscriptionError;
    

    return module.exports;
});
$__System.registerDynamic('8f', ['78', '92', '93', '94', '95', '96'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var isArray_1 = $__require('78');
    var isObject_1 = $__require('92');
    var isFunction_1 = $__require('93');
    var tryCatch_1 = $__require('94');
    var errorObject_1 = $__require('95');
    var UnsubscriptionError_1 = $__require('96');
    /**
     * Represents a disposable resource, such as the execution of an Observable. A
     * Subscription has one important method, `unsubscribe`, that takes no argument
     * and just disposes the resource held by the subscription.
     *
     * Additionally, subscriptions may be grouped together through the `add()`
     * method, which will attach a child Subscription to the current Subscription.
     * When a Subscription is unsubscribed, all its children (and its grandchildren)
     * will be unsubscribed as well.
     *
     * @class Subscription
     */
    var Subscription = function () {
        /**
         * @param {function(): void} [unsubscribe] A function describing how to
         * perform the disposal of resources when the `unsubscribe` method is called.
         */
        function Subscription(unsubscribe) {
            /**
             * A flag to indicate whether this Subscription has already been unsubscribed.
             * @type {boolean}
             */
            this.closed = false;
            if (unsubscribe) {
                this._unsubscribe = unsubscribe;
            }
        }
        /**
         * Disposes the resources held by the subscription. May, for instance, cancel
         * an ongoing Observable execution or cancel any other type of work that
         * started when the Subscription was created.
         * @return {void}
         */
        Subscription.prototype.unsubscribe = function () {
            var hasErrors = false;
            var errors;
            if (this.closed) {
                return;
            }
            this.closed = true;
            var _a = this,
                _unsubscribe = _a._unsubscribe,
                _subscriptions = _a._subscriptions;
            this._subscriptions = null;
            if (isFunction_1.isFunction(_unsubscribe)) {
                var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
                if (trial === errorObject_1.errorObject) {
                    hasErrors = true;
                    (errors = errors || []).push(errorObject_1.errorObject.e);
                }
            }
            if (isArray_1.isArray(_subscriptions)) {
                var index = -1;
                var len = _subscriptions.length;
                while (++index < len) {
                    var sub = _subscriptions[index];
                    if (isObject_1.isObject(sub)) {
                        var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                        if (trial === errorObject_1.errorObject) {
                            hasErrors = true;
                            errors = errors || [];
                            var err = errorObject_1.errorObject.e;
                            if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                                errors = errors.concat(err.errors);
                            } else {
                                errors.push(err);
                            }
                        }
                    }
                }
            }
            if (hasErrors) {
                throw new UnsubscriptionError_1.UnsubscriptionError(errors);
            }
        };
        /**
         * Adds a tear down to be called during the unsubscribe() of this
         * Subscription.
         *
         * If the tear down being added is a subscription that is already
         * unsubscribed, is the same reference `add` is being called on, or is
         * `Subscription.EMPTY`, it will not be added.
         *
         * If this subscription is already in an `closed` state, the passed
         * tear down logic will be executed immediately.
         *
         * @param {TeardownLogic} teardown The additional logic to execute on
         * teardown.
         * @return {Subscription} Returns the Subscription used or created to be
         * added to the inner subscriptions list. This Subscription can be used with
         * `remove()` to remove the passed teardown logic from the inner subscriptions
         * list.
         */
        Subscription.prototype.add = function (teardown) {
            if (!teardown || teardown === Subscription.EMPTY) {
                return Subscription.EMPTY;
            }
            if (teardown === this) {
                return this;
            }
            var sub = teardown;
            switch (typeof teardown) {
                case 'function':
                    sub = new Subscription(teardown);
                case 'object':
                    if (sub.closed || typeof sub.unsubscribe !== 'function') {
                        break;
                    } else if (this.closed) {
                        sub.unsubscribe();
                    } else {
                        (this._subscriptions || (this._subscriptions = [])).push(sub);
                    }
                    break;
                default:
                    throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
            }
            return sub;
        };
        /**
         * Removes a Subscription from the internal list of subscriptions that will
         * unsubscribe during the unsubscribe process of this Subscription.
         * @param {Subscription} subscription The subscription to remove.
         * @return {void}
         */
        Subscription.prototype.remove = function (subscription) {
            // HACK: This might be redundant because of the logic in `add()`
            if (subscription == null || subscription === this || subscription === Subscription.EMPTY) {
                return;
            }
            var subscriptions = this._subscriptions;
            if (subscriptions) {
                var subscriptionIndex = subscriptions.indexOf(subscription);
                if (subscriptionIndex !== -1) {
                    subscriptions.splice(subscriptionIndex, 1);
                }
            }
        };
        Subscription.EMPTY = function (empty) {
            empty.closed = true;
            return empty;
        }(new Subscription());
        return Subscription;
    }();
    exports.Subscription = Subscription;
    

    return module.exports;
});
$__System.registerDynamic("97", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    exports.empty = {
        closed: true,
        next: function (value) {},
        error: function (err) {
            throw err;
        },
        complete: function () {}
    };
    

    return module.exports;
});
$__System.registerDynamic('90', ['62'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('62');
    var Symbol = root_1.root.Symbol;
    exports.$$rxSubscriber = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('rxSubscriber') : '@@rxSubscriber';
    

    return module.exports;
});
$__System.registerDynamic('76', ['93', '8f', '97', '90'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var isFunction_1 = $__require('93');
    var Subscription_1 = $__require('8f');
    var Observer_1 = $__require('97');
    var rxSubscriber_1 = $__require('90');
    /**
     * Implements the {@link Observer} interface and extends the
     * {@link Subscription} class. While the {@link Observer} is the public API for
     * consuming the values of an {@link Observable}, all Observers get converted to
     * a Subscriber, in order to provide Subscription-like capabilities such as
     * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
     * implementing operators, but it is rarely used as a public API.
     *
     * @class Subscriber<T>
     */
    var Subscriber = function (_super) {
        __extends(Subscriber, _super);
        /**
         * @param {Observer|function(value: T): void} [destinationOrNext] A partially
         * defined Observer or a `next` callback function.
         * @param {function(e: ?any): void} [error] The `error` callback of an
         * Observer.
         * @param {function(): void} [complete] The `complete` callback of an
         * Observer.
         */
        function Subscriber(destinationOrNext, error, complete) {
            _super.call(this);
            this.syncErrorValue = null;
            this.syncErrorThrown = false;
            this.syncErrorThrowable = false;
            this.isStopped = false;
            switch (arguments.length) {
                case 0:
                    this.destination = Observer_1.empty;
                    break;
                case 1:
                    if (!destinationOrNext) {
                        this.destination = Observer_1.empty;
                        break;
                    }
                    if (typeof destinationOrNext === 'object') {
                        if (destinationOrNext instanceof Subscriber) {
                            this.destination = destinationOrNext;
                            this.destination.add(this);
                        } else {
                            this.syncErrorThrowable = true;
                            this.destination = new SafeSubscriber(this, destinationOrNext);
                        }
                        break;
                    }
                default:
                    this.syncErrorThrowable = true;
                    this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                    break;
            }
        }
        Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
            return this;
        };
        /**
         * A static factory for a Subscriber, given a (potentially partial) definition
         * of an Observer.
         * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
         * @param {function(e: ?any): void} [error] The `error` callback of an
         * Observer.
         * @param {function(): void} [complete] The `complete` callback of an
         * Observer.
         * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
         * Observer represented by the given arguments.
         */
        Subscriber.create = function (next, error, complete) {
            var subscriber = new Subscriber(next, error, complete);
            subscriber.syncErrorThrowable = false;
            return subscriber;
        };
        /**
         * The {@link Observer} callback to receive notifications of type `next` from
         * the Observable, with a value. The Observable may call this method 0 or more
         * times.
         * @param {T} [value] The `next` value.
         * @return {void}
         */
        Subscriber.prototype.next = function (value) {
            if (!this.isStopped) {
                this._next(value);
            }
        };
        /**
         * The {@link Observer} callback to receive notifications of type `error` from
         * the Observable, with an attached {@link Error}. Notifies the Observer that
         * the Observable has experienced an error condition.
         * @param {any} [err] The `error` exception.
         * @return {void}
         */
        Subscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                this.isStopped = true;
                this._error(err);
            }
        };
        /**
         * The {@link Observer} callback to receive a valueless notification of type
         * `complete` from the Observable. Notifies the Observer that the Observable
         * has finished sending push-based notifications.
         * @return {void}
         */
        Subscriber.prototype.complete = function () {
            if (!this.isStopped) {
                this.isStopped = true;
                this._complete();
            }
        };
        Subscriber.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
        };
        Subscriber.prototype._next = function (value) {
            this.destination.next(value);
        };
        Subscriber.prototype._error = function (err) {
            this.destination.error(err);
            this.unsubscribe();
        };
        Subscriber.prototype._complete = function () {
            this.destination.complete();
            this.unsubscribe();
        };
        return Subscriber;
    }(Subscription_1.Subscription);
    exports.Subscriber = Subscriber;
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var SafeSubscriber = function (_super) {
        __extends(SafeSubscriber, _super);
        function SafeSubscriber(_parent, observerOrNext, error, complete) {
            _super.call(this);
            this._parent = _parent;
            var next;
            var context = this;
            if (isFunction_1.isFunction(observerOrNext)) {
                next = observerOrNext;
            } else if (observerOrNext) {
                context = observerOrNext;
                next = observerOrNext.next;
                error = observerOrNext.error;
                complete = observerOrNext.complete;
                if (isFunction_1.isFunction(context.unsubscribe)) {
                    this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = this.unsubscribe.bind(this);
            }
            this._context = context;
            this._next = next;
            this._error = error;
            this._complete = complete;
        }
        SafeSubscriber.prototype.next = function (value) {
            if (!this.isStopped && this._next) {
                var _parent = this._parent;
                if (!_parent.syncErrorThrowable) {
                    this.__tryOrUnsub(this._next, value);
                } else if (this.__tryOrSetError(_parent, this._next, value)) {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var _parent = this._parent;
                if (this._error) {
                    if (!_parent.syncErrorThrowable) {
                        this.__tryOrUnsub(this._error, err);
                        this.unsubscribe();
                    } else {
                        this.__tryOrSetError(_parent, this._error, err);
                        this.unsubscribe();
                    }
                } else if (!_parent.syncErrorThrowable) {
                    this.unsubscribe();
                    throw err;
                } else {
                    _parent.syncErrorValue = err;
                    _parent.syncErrorThrown = true;
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.complete = function () {
            if (!this.isStopped) {
                var _parent = this._parent;
                if (this._complete) {
                    if (!_parent.syncErrorThrowable) {
                        this.__tryOrUnsub(this._complete);
                        this.unsubscribe();
                    } else {
                        this.__tryOrSetError(_parent, this._complete);
                        this.unsubscribe();
                    }
                } else {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
            try {
                fn.call(this._context, value);
            } catch (err) {
                this.unsubscribe();
                throw err;
            }
        };
        SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
            try {
                fn.call(this._context, value);
            } catch (err) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            return false;
        };
        SafeSubscriber.prototype._unsubscribe = function () {
            var _parent = this._parent;
            this._context = null;
            this._parent = null;
            _parent.unsubscribe();
        };
        return SafeSubscriber;
    }(Subscriber);
    

    return module.exports;
});
$__System.registerDynamic("98", ["76"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1 = $__require("76");
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var InnerSubscriber = function (_super) {
        __extends(InnerSubscriber, _super);
        function InnerSubscriber(parent, outerValue, outerIndex) {
            _super.call(this);
            this.parent = parent;
            this.outerValue = outerValue;
            this.outerIndex = outerIndex;
            this.index = 0;
        }
        InnerSubscriber.prototype._next = function (value) {
            this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
        };
        InnerSubscriber.prototype._error = function (error) {
            this.parent.notifyError(error, this);
            this.unsubscribe();
        };
        InnerSubscriber.prototype._complete = function () {
            this.parent.notifyComplete(this);
            this.unsubscribe();
        };
        return InnerSubscriber;
    }(Subscriber_1.Subscriber);
    exports.InnerSubscriber = InnerSubscriber;
    

    return module.exports;
});
$__System.registerDynamic('62', [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var objectTypes = {
        'boolean': false,
        'function': true,
        'object': true,
        'number': false,
        'string': false,
        'undefined': false
    };
    exports.root = objectTypes[typeof self] && self || objectTypes[typeof window] && window;
    /* tslint:disable:no-unused-variable */
    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
    var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
    var freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
        exports.root = freeGlobal;
    }
    

    return module.exports;
});
$__System.registerDynamic('7c', ['62'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('62');
    function getSymbolObservable(context) {
        var $$observable;
        var Symbol = context.Symbol;
        if (typeof Symbol === 'function') {
            if (Symbol.observable) {
                $$observable = Symbol.observable;
            } else {
                $$observable = Symbol('observable');
                Symbol.observable = $$observable;
            }
        } else {
            $$observable = '@@observable';
        }
        return $$observable;
    }
    exports.getSymbolObservable = getSymbolObservable;
    exports.$$observable = getSymbolObservable(root_1.root);
    

    return module.exports;
});
$__System.registerDynamic('82', ['62', '78', '79', '63', '70', '98', '7c'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var root_1 = $__require('62');
    var isArray_1 = $__require('78');
    var isPromise_1 = $__require('79');
    var Observable_1 = $__require('63');
    var iterator_1 = $__require('70');
    var InnerSubscriber_1 = $__require('98');
    var observable_1 = $__require('7c');
    function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
        var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
        if (destination.closed) {
            return null;
        }
        if (result instanceof Observable_1.Observable) {
            if (result._isScalar) {
                destination.next(result.value);
                destination.complete();
                return null;
            } else {
                return result.subscribe(destination);
            }
        }
        if (isArray_1.isArray(result)) {
            for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
                destination.next(result[i]);
            }
            if (!destination.closed) {
                destination.complete();
            }
        } else if (isPromise_1.isPromise(result)) {
            result.then(function (value) {
                if (!destination.closed) {
                    destination.next(value);
                    destination.complete();
                }
            }, function (err) {
                return destination.error(err);
            }).then(null, function (err) {
                // Escaping the Promise trap: globally throw unhandled errors
                root_1.root.setTimeout(function () {
                    throw err;
                });
            });
            return destination;
        } else if (typeof result[iterator_1.$$iterator] === 'function') {
            var iterator = result[iterator_1.$$iterator]();
            do {
                var item = iterator.next();
                if (item.done) {
                    destination.complete();
                    break;
                }
                destination.next(item.value);
                if (destination.closed) {
                    break;
                }
            } while (true);
        } else if (typeof result[observable_1.$$observable] === 'function') {
            var obs = result[observable_1.$$observable]();
            if (typeof obs.subscribe !== 'function') {
                destination.error(new Error('invalid observable'));
            } else {
                return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
            }
        } else {
            destination.error(new TypeError('unknown type returned'));
        }
        return null;
    }
    exports.subscribeToResult = subscribeToResult;
    

    return module.exports;
});
$__System.registerDynamic('8d', ['83', '82'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __extends = this && this.__extends || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = $__require('83');
    var subscribeToResult_1 = $__require('82');
    /**
     * Catches errors on the observable to be handled by returning a new observable or throwing an error.
     * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
     *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
     *  is returned by the `selector` will be used to continue the observable chain.
     * @return {Observable} an observable that originates from either the source or the observable returned by the
     *  catch `selector` function.
     * @method catch
     * @owner Observable
     */
    function _catch(selector) {
        var operator = new CatchOperator(selector);
        var caught = this.lift(operator);
        return operator.caught = caught;
    }
    exports._catch = _catch;
    var CatchOperator = function () {
        function CatchOperator(selector) {
            this.selector = selector;
        }
        CatchOperator.prototype.call = function (subscriber, source) {
            return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
        };
        return CatchOperator;
    }();
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @ignore
     * @extends {Ignored}
     */
    var CatchSubscriber = function (_super) {
        __extends(CatchSubscriber, _super);
        function CatchSubscriber(destination, selector, caught) {
            _super.call(this, destination);
            this.selector = selector;
            this.caught = caught;
        }
        // NOTE: overriding `error` instead of `_error` because we don't want
        // to have this flag this subscriber as `isStopped`.
        CatchSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var result = void 0;
                try {
                    result = this.selector(err, this.caught);
                } catch (err) {
                    this.destination.error(err);
                    return;
                }
                this.unsubscribe();
                this.destination.remove(this);
                subscribeToResult_1.subscribeToResult(this, result);
            }
        };
        return CatchSubscriber;
    }(OuterSubscriber_1.OuterSubscriber);
    

    return module.exports;
});
$__System.registerDynamic('69', ['63', '8d'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var Observable_1 = $__require('63');
  var catch_1 = $__require('8d');
  Observable_1.Observable.prototype.catch = catch_1._catch;
  

  return module.exports;
});
$__System.registerDynamic("6a", [], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var AppConfig = function () {
        function AppConfig() {}
        Object.defineProperty(AppConfig, "RUSH_LOGIN_URL", {
            get: function () {
                return 'http://localhost:8080/rush-pos-sync/oauth/token?grant_type=password&username=:username&password=:password&client_id=clientIdPassword';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppConfig, "GET_MERCHANTS_URL", {
            get: function () {
                return 'http://localhost:8080/rush-pos-sync/api/merchant/';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppConfig, "GET_MERCHANTS_ACCOUNTS_URL", {
            get: function () {
                return 'http://localhost:8080/rush-pos-sync/api/merchant/:merchantId/accounts';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppConfig, "UPDATE_ACCOUNT_URL", {
            get: function () {
                return 'http://localhost:8080/rush-pos-sync/api/merchant/accounts/update';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppConfig, "GET_SCREENS", {
            get: function () {
                return 'http://localhost:8080/rush-pos-sync/api/merchant/:merchantId/screens';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppConfig, "UPDATE_ACCESS_URL", {
            get: function () {
                return 'http://localhost:8080/rush-pos-sync/api/merchant/access/update';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppConfig, "GET_ROLES_URL", {
            get: function () {
                return 'http://localhost:8080/rush-pos-sync/api/merchant/:merchantId/roles';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppConfig, "UPDATE_ROLES_URL", {
            get: function () {
                return 'http://localhost:8080/rush-pos-sync/api/merchant/roles/update';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppConfig, "DELETE_ROLES_URL", {
            get: function () {
                return 'http://localhost:8080/rush-pos-sync/api/merchant/roles/delete';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppConfig, "GET_BRANCHES_URL", {
            get: function () {
                return 'http://localhost:8080/rush-pos-sync/api/merchant/:merchantId/branch';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppConfig, "UPDATE_BRANCH_URL", {
            get: function () {
                return 'http://localhost:8080/rush-pos-sync/api/merchant/branch/:branchId';
            },
            enumerable: true,
            configurable: true
        });
        return AppConfig;
    }();
    exports.AppConfig = AppConfig;
    

    return module.exports;
});
$__System.registerDynamic("e", ["3", "d", "67", "68", "69", "6a"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var router_1 = $__require("d");
    var http_1 = $__require("67");
    $__require("68");
    $__require("69");
    var AppConfig_1 = $__require("6a");
    var AuthService = function () {
        function AuthService(http, router) {
            this.http = http;
            this.router = router;
        }
        AuthService.prototype.authenticate = function (username, password) {
            var body = '';
            var headers = new http_1.Headers();
            headers.append('Authorization', 'Basic Y2xpZW50SWRQYXNzd29yZDpzZWNyZXQ=');
            headers.append('Content-Type', 'application/json');
            var options = new http_1.RequestOptions({ headers: headers });
            var url = AppConfig_1.AppConfig.RUSH_LOGIN_URL.replace(':username', username).replace(':password', password);
            return this.http.post(url, body, options).map(function (res) {
                return res.json();
            });
        };
        AuthService = __decorate([core_1.Injectable(), __metadata('design:paramtypes', [http_1.Http, router_1.Router])], AuthService);
        return AuthService;
    }();
    exports.AuthService = AuthService;
    

    return module.exports;
});
$__System.registerDynamic("99", ["3", "11", "e"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    //Authentication Config
    var core_1 = $__require("3");
    var auth_manager_1 = $__require("11");
    var auth_service_1 = $__require("e");
    var AuthenticationModule = function () {
        function AuthenticationModule() {}
        AuthenticationModule = __decorate([core_1.NgModule({
            imports: [],
            declarations: [],
            providers: [auth_service_1.AuthService, auth_manager_1.AuthManager],
            exports: []
        }), __metadata('design:paramtypes', [])], AuthenticationModule);
        return AuthenticationModule;
    }();
    exports.AuthenticationModule = AuthenticationModule;
    

    return module.exports;
});
$__System.registerDynamic("1", ["3", "5", "9", "4", "67", "10", "6", "8", "6e", "99"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var platform_browser_1 = $__require("5");
    var common_1 = $__require("9");
    var platform_browser_dynamic_1 = $__require("4");
    var http_1 = $__require("67");
    var routes_1 = $__require("10");
    //Custom modules
    var app_component_1 = $__require("6");
    var login_1 = $__require("8");
    var home_1 = $__require("6e");
    var auth_1 = $__require("99");
    //Root module
    var AppModule = function () {
        function AppModule() {}
        AppModule = __decorate([core_1.NgModule({
            imports: [platform_browser_1.BrowserModule, http_1.HttpModule, routes_1.routing, login_1.LoginModule, home_1.HomeModule, auth_1.AuthenticationModule],
            declarations: [app_component_1.AppComponent],
            providers: [routes_1.appRoutingProviders, { provide: common_1.LocationStrategy, useClass: common_1.HashLocationStrategy }],
            bootstrap: [app_component_1.AppComponent]
        }), __metadata('design:paramtypes', [])], AppModule);
        return AppModule;
    }();
    exports.AppModule = AppModule;
    platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(AppModule);
    

    return module.exports;
});
})
(function(factory) {
  if (typeof define == 'function' && define.amd)
    define([], factory);
  else if (typeof module == 'object' && module.exports && typeof require == 'function')
    module.exports = factory();
  else
    factory();
});